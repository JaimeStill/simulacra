var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/p5/lib/p5.min.js
var require_p5_min = __commonJS({
  "node_modules/p5/lib/p5.min.js"(exports, module) {
    "use strict";
    !function(e2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e2() : "function" == typeof define && define.amd ? define([], e2) : ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).p5 = e2();
    }(function() {
      var s, t, r;
      return function o(n, s2, i) {
        function a(t2, e3) {
          if (!s2[t2]) {
            if (!n[t2]) {
              var r2 = "function" == typeof __require && __require;
              if (!e3 && r2) return r2(t2, true);
              if (l) return l(t2, true);
              throw (e3 = new Error("Cannot find module '" + t2 + "'")).code = "MODULE_NOT_FOUND", e3;
            }
            r2 = s2[t2] = {
              exports: {}
            }, n[t2][0].call(r2.exports, function(e4) {
              return a(n[t2][1][e4] || e4);
            }, r2, r2.exports, o, n, s2, i);
          }
          return s2[t2].exports;
        }
        for (var l = "function" == typeof __require && __require, e2 = 0; e2 < i.length; e2++) a(i[e2]);
        return a;
      }({
        1: [function(e2, t2, r2) {
          "use strict";
          r2.byteLength = function(e3) {
            var e3 = c(e3), t3 = e3[0], e3 = e3[1];
            return 3 * (t3 + e3) / 4 - e3;
          }, r2.toByteArray = function(e3) {
            var t3, r3, o2 = c(e3), n2 = o2[0], o2 = o2[1], s3 = new u2(function(e4, t4) {
              return 3 * (e4 + t4) / 4 - t4;
            }(n2, o2)), i = 0, a2 = 0 < o2 ? n2 - 4 : n2;
            for (r3 = 0; r3 < a2; r3 += 4) t3 = l[e3.charCodeAt(r3)] << 18 | l[e3.charCodeAt(r3 + 1)] << 12 | l[e3.charCodeAt(r3 + 2)] << 6 | l[e3.charCodeAt(r3 + 3)], s3[i++] = t3 >> 16 & 255, s3[i++] = t3 >> 8 & 255, s3[i++] = 255 & t3;
            2 === o2 && (t3 = l[e3.charCodeAt(r3)] << 2 | l[e3.charCodeAt(r3 + 1)] >> 4, s3[i++] = 255 & t3);
            1 === o2 && (t3 = l[e3.charCodeAt(r3)] << 10 | l[e3.charCodeAt(r3 + 1)] << 4 | l[e3.charCodeAt(r3 + 2)] >> 2, s3[i++] = t3 >> 8 & 255, s3[i++] = 255 & t3);
            return s3;
          }, r2.fromByteArray = function(e3) {
            for (var t3, r3 = e3.length, o2 = r3 % 3, n2 = [], s3 = 0, i = r3 - o2; s3 < i; s3 += 16383) n2.push(function(e4, t4, r4) {
              for (var o3, n3 = [], s4 = t4; s4 < r4; s4 += 3) o3 = (e4[s4] << 16 & 16711680) + (e4[s4 + 1] << 8 & 65280) + (255 & e4[s4 + 2]), n3.push(function(e5) {
                return a[e5 >> 18 & 63] + a[e5 >> 12 & 63] + a[e5 >> 6 & 63] + a[63 & e5];
              }(o3));
              return n3.join("");
            }(e3, s3, i < s3 + 16383 ? i : s3 + 16383));
            1 == o2 ? (t3 = e3[r3 - 1], n2.push(a[t3 >> 2] + a[t3 << 4 & 63] + "==")) : 2 == o2 && (t3 = (e3[r3 - 2] << 8) + e3[r3 - 1], n2.push(a[t3 >> 10] + a[t3 >> 4 & 63] + a[t3 << 2 & 63] + "="));
            return n2.join("");
          };
          for (var a = [], l = [], u2 = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", n = 0, s2 = o.length; n < s2; ++n) a[n] = o[n], l[o.charCodeAt(n)] = n;
          function c(e3) {
            var t3 = e3.length;
            if (0 < t3 % 4) throw new Error("Invalid string. Length must be a multiple of 4");
            e3 = e3.indexOf("="), t3 = (e3 = -1 === e3 ? t3 : e3) === t3 ? 0 : 4 - e3 % 4;
            return [e3, t3];
          }
          l["-".charCodeAt(0)] = 62, l["_".charCodeAt(0)] = 63;
        }, {}],
        2: [function(e2, t2, r2) {
        }, {}],
        3: [function(e2, t2, r2) {
        }, {}],
        4: [function(P, e2, L) {
          !function(d) {
            "use strict";
            var S = P("base64-js"), s2 = P("ieee754"), e3 = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null, t2 = (L.Buffer = d, L.SlowBuffer = function(e4) {
              +e4 != e4 && (e4 = 0);
              return d.alloc(+e4);
            }, L.INSPECT_MAX_BYTES = 50, 2147483647);
            function l(e4) {
              if (t2 < e4) throw new RangeError('The value "' + e4 + '" is invalid for option "size"');
              e4 = new Uint8Array(e4);
              return Object.setPrototypeOf(e4, d.prototype), e4;
            }
            function d(e4, t3, r3) {
              if ("number" != typeof e4) return o(e4, t3, r3);
              if ("string" == typeof t3) throw new TypeError('The "string" argument must be of type string. Received type number');
              return i(e4);
            }
            function o(e4, t3, r3) {
              if ("string" == typeof e4) {
                var o2 = e4, n2 = t3;
                if (d.isEncoding(n2 = "string" == typeof n2 && "" !== n2 ? n2 : "utf8")) return s3 = 0 | h(o2, n2), i2 = l(s3), i2 = (o2 = i2.write(o2, n2)) !== s3 ? i2.slice(0, o2) : i2;
                throw new TypeError("Unknown encoding: " + n2);
              }
              if (ArrayBuffer.isView(e4)) return u2(e4);
              if (null != e4) {
                if (O(e4, ArrayBuffer) || e4 && O(e4.buffer, ArrayBuffer)) {
                  var s3 = e4, o2 = t3, i2 = r3;
                  if (o2 < 0 || s3.byteLength < o2) throw new RangeError('"offset" is outside of buffer bounds');
                  if (s3.byteLength < o2 + (i2 || 0)) throw new RangeError('"length" is outside of buffer bounds');
                  return s3 = void 0 === o2 && void 0 === i2 ? new Uint8Array(s3) : void 0 === i2 ? new Uint8Array(s3, o2) : new Uint8Array(s3, o2, i2), Object.setPrototypeOf(s3, d.prototype), s3;
                }
                if ("number" == typeof e4) throw new TypeError('The "value" argument must not be of type number. Received type number');
                n2 = e4.valueOf && e4.valueOf();
                if (null != n2 && n2 !== e4) return d.from(n2, t3, r3);
                var a2 = function(e5) {
                  {
                    var t4, r4;
                    if (d.isBuffer(e5)) return t4 = 0 | c(e5.length), 0 !== (r4 = l(t4)).length && e5.copy(r4, 0, 0, t4), r4;
                  }
                  if (void 0 !== e5.length) return "number" != typeof e5.length || C(e5.length) ? l(0) : u2(e5);
                  if ("Buffer" === e5.type && Array.isArray(e5.data)) return u2(e5.data);
                }(e4);
                if (a2) return a2;
                if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e4[Symbol.toPrimitive]) return d.from(e4[Symbol.toPrimitive]("string"), t3, r3);
              }
              throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e4);
            }
            function n(e4) {
              if ("number" != typeof e4) throw new TypeError('"size" argument must be of type number');
              if (e4 < 0) throw new RangeError('The value "' + e4 + '" is invalid for option "size"');
            }
            function i(e4) {
              return n(e4), l(e4 < 0 ? 0 : 0 | c(e4));
            }
            function u2(e4) {
              for (var t3 = e4.length < 0 ? 0 : 0 | c(e4.length), r3 = l(t3), o2 = 0; o2 < t3; o2 += 1) r3[o2] = 255 & e4[o2];
              return r3;
            }
            function c(e4) {
              if (t2 <= e4) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + t2.toString(16) + " bytes");
              return 0 | e4;
            }
            function h(e4, t3) {
              if (d.isBuffer(e4)) return e4.length;
              if (ArrayBuffer.isView(e4) || O(e4, ArrayBuffer)) return e4.byteLength;
              if ("string" != typeof e4) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e4);
              var r3 = e4.length, o2 = 2 < arguments.length && true === arguments[2];
              if (!o2 && 0 === r3) return 0;
              for (var n2 = false; ; ) switch (t3) {
                case "ascii":
                case "latin1":
                case "binary":
                  return r3;
                case "utf8":
                case "utf-8":
                  return E(e4).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return 2 * r3;
                case "hex":
                  return r3 >>> 1;
                case "base64":
                  return M(e4).length;
                default:
                  if (n2) return o2 ? -1 : E(e4).length;
                  t3 = ("" + t3).toLowerCase(), n2 = true;
              }
            }
            function r2(e4, t3, r3) {
              var o2, n2 = false;
              if ((t3 = void 0 === t3 || t3 < 0 ? 0 : t3) > this.length) return "";
              if ((r3 = void 0 === r3 || r3 > this.length ? this.length : r3) <= 0) return "";
              if ((r3 >>>= 0) <= (t3 >>>= 0)) return "";
              for (e4 = e4 || "utf8"; ; ) switch (e4) {
                case "hex":
                  var s3 = this, i2 = t3, a2 = r3, l2 = s3.length;
                  (!a2 || a2 < 0 || l2 < a2) && (a2 = l2);
                  for (var u3 = "", c2 = i2 = !i2 || i2 < 0 ? 0 : i2; c2 < a2; ++c2) u3 += A[s3[c2]];
                  return u3;
                case "utf8":
                case "utf-8":
                  return T(this, t3, r3);
                case "ascii":
                  var d2 = this, l2 = t3, h2 = r3, f2 = "";
                  h2 = Math.min(d2.length, h2);
                  for (var p2 = l2; p2 < h2; ++p2) f2 += String.fromCharCode(127 & d2[p2]);
                  return f2;
                case "latin1":
                case "binary":
                  var m2 = this, i2 = t3, y2 = r3, g2 = "";
                  y2 = Math.min(m2.length, y2);
                  for (var v2 = i2; v2 < y2; ++v2) g2 += String.fromCharCode(m2[v2]);
                  return g2;
                case "base64":
                  return b2 = this, o2 = r3, 0 === (_2 = t3) && o2 === b2.length ? S.fromByteArray(b2) : S.fromByteArray(b2.slice(_2, o2));
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  for (var b2 = t3, _2 = r3, j2 = this.slice(b2, _2), x2 = "", w2 = 0; w2 < j2.length; w2 += 2) x2 += String.fromCharCode(j2[w2] + 256 * j2[w2 + 1]);
                  return x2;
                default:
                  if (n2) throw new TypeError("Unknown encoding: " + e4);
                  e4 = (e4 + "").toLowerCase(), n2 = true;
              }
            }
            function a(e4, t3, r3) {
              var o2 = e4[t3];
              e4[t3] = e4[r3], e4[r3] = o2;
            }
            function f(e4, t3, r3, o2, n2) {
              if (0 === e4.length) return -1;
              if ("string" == typeof r3 ? (o2 = r3, r3 = 0) : 2147483647 < r3 ? r3 = 2147483647 : r3 < -2147483648 && (r3 = -2147483648), (r3 = (r3 = C(r3 = +r3) ? n2 ? 0 : e4.length - 1 : r3) < 0 ? e4.length + r3 : r3) >= e4.length) {
                if (n2) return -1;
                r3 = e4.length - 1;
              } else if (r3 < 0) {
                if (!n2) return -1;
                r3 = 0;
              }
              if ("string" == typeof t3 && (t3 = d.from(t3, o2)), d.isBuffer(t3)) return 0 === t3.length ? -1 : p(e4, t3, r3, o2, n2);
              if ("number" == typeof t3) return t3 &= 255, "function" == typeof Uint8Array.prototype.indexOf ? (n2 ? Uint8Array.prototype.indexOf : Uint8Array.prototype.lastIndexOf).call(e4, t3, r3) : p(e4, [t3], r3, o2, n2);
              throw new TypeError("val must be string, number or Buffer");
            }
            function p(e4, t3, r3, o2, n2) {
              var s3 = 1, i2 = e4.length, a2 = t3.length;
              if (void 0 !== o2 && ("ucs2" === (o2 = String(o2).toLowerCase()) || "ucs-2" === o2 || "utf16le" === o2 || "utf-16le" === o2)) {
                if (e4.length < 2 || t3.length < 2) return -1;
                i2 /= s3 = 2, a2 /= 2, r3 /= 2;
              }
              function l2(e5, t4) {
                return 1 === s3 ? e5[t4] : e5.readUInt16BE(t4 * s3);
              }
              if (n2) {
                for (var u3 = -1, c2 = r3; c2 < i2; c2++) if (l2(e4, c2) === l2(t3, -1 === u3 ? 0 : c2 - u3)) {
                  if (c2 - (u3 = -1 === u3 ? c2 : u3) + 1 === a2) return u3 * s3;
                } else -1 !== u3 && (c2 -= c2 - u3), u3 = -1;
              } else for (c2 = r3 = i2 < r3 + a2 ? i2 - a2 : r3; 0 <= c2; c2--) {
                for (var d2 = true, h2 = 0; h2 < a2; h2++) if (l2(e4, c2 + h2) !== l2(t3, h2)) {
                  d2 = false;
                  break;
                }
                if (d2) return c2;
              }
              return -1;
            }
            function y(e4, t3, r3, o2) {
              return k(function(e5) {
                for (var t4 = [], r4 = 0; r4 < e5.length; ++r4) t4.push(255 & e5.charCodeAt(r4));
                return t4;
              }(t3), e4, r3, o2);
            }
            function g(e4, t3, r3, o2) {
              return k(function(e5, t4) {
                for (var r4, o3, n2 = [], s3 = 0; s3 < e5.length && !((t4 -= 2) < 0); ++s3) o3 = e5.charCodeAt(s3), r4 = o3 >> 8, o3 = o3 % 256, n2.push(o3), n2.push(r4);
                return n2;
              }(t3, e4.length - r3), e4, r3, o2);
            }
            function T(e4, t3, r3) {
              r3 = Math.min(e4.length, r3);
              for (var o2 = [], n2 = t3; n2 < r3; ) {
                var s3, i2, a2, l2, u3 = e4[n2], c2 = null, d2 = 239 < u3 ? 4 : 223 < u3 ? 3 : 191 < u3 ? 2 : 1;
                if (n2 + d2 <= r3) switch (d2) {
                  case 1:
                    u3 < 128 && (c2 = u3);
                    break;
                  case 2:
                    128 == (192 & (s3 = e4[n2 + 1])) && 127 < (l2 = (31 & u3) << 6 | 63 & s3) && (c2 = l2);
                    break;
                  case 3:
                    s3 = e4[n2 + 1], i2 = e4[n2 + 2], 128 == (192 & s3) && 128 == (192 & i2) && 2047 < (l2 = (15 & u3) << 12 | (63 & s3) << 6 | 63 & i2) && (l2 < 55296 || 57343 < l2) && (c2 = l2);
                    break;
                  case 4:
                    s3 = e4[n2 + 1], i2 = e4[n2 + 2], a2 = e4[n2 + 3], 128 == (192 & s3) && 128 == (192 & i2) && 128 == (192 & a2) && 65535 < (l2 = (15 & u3) << 18 | (63 & s3) << 12 | (63 & i2) << 6 | 63 & a2) && l2 < 1114112 && (c2 = l2);
                }
                null === c2 ? (c2 = 65533, d2 = 1) : 65535 < c2 && (c2 -= 65536, o2.push(c2 >>> 10 & 1023 | 55296), c2 = 56320 | 1023 & c2), o2.push(c2), n2 += d2;
              }
              var h2 = o2, f2 = h2.length;
              if (f2 <= v) return String.fromCharCode.apply(String, h2);
              for (var p2 = "", m2 = 0; m2 < f2; ) p2 += String.fromCharCode.apply(String, h2.slice(m2, m2 += v));
              return p2;
            }
            L.kMaxLength = t2, (d.TYPED_ARRAY_SUPPORT = function() {
              try {
                var e4 = new Uint8Array(1), t3 = {
                  foo: function() {
                    return 42;
                  }
                };
                return Object.setPrototypeOf(t3, Uint8Array.prototype), Object.setPrototypeOf(e4, t3), 42 === e4.foo();
              } catch (e5) {
                return false;
              }
            }()) || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(d.prototype, "parent", {
              enumerable: true,
              get: function() {
                if (d.isBuffer(this)) return this.buffer;
              }
            }), Object.defineProperty(d.prototype, "offset", {
              enumerable: true,
              get: function() {
                if (d.isBuffer(this)) return this.byteOffset;
              }
            }), "undefined" != typeof Symbol && null != Symbol.species && d[Symbol.species] === d && Object.defineProperty(d, Symbol.species, {
              value: null,
              configurable: true,
              enumerable: false,
              writable: false
            }), d.poolSize = 8192, d.from = o, Object.setPrototypeOf(d.prototype, Uint8Array.prototype), Object.setPrototypeOf(d, Uint8Array), d.alloc = function(e4, t3, r3) {
              return t3 = t3, r3 = r3, n(e4 = e4), !(e4 <= 0) && void 0 !== t3 ? "string" == typeof r3 ? l(e4).fill(t3, r3) : l(e4).fill(t3) : l(e4);
            }, d.allocUnsafe = i, d.allocUnsafeSlow = i, d.isBuffer = function(e4) {
              return null != e4 && true === e4._isBuffer && e4 !== d.prototype;
            }, d.compare = function(e4, t3) {
              if (O(e4, Uint8Array) && (e4 = d.from(e4, e4.offset, e4.byteLength)), O(t3, Uint8Array) && (t3 = d.from(t3, t3.offset, t3.byteLength)), !d.isBuffer(e4) || !d.isBuffer(t3)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
              if (e4 === t3) return 0;
              for (var r3 = e4.length, o2 = t3.length, n2 = 0, s3 = Math.min(r3, o2); n2 < s3; ++n2) if (e4[n2] !== t3[n2]) {
                r3 = e4[n2], o2 = t3[n2];
                break;
              }
              return r3 < o2 ? -1 : o2 < r3 ? 1 : 0;
            }, d.isEncoding = function(e4) {
              switch (String(e4).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return true;
                default:
                  return false;
              }
            }, d.concat = function(e4, t3) {
              if (!Array.isArray(e4)) throw new TypeError('"list" argument must be an Array of Buffers');
              if (0 === e4.length) return d.alloc(0);
              if (void 0 === t3) for (n2 = t3 = 0; n2 < e4.length; ++n2) t3 += e4[n2].length;
              for (var r3 = d.allocUnsafe(t3), o2 = 0, n2 = 0; n2 < e4.length; ++n2) {
                var s3 = e4[n2];
                if (O(s3, Uint8Array) && (s3 = d.from(s3)), !d.isBuffer(s3)) throw new TypeError('"list" argument must be an Array of Buffers');
                s3.copy(r3, o2), o2 += s3.length;
              }
              return r3;
            }, d.byteLength = h, d.prototype._isBuffer = true, d.prototype.swap16 = function() {
              var e4 = this.length;
              if (e4 % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
              for (var t3 = 0; t3 < e4; t3 += 2) a(this, t3, t3 + 1);
              return this;
            }, d.prototype.swap32 = function() {
              var e4 = this.length;
              if (e4 % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
              for (var t3 = 0; t3 < e4; t3 += 4) a(this, t3, t3 + 3), a(this, t3 + 1, t3 + 2);
              return this;
            }, d.prototype.swap64 = function() {
              var e4 = this.length;
              if (e4 % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
              for (var t3 = 0; t3 < e4; t3 += 8) a(this, t3, t3 + 7), a(this, t3 + 1, t3 + 6), a(this, t3 + 2, t3 + 5), a(this, t3 + 3, t3 + 4);
              return this;
            }, d.prototype.toLocaleString = d.prototype.toString = function() {
              var e4 = this.length;
              return 0 === e4 ? "" : 0 === arguments.length ? T(this, 0, e4) : r2.apply(this, arguments);
            }, d.prototype.equals = function(e4) {
              if (d.isBuffer(e4)) return this === e4 || 0 === d.compare(this, e4);
              throw new TypeError("Argument must be a Buffer");
            }, d.prototype.inspect = function() {
              var e4 = "", t3 = L.INSPECT_MAX_BYTES, e4 = this.toString("hex", 0, t3).replace(/(.{2})/g, "$1 ").trim();
              return this.length > t3 && (e4 += " ... "), "<Buffer " + e4 + ">";
            }, e3 && (d.prototype[e3] = d.prototype.inspect), d.prototype.compare = function(e4, t3, r3, o2, n2) {
              if (O(e4, Uint8Array) && (e4 = d.from(e4, e4.offset, e4.byteLength)), !d.isBuffer(e4)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e4);
              if (void 0 === r3 && (r3 = e4 ? e4.length : 0), void 0 === o2 && (o2 = 0), void 0 === n2 && (n2 = this.length), (t3 = void 0 === t3 ? 0 : t3) < 0 || r3 > e4.length || o2 < 0 || n2 > this.length) throw new RangeError("out of range index");
              if (n2 <= o2 && r3 <= t3) return 0;
              if (n2 <= o2) return -1;
              if (r3 <= t3) return 1;
              if (this === e4) return 0;
              for (var s3 = (n2 >>>= 0) - (o2 >>>= 0), i2 = (r3 >>>= 0) - (t3 >>>= 0), a2 = Math.min(s3, i2), l2 = this.slice(o2, n2), u3 = e4.slice(t3, r3), c2 = 0; c2 < a2; ++c2) if (l2[c2] !== u3[c2]) {
                s3 = l2[c2], i2 = u3[c2];
                break;
              }
              return s3 < i2 ? -1 : i2 < s3 ? 1 : 0;
            }, d.prototype.includes = function(e4, t3, r3) {
              return -1 !== this.indexOf(e4, t3, r3);
            }, d.prototype.indexOf = function(e4, t3, r3) {
              return f(this, e4, t3, r3, true);
            }, d.prototype.lastIndexOf = function(e4, t3, r3) {
              return f(this, e4, t3, r3, false);
            }, d.prototype.write = function(e4, t3, r3, o2) {
              if (void 0 === t3) o2 = "utf8", r3 = this.length, t3 = 0;
              else if (void 0 === r3 && "string" == typeof t3) o2 = t3, r3 = this.length, t3 = 0;
              else {
                if (!isFinite(t3)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                t3 >>>= 0, isFinite(r3) ? (r3 >>>= 0, void 0 === o2 && (o2 = "utf8")) : (o2 = r3, r3 = void 0);
              }
              var n2 = this.length - t3;
              if ((void 0 === r3 || n2 < r3) && (r3 = n2), 0 < e4.length && (r3 < 0 || t3 < 0) || t3 > this.length) throw new RangeError("Attempt to write outside buffer bounds");
              o2 = o2 || "utf8";
              for (var s3, i2, a2, l2 = false; ; ) switch (o2) {
                case "hex":
                  var u3 = this, c2 = e4, d2 = t3, h2 = r3, f2 = (d2 = Number(d2) || 0, u3.length - d2);
                  (!h2 || f2 < (h2 = Number(h2))) && (h2 = f2), (f2 = c2.length) / 2 < h2 && (h2 = f2 / 2);
                  for (var p2 = 0; p2 < h2; ++p2) {
                    var m2 = parseInt(c2.substr(2 * p2, 2), 16);
                    if (C(m2)) return p2;
                    u3[d2 + p2] = m2;
                  }
                  return p2;
                case "utf8":
                case "utf-8":
                  return f2 = t3, a2 = r3, k(E(e4, (i2 = this).length - f2), i2, f2, a2);
                case "ascii":
                  return y(this, e4, t3, r3);
                case "latin1":
                case "binary":
                  return y(this, e4, t3, r3);
                case "base64":
                  return i2 = this, a2 = t3, s3 = r3, k(M(e4), i2, a2, s3);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return g(this, e4, t3, r3);
                default:
                  if (l2) throw new TypeError("Unknown encoding: " + o2);
                  o2 = ("" + o2).toLowerCase(), l2 = true;
              }
            }, d.prototype.toJSON = function() {
              return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };
            var v = 4096;
            function m(e4, t3, r3) {
              if (e4 % 1 != 0 || e4 < 0) throw new RangeError("offset is not uint");
              if (r3 < e4 + t3) throw new RangeError("Trying to access beyond buffer length");
            }
            function b(e4, t3, r3, o2, n2, s3) {
              if (!d.isBuffer(e4)) throw new TypeError('"buffer" argument must be a Buffer instance');
              if (n2 < t3 || t3 < s3) throw new RangeError('"value" argument is out of bounds');
              if (r3 + o2 > e4.length) throw new RangeError("Index out of range");
            }
            function _(e4, t3, r3, o2) {
              if (r3 + o2 > e4.length) throw new RangeError("Index out of range");
              if (r3 < 0) throw new RangeError("Index out of range");
            }
            function j(e4, t3, r3, o2, n2) {
              return t3 = +t3, r3 >>>= 0, n2 || _(e4, 0, r3, 4), s2.write(e4, t3, r3, o2, 23, 4), r3 + 4;
            }
            function x(e4, t3, r3, o2, n2) {
              return t3 = +t3, r3 >>>= 0, n2 || _(e4, 0, r3, 8), s2.write(e4, t3, r3, o2, 52, 8), r3 + 8;
            }
            d.prototype.slice = function(e4, t3) {
              var r3 = this.length, r3 = ((e4 = ~~e4) < 0 ? (e4 += r3) < 0 && (e4 = 0) : r3 < e4 && (e4 = r3), (t3 = void 0 === t3 ? r3 : ~~t3) < 0 ? (t3 += r3) < 0 && (t3 = 0) : r3 < t3 && (t3 = r3), t3 < e4 && (t3 = e4), this.subarray(e4, t3));
              return Object.setPrototypeOf(r3, d.prototype), r3;
            }, d.prototype.readUIntLE = function(e4, t3, r3) {
              e4 >>>= 0, t3 >>>= 0, r3 || m(e4, t3, this.length);
              for (var o2 = this[e4], n2 = 1, s3 = 0; ++s3 < t3 && (n2 *= 256); ) o2 += this[e4 + s3] * n2;
              return o2;
            }, d.prototype.readUIntBE = function(e4, t3, r3) {
              e4 >>>= 0, t3 >>>= 0, r3 || m(e4, t3, this.length);
              for (var o2 = this[e4 + --t3], n2 = 1; 0 < t3 && (n2 *= 256); ) o2 += this[e4 + --t3] * n2;
              return o2;
            }, d.prototype.readUInt8 = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 1, this.length), this[e4];
            }, d.prototype.readUInt16LE = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 2, this.length), this[e4] | this[e4 + 1] << 8;
            }, d.prototype.readUInt16BE = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 2, this.length), this[e4] << 8 | this[e4 + 1];
            }, d.prototype.readUInt32LE = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 4, this.length), (this[e4] | this[e4 + 1] << 8 | this[e4 + 2] << 16) + 16777216 * this[e4 + 3];
            }, d.prototype.readUInt32BE = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 4, this.length), 16777216 * this[e4] + (this[e4 + 1] << 16 | this[e4 + 2] << 8 | this[e4 + 3]);
            }, d.prototype.readIntLE = function(e4, t3, r3) {
              e4 >>>= 0, t3 >>>= 0, r3 || m(e4, t3, this.length);
              for (var o2 = this[e4], n2 = 1, s3 = 0; ++s3 < t3 && (n2 *= 256); ) o2 += this[e4 + s3] * n2;
              return (n2 *= 128) <= o2 && (o2 -= Math.pow(2, 8 * t3)), o2;
            }, d.prototype.readIntBE = function(e4, t3, r3) {
              e4 >>>= 0, t3 >>>= 0, r3 || m(e4, t3, this.length);
              for (var o2 = t3, n2 = 1, s3 = this[e4 + --o2]; 0 < o2 && (n2 *= 256); ) s3 += this[e4 + --o2] * n2;
              return (n2 *= 128) <= s3 && (s3 -= Math.pow(2, 8 * t3)), s3;
            }, d.prototype.readInt8 = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 1, this.length), 128 & this[e4] ? -1 * (255 - this[e4] + 1) : this[e4];
            }, d.prototype.readInt16LE = function(e4, t3) {
              e4 >>>= 0, t3 || m(e4, 2, this.length);
              t3 = this[e4] | this[e4 + 1] << 8;
              return 32768 & t3 ? 4294901760 | t3 : t3;
            }, d.prototype.readInt16BE = function(e4, t3) {
              e4 >>>= 0, t3 || m(e4, 2, this.length);
              t3 = this[e4 + 1] | this[e4] << 8;
              return 32768 & t3 ? 4294901760 | t3 : t3;
            }, d.prototype.readInt32LE = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 4, this.length), this[e4] | this[e4 + 1] << 8 | this[e4 + 2] << 16 | this[e4 + 3] << 24;
            }, d.prototype.readInt32BE = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 4, this.length), this[e4] << 24 | this[e4 + 1] << 16 | this[e4 + 2] << 8 | this[e4 + 3];
            }, d.prototype.readFloatLE = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 4, this.length), s2.read(this, e4, true, 23, 4);
            }, d.prototype.readFloatBE = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 4, this.length), s2.read(this, e4, false, 23, 4);
            }, d.prototype.readDoubleLE = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 8, this.length), s2.read(this, e4, true, 52, 8);
            }, d.prototype.readDoubleBE = function(e4, t3) {
              return e4 >>>= 0, t3 || m(e4, 8, this.length), s2.read(this, e4, false, 52, 8);
            }, d.prototype.writeUIntLE = function(e4, t3, r3, o2) {
              e4 = +e4, t3 >>>= 0, r3 >>>= 0, o2 || b(this, e4, t3, r3, Math.pow(2, 8 * r3) - 1, 0);
              var n2 = 1, s3 = 0;
              for (this[t3] = 255 & e4; ++s3 < r3 && (n2 *= 256); ) this[t3 + s3] = e4 / n2 & 255;
              return t3 + r3;
            }, d.prototype.writeUIntBE = function(e4, t3, r3, o2) {
              e4 = +e4, t3 >>>= 0, r3 >>>= 0, o2 || b(this, e4, t3, r3, Math.pow(2, 8 * r3) - 1, 0);
              var n2 = r3 - 1, s3 = 1;
              for (this[t3 + n2] = 255 & e4; 0 <= --n2 && (s3 *= 256); ) this[t3 + n2] = e4 / s3 & 255;
              return t3 + r3;
            }, d.prototype.writeUInt8 = function(e4, t3, r3) {
              return e4 = +e4, t3 >>>= 0, r3 || b(this, e4, t3, 1, 255, 0), this[t3] = 255 & e4, t3 + 1;
            }, d.prototype.writeUInt16LE = function(e4, t3, r3) {
              return e4 = +e4, t3 >>>= 0, r3 || b(this, e4, t3, 2, 65535, 0), this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8, t3 + 2;
            }, d.prototype.writeUInt16BE = function(e4, t3, r3) {
              return e4 = +e4, t3 >>>= 0, r3 || b(this, e4, t3, 2, 65535, 0), this[t3] = e4 >>> 8, this[t3 + 1] = 255 & e4, t3 + 2;
            }, d.prototype.writeUInt32LE = function(e4, t3, r3) {
              return e4 = +e4, t3 >>>= 0, r3 || b(this, e4, t3, 4, 4294967295, 0), this[t3 + 3] = e4 >>> 24, this[t3 + 2] = e4 >>> 16, this[t3 + 1] = e4 >>> 8, this[t3] = 255 & e4, t3 + 4;
            }, d.prototype.writeUInt32BE = function(e4, t3, r3) {
              return e4 = +e4, t3 >>>= 0, r3 || b(this, e4, t3, 4, 4294967295, 0), this[t3] = e4 >>> 24, this[t3 + 1] = e4 >>> 16, this[t3 + 2] = e4 >>> 8, this[t3 + 3] = 255 & e4, t3 + 4;
            }, d.prototype.writeIntLE = function(e4, t3, r3, o2) {
              e4 = +e4, t3 >>>= 0, o2 || b(this, e4, t3, r3, (o2 = Math.pow(2, 8 * r3 - 1)) - 1, -o2);
              var n2 = 0, s3 = 1, i2 = 0;
              for (this[t3] = 255 & e4; ++n2 < r3 && (s3 *= 256); ) e4 < 0 && 0 === i2 && 0 !== this[t3 + n2 - 1] && (i2 = 1), this[t3 + n2] = (e4 / s3 >> 0) - i2 & 255;
              return t3 + r3;
            }, d.prototype.writeIntBE = function(e4, t3, r3, o2) {
              e4 = +e4, t3 >>>= 0, o2 || b(this, e4, t3, r3, (o2 = Math.pow(2, 8 * r3 - 1)) - 1, -o2);
              var n2 = r3 - 1, s3 = 1, i2 = 0;
              for (this[t3 + n2] = 255 & e4; 0 <= --n2 && (s3 *= 256); ) e4 < 0 && 0 === i2 && 0 !== this[t3 + n2 + 1] && (i2 = 1), this[t3 + n2] = (e4 / s3 >> 0) - i2 & 255;
              return t3 + r3;
            }, d.prototype.writeInt8 = function(e4, t3, r3) {
              return e4 = +e4, t3 >>>= 0, r3 || b(this, e4, t3, 1, 127, -128), this[t3] = 255 & (e4 = e4 < 0 ? 255 + e4 + 1 : e4), t3 + 1;
            }, d.prototype.writeInt16LE = function(e4, t3, r3) {
              return e4 = +e4, t3 >>>= 0, r3 || b(this, e4, t3, 2, 32767, -32768), this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8, t3 + 2;
            }, d.prototype.writeInt16BE = function(e4, t3, r3) {
              return e4 = +e4, t3 >>>= 0, r3 || b(this, e4, t3, 2, 32767, -32768), this[t3] = e4 >>> 8, this[t3 + 1] = 255 & e4, t3 + 2;
            }, d.prototype.writeInt32LE = function(e4, t3, r3) {
              return e4 = +e4, t3 >>>= 0, r3 || b(this, e4, t3, 4, 2147483647, -2147483648), this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8, this[t3 + 2] = e4 >>> 16, this[t3 + 3] = e4 >>> 24, t3 + 4;
            }, d.prototype.writeInt32BE = function(e4, t3, r3) {
              return e4 = +e4, t3 >>>= 0, r3 || b(this, e4, t3, 4, 2147483647, -2147483648), this[t3] = (e4 = e4 < 0 ? 4294967295 + e4 + 1 : e4) >>> 24, this[t3 + 1] = e4 >>> 16, this[t3 + 2] = e4 >>> 8, this[t3 + 3] = 255 & e4, t3 + 4;
            }, d.prototype.writeFloatLE = function(e4, t3, r3) {
              return j(this, e4, t3, true, r3);
            }, d.prototype.writeFloatBE = function(e4, t3, r3) {
              return j(this, e4, t3, false, r3);
            }, d.prototype.writeDoubleLE = function(e4, t3, r3) {
              return x(this, e4, t3, true, r3);
            }, d.prototype.writeDoubleBE = function(e4, t3, r3) {
              return x(this, e4, t3, false, r3);
            }, d.prototype.copy = function(e4, t3, r3, o2) {
              if (!d.isBuffer(e4)) throw new TypeError("argument should be a Buffer");
              if (r3 = r3 || 0, o2 || 0 === o2 || (o2 = this.length), t3 >= e4.length && (t3 = e4.length), (o2 = 0 < o2 && o2 < r3 ? r3 : o2) === r3) return 0;
              if (0 === e4.length || 0 === this.length) return 0;
              if ((t3 = t3 || 0) < 0) throw new RangeError("targetStart out of bounds");
              if (r3 < 0 || r3 >= this.length) throw new RangeError("Index out of range");
              if (o2 < 0) throw new RangeError("sourceEnd out of bounds");
              o2 > this.length && (o2 = this.length);
              var n2 = (o2 = e4.length - t3 < o2 - r3 ? e4.length - t3 + r3 : o2) - r3;
              if (this === e4 && "function" == typeof Uint8Array.prototype.copyWithin) this.copyWithin(t3, r3, o2);
              else if (this === e4 && r3 < t3 && t3 < o2) for (var s3 = n2 - 1; 0 <= s3; --s3) e4[s3 + t3] = this[s3 + r3];
              else Uint8Array.prototype.set.call(e4, this.subarray(r3, o2), t3);
              return n2;
            }, d.prototype.fill = function(e4, t3, r3, o2) {
              if ("string" == typeof e4) {
                if ("string" == typeof t3 ? (o2 = t3, t3 = 0, r3 = this.length) : "string" == typeof r3 && (o2 = r3, r3 = this.length), void 0 !== o2 && "string" != typeof o2) throw new TypeError("encoding must be a string");
                if ("string" == typeof o2 && !d.isEncoding(o2)) throw new TypeError("Unknown encoding: " + o2);
                var n2;
                1 === e4.length && (n2 = e4.charCodeAt(0), ("utf8" === o2 && n2 < 128 || "latin1" === o2) && (e4 = n2));
              } else "number" == typeof e4 ? e4 &= 255 : "boolean" == typeof e4 && (e4 = Number(e4));
              if (t3 < 0 || this.length < t3 || this.length < r3) throw new RangeError("Out of range index");
              var s3;
              if (!(r3 <= t3)) if (t3 >>>= 0, r3 = void 0 === r3 ? this.length : r3 >>> 0, "number" == typeof (e4 = e4 || 0)) for (s3 = t3; s3 < r3; ++s3) this[s3] = e4;
              else {
                var i2 = d.isBuffer(e4) ? e4 : d.from(e4, o2), a2 = i2.length;
                if (0 === a2) throw new TypeError('The value "' + e4 + '" is invalid for argument "value"');
                for (s3 = 0; s3 < r3 - t3; ++s3) this[s3 + t3] = i2[s3 % a2];
              }
              return this;
            };
            var w = /[^+/0-9A-Za-z-_]/g;
            function E(e4, t3) {
              t3 = t3 || 1 / 0;
              for (var r3, o2 = e4.length, n2 = null, s3 = [], i2 = 0; i2 < o2; ++i2) {
                if (55295 < (r3 = e4.charCodeAt(i2)) && r3 < 57344) {
                  if (!n2) {
                    if (56319 < r3) {
                      -1 < (t3 -= 3) && s3.push(239, 191, 189);
                      continue;
                    }
                    if (i2 + 1 === o2) {
                      -1 < (t3 -= 3) && s3.push(239, 191, 189);
                      continue;
                    }
                    n2 = r3;
                    continue;
                  }
                  if (r3 < 56320) {
                    -1 < (t3 -= 3) && s3.push(239, 191, 189), n2 = r3;
                    continue;
                  }
                  r3 = 65536 + (n2 - 55296 << 10 | r3 - 56320);
                } else n2 && -1 < (t3 -= 3) && s3.push(239, 191, 189);
                if (n2 = null, r3 < 128) {
                  if (--t3 < 0) break;
                  s3.push(r3);
                } else if (r3 < 2048) {
                  if ((t3 -= 2) < 0) break;
                  s3.push(r3 >> 6 | 192, 63 & r3 | 128);
                } else if (r3 < 65536) {
                  if ((t3 -= 3) < 0) break;
                  s3.push(r3 >> 12 | 224, r3 >> 6 & 63 | 128, 63 & r3 | 128);
                } else {
                  if (!(r3 < 1114112)) throw new Error("Invalid code point");
                  if ((t3 -= 4) < 0) break;
                  s3.push(r3 >> 18 | 240, r3 >> 12 & 63 | 128, r3 >> 6 & 63 | 128, 63 & r3 | 128);
                }
              }
              return s3;
            }
            function M(e4) {
              return S.toByteArray(function(e5) {
                if ((e5 = (e5 = e5.split("=")[0]).trim().replace(w, "")).length < 2) return "";
                for (; e5.length % 4 != 0; ) e5 += "=";
                return e5;
              }(e4));
            }
            function k(e4, t3, r3, o2) {
              for (var n2 = 0; n2 < o2 && !(n2 + r3 >= t3.length || n2 >= e4.length); ++n2) t3[n2 + r3] = e4[n2];
              return n2;
            }
            function O(e4, t3) {
              return e4 instanceof t3 || null != e4 && null != e4.constructor && null != e4.constructor.name && e4.constructor.name === t3.name;
            }
            function C(e4) {
              return e4 != e4;
            }
            var A = function() {
              for (var e4 = "0123456789abcdef", t3 = new Array(256), r3 = 0; r3 < 16; ++r3) for (var o2 = 16 * r3, n2 = 0; n2 < 16; ++n2) t3[o2 + n2] = e4[r3] + e4[n2];
              return t3;
            }();
          }.call(this, P("buffer").Buffer);
        }, {
          "base64-js": 1,
          buffer: 4,
          ieee754: 254
        }],
        5: [function(e2, t2, r2) {
          t2.exports = function(e3) {
            if ("function" != typeof e3) throw TypeError(String(e3) + " is not a function");
            return e3;
          };
        }, {}],
        6: [function(e2, t2, r2) {
          var o = e2("../internals/is-object");
          t2.exports = function(e3) {
            if (o(e3) || null === e3) return e3;
            throw TypeError("Can't set " + String(e3) + " as a prototype");
          };
        }, {
          "../internals/is-object": 75
        }],
        7: [function(e2, t2, r2) {
          var o = e2("../internals/well-known-symbol"), n = e2("../internals/object-create"), e2 = e2("../internals/object-define-property"), s2 = o("unscopables"), i = Array.prototype;
          null == i[s2] && e2.f(i, s2, {
            configurable: true,
            value: n(null)
          }), t2.exports = function(e3) {
            i[s2][e3] = true;
          };
        }, {
          "../internals/object-create": 91,
          "../internals/object-define-property": 93,
          "../internals/well-known-symbol": 150
        }],
        8: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/string-multibyte").charAt;
          t2.exports = function(e3, t3, r3) {
            return t3 + (r3 ? o(e3, t3).length : 1);
          };
        }, {
          "../internals/string-multibyte": 125
        }],
        9: [function(e2, t2, r2) {
          t2.exports = function(e3, t3, r3) {
            if (e3 instanceof t3) return e3;
            throw TypeError("Incorrect " + (r3 ? r3 + " " : "") + "invocation");
          };
        }, {}],
        10: [function(e2, t2, r2) {
          var o = e2("../internals/is-object");
          t2.exports = function(e3) {
            if (o(e3)) return e3;
            throw TypeError(String(e3) + " is not an object");
          };
        }, {
          "../internals/is-object": 75
        }],
        11: [function(e2, t2, r2) {
          t2.exports = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView;
        }, {}],
        12: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return l(e3) && u2(E, c(e3));
          }
          var n, s2 = e2("../internals/array-buffer-native"), i = e2("../internals/descriptors"), a = e2("../internals/global"), l = e2("../internals/is-object"), u2 = e2("../internals/has"), c = e2("../internals/classof"), d = e2("../internals/create-non-enumerable-property"), h = e2("../internals/redefine"), f = e2("../internals/object-define-property").f, p = e2("../internals/object-get-prototype-of"), m = e2("../internals/object-set-prototype-of"), y = e2("../internals/well-known-symbol"), e2 = e2("../internals/uid"), g = a.Int8Array, v = g && g.prototype, b = a.Uint8ClampedArray, b = b && b.prototype, _ = g && p(g), j = v && p(v), x = Object.prototype, w = x.isPrototypeOf, y = y("toStringTag"), S = e2("TYPED_ARRAY_TAG"), T = s2 && !!m && "Opera" !== c(a.opera), e2 = false, E = {
            Int8Array: 1,
            Uint8Array: 1,
            Uint8ClampedArray: 1,
            Int16Array: 2,
            Uint16Array: 2,
            Int32Array: 4,
            Uint32Array: 4,
            Float32Array: 4,
            Float64Array: 8
          };
          for (n in E) a[n] || (T = false);
          if ((!T || "function" != typeof _ || _ === Function.prototype) && (_ = function() {
            throw TypeError("Incorrect invocation");
          }, T)) for (n in E) a[n] && m(a[n], _);
          if ((!T || !j || j === x) && (j = _.prototype, T)) for (n in E) a[n] && m(a[n].prototype, j);
          if (T && p(b) !== j && m(b, j), i && !u2(j, y)) for (n in e2 = true, f(j, y, {
            get: function() {
              return l(this) ? this[S] : void 0;
            }
          }), E) a[n] && d(a[n], S, n);
          t2.exports = {
            NATIVE_ARRAY_BUFFER_VIEWS: T,
            TYPED_ARRAY_TAG: e2 && S,
            aTypedArray: function(e3) {
              if (o(e3)) return e3;
              throw TypeError("Target is not a typed array");
            },
            aTypedArrayConstructor: function(e3) {
              if (m) {
                if (w.call(_, e3)) return e3;
              } else for (var t3 in E) if (u2(E, n)) {
                t3 = a[t3];
                if (t3 && (e3 === t3 || w.call(t3, e3))) return e3;
              }
              throw TypeError("Target is not a typed array constructor");
            },
            exportTypedArrayMethod: function(e3, t3, r3) {
              if (i) {
                if (r3) for (var o2 in E) {
                  o2 = a[o2];
                  o2 && u2(o2.prototype, e3) && delete o2.prototype[e3];
                }
                j[e3] && !r3 || h(j, e3, !r3 && T && v[e3] || t3);
              }
            },
            exportTypedArrayStaticMethod: function(e3, t3, r3) {
              var o2, n2;
              if (i) {
                if (m) {
                  if (r3) for (o2 in E) (n2 = a[o2]) && u2(n2, e3) && delete n2[e3];
                  if (_[e3] && !r3) return;
                  try {
                    return h(_, e3, !r3 && T && g[e3] || t3);
                  } catch (e4) {
                  }
                }
                for (o2 in E) !(n2 = a[o2]) || n2[e3] && !r3 || h(n2, e3, t3);
              }
            },
            isView: function(e3) {
              e3 = c(e3);
              return "DataView" === e3 || u2(E, e3);
            },
            isTypedArray: o,
            TypedArray: _,
            TypedArrayPrototype: j
          };
        }, {
          "../internals/array-buffer-native": 11,
          "../internals/classof": 29,
          "../internals/create-non-enumerable-property": 38,
          "../internals/descriptors": 43,
          "../internals/global": 60,
          "../internals/has": 61,
          "../internals/is-object": 75,
          "../internals/object-define-property": 93,
          "../internals/object-get-prototype-of": 98,
          "../internals/object-set-prototype-of": 102,
          "../internals/redefine": 110,
          "../internals/uid": 147,
          "../internals/well-known-symbol": 150
        }],
        13: [function(e2, t2, D) {
          "use strict";
          function r2(e3) {
            return [255 & e3];
          }
          function o(e3) {
            return [255 & e3, e3 >> 8 & 255];
          }
          function n(e3) {
            return [255 & e3, e3 >> 8 & 255, e3 >> 16 & 255, e3 >> 24 & 255];
          }
          function s2(e3) {
            return e3[3] << 24 | e3[2] << 16 | e3[1] << 8 | e3[0];
          }
          function i(e3) {
            return C(e3, 23, 4);
          }
          function F(e3) {
            return C(e3, 52, 8);
          }
          function a(e3, t3) {
            H(e3[w], t3, {
              get: function() {
                return b(this)[t3];
              }
            });
          }
          function l(e3, t3, r3, o2) {
            if (r3 = m(r3), e3 = b(e3), r3 + t3 > e3.byteLength) throw O(S);
            var n2 = b(e3.buffer).bytes, r3 = r3 + e3.byteOffset, e3 = n2.slice(r3, r3 + t3);
            return o2 ? e3 : e3.reverse();
          }
          function u2(e3, t3, r3, o2, n2, s3) {
            if (r3 = m(r3), e3 = b(e3), r3 + t3 > e3.byteLength) throw O(S);
            for (var i2 = b(e3.buffer).bytes, a2 = r3 + e3.byteOffset, l2 = o2(+n2), u3 = 0; u3 < t3; u3++) i2[a2 + u3] = l2[s3 ? u3 : t3 - u3 - 1];
          }
          var c = e2("../internals/global"), d = e2("../internals/descriptors"), U = e2("../internals/array-buffer-native"), N = e2("../internals/create-non-enumerable-property"), h = e2("../internals/redefine-all"), f = e2("../internals/fails"), p = e2("../internals/an-instance"), B = e2("../internals/to-integer"), G = e2("../internals/to-length"), m = e2("../internals/to-index"), y = e2("../internals/ieee754"), V = e2("../internals/object-get-prototype-of"), g = e2("../internals/object-set-prototype-of"), z = e2("../internals/object-get-own-property-names").f, H = e2("../internals/object-define-property").f, W = e2("../internals/array-fill"), v = e2("../internals/set-to-string-tag"), e2 = e2("../internals/internal-state"), b = e2.get, _ = e2.set, j = "ArrayBuffer", x = "DataView", w = "prototype", S = "Wrong index", T = c[j], E = T, M = c[x], e2 = M && M[w], k = Object.prototype, O = c.RangeError, C = y.pack, A = y.unpack;
          if (U) {
            if (!f(function() {
              T(1);
            }) || !f(function() {
              new T(-1);
            }) || f(function() {
              return new T(), new T(1.5), new T(NaN), T.name != j;
            })) {
              for (var P, c = (E = function(e3) {
                return p(this, E), new T(m(e3));
              })[w] = T[w], L = z(T), R = 0; L.length > R; ) (P = L[R++]) in E || N(E, P, T[P]);
              c.constructor = E;
            }
            g && V(e2) !== k && g(e2, k);
            var y = new M(new E(2)), I = e2.setInt8;
            y.setInt8(0, 2147483648), y.setInt8(1, 2147483649), !y.getInt8(0) && y.getInt8(1) || h(e2, {
              setInt8: function(e3, t3) {
                I.call(this, e3, t3 << 24 >> 24);
              },
              setUint8: function(e3, t3) {
                I.call(this, e3, t3 << 24 >> 24);
              }
            }, {
              unsafe: true
            });
          } else E = function(e3) {
            p(this, E, j);
            e3 = m(e3);
            _(this, {
              bytes: W.call(new Array(e3), 0),
              byteLength: e3
            }), d || (this.byteLength = e3);
          }, M = function(e3, t3, r3) {
            p(this, M, x), p(e3, E, x);
            var o2 = b(e3).byteLength, t3 = B(t3);
            if (t3 < 0 || o2 < t3) throw O("Wrong offset");
            if (o2 < t3 + (r3 = void 0 === r3 ? o2 - t3 : G(r3))) throw O("Wrong length");
            _(this, {
              buffer: e3,
              byteLength: r3,
              byteOffset: t3
            }), d || (this.buffer = e3, this.byteLength = r3, this.byteOffset = t3);
          }, d && (a(E, "byteLength"), a(M, "buffer"), a(M, "byteLength"), a(M, "byteOffset")), h(M[w], {
            getInt8: function(e3) {
              return l(this, 1, e3)[0] << 24 >> 24;
            },
            getUint8: function(e3) {
              return l(this, 1, e3)[0];
            },
            getInt16: function(e3) {
              e3 = l(this, 2, e3, 1 < arguments.length ? arguments[1] : void 0);
              return (e3[1] << 8 | e3[0]) << 16 >> 16;
            },
            getUint16: function(e3) {
              e3 = l(this, 2, e3, 1 < arguments.length ? arguments[1] : void 0);
              return e3[1] << 8 | e3[0];
            },
            getInt32: function(e3) {
              return s2(l(this, 4, e3, 1 < arguments.length ? arguments[1] : void 0));
            },
            getUint32: function(e3) {
              return s2(l(this, 4, e3, 1 < arguments.length ? arguments[1] : void 0)) >>> 0;
            },
            getFloat32: function(e3) {
              return A(l(this, 4, e3, 1 < arguments.length ? arguments[1] : void 0), 23);
            },
            getFloat64: function(e3) {
              return A(l(this, 8, e3, 1 < arguments.length ? arguments[1] : void 0), 52);
            },
            setInt8: function(e3, t3) {
              u2(this, 1, e3, r2, t3);
            },
            setUint8: function(e3, t3) {
              u2(this, 1, e3, r2, t3);
            },
            setInt16: function(e3, t3) {
              u2(this, 2, e3, o, t3, 2 < arguments.length ? arguments[2] : void 0);
            },
            setUint16: function(e3, t3) {
              u2(this, 2, e3, o, t3, 2 < arguments.length ? arguments[2] : void 0);
            },
            setInt32: function(e3, t3) {
              u2(this, 4, e3, n, t3, 2 < arguments.length ? arguments[2] : void 0);
            },
            setUint32: function(e3, t3) {
              u2(this, 4, e3, n, t3, 2 < arguments.length ? arguments[2] : void 0);
            },
            setFloat32: function(e3, t3) {
              u2(this, 4, e3, i, t3, 2 < arguments.length ? arguments[2] : void 0);
            },
            setFloat64: function(e3, t3) {
              u2(this, 8, e3, F, t3, 2 < arguments.length ? arguments[2] : void 0);
            }
          });
          v(E, j), v(M, x), t2.exports = {
            ArrayBuffer: E,
            DataView: M
          };
        }, {
          "../internals/an-instance": 9,
          "../internals/array-buffer-native": 11,
          "../internals/array-fill": 15,
          "../internals/create-non-enumerable-property": 38,
          "../internals/descriptors": 43,
          "../internals/fails": 51,
          "../internals/global": 60,
          "../internals/ieee754": 66,
          "../internals/internal-state": 71,
          "../internals/object-define-property": 93,
          "../internals/object-get-own-property-names": 96,
          "../internals/object-get-prototype-of": 98,
          "../internals/object-set-prototype-of": 102,
          "../internals/redefine-all": 109,
          "../internals/set-to-string-tag": 119,
          "../internals/to-index": 135,
          "../internals/to-integer": 137,
          "../internals/to-length": 138
        }],
        14: [function(e2, t2, r2) {
          "use strict";
          var l = e2("../internals/to-object"), u2 = e2("../internals/to-absolute-index"), c = e2("../internals/to-length"), d = Math.min;
          t2.exports = [].copyWithin || function(e3, t3) {
            var r3 = l(this), o = c(r3.length), n = u2(e3, o), s2 = u2(t3, o), e3 = 2 < arguments.length ? arguments[2] : void 0, i = d((void 0 === e3 ? o : u2(e3, o)) - s2, o - n), a = 1;
            for (s2 < n && n < s2 + i && (a = -1, s2 += i - 1, n += i - 1); 0 < i--; ) s2 in r3 ? r3[n] = r3[s2] : delete r3[n], n += a, s2 += a;
            return r3;
          };
        }, {
          "../internals/to-absolute-index": 134,
          "../internals/to-length": 138,
          "../internals/to-object": 139
        }],
        15: [function(e2, t2, r2) {
          "use strict";
          var i = e2("../internals/to-object"), a = e2("../internals/to-absolute-index"), l = e2("../internals/to-length");
          t2.exports = function(e3) {
            for (var t3 = i(this), r3 = l(t3.length), o = arguments.length, n = a(1 < o ? arguments[1] : void 0, r3), o = 2 < o ? arguments[2] : void 0, s2 = void 0 === o ? r3 : a(o, r3); n < s2; ) t3[n++] = e3;
            return t3;
          };
        }, {
          "../internals/to-absolute-index": 134,
          "../internals/to-length": 138,
          "../internals/to-object": 139
        }],
        16: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-iteration").forEach, n = e2("../internals/array-method-is-strict"), e2 = e2("../internals/array-method-uses-to-length"), n = n("forEach"), e2 = e2("forEach");
          t2.exports = n && e2 ? [].forEach : function(e3) {
            return o(this, e3, 1 < arguments.length ? arguments[1] : void 0);
          };
        }, {
          "../internals/array-iteration": 19,
          "../internals/array-method-is-strict": 22,
          "../internals/array-method-uses-to-length": 23
        }],
        17: [function(e2, t2, r2) {
          "use strict";
          var f = e2("../internals/function-bind-context"), p = e2("../internals/to-object"), m = e2("../internals/call-with-safe-iteration-closing"), y = e2("../internals/is-array-iterator-method"), g = e2("../internals/to-length"), v = e2("../internals/create-property"), b = e2("../internals/get-iterator-method");
          t2.exports = function(e3) {
            var t3, r3, o, n, s2, i, a = p(e3), e3 = "function" == typeof this ? this : Array, l = arguments.length, u2 = 1 < l ? arguments[1] : void 0, c = void 0 !== u2, d = b(a), h = 0;
            if (c && (u2 = f(u2, 2 < l ? arguments[2] : void 0, 2)), null == d || e3 == Array && y(d)) for (r3 = new e3(t3 = g(a.length)); h < t3; h++) i = c ? u2(a[h], h) : a[h], v(r3, h, i);
            else for (s2 = (n = d.call(a)).next, r3 = new e3(); !(o = s2.call(n)).done; h++) i = c ? m(n, u2, [o.value, h], true) : o.value, v(r3, h, i);
            return r3.length = h, r3;
          };
        }, {
          "../internals/call-with-safe-iteration-closing": 26,
          "../internals/create-property": 40,
          "../internals/function-bind-context": 55,
          "../internals/get-iterator-method": 58,
          "../internals/is-array-iterator-method": 72,
          "../internals/to-length": 138,
          "../internals/to-object": 139
        }],
        18: [function(e2, t2, r2) {
          function o(a) {
            return function(e3, t3, r3) {
              var o2, n = l(e3), s2 = u2(n.length), i = c(r3, s2);
              if (a && t3 != t3) {
                for (; i < s2; ) if ((o2 = n[i++]) != o2) return true;
              } else for (; i < s2; i++) if ((a || i in n) && n[i] === t3) return a || i || 0;
              return !a && -1;
            };
          }
          var l = e2("../internals/to-indexed-object"), u2 = e2("../internals/to-length"), c = e2("../internals/to-absolute-index");
          t2.exports = {
            includes: o(true),
            indexOf: o(false)
          };
        }, {
          "../internals/to-absolute-index": 134,
          "../internals/to-indexed-object": 136,
          "../internals/to-length": 138
        }],
        19: [function(e2, t2, r2) {
          function o(h) {
            var f = 1 == h, p = 2 == h, m = 3 == h, y = 4 == h, g = 6 == h, v = 5 == h || g;
            return function(e3, t3, r3, o2) {
              for (var n, s2, i = j(e3), a = _(i), l = b(t3, r3, 3), u2 = x(a.length), c = 0, t3 = o2 || w, d = f ? t3(e3, u2) : p ? t3(e3, 0) : void 0; c < u2; c++) if ((v || c in a) && (s2 = l(n = a[c], c, i), h)) {
                if (f) d[c] = s2;
                else if (s2) switch (h) {
                  case 3:
                    return true;
                  case 5:
                    return n;
                  case 6:
                    return c;
                  case 2:
                    S.call(d, n);
                }
                else if (y) return false;
              }
              return g ? -1 : m || y ? y : d;
            };
          }
          var b = e2("../internals/function-bind-context"), _ = e2("../internals/indexed-object"), j = e2("../internals/to-object"), x = e2("../internals/to-length"), w = e2("../internals/array-species-create"), S = [].push;
          t2.exports = {
            forEach: o(0),
            map: o(1),
            filter: o(2),
            some: o(3),
            every: o(4),
            find: o(5),
            findIndex: o(6)
          };
        }, {
          "../internals/array-species-create": 25,
          "../internals/function-bind-context": 55,
          "../internals/indexed-object": 67,
          "../internals/to-length": 138,
          "../internals/to-object": 139
        }],
        20: [function(e2, t2, r2) {
          "use strict";
          var n = e2("../internals/to-indexed-object"), s2 = e2("../internals/to-integer"), i = e2("../internals/to-length"), o = e2("../internals/array-method-is-strict"), e2 = e2("../internals/array-method-uses-to-length"), a = Math.min, l = [].lastIndexOf, u2 = !!l && 1 / [1].lastIndexOf(1, -0) < 0, o = o("lastIndexOf"), e2 = e2("indexOf", {
            ACCESSORS: true,
            1: 0
          });
          t2.exports = u2 || !o || !e2 ? function(e3) {
            if (u2) return l.apply(this, arguments) || 0;
            var t3 = n(this), r3 = i(t3.length), o2 = r3 - 1;
            for ((o2 = 1 < arguments.length ? a(o2, s2(arguments[1])) : o2) < 0 && (o2 = r3 + o2); 0 <= o2; o2--) if (o2 in t3 && t3[o2] === e3) return o2 || 0;
            return -1;
          } : l;
        }, {
          "../internals/array-method-is-strict": 22,
          "../internals/array-method-uses-to-length": 23,
          "../internals/to-indexed-object": 136,
          "../internals/to-integer": 137,
          "../internals/to-length": 138
        }],
        21: [function(e2, t2, r2) {
          var o = e2("../internals/fails"), n = e2("../internals/well-known-symbol"), s2 = e2("../internals/engine-v8-version"), i = n("species");
          t2.exports = function(t3) {
            return 51 <= s2 || !o(function() {
              var e3 = [];
              return (e3.constructor = {})[i] = function() {
                return {
                  foo: 1
                };
              }, 1 !== e3[t3](Boolean).foo;
            });
          };
        }, {
          "../internals/engine-v8-version": 48,
          "../internals/fails": 51,
          "../internals/well-known-symbol": 150
        }],
        22: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/fails");
          t2.exports = function(e3, t3) {
            var r3 = [][e3];
            return !!r3 && o(function() {
              r3.call(null, t3 || function() {
                throw 1;
              }, 1);
            });
          };
        }, {
          "../internals/fails": 51
        }],
        23: [function(e2, t2, r2) {
          function i(e3) {
            throw e3;
          }
          var a = e2("../internals/descriptors"), l = e2("../internals/fails"), u2 = e2("../internals/has"), c = Object.defineProperty, d = {};
          t2.exports = function(e3, t3) {
            var r3, o, n, s2;
            return u2(d, e3) ? d[e3] : (r3 = [][e3], o = !!u2(t3 = t3 || {}, "ACCESSORS") && t3.ACCESSORS, n = u2(t3, 0) ? t3[0] : i, s2 = u2(t3, 1) ? t3[1] : void 0, d[e3] = !!r3 && !l(function() {
              if (o && !a) return true;
              var e4 = {
                length: -1
              };
              o ? c(e4, 1, {
                enumerable: true,
                get: i
              }) : e4[1] = 1, r3.call(e4, n, s2);
            }));
          };
        }, {
          "../internals/descriptors": 43,
          "../internals/fails": 51,
          "../internals/has": 61
        }],
        24: [function(e2, t2, r2) {
          function o(u2) {
            return function(e3, t3, r3, o2) {
              c(t3);
              var n = d(e3), s2 = h(n), i = f(n.length), a = u2 ? i - 1 : 0, l = u2 ? -1 : 1;
              if (r3 < 2) for (; ; ) {
                if (a in s2) {
                  o2 = s2[a], a += l;
                  break;
                }
                if (a += l, u2 ? a < 0 : i <= a) throw TypeError("Reduce of empty array with no initial value");
              }
              for (; u2 ? 0 <= a : a < i; a += l) a in s2 && (o2 = t3(o2, s2[a], a, n));
              return o2;
            };
          }
          var c = e2("../internals/a-function"), d = e2("../internals/to-object"), h = e2("../internals/indexed-object"), f = e2("../internals/to-length");
          t2.exports = {
            left: o(false),
            right: o(true)
          };
        }, {
          "../internals/a-function": 5,
          "../internals/indexed-object": 67,
          "../internals/to-length": 138,
          "../internals/to-object": 139
        }],
        25: [function(e2, t2, r2) {
          var o = e2("../internals/is-object"), n = e2("../internals/is-array"), s2 = e2("../internals/well-known-symbol")("species");
          t2.exports = function(e3, t3) {
            var r3;
            return new (void 0 === (r3 = n(e3) && ("function" == typeof (r3 = e3.constructor) && (r3 === Array || n(r3.prototype)) || o(r3) && null === (r3 = r3[s2])) ? void 0 : r3) ? Array : r3)(0 === t3 ? 0 : t3);
          };
        }, {
          "../internals/is-array": 73,
          "../internals/is-object": 75,
          "../internals/well-known-symbol": 150
        }],
        26: [function(e2, t2, r2) {
          var n = e2("../internals/an-object");
          t2.exports = function(t3, e3, r3, o) {
            try {
              return o ? e3(n(r3)[0], r3[1]) : e3(r3);
            } catch (e4) {
              o = t3.return;
              throw void 0 !== o && n(o.call(t3)), e4;
            }
          };
        }, {
          "../internals/an-object": 10
        }],
        27: [function(e2, t2, r2) {
          var n = e2("../internals/well-known-symbol")("iterator"), s2 = false;
          try {
            var o = 0, i = {
              next: function() {
                return {
                  done: !!o++
                };
              },
              return: function() {
                s2 = true;
              }
            };
            i[n] = function() {
              return this;
            }, Array.from(i, function() {
              throw 2;
            });
          } catch (e3) {
          }
          t2.exports = function(e3, t3) {
            if (!t3 && !s2) return false;
            var r3 = false;
            try {
              var o2 = {};
              o2[n] = function() {
                return {
                  next: function() {
                    return {
                      done: r3 = true
                    };
                  }
                };
              }, e3(o2);
            } catch (e4) {
            }
            return r3;
          };
        }, {
          "../internals/well-known-symbol": 150
        }],
        28: [function(e2, t2, r2) {
          var o = {}.toString;
          t2.exports = function(e3) {
            return o.call(e3).slice(8, -1);
          };
        }, {}],
        29: [function(e2, t2, r2) {
          var o = e2("../internals/to-string-tag-support"), n = e2("../internals/classof-raw"), s2 = e2("../internals/well-known-symbol")("toStringTag"), i = "Arguments" == n(/* @__PURE__ */ function() {
            return arguments;
          }());
          t2.exports = o ? n : function(e3) {
            var t3;
            return void 0 === e3 ? "Undefined" : null === e3 ? "Null" : "string" == typeof (t3 = function(e4, t4) {
              try {
                return e4[t4];
              } catch (e5) {
              }
            }(e3 = Object(e3), s2)) ? t3 : i ? n(e3) : "Object" == (t3 = n(e3)) && "function" == typeof e3.callee ? "Arguments" : t3;
          };
        }, {
          "../internals/classof-raw": 28,
          "../internals/to-string-tag-support": 143,
          "../internals/well-known-symbol": 150
        }],
        30: [function(e2, t2, r2) {
          "use strict";
          var u2 = e2("../internals/object-define-property").f, c = e2("../internals/object-create"), d = e2("../internals/redefine-all"), h = e2("../internals/function-bind-context"), f = e2("../internals/an-instance"), p = e2("../internals/iterate"), i = e2("../internals/define-iterator"), a = e2("../internals/set-species"), m = e2("../internals/descriptors"), y = e2("../internals/internal-metadata").fastKey, e2 = e2("../internals/internal-state"), g = e2.set, v = e2.getterFor;
          t2.exports = {
            getConstructor: function(e3, r3, o, n) {
              function s2(e4, t3, r4) {
                var o2, n2 = l(e4), s3 = i2(e4, t3);
                return s3 ? s3.value = r4 : (n2.last = s3 = {
                  index: o2 = y(t3, true),
                  key: t3,
                  value: r4,
                  previous: t3 = n2.last,
                  next: void 0,
                  removed: false
                }, n2.first || (n2.first = s3), t3 && (t3.next = s3), m ? n2.size++ : e4.size++, "F" !== o2 && (n2.index[o2] = s3)), e4;
              }
              function i2(e4, t3) {
                var r4, e4 = l(e4), o2 = y(t3);
                if ("F" !== o2) return e4.index[o2];
                for (r4 = e4.first; r4; r4 = r4.next) if (r4.key == t3) return r4;
              }
              var a2 = e3(function(e4, t3) {
                f(e4, a2, r3), g(e4, {
                  type: r3,
                  index: c(null),
                  first: void 0,
                  last: void 0,
                  size: 0
                }), m || (e4.size = 0), null != t3 && p(t3, e4[n], e4, o);
              }), l = v(r3);
              return d(a2.prototype, {
                clear: function() {
                  for (var e4 = l(this), t3 = e4.index, r4 = e4.first; r4; ) r4.removed = true, r4.previous && (r4.previous = r4.previous.next = void 0), delete t3[r4.index], r4 = r4.next;
                  e4.first = e4.last = void 0, m ? e4.size = 0 : this.size = 0;
                },
                delete: function(e4) {
                  var t3, r4, o2 = l(this), e4 = i2(this, e4);
                  return e4 && (t3 = e4.next, r4 = e4.previous, delete o2.index[e4.index], e4.removed = true, r4 && (r4.next = t3), t3 && (t3.previous = r4), o2.first == e4 && (o2.first = t3), o2.last == e4 && (o2.last = r4), m ? o2.size-- : this.size--), !!e4;
                },
                forEach: function(e4) {
                  for (var t3, r4 = l(this), o2 = h(e4, 1 < arguments.length ? arguments[1] : void 0, 3); t3 = t3 ? t3.next : r4.first; ) for (o2(t3.value, t3.key, this); t3 && t3.removed; ) t3 = t3.previous;
                },
                has: function(e4) {
                  return !!i2(this, e4);
                }
              }), d(a2.prototype, o ? {
                get: function(e4) {
                  e4 = i2(this, e4);
                  return e4 && e4.value;
                },
                set: function(e4, t3) {
                  return s2(this, 0 === e4 ? 0 : e4, t3);
                }
              } : {
                add: function(e4) {
                  return s2(this, e4 = 0 === e4 ? 0 : e4, e4);
                }
              }), m && u2(a2.prototype, "size", {
                get: function() {
                  return l(this).size;
                }
              }), a2;
            },
            setStrong: function(e3, t3, r3) {
              var o = t3 + " Iterator", n = v(t3), s2 = v(o);
              i(e3, t3, function(e4, t4) {
                g(this, {
                  type: o,
                  target: e4,
                  state: n(e4),
                  kind: t4,
                  last: void 0
                });
              }, function() {
                for (var e4 = s2(this), t4 = e4.kind, r4 = e4.last; r4 && r4.removed; ) r4 = r4.previous;
                return e4.target && (e4.last = r4 = r4 ? r4.next : e4.state.first) ? "keys" == t4 ? {
                  value: r4.key,
                  done: false
                } : "values" == t4 ? {
                  value: r4.value,
                  done: false
                } : {
                  value: [r4.key, r4.value],
                  done: false
                } : {
                  value: e4.target = void 0,
                  done: true
                };
              }, r3 ? "entries" : "values", !r3, true), a(t3);
            }
          };
        }, {
          "../internals/an-instance": 9,
          "../internals/define-iterator": 41,
          "../internals/descriptors": 43,
          "../internals/function-bind-context": 55,
          "../internals/internal-metadata": 70,
          "../internals/internal-state": 71,
          "../internals/iterate": 78,
          "../internals/object-create": 91,
          "../internals/object-define-property": 93,
          "../internals/redefine-all": 109,
          "../internals/set-species": 118
        }],
        31: [function(e2, t2, r2) {
          "use strict";
          function l(e3) {
            return e3.frozen || (e3.frozen = new o());
          }
          function o() {
            this.entries = [];
          }
          function n(e3, t3) {
            return i(e3.entries, function(e4) {
              return e4[0] === t3;
            });
          }
          var u2 = e2("../internals/redefine-all"), c = e2("../internals/internal-metadata").getWeakData, d = e2("../internals/an-object"), h = e2("../internals/is-object"), f = e2("../internals/an-instance"), p = e2("../internals/iterate"), s2 = e2("../internals/array-iteration"), m = e2("../internals/has"), e2 = e2("../internals/internal-state"), y = e2.set, g = e2.getterFor, i = s2.find, a = s2.findIndex, v = 0;
          o.prototype = {
            get: function(e3) {
              e3 = n(this, e3);
              if (e3) return e3[1];
            },
            has: function(e3) {
              return !!n(this, e3);
            },
            set: function(e3, t3) {
              var r3 = n(this, e3);
              r3 ? r3[1] = t3 : this.entries.push([e3, t3]);
            },
            delete: function(t3) {
              var e3 = a(this.entries, function(e4) {
                return e4[0] === t3;
              });
              return ~e3 && this.entries.splice(e3, 1), !!~e3;
            }
          }, t2.exports = {
            getConstructor: function(e3, r3, o2, n2) {
              function s3(e4, t3, r4) {
                var o3 = a2(e4), n3 = c(d(t3), true);
                return true === n3 ? l(o3).set(t3, r4) : n3[o3.id] = r4, e4;
              }
              var i2 = e3(function(e4, t3) {
                f(e4, i2, r3), y(e4, {
                  type: r3,
                  id: v++,
                  frozen: void 0
                }), null != t3 && p(t3, e4[n2], e4, o2);
              }), a2 = g(r3);
              return u2(i2.prototype, {
                delete: function(e4) {
                  var t3, r4 = a2(this);
                  return !!h(e4) && (true === (t3 = c(e4)) ? l(r4).delete(e4) : t3 && m(t3, r4.id) && delete t3[r4.id]);
                },
                has: function(e4) {
                  var t3, r4 = a2(this);
                  return !!h(e4) && (true === (t3 = c(e4)) ? l(r4).has(e4) : t3 && m(t3, r4.id));
                }
              }), u2(i2.prototype, o2 ? {
                get: function(e4) {
                  var t3, r4 = a2(this);
                  if (h(e4)) return true === (t3 = c(e4)) ? l(r4).get(e4) : t3 ? t3[r4.id] : void 0;
                },
                set: function(e4, t3) {
                  return s3(this, e4, t3);
                }
              } : {
                add: function(e4) {
                  return s3(this, e4, true);
                }
              }), i2;
            }
          };
        }, {
          "../internals/an-instance": 9,
          "../internals/an-object": 10,
          "../internals/array-iteration": 19,
          "../internals/has": 61,
          "../internals/internal-metadata": 70,
          "../internals/internal-state": 71,
          "../internals/is-object": 75,
          "../internals/iterate": 78,
          "../internals/redefine-all": 109
        }],
        32: [function(e2, t2, r2) {
          "use strict";
          var y = e2("../internals/export"), g = e2("../internals/global"), v = e2("../internals/is-forced"), b = e2("../internals/redefine"), _ = e2("../internals/internal-metadata"), j = e2("../internals/iterate"), x = e2("../internals/an-instance"), w = e2("../internals/is-object"), S = e2("../internals/fails"), T = e2("../internals/check-correctness-of-iteration"), E = e2("../internals/set-to-string-tag"), M = e2("../internals/inherit-if-required");
          t2.exports = function(r3, e3, t3) {
            function o(e4) {
              var r4 = f[e4];
              b(f, e4, "add" == e4 ? function(e5) {
                return r4.call(this, 0 === e5 ? 0 : e5), this;
              } : "delete" == e4 ? function(e5) {
                return !(c && !w(e5)) && r4.call(this, 0 === e5 ? 0 : e5);
              } : "get" == e4 ? function(e5) {
                return c && !w(e5) ? void 0 : r4.call(this, 0 === e5 ? 0 : e5);
              } : "has" == e4 ? function(e5) {
                return !(c && !w(e5)) && r4.call(this, 0 === e5 ? 0 : e5);
              } : function(e5, t4) {
                return r4.call(this, 0 === e5 ? 0 : e5, t4), this;
              });
            }
            var n, s2, i, a, l, u2 = -1 !== r3.indexOf("Map"), c = -1 !== r3.indexOf("Weak"), d = u2 ? "set" : "add", h = g[r3], f = h && h.prototype, p = h, m = {};
            return v(r3, "function" != typeof h || !(c || f.forEach && !S(function() {
              new h().entries().next();
            }))) ? (p = t3.getConstructor(e3, r3, u2, d), _.REQUIRED = true) : v(r3, true) && (s2 = (n = new p())[d](c ? {} : -0, 1) != n, i = S(function() {
              n.has(1);
            }), a = T(function(e4) {
              new h(e4);
            }), l = !c && S(function() {
              for (var e4 = new h(), t4 = 5; t4--; ) e4[d](t4, t4);
              return !e4.has(-0);
            }), a || (((p = e3(function(e4, t4) {
              x(e4, p, r3);
              e4 = M(new h(), e4, p);
              return null != t4 && j(t4, e4[d], e4, u2), e4;
            })).prototype = f).constructor = p), (i || l) && (o("delete"), o("has"), u2 && o("get")), (l || s2) && o(d), c && f.clear && delete f.clear), m[r3] = p, y({
              global: true,
              forced: p != h
            }, m), E(p, r3), c || t3.setStrong(p, r3, u2), p;
          };
        }, {
          "../internals/an-instance": 9,
          "../internals/check-correctness-of-iteration": 27,
          "../internals/export": 50,
          "../internals/fails": 51,
          "../internals/global": 60,
          "../internals/inherit-if-required": 68,
          "../internals/internal-metadata": 70,
          "../internals/is-forced": 74,
          "../internals/is-object": 75,
          "../internals/iterate": 78,
          "../internals/redefine": 110,
          "../internals/set-to-string-tag": 119
        }],
        33: [function(e2, t2, r2) {
          var a = e2("../internals/has"), l = e2("../internals/own-keys"), u2 = e2("../internals/object-get-own-property-descriptor"), c = e2("../internals/object-define-property");
          t2.exports = function(e3, t3) {
            for (var r3 = l(t3), o = c.f, n = u2.f, s2 = 0; s2 < r3.length; s2++) {
              var i = r3[s2];
              a(e3, i) || o(e3, i, n(t3, i));
            }
          };
        }, {
          "../internals/has": 61,
          "../internals/object-define-property": 93,
          "../internals/object-get-own-property-descriptor": 94,
          "../internals/own-keys": 105
        }],
        34: [function(e2, t2, r2) {
          var o = e2("../internals/well-known-symbol")("match");
          t2.exports = function(t3) {
            var r3 = /./;
            try {
              "/./"[t3](r3);
            } catch (e3) {
              try {
                return r3[o] = false, "/./"[t3](r3);
              } catch (e4) {
              }
            }
            return false;
          };
        }, {
          "../internals/well-known-symbol": 150
        }],
        35: [function(e2, t2, r2) {
          e2 = e2("../internals/fails");
          t2.exports = !e2(function() {
            function e3() {
            }
            return e3.prototype.constructor = null, Object.getPrototypeOf(new e3()) !== e3.prototype;
          });
        }, {
          "../internals/fails": 51
        }],
        36: [function(e2, t2, r2) {
          var s2 = e2("../internals/require-object-coercible"), i = /"/g;
          t2.exports = function(e3, t3, r3, o) {
            var e3 = String(s2(e3)), n = "<" + t3;
            return "" !== r3 && (n += " " + r3 + '="' + String(o).replace(i, "&quot;") + '"'), n + ">" + e3 + "</" + t3 + ">";
          };
        }, {
          "../internals/require-object-coercible": 115
        }],
        37: [function(e2, t2, r2) {
          "use strict";
          function o() {
            return this;
          }
          var n = e2("../internals/iterators-core").IteratorPrototype, s2 = e2("../internals/object-create"), i = e2("../internals/create-property-descriptor"), a = e2("../internals/set-to-string-tag"), l = e2("../internals/iterators");
          t2.exports = function(e3, t3, r3) {
            t3 += " Iterator";
            return e3.prototype = s2(n, {
              next: i(1, r3)
            }), a(e3, t3, false, true), l[t3] = o, e3;
          };
        }, {
          "../internals/create-property-descriptor": 39,
          "../internals/iterators": 80,
          "../internals/iterators-core": 79,
          "../internals/object-create": 91,
          "../internals/set-to-string-tag": 119
        }],
        38: [function(e2, t2, r2) {
          var o = e2("../internals/descriptors"), n = e2("../internals/object-define-property"), s2 = e2("../internals/create-property-descriptor");
          t2.exports = o ? function(e3, t3, r3) {
            return n.f(e3, t3, s2(1, r3));
          } : function(e3, t3, r3) {
            return e3[t3] = r3, e3;
          };
        }, {
          "../internals/create-property-descriptor": 39,
          "../internals/descriptors": 43,
          "../internals/object-define-property": 93
        }],
        39: [function(e2, t2, r2) {
          t2.exports = function(e3, t3) {
            return {
              enumerable: !(1 & e3),
              configurable: !(2 & e3),
              writable: !(4 & e3),
              value: t3
            };
          };
        }, {}],
        40: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/to-primitive"), n = e2("../internals/object-define-property"), s2 = e2("../internals/create-property-descriptor");
          t2.exports = function(e3, t3, r3) {
            t3 = o(t3);
            t3 in e3 ? n.f(e3, t3, s2(0, r3)) : e3[t3] = r3;
          };
        }, {
          "../internals/create-property-descriptor": 39,
          "../internals/object-define-property": 93,
          "../internals/to-primitive": 142
        }],
        41: [function(e2, t2, r2) {
          "use strict";
          function m() {
            return this;
          }
          var y = e2("../internals/export"), g = e2("../internals/create-iterator-constructor"), v = e2("../internals/object-get-prototype-of"), b = e2("../internals/object-set-prototype-of"), _ = e2("../internals/set-to-string-tag"), j = e2("../internals/create-non-enumerable-property"), x = e2("../internals/redefine"), o = e2("../internals/well-known-symbol"), w = e2("../internals/is-pure"), S = e2("../internals/iterators"), e2 = e2("../internals/iterators-core"), T = e2.IteratorPrototype, E = e2.BUGGY_SAFARI_ITERATORS, M = o("iterator"), k = "values", O = "entries";
          t2.exports = function(e3, t3, r3, o2, n, s2, i) {
            g(r3, t3, o2);
            function a(e4) {
              if (e4 === n && f) return f;
              if (!E && e4 in d) return d[e4];
              switch (e4) {
                case "keys":
                case k:
                case O:
                  return function() {
                    return new r3(this, e4);
                  };
              }
              return function() {
                return new r3(this);
              };
            }
            var l, u2, o2 = t3 + " Iterator", c = false, d = e3.prototype, h = d[M] || d["@@iterator"] || n && d[n], f = !E && h || a(n), p = "Array" == t3 && d.entries || h;
            if (p && (p = v(p.call(new e3())), T !== Object.prototype && p.next && (w || v(p) === T || (b ? b(p, T) : "function" != typeof p[M] && j(p, M, m)), _(p, o2, true, true), w && (S[o2] = m))), n == k && h && h.name !== k && (c = true, f = function() {
              return h.call(this);
            }), w && !i || d[M] === f || j(d, M, f), S[t3] = f, n) if (l = {
              values: a(k),
              keys: s2 ? f : a("keys"),
              entries: a(O)
            }, i) for (u2 in l) !E && !c && u2 in d || x(d, u2, l[u2]);
            else y({
              target: t3,
              proto: true,
              forced: E || c
            }, l);
            return l;
          };
        }, {
          "../internals/create-iterator-constructor": 37,
          "../internals/create-non-enumerable-property": 38,
          "../internals/export": 50,
          "../internals/is-pure": 76,
          "../internals/iterators": 80,
          "../internals/iterators-core": 79,
          "../internals/object-get-prototype-of": 98,
          "../internals/object-set-prototype-of": 102,
          "../internals/redefine": 110,
          "../internals/set-to-string-tag": 119,
          "../internals/well-known-symbol": 150
        }],
        42: [function(e2, t2, r2) {
          var o = e2("../internals/path"), n = e2("../internals/has"), s2 = e2("../internals/well-known-symbol-wrapped"), i = e2("../internals/object-define-property").f;
          t2.exports = function(e3) {
            var t3 = o.Symbol || (o.Symbol = {});
            n(t3, e3) || i(t3, e3, {
              value: s2.f(e3)
            });
          };
        }, {
          "../internals/has": 61,
          "../internals/object-define-property": 93,
          "../internals/path": 106,
          "../internals/well-known-symbol-wrapped": 149
        }],
        43: [function(e2, t2, r2) {
          e2 = e2("../internals/fails");
          t2.exports = !e2(function() {
            return 7 != Object.defineProperty({}, 1, {
              get: function() {
                return 7;
              }
            })[1];
          });
        }, {
          "../internals/fails": 51
        }],
        44: [function(e2, t2, r2) {
          var o = e2("../internals/global"), e2 = e2("../internals/is-object"), n = o.document, s2 = e2(n) && e2(n.createElement);
          t2.exports = function(e3) {
            return s2 ? n.createElement(e3) : {};
          };
        }, {
          "../internals/global": 60,
          "../internals/is-object": 75
        }],
        45: [function(e2, t2, r2) {
          t2.exports = {
            CSSRuleList: 0,
            CSSStyleDeclaration: 0,
            CSSValueList: 0,
            ClientRectList: 0,
            DOMRectList: 0,
            DOMStringList: 0,
            DOMTokenList: 1,
            DataTransferItemList: 0,
            FileList: 0,
            HTMLAllCollection: 0,
            HTMLCollection: 0,
            HTMLFormElement: 0,
            HTMLSelectElement: 0,
            MediaList: 0,
            MimeTypeArray: 0,
            NamedNodeMap: 0,
            NodeList: 1,
            PaintRequestList: 0,
            Plugin: 0,
            PluginArray: 0,
            SVGLengthList: 0,
            SVGNumberList: 0,
            SVGPathSegList: 0,
            SVGPointList: 0,
            SVGStringList: 0,
            SVGTransformList: 0,
            SourceBufferList: 0,
            StyleSheetList: 0,
            TextTrackCueList: 0,
            TextTrackList: 0,
            TouchList: 0
          };
        }, {}],
        46: [function(e2, t2, r2) {
          e2 = e2("../internals/engine-user-agent");
          t2.exports = /(iphone|ipod|ipad).*applewebkit/i.test(e2);
        }, {
          "../internals/engine-user-agent": 47
        }],
        47: [function(e2, t2, r2) {
          e2 = e2("../internals/get-built-in");
          t2.exports = e2("navigator", "userAgent") || "";
        }, {
          "../internals/get-built-in": 57
        }],
        48: [function(e2, t2, r2) {
          var o, n, s2 = e2("../internals/global"), e2 = e2("../internals/engine-user-agent"), s2 = s2.process, s2 = s2 && s2.versions, s2 = s2 && s2.v8;
          s2 ? n = (o = s2.split("."))[0] + o[1] : e2 && (!(o = e2.match(/Edge\/(\d+)/)) || 74 <= o[1]) && (o = e2.match(/Chrome\/(\d+)/)) && (n = o[1]), t2.exports = n && +n;
        }, {
          "../internals/engine-user-agent": 47,
          "../internals/global": 60
        }],
        49: [function(e2, t2, r2) {
          t2.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
        }, {}],
        50: [function(e2, t2, r2) {
          var u2 = e2("../internals/global"), c = e2("../internals/object-get-own-property-descriptor").f, d = e2("../internals/create-non-enumerable-property"), h = e2("../internals/redefine"), f = e2("../internals/set-global"), p = e2("../internals/copy-constructor-properties"), m = e2("../internals/is-forced");
          t2.exports = function(e3, t3) {
            var r3, o, n, s2 = e3.target, i = e3.global, a = e3.stat, l = i ? u2 : a ? u2[s2] || f(s2, {}) : (u2[s2] || {}).prototype;
            if (l) for (r3 in t3) {
              if (o = t3[r3], n = e3.noTargetGet ? (n = c(l, r3)) && n.value : l[r3], !m(i ? r3 : s2 + (a ? "." : "#") + r3, e3.forced) && void 0 !== n) {
                if (typeof o == typeof n) continue;
                p(o, n);
              }
              (e3.sham || n && n.sham) && d(o, "sham", true), h(l, r3, o, e3);
            }
          };
        }, {
          "../internals/copy-constructor-properties": 33,
          "../internals/create-non-enumerable-property": 38,
          "../internals/global": 60,
          "../internals/is-forced": 74,
          "../internals/object-get-own-property-descriptor": 94,
          "../internals/redefine": 110,
          "../internals/set-global": 117
        }],
        51: [function(e2, t2, r2) {
          t2.exports = function(e3) {
            try {
              return !!e3();
            } catch (e4) {
              return true;
            }
          };
        }, {}],
        52: [function(e2, t2, r2) {
          "use strict";
          e2("../modules/es.regexp.exec");
          var u2 = e2("../internals/redefine"), c = e2("../internals/fails"), d = e2("../internals/well-known-symbol"), h = e2("../internals/regexp-exec"), f = e2("../internals/create-non-enumerable-property"), p = d("species"), m = !c(function() {
            var e3 = /./;
            return e3.exec = function() {
              var e4 = [];
              return e4.groups = {
                a: "7"
              }, e4;
            }, "7" !== "".replace(e3, "$<a>");
          }), y = "$0" === "a".replace(/./, "$0"), e2 = d("replace"), g = !!/./[e2] && "" === /./[e2]("a", "$0"), v = !c(function() {
            var e3 = /(?:)/, t3 = e3.exec, e3 = (e3.exec = function() {
              return t3.apply(this, arguments);
            }, "ab".split(e3));
            return 2 !== e3.length || "a" !== e3[0] || "b" !== e3[1];
          });
          t2.exports = function(r3, e3, t3, o) {
            var s2, n, i = d(r3), a = !c(function() {
              var e4 = {};
              return e4[i] = function() {
                return 7;
              }, 7 != ""[r3](e4);
            }), l = a && !c(function() {
              var e4 = false, t4 = /a/;
              return "split" === r3 && ((t4 = {
                constructor: {}
              }).constructor[p] = function() {
                return t4;
              }, t4.flags = "", t4[i] = /./[i]), t4.exec = function() {
                return e4 = true, null;
              }, t4[i](""), !e4;
            });
            a && l && ("replace" !== r3 || m && y && !g) && ("split" !== r3 || v) || (s2 = /./[i], t3 = (l = t3(i, ""[r3], function(e4, t4, r4, o2, n2) {
              return t4.exec === h ? a && !n2 ? {
                done: true,
                value: s2.call(t4, r4, o2)
              } : {
                done: true,
                value: e4.call(r4, t4, o2)
              } : {
                done: false
              };
            }, {
              REPLACE_KEEPS_$0: y,
              REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: g
            }))[0], n = l[1], u2(String.prototype, r3, t3), u2(RegExp.prototype, i, 2 == e3 ? function(e4, t4) {
              return n.call(e4, this, t4);
            } : function(e4) {
              return n.call(e4, this);
            })), o && f(RegExp.prototype[i], "sham", true);
          };
        }, {
          "../internals/create-non-enumerable-property": 38,
          "../internals/fails": 51,
          "../internals/redefine": 110,
          "../internals/regexp-exec": 112,
          "../internals/well-known-symbol": 150,
          "../modules/es.regexp.exec": 195
        }],
        53: [function(e2, t2, r2) {
          "use strict";
          function h(e3, t3, r3, o, n, s2, i, a) {
            for (var l, u2 = n, c = 0, d = !!i && m(i, a, 3); c < o; ) {
              if (c in r3) {
                if (l = d ? d(r3[c], c, t3) : r3[c], 0 < s2 && f(l)) u2 = h(e3, t3, l, p(l.length), u2, s2 - 1) - 1;
                else {
                  if (9007199254740991 <= u2) throw TypeError("Exceed the acceptable array length");
                  e3[u2] = l;
                }
                u2++;
              }
              c++;
            }
            return u2;
          }
          var f = e2("../internals/is-array"), p = e2("../internals/to-length"), m = e2("../internals/function-bind-context");
          t2.exports = h;
        }, {
          "../internals/function-bind-context": 55,
          "../internals/is-array": 73,
          "../internals/to-length": 138
        }],
        54: [function(e2, t2, r2) {
          e2 = e2("../internals/fails");
          t2.exports = !e2(function() {
            return Object.isExtensible(Object.preventExtensions({}));
          });
        }, {
          "../internals/fails": 51
        }],
        55: [function(e2, t2, r2) {
          var s2 = e2("../internals/a-function");
          t2.exports = function(o, n, e3) {
            if (s2(o), void 0 === n) return o;
            switch (e3) {
              case 0:
                return function() {
                  return o.call(n);
                };
              case 1:
                return function(e4) {
                  return o.call(n, e4);
                };
              case 2:
                return function(e4, t3) {
                  return o.call(n, e4, t3);
                };
              case 3:
                return function(e4, t3, r3) {
                  return o.call(n, e4, t3, r3);
                };
            }
            return function() {
              return o.apply(n, arguments);
            };
          };
        }, {
          "../internals/a-function": 5
        }],
        56: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/a-function"), n = e2("../internals/is-object"), c = [].slice, d = {};
          t2.exports = Function.bind || function(i) {
            var a = o(this), l = c.call(arguments, 1), u2 = function() {
              var e3 = l.concat(c.call(arguments));
              if (this instanceof u2) {
                var t3 = a, r3 = e3.length, o2 = e3;
                if (!(r3 in d)) {
                  for (var n2 = [], s2 = 0; s2 < r3; s2++) n2[s2] = "a[" + s2 + "]";
                  d[r3] = Function("C,a", "return new C(" + n2.join(",") + ")");
                }
                return d[r3](t3, o2);
              }
              return a.apply(i, e3);
            };
            return n(a.prototype) && (u2.prototype = a.prototype), u2;
          };
        }, {
          "../internals/a-function": 5,
          "../internals/is-object": 75
        }],
        57: [function(e2, t2, r2) {
          function o(e3) {
            return "function" == typeof e3 ? e3 : void 0;
          }
          var n = e2("../internals/path"), s2 = e2("../internals/global");
          t2.exports = function(e3, t3) {
            return arguments.length < 2 ? o(n[e3]) || o(s2[e3]) : n[e3] && n[e3][t3] || s2[e3] && s2[e3][t3];
          };
        }, {
          "../internals/global": 60,
          "../internals/path": 106
        }],
        58: [function(e2, t2, r2) {
          var o = e2("../internals/classof"), n = e2("../internals/iterators"), s2 = e2("../internals/well-known-symbol")("iterator");
          t2.exports = function(e3) {
            if (null != e3) return e3[s2] || e3["@@iterator"] || n[o(e3)];
          };
        }, {
          "../internals/classof": 29,
          "../internals/iterators": 80,
          "../internals/well-known-symbol": 150
        }],
        59: [function(e2, t2, r2) {
          var o = e2("../internals/an-object"), n = e2("../internals/get-iterator-method");
          t2.exports = function(e3) {
            var t3 = n(e3);
            if ("function" != typeof t3) throw TypeError(String(e3) + " is not iterable");
            return o(t3.call(e3));
          };
        }, {
          "../internals/an-object": 10,
          "../internals/get-iterator-method": 58
        }],
        60: [function(e2, r2, t2) {
          !function(e3) {
            function t3(e4) {
              return e4 && e4.Math == Math && e4;
            }
            r2.exports = t3("object" == typeof globalThis && globalThis) || t3("object" == typeof window && window) || t3("object" == typeof self && self) || t3("object" == typeof e3 && e3) || Function("return this")();
          }.call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
        }, {}],
        61: [function(e2, t2, r2) {
          var o = {}.hasOwnProperty;
          t2.exports = function(e3, t3) {
            return o.call(e3, t3);
          };
        }, {}],
        62: [function(e2, t2, r2) {
          t2.exports = {};
        }, {}],
        63: [function(e2, t2, r2) {
          var o = e2("../internals/global");
          t2.exports = function(e3, t3) {
            var r3 = o.console;
            r3 && r3.error && (1 === arguments.length ? r3.error(e3) : r3.error(e3, t3));
          };
        }, {
          "../internals/global": 60
        }],
        64: [function(e2, t2, r2) {
          e2 = e2("../internals/get-built-in");
          t2.exports = e2("document", "documentElement");
        }, {
          "../internals/get-built-in": 57
        }],
        65: [function(e2, t2, r2) {
          var o = e2("../internals/descriptors"), n = e2("../internals/fails"), s2 = e2("../internals/document-create-element");
          t2.exports = !o && !n(function() {
            return 7 != Object.defineProperty(s2("div"), "a", {
              get: function() {
                return 7;
              }
            }).a;
          });
        }, {
          "../internals/descriptors": 43,
          "../internals/document-create-element": 44,
          "../internals/fails": 51
        }],
        66: [function(e2, t2, r2) {
          var h = Math.abs, f = Math.pow, p = Math.floor, m = Math.log, y = Math.LN2;
          t2.exports = {
            pack: function(e3, t3, r3) {
              var o, n, s2, i = new Array(r3), a = 8 * r3 - t3 - 1, r3 = (1 << a) - 1, l = r3 >> 1, u2 = 23 === t3 ? f(2, -24) - f(2, -77) : 0, c = e3 < 0 || 0 === e3 && 1 / e3 < 0 ? 1 : 0, d = 0;
              for ((e3 = h(e3)) != e3 || e3 === 1 / 0 ? (n = e3 != e3 ? 1 : 0, o = r3) : (o = p(m(e3) / y), e3 * (s2 = f(2, -o)) < 1 && (o--, s2 *= 2), 2 <= (e3 += 1 <= o + l ? u2 / s2 : u2 * f(2, 1 - l)) * s2 && (o++, s2 /= 2), r3 <= o + l ? (n = 0, o = r3) : 1 <= o + l ? (n = (e3 * s2 - 1) * f(2, t3), o += l) : (n = e3 * f(2, l - 1) * f(2, t3), o = 0)); 8 <= t3; i[d++] = 255 & n, n /= 256, t3 -= 8) ;
              for (o = o << t3 | n, a += t3; 0 < a; i[d++] = 255 & o, o /= 256, a -= 8) ;
              return i[--d] |= 128 * c, i;
            },
            unpack: function(e3, t3) {
              var r3, o = e3.length, n = 8 * o - t3 - 1, s2 = (1 << n) - 1, i = s2 >> 1, a = n - 7, l = o - 1, n = e3[l--], u2 = 127 & n;
              for (n >>= 7; 0 < a; u2 = 256 * u2 + e3[l], l--, a -= 8) ;
              for (r3 = u2 & (1 << -a) - 1, u2 >>= -a, a += t3; 0 < a; r3 = 256 * r3 + e3[l], l--, a -= 8) ;
              if (0 === u2) u2 = 1 - i;
              else {
                if (u2 === s2) return r3 ? NaN : n ? -1 / 0 : 1 / 0;
                r3 += f(2, t3), u2 -= i;
              }
              return (n ? -1 : 1) * r3 * f(2, u2 - t3);
            }
          };
        }, {}],
        67: [function(e2, t2, r2) {
          var o = e2("../internals/fails"), n = e2("../internals/classof-raw"), s2 = "".split;
          t2.exports = o(function() {
            return !Object("z").propertyIsEnumerable(0);
          }) ? function(e3) {
            return "String" == n(e3) ? s2.call(e3, "") : Object(e3);
          } : Object;
        }, {
          "../internals/classof-raw": 28,
          "../internals/fails": 51
        }],
        68: [function(e2, t2, r2) {
          var o = e2("../internals/is-object"), n = e2("../internals/object-set-prototype-of");
          t2.exports = function(e3, t3, r3) {
            return n && "function" == typeof (t3 = t3.constructor) && t3 !== r3 && o(t3 = t3.prototype) && t3 !== r3.prototype && n(e3, t3), e3;
          };
        }, {
          "../internals/is-object": 75,
          "../internals/object-set-prototype-of": 102
        }],
        69: [function(e2, t2, r2) {
          var e2 = e2("../internals/shared-store"), o = Function.toString;
          "function" != typeof e2.inspectSource && (e2.inspectSource = function(e3) {
            return o.call(e3);
          }), t2.exports = e2.inspectSource;
        }, {
          "../internals/shared-store": 121
        }],
        70: [function(e2, t2, r2) {
          function o(e3) {
            a(e3, c, {
              value: {
                objectID: "O" + ++d,
                weakData: {}
              }
            });
          }
          var n = e2("../internals/hidden-keys"), s2 = e2("../internals/is-object"), i = e2("../internals/has"), a = e2("../internals/object-define-property").f, l = e2("../internals/uid"), u2 = e2("../internals/freezing"), c = l("meta"), d = 0, h = Object.isExtensible || function() {
            return true;
          }, f = t2.exports = {
            REQUIRED: false,
            fastKey: function(e3, t3) {
              if (!s2(e3)) return "symbol" == typeof e3 ? e3 : ("string" == typeof e3 ? "S" : "P") + e3;
              if (!i(e3, c)) {
                if (!h(e3)) return "F";
                if (!t3) return "E";
                o(e3);
              }
              return e3[c].objectID;
            },
            getWeakData: function(e3, t3) {
              if (!i(e3, c)) {
                if (!h(e3)) return true;
                if (!t3) return false;
                o(e3);
              }
              return e3[c].weakData;
            },
            onFreeze: function(e3) {
              return u2 && f.REQUIRED && h(e3) && !i(e3, c) && o(e3), e3;
            }
          };
          n[c] = true;
        }, {
          "../internals/freezing": 54,
          "../internals/has": 61,
          "../internals/hidden-keys": 62,
          "../internals/is-object": 75,
          "../internals/object-define-property": 93,
          "../internals/uid": 147
        }],
        71: [function(e2, t2, r2) {
          var o, n, s2, i, a, l, u2, c, d = e2("../internals/native-weak-map"), h = e2("../internals/global"), f = e2("../internals/is-object"), p = e2("../internals/create-non-enumerable-property"), m = e2("../internals/has"), y = e2("../internals/shared-key"), e2 = e2("../internals/hidden-keys"), h = h.WeakMap;
          u2 = d ? (o = new h(), n = o.get, s2 = o.has, i = o.set, a = function(e3, t3) {
            return i.call(o, e3, t3), t3;
          }, l = function(e3) {
            return n.call(o, e3) || {};
          }, function(e3) {
            return s2.call(o, e3);
          }) : (e2[c = y("state")] = true, a = function(e3, t3) {
            return p(e3, c, t3), t3;
          }, l = function(e3) {
            return m(e3, c) ? e3[c] : {};
          }, function(e3) {
            return m(e3, c);
          }), t2.exports = {
            set: a,
            get: l,
            has: u2,
            enforce: function(e3) {
              return u2(e3) ? l(e3) : a(e3, {});
            },
            getterFor: function(t3) {
              return function(e3) {
                if (f(e3) && (e3 = l(e3)).type === t3) return e3;
                throw TypeError("Incompatible receiver, " + t3 + " required");
              };
            }
          };
        }, {
          "../internals/create-non-enumerable-property": 38,
          "../internals/global": 60,
          "../internals/has": 61,
          "../internals/hidden-keys": 62,
          "../internals/is-object": 75,
          "../internals/native-weak-map": 86,
          "../internals/shared-key": 120
        }],
        72: [function(e2, t2, r2) {
          var o = e2("../internals/well-known-symbol"), n = e2("../internals/iterators"), s2 = o("iterator"), i = Array.prototype;
          t2.exports = function(e3) {
            return void 0 !== e3 && (n.Array === e3 || i[s2] === e3);
          };
        }, {
          "../internals/iterators": 80,
          "../internals/well-known-symbol": 150
        }],
        73: [function(e2, t2, r2) {
          var o = e2("../internals/classof-raw");
          t2.exports = Array.isArray || function(e3) {
            return "Array" == o(e3);
          };
        }, {
          "../internals/classof-raw": 28
        }],
        74: [function(e2, t2, r2) {
          function o(e3, t3) {
            return (e3 = a[i(e3)]) == u2 || e3 != l && ("function" == typeof t3 ? n(t3) : !!t3);
          }
          var n = e2("../internals/fails"), s2 = /#|\.prototype\./, i = o.normalize = function(e3) {
            return String(e3).replace(s2, ".").toLowerCase();
          }, a = o.data = {}, l = o.NATIVE = "N", u2 = o.POLYFILL = "P";
          t2.exports = o;
        }, {
          "../internals/fails": 51
        }],
        75: [function(e2, t2, r2) {
          t2.exports = function(e3) {
            return "object" == typeof e3 ? null !== e3 : "function" == typeof e3;
          };
        }, {}],
        76: [function(e2, t2, r2) {
          t2.exports = false;
        }, {}],
        77: [function(e2, t2, r2) {
          var o = e2("../internals/is-object"), n = e2("../internals/classof-raw"), s2 = e2("../internals/well-known-symbol")("match");
          t2.exports = function(e3) {
            var t3;
            return o(e3) && (void 0 !== (t3 = e3[s2]) ? !!t3 : "RegExp" == n(e3));
          };
        }, {
          "../internals/classof-raw": 28,
          "../internals/is-object": 75,
          "../internals/well-known-symbol": 150
        }],
        78: [function(e2, t2, r2) {
          function h(e3, t3) {
            this.stopped = e3, this.result = t3;
          }
          var f = e2("../internals/an-object"), p = e2("../internals/is-array-iterator-method"), m = e2("../internals/to-length"), y = e2("../internals/function-bind-context"), g = e2("../internals/get-iterator-method"), v = e2("../internals/call-with-safe-iteration-closing");
          (t2.exports = function(e3, t3, r3, o, n) {
            var s2, i, a, l, u2, c, d = y(t3, r3, o ? 2 : 1);
            if (n) s2 = e3;
            else {
              if ("function" != typeof (t3 = g(e3))) throw TypeError("Target is not iterable");
              if (p(t3)) {
                for (i = 0, a = m(e3.length); i < a; i++) if ((l = o ? d(f(c = e3[i])[0], c[1]) : d(e3[i])) && l instanceof h) return l;
                return new h(false);
              }
              s2 = t3.call(e3);
            }
            for (u2 = s2.next; !(c = u2.call(s2)).done; ) if ("object" == typeof (l = v(s2, d, c.value, o)) && l && l instanceof h) return l;
            return new h(false);
          }).stop = function(e3) {
            return new h(true, e3);
          };
        }, {
          "../internals/an-object": 10,
          "../internals/call-with-safe-iteration-closing": 26,
          "../internals/function-bind-context": 55,
          "../internals/get-iterator-method": 58,
          "../internals/is-array-iterator-method": 72,
          "../internals/to-length": 138
        }],
        79: [function(e2, t2, r2) {
          "use strict";
          var o, n, s2 = e2("../internals/object-get-prototype-of"), i = e2("../internals/create-non-enumerable-property"), a = e2("../internals/has"), l = e2("../internals/well-known-symbol"), e2 = e2("../internals/is-pure"), l = l("iterator"), u2 = false;
          [].keys && ("next" in (n = [].keys()) ? (s2 = s2(s2(n))) !== Object.prototype && (o = s2) : u2 = true), null == o && (o = {}), e2 || a(o, l) || i(o, l, function() {
            return this;
          }), t2.exports = {
            IteratorPrototype: o,
            BUGGY_SAFARI_ITERATORS: u2
          };
        }, {
          "../internals/create-non-enumerable-property": 38,
          "../internals/has": 61,
          "../internals/is-pure": 76,
          "../internals/object-get-prototype-of": 98,
          "../internals/well-known-symbol": 150
        }],
        80: [function(e2, t2, r2) {
          t2.exports = {};
        }, {}],
        81: [function(e2, t2, r2) {
          t2.exports = Math.sign || function(e3) {
            return 0 == (e3 = +e3) || e3 != e3 ? e3 : e3 < 0 ? -1 : 1;
          };
        }, {}],
        82: [function(e2, t2, r2) {
          var o, n, s2, i, a, l, u2, c, d = e2("../internals/global"), h = e2("../internals/object-get-own-property-descriptor").f, f = e2("../internals/classof-raw"), p = e2("../internals/task").set, e2 = e2("../internals/engine-is-ios"), m = d.MutationObserver || d.WebKitMutationObserver, y = d.process, g = d.Promise, v = "process" == f(y), f = h(d, "queueMicrotask"), h = f && f.value;
          h || (o = function() {
            var e3, t3;
            for (v && (e3 = y.domain) && e3.exit(); n; ) {
              t3 = n.fn, n = n.next;
              try {
                t3();
              } catch (e4) {
                throw n ? i() : s2 = void 0, e4;
              }
            }
            s2 = void 0, e3 && e3.enter();
          }, i = v ? function() {
            y.nextTick(o);
          } : m && !e2 ? (a = true, l = document.createTextNode(""), new m(o).observe(l, {
            characterData: true
          }), function() {
            l.data = a = !a;
          }) : g && g.resolve ? (u2 = g.resolve(void 0), c = u2.then, function() {
            c.call(u2, o);
          }) : function() {
            p.call(d, o);
          }), t2.exports = h || function(e3) {
            e3 = {
              fn: e3,
              next: void 0
            };
            s2 && (s2.next = e3), n || (n = e3, i()), s2 = e3;
          };
        }, {
          "../internals/classof-raw": 28,
          "../internals/engine-is-ios": 46,
          "../internals/global": 60,
          "../internals/object-get-own-property-descriptor": 94,
          "../internals/task": 132
        }],
        83: [function(e2, t2, r2) {
          e2 = e2("../internals/global");
          t2.exports = e2.Promise;
        }, {
          "../internals/global": 60
        }],
        84: [function(e2, t2, r2) {
          e2 = e2("../internals/fails");
          t2.exports = !!Object.getOwnPropertySymbols && !e2(function() {
            return !String(Symbol());
          });
        }, {
          "../internals/fails": 51
        }],
        85: [function(e2, t2, r2) {
          var o = e2("../internals/fails"), n = e2("../internals/well-known-symbol"), s2 = e2("../internals/is-pure"), i = n("iterator");
          t2.exports = !o(function() {
            var e3 = new URL("b?a=1&b=2&c=3", "http://a"), r3 = e3.searchParams, o2 = "";
            return e3.pathname = "c%20d", r3.forEach(function(e4, t3) {
              r3.delete("b"), o2 += t3 + e4;
            }), s2 && !e3.toJSON || !r3.sort || "http://a/c%20d?a=1&c=3" !== e3.href || "3" !== r3.get("c") || "a=1" !== String(new URLSearchParams("?a=1")) || !r3[i] || "a" !== new URL("https://a@b").username || "b" !== new URLSearchParams(new URLSearchParams("a=b")).get("a") || "xn--e1aybc" !== new URL("http://\u0442\u0435\u0441\u0442").host || "#%D0%B1" !== new URL("http://a#\u0431").hash || "a1c3" !== o2 || "x" !== new URL("http://x", void 0).host;
          });
        }, {
          "../internals/fails": 51,
          "../internals/is-pure": 76,
          "../internals/well-known-symbol": 150
        }],
        86: [function(e2, t2, r2) {
          var o = e2("../internals/global"), e2 = e2("../internals/inspect-source"), o = o.WeakMap;
          t2.exports = "function" == typeof o && /native code/.test(e2(o));
        }, {
          "../internals/global": 60,
          "../internals/inspect-source": 69
        }],
        87: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            var r3, o2;
            this.promise = new e3(function(e4, t3) {
              if (void 0 !== r3 || void 0 !== o2) throw TypeError("Bad Promise constructor");
              r3 = e4, o2 = t3;
            }), this.resolve = n(r3), this.reject = n(o2);
          }
          var n = e2("../internals/a-function");
          t2.exports.f = function(e3) {
            return new o(e3);
          };
        }, {
          "../internals/a-function": 5
        }],
        88: [function(e2, t2, r2) {
          var o = e2("../internals/is-regexp");
          t2.exports = function(e3) {
            if (o(e3)) throw TypeError("The method doesn't accept regular expressions");
            return e3;
          };
        }, {
          "../internals/is-regexp": 77
        }],
        89: [function(e2, t2, r2) {
          var o = e2("../internals/global").isFinite;
          t2.exports = Number.isFinite || function(e3) {
            return "number" == typeof e3 && o(e3);
          };
        }, {
          "../internals/global": 60
        }],
        90: [function(e2, t2, r2) {
          "use strict";
          var h = e2("../internals/descriptors"), o = e2("../internals/fails"), f = e2("../internals/object-keys"), p = e2("../internals/object-get-own-property-symbols"), m = e2("../internals/object-property-is-enumerable"), y = e2("../internals/to-object"), g = e2("../internals/indexed-object"), n = Object.assign, s2 = Object.defineProperty;
          t2.exports = !n || o(function() {
            var e3, t3, r3, o2;
            return !(!h || 1 === n({
              b: 1
            }, n(s2({}, "a", {
              enumerable: true,
              get: function() {
                s2(this, "b", {
                  value: 3,
                  enumerable: false
                });
              }
            }), {
              b: 2
            })).b) || (t3 = {}, o2 = "abcdefghijklmnopqrst", (e3 = {})[r3 = Symbol()] = 7, o2.split("").forEach(function(e4) {
              t3[e4] = e4;
            }), 7 != n({}, e3)[r3] || f(n({}, t3)).join("") != o2);
          }) ? function(e3, t3) {
            for (var r3 = y(e3), o2 = arguments.length, n2 = 1, s3 = p.f, i = m.f; n2 < o2; ) for (var a, l = g(arguments[n2++]), u2 = s3 ? f(l).concat(s3(l)) : f(l), c = u2.length, d = 0; d < c; ) a = u2[d++], h && !i.call(l, a) || (r3[a] = l[a]);
            return r3;
          } : n;
        }, {
          "../internals/descriptors": 43,
          "../internals/fails": 51,
          "../internals/indexed-object": 67,
          "../internals/object-get-own-property-symbols": 97,
          "../internals/object-keys": 100,
          "../internals/object-property-is-enumerable": 101,
          "../internals/to-object": 139
        }],
        91: [function(e2, t2, r2) {
          function o() {
          }
          var n, s2 = e2("../internals/an-object"), i = e2("../internals/object-define-properties"), a = e2("../internals/enum-bug-keys"), l = e2("../internals/hidden-keys"), u2 = e2("../internals/html"), c = e2("../internals/document-create-element"), e2 = e2("../internals/shared-key"), d = "prototype", h = "script", f = e2("IE_PROTO"), p = function(e3) {
            return "<" + h + ">" + e3 + "</" + h + ">";
          }, m = function() {
            try {
              n = document.domain && new ActiveXObject("htmlfile");
            } catch (e4) {
            }
            m = n ? ((e3 = n).write(p("")), e3.close(), t3 = e3.parentWindow.Object, e3 = null, t3) : (e3 = c("iframe"), t3 = "java" + h + ":", e3.style.display = "none", u2.appendChild(e3), e3.src = String(t3), (t3 = e3.contentWindow.document).open(), t3.write(p("document.F=Object")), t3.close(), t3.F);
            for (var e3, t3, r3 = a.length; r3--; ) delete m[d][a[r3]];
            return m();
          };
          l[f] = true, t2.exports = Object.create || function(e3, t3) {
            var r3;
            return null !== e3 ? (o[d] = s2(e3), r3 = new o(), o[d] = null, r3[f] = e3) : r3 = m(), void 0 === t3 ? r3 : i(r3, t3);
          };
        }, {
          "../internals/an-object": 10,
          "../internals/document-create-element": 44,
          "../internals/enum-bug-keys": 49,
          "../internals/hidden-keys": 62,
          "../internals/html": 64,
          "../internals/object-define-properties": 92,
          "../internals/shared-key": 120
        }],
        92: [function(e2, t2, r2) {
          var o = e2("../internals/descriptors"), i = e2("../internals/object-define-property"), a = e2("../internals/an-object"), l = e2("../internals/object-keys");
          t2.exports = o ? Object.defineProperties : function(e3, t3) {
            a(e3);
            for (var r3, o2 = l(t3), n = o2.length, s2 = 0; s2 < n; ) i.f(e3, r3 = o2[s2++], t3[r3]);
            return e3;
          };
        }, {
          "../internals/an-object": 10,
          "../internals/descriptors": 43,
          "../internals/object-define-property": 93,
          "../internals/object-keys": 100
        }],
        93: [function(e2, t2, r2) {
          var o = e2("../internals/descriptors"), n = e2("../internals/ie8-dom-define"), s2 = e2("../internals/an-object"), i = e2("../internals/to-primitive"), a = Object.defineProperty;
          r2.f = o ? a : function(e3, t3, r3) {
            if (s2(e3), t3 = i(t3, true), s2(r3), n) try {
              return a(e3, t3, r3);
            } catch (e4) {
            }
            if ("get" in r3 || "set" in r3) throw TypeError("Accessors not supported");
            return "value" in r3 && (e3[t3] = r3.value), e3;
          };
        }, {
          "../internals/an-object": 10,
          "../internals/descriptors": 43,
          "../internals/ie8-dom-define": 65,
          "../internals/to-primitive": 142
        }],
        94: [function(e2, t2, r2) {
          var o = e2("../internals/descriptors"), n = e2("../internals/object-property-is-enumerable"), s2 = e2("../internals/create-property-descriptor"), i = e2("../internals/to-indexed-object"), a = e2("../internals/to-primitive"), l = e2("../internals/has"), u2 = e2("../internals/ie8-dom-define"), c = Object.getOwnPropertyDescriptor;
          r2.f = o ? c : function(e3, t3) {
            if (e3 = i(e3), t3 = a(t3, true), u2) try {
              return c(e3, t3);
            } catch (e4) {
            }
            if (l(e3, t3)) return s2(!n.f.call(e3, t3), e3[t3]);
          };
        }, {
          "../internals/create-property-descriptor": 39,
          "../internals/descriptors": 43,
          "../internals/has": 61,
          "../internals/ie8-dom-define": 65,
          "../internals/object-property-is-enumerable": 101,
          "../internals/to-indexed-object": 136,
          "../internals/to-primitive": 142
        }],
        95: [function(e2, t2, r2) {
          var o = e2("../internals/to-indexed-object"), n = e2("../internals/object-get-own-property-names").f, s2 = {}.toString, i = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
          t2.exports.f = function(e3) {
            if (!i || "[object Window]" != s2.call(e3)) return n(o(e3));
            try {
              return n(e3);
            } catch (e4) {
              return i.slice();
            }
          };
        }, {
          "../internals/object-get-own-property-names": 96,
          "../internals/to-indexed-object": 136
        }],
        96: [function(e2, t2, r2) {
          var o = e2("../internals/object-keys-internal"), n = e2("../internals/enum-bug-keys").concat("length", "prototype");
          r2.f = Object.getOwnPropertyNames || function(e3) {
            return o(e3, n);
          };
        }, {
          "../internals/enum-bug-keys": 49,
          "../internals/object-keys-internal": 99
        }],
        97: [function(e2, t2, r2) {
          r2.f = Object.getOwnPropertySymbols;
        }, {}],
        98: [function(e2, t2, r2) {
          var o = e2("../internals/has"), n = e2("../internals/to-object"), s2 = e2("../internals/shared-key"), e2 = e2("../internals/correct-prototype-getter"), i = s2("IE_PROTO"), a = Object.prototype;
          t2.exports = e2 ? Object.getPrototypeOf : function(e3) {
            return e3 = n(e3), o(e3, i) ? e3[i] : "function" == typeof e3.constructor && e3 instanceof e3.constructor ? e3.constructor.prototype : e3 instanceof Object ? a : null;
          };
        }, {
          "../internals/correct-prototype-getter": 35,
          "../internals/has": 61,
          "../internals/shared-key": 120,
          "../internals/to-object": 139
        }],
        99: [function(e2, t2, r2) {
          var i = e2("../internals/has"), a = e2("../internals/to-indexed-object"), l = e2("../internals/array-includes").indexOf, u2 = e2("../internals/hidden-keys");
          t2.exports = function(e3, t3) {
            var r3, o = a(e3), n = 0, s2 = [];
            for (r3 in o) !i(u2, r3) && i(o, r3) && s2.push(r3);
            for (; t3.length > n; ) !i(o, r3 = t3[n++]) || ~l(s2, r3) || s2.push(r3);
            return s2;
          };
        }, {
          "../internals/array-includes": 18,
          "../internals/has": 61,
          "../internals/hidden-keys": 62,
          "../internals/to-indexed-object": 136
        }],
        100: [function(e2, t2, r2) {
          var o = e2("../internals/object-keys-internal"), n = e2("../internals/enum-bug-keys");
          t2.exports = Object.keys || function(e3) {
            return o(e3, n);
          };
        }, {
          "../internals/enum-bug-keys": 49,
          "../internals/object-keys-internal": 99
        }],
        101: [function(e2, t2, r2) {
          "use strict";
          var o = {}.propertyIsEnumerable, n = Object.getOwnPropertyDescriptor, s2 = n && !o.call({
            1: 2
          }, 1);
          r2.f = s2 ? function(e3) {
            e3 = n(this, e3);
            return !!e3 && e3.enumerable;
          } : o;
        }, {}],
        102: [function(e2, t2, r2) {
          var n = e2("../internals/an-object"), s2 = e2("../internals/a-possible-prototype");
          t2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
            var r3, o = false, e3 = {};
            try {
              (r3 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(e3, []), o = e3 instanceof Array;
            } catch (e4) {
            }
            return function(e4, t3) {
              return n(e4), s2(t3), o ? r3.call(e4, t3) : e4.__proto__ = t3, e4;
            };
          }() : void 0);
        }, {
          "../internals/a-possible-prototype": 6,
          "../internals/an-object": 10
        }],
        103: [function(e2, t2, r2) {
          function o(a) {
            return function(e3) {
              for (var t3, r3 = c(e3), o2 = u2(r3), n = o2.length, s2 = 0, i = []; s2 < n; ) t3 = o2[s2++], l && !d.call(r3, t3) || i.push(a ? [t3, r3[t3]] : r3[t3]);
              return i;
            };
          }
          var l = e2("../internals/descriptors"), u2 = e2("../internals/object-keys"), c = e2("../internals/to-indexed-object"), d = e2("../internals/object-property-is-enumerable").f;
          t2.exports = {
            entries: o(true),
            values: o(false)
          };
        }, {
          "../internals/descriptors": 43,
          "../internals/object-keys": 100,
          "../internals/object-property-is-enumerable": 101,
          "../internals/to-indexed-object": 136
        }],
        104: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/to-string-tag-support"), n = e2("../internals/classof");
          t2.exports = o ? {}.toString : function() {
            return "[object " + n(this) + "]";
          };
        }, {
          "../internals/classof": 29,
          "../internals/to-string-tag-support": 143
        }],
        105: [function(e2, t2, r2) {
          var o = e2("../internals/get-built-in"), n = e2("../internals/object-get-own-property-names"), s2 = e2("../internals/object-get-own-property-symbols"), i = e2("../internals/an-object");
          t2.exports = o("Reflect", "ownKeys") || function(e3) {
            var t3 = n.f(i(e3)), r3 = s2.f;
            return r3 ? t3.concat(r3(e3)) : t3;
          };
        }, {
          "../internals/an-object": 10,
          "../internals/get-built-in": 57,
          "../internals/object-get-own-property-names": 96,
          "../internals/object-get-own-property-symbols": 97
        }],
        106: [function(e2, t2, r2) {
          e2 = e2("../internals/global");
          t2.exports = e2;
        }, {
          "../internals/global": 60
        }],
        107: [function(e2, t2, r2) {
          t2.exports = function(e3) {
            try {
              return {
                error: false,
                value: e3()
              };
            } catch (e4) {
              return {
                error: true,
                value: e4
              };
            }
          };
        }, {}],
        108: [function(e2, t2, r2) {
          var o = e2("../internals/an-object"), n = e2("../internals/is-object"), s2 = e2("../internals/new-promise-capability");
          t2.exports = function(e3, t3) {
            return o(e3), n(t3) && t3.constructor === e3 ? t3 : ((0, (e3 = s2.f(e3)).resolve)(t3), e3.promise);
          };
        }, {
          "../internals/an-object": 10,
          "../internals/is-object": 75,
          "../internals/new-promise-capability": 87
        }],
        109: [function(e2, t2, r2) {
          var n = e2("../internals/redefine");
          t2.exports = function(e3, t3, r3) {
            for (var o in t3) n(e3, o, t3[o], r3);
            return e3;
          };
        }, {
          "../internals/redefine": 110
        }],
        110: [function(e2, t2, r2) {
          var i = e2("../internals/global"), a = e2("../internals/create-non-enumerable-property"), l = e2("../internals/has"), u2 = e2("../internals/set-global"), o = e2("../internals/inspect-source"), e2 = e2("../internals/internal-state"), n = e2.get, c = e2.enforce, d = String(String).split("String");
          (t2.exports = function(e3, t3, r3, o2) {
            var n2 = !!o2 && !!o2.unsafe, s2 = !!o2 && !!o2.enumerable, o2 = !!o2 && !!o2.noTargetGet;
            "function" == typeof r3 && ("string" != typeof t3 || l(r3, "name") || a(r3, "name", t3), c(r3).source = d.join("string" == typeof t3 ? t3 : "")), e3 === i ? s2 ? e3[t3] = r3 : u2(t3, r3) : (n2 ? !o2 && e3[t3] && (s2 = true) : delete e3[t3], s2 ? e3[t3] = r3 : a(e3, t3, r3));
          })(Function.prototype, "toString", function() {
            return "function" == typeof this && n(this).source || o(this);
          });
        }, {
          "../internals/create-non-enumerable-property": 38,
          "../internals/global": 60,
          "../internals/has": 61,
          "../internals/inspect-source": 69,
          "../internals/internal-state": 71,
          "../internals/set-global": 117
        }],
        111: [function(e2, t2, r2) {
          var o = e2("./classof-raw"), n = e2("./regexp-exec");
          t2.exports = function(e3, t3) {
            var r3 = e3.exec;
            if ("function" == typeof r3) {
              r3 = r3.call(e3, t3);
              if ("object" != typeof r3) throw TypeError("RegExp exec method returned something other than an Object or null");
              return r3;
            }
            if ("RegExp" !== o(e3)) throw TypeError("RegExp#exec called on incompatible receiver");
            return n.call(e3, t3);
          };
        }, {
          "./classof-raw": 28,
          "./regexp-exec": 112
        }],
        112: [function(e2, t2, r2) {
          "use strict";
          var o, n, d = e2("./regexp-flags"), e2 = e2("./regexp-sticky-helpers"), h = RegExp.prototype.exec, f = String.prototype.replace, s2 = h, p = (o = /a/, n = /b*/g, h.call(o, "a"), h.call(n, "a"), 0 !== o.lastIndex || 0 !== n.lastIndex), m = e2.UNSUPPORTED_Y || e2.BROKEN_CARET, y = void 0 !== /()??/.exec("")[1];
          t2.exports = s2 = p || y || m ? function(e3) {
            var t3, r3, o2, n2, s3 = this, i = m && s3.sticky, a = d.call(s3), l = s3.source, u2 = 0, c = e3;
            return i && (-1 === (a = a.replace("y", "")).indexOf("g") && (a += "g"), c = String(e3).slice(s3.lastIndex), 0 < s3.lastIndex && (!s3.multiline || s3.multiline && "\n" !== e3[s3.lastIndex - 1]) && (l = "(?: " + l + ")", c = " " + c, u2++), r3 = new RegExp("^(?:" + l + ")", a)), y && (r3 = new RegExp("^" + l + "$(?!\\s)", a)), p && (t3 = s3.lastIndex), o2 = h.call(i ? r3 : s3, c), i ? o2 ? (o2.input = o2.input.slice(u2), o2[0] = o2[0].slice(u2), o2.index = s3.lastIndex, s3.lastIndex += o2[0].length) : s3.lastIndex = 0 : p && o2 && (s3.lastIndex = s3.global ? o2.index + o2[0].length : t3), y && o2 && 1 < o2.length && f.call(o2[0], r3, function() {
              for (n2 = 1; n2 < arguments.length - 2; n2++) void 0 === arguments[n2] && (o2[n2] = void 0);
            }), o2;
          } : s2;
        }, {
          "./regexp-flags": 113,
          "./regexp-sticky-helpers": 114
        }],
        113: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/an-object");
          t2.exports = function() {
            var e3 = o(this), t3 = "";
            return e3.global && (t3 += "g"), e3.ignoreCase && (t3 += "i"), e3.multiline && (t3 += "m"), e3.dotAll && (t3 += "s"), e3.unicode && (t3 += "u"), e3.sticky && (t3 += "y"), t3;
          };
        }, {
          "../internals/an-object": 10
        }],
        114: [function(e2, t2, r2) {
          "use strict";
          e2 = e2("./fails");
          function o(e3, t3) {
            return RegExp(e3, t3);
          }
          r2.UNSUPPORTED_Y = e2(function() {
            var e3 = o("a", "y");
            return e3.lastIndex = 2, null != e3.exec("abcd");
          }), r2.BROKEN_CARET = e2(function() {
            var e3 = o("^r", "gy");
            return e3.lastIndex = 2, null != e3.exec("str");
          });
        }, {
          "./fails": 51
        }],
        115: [function(e2, t2, r2) {
          t2.exports = function(e3) {
            if (null == e3) throw TypeError("Can't call method on " + e3);
            return e3;
          };
        }, {}],
        116: [function(e2, t2, r2) {
          t2.exports = Object.is || function(e3, t3) {
            return e3 === t3 ? 0 !== e3 || 1 / e3 == 1 / t3 : e3 != e3 && t3 != t3;
          };
        }, {}],
        117: [function(e2, t2, r2) {
          var o = e2("../internals/global"), n = e2("../internals/create-non-enumerable-property");
          t2.exports = function(t3, r3) {
            try {
              n(o, t3, r3);
            } catch (e3) {
              o[t3] = r3;
            }
            return r3;
          };
        }, {
          "../internals/create-non-enumerable-property": 38,
          "../internals/global": 60
        }],
        118: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/get-built-in"), n = e2("../internals/object-define-property"), s2 = e2("../internals/well-known-symbol"), i = e2("../internals/descriptors"), a = s2("species");
          t2.exports = function(e3) {
            var e3 = o(e3), t3 = n.f;
            i && e3 && !e3[a] && t3(e3, a, {
              configurable: true,
              get: function() {
                return this;
              }
            });
          };
        }, {
          "../internals/descriptors": 43,
          "../internals/get-built-in": 57,
          "../internals/object-define-property": 93,
          "../internals/well-known-symbol": 150
        }],
        119: [function(e2, t2, r2) {
          var o = e2("../internals/object-define-property").f, n = e2("../internals/has"), s2 = e2("../internals/well-known-symbol")("toStringTag");
          t2.exports = function(e3, t3, r3) {
            e3 && !n(e3 = r3 ? e3 : e3.prototype, s2) && o(e3, s2, {
              configurable: true,
              value: t3
            });
          };
        }, {
          "../internals/has": 61,
          "../internals/object-define-property": 93,
          "../internals/well-known-symbol": 150
        }],
        120: [function(e2, t2, r2) {
          var o = e2("../internals/shared"), n = e2("../internals/uid"), s2 = o("keys");
          t2.exports = function(e3) {
            return s2[e3] || (s2[e3] = n(e3));
          };
        }, {
          "../internals/shared": 122,
          "../internals/uid": 147
        }],
        121: [function(e2, t2, r2) {
          var o = e2("../internals/global"), e2 = e2("../internals/set-global"), n = "__core-js_shared__", o = o[n] || e2(n, {});
          t2.exports = o;
        }, {
          "../internals/global": 60,
          "../internals/set-global": 117
        }],
        122: [function(e2, t2, r2) {
          var o = e2("../internals/is-pure"), n = e2("../internals/shared-store");
          (t2.exports = function(e3, t3) {
            return n[e3] || (n[e3] = void 0 !== t3 ? t3 : {});
          })("versions", []).push({
            version: "3.6.5",
            mode: o ? "pure" : "global",
            copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)"
          });
        }, {
          "../internals/is-pure": 76,
          "../internals/shared-store": 121
        }],
        123: [function(e2, t2, r2) {
          var o = e2("../internals/an-object"), n = e2("../internals/a-function"), s2 = e2("../internals/well-known-symbol")("species");
          t2.exports = function(e3, t3) {
            var e3 = o(e3).constructor;
            return void 0 === e3 || null == (e3 = o(e3)[s2]) ? t3 : n(e3);
          };
        }, {
          "../internals/a-function": 5,
          "../internals/an-object": 10,
          "../internals/well-known-symbol": 150
        }],
        124: [function(e2, t2, r2) {
          var o = e2("../internals/fails");
          t2.exports = function(t3) {
            return o(function() {
              var e3 = ""[t3]('"');
              return e3 !== e3.toLowerCase() || 3 < e3.split('"').length;
            });
          };
        }, {
          "../internals/fails": 51
        }],
        125: [function(e2, t2, r2) {
          function o(n) {
            return function(e3, t3) {
              var r3, e3 = String(i(e3)), t3 = s2(t3), o2 = e3.length;
              return t3 < 0 || o2 <= t3 ? n ? "" : void 0 : (r3 = e3.charCodeAt(t3)) < 55296 || 56319 < r3 || t3 + 1 === o2 || (o2 = e3.charCodeAt(t3 + 1)) < 56320 || 57343 < o2 ? n ? e3.charAt(t3) : r3 : n ? e3.slice(t3, t3 + 2) : o2 - 56320 + (r3 - 55296 << 10) + 65536;
            };
          }
          var s2 = e2("../internals/to-integer"), i = e2("../internals/require-object-coercible");
          t2.exports = {
            codeAt: o(false),
            charAt: o(true)
          };
        }, {
          "../internals/require-object-coercible": 115,
          "../internals/to-integer": 137
        }],
        126: [function(e2, t2, r2) {
          e2 = e2("../internals/engine-user-agent");
          t2.exports = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(e2);
        }, {
          "../internals/engine-user-agent": 47
        }],
        127: [function(e2, t2, r2) {
          function o(n) {
            return function(e3, t3, r3) {
              var e3 = String(a(e3)), o2 = e3.length, r3 = void 0 === r3 ? " " : String(r3), t3 = s2(t3);
              return t3 <= o2 || "" == r3 ? e3 : ((o2 = i.call(r3, l((t3 = t3 - o2) / r3.length))).length > t3 && (o2 = o2.slice(0, t3)), n ? e3 + o2 : o2 + e3);
            };
          }
          var s2 = e2("../internals/to-length"), i = e2("../internals/string-repeat"), a = e2("../internals/require-object-coercible"), l = Math.ceil;
          t2.exports = {
            start: o(false),
            end: o(true)
          };
        }, {
          "../internals/require-object-coercible": 115,
          "../internals/string-repeat": 129,
          "../internals/to-length": 138
        }],
        128: [function(e2, t2, r2) {
          "use strict";
          function g(e3) {
            return e3 + 22 + 75 * (e3 < 26);
          }
          function s2(e3) {
            var t3, r3 = [], o = (e3 = function(e4) {
              for (var t4 = [], r4 = 0, o2 = e4.length; r4 < o2; ) {
                var n2, s4 = e4.charCodeAt(r4++);
                55296 <= s4 && s4 <= 56319 && r4 < o2 ? 56320 == (64512 & (n2 = e4.charCodeAt(r4++))) ? t4.push(((1023 & s4) << 10) + (1023 & n2) + 65536) : (t4.push(s4), r4--) : t4.push(s4);
              }
              return t4;
            }(e3)).length, n = 128, s3 = 0, i2 = 72;
            for (c = 0; c < e3.length; c++) (t3 = e3[c]) < 128 && r3.push(E(t3));
            var a2 = r3.length, l = a2;
            for (a2 && r3.push("-"); l < o; ) {
              for (var u2 = v, c = 0; c < e3.length; c++) n <= (t3 = e3[c]) && t3 < u2 && (u2 = t3);
              var d = l + 1;
              if (u2 - n > T((v - s3) / d)) throw RangeError(w);
              for (s3 += (u2 - n) * d, n = u2, c = 0; c < e3.length; c++) {
                if ((t3 = e3[c]) < n && ++s3 > v) throw RangeError(w);
                if (t3 == n) {
                  for (var h = s3, f = b; ; f += b) {
                    var p = f <= i2 ? 1 : i2 + _ <= f ? _ : f - i2;
                    if (h < p) break;
                    var m = h - p, y = b - p;
                    r3.push(E(g(p + m % y))), h = T(m / y);
                  }
                  r3.push(E(g(h))), i2 = function(e4, t4, r4) {
                    var o2 = 0;
                    for (e4 = r4 ? T(e4 / x) : e4 >> 1, e4 += T(e4 / t4); S * _ >> 1 < e4; o2 += b) e4 = T(e4 / S);
                    return T(o2 + (S + 1) * e4 / (e4 + j));
                  }(s3, d, l == a2), s3 = 0, ++l;
                }
              }
              ++s3, ++n;
            }
            return r3.join("");
          }
          var v = 2147483647, b = 36, _ = 26, j = 38, x = 700, i = /[^\0-\u007E]/, a = /[.\u3002\uFF0E\uFF61]/g, w = "Overflow: input needs wider integers to process", S = b - 1, T = Math.floor, E = String.fromCharCode;
          t2.exports = function(e3) {
            for (var t3, r3 = [], o = e3.toLowerCase().replace(a, ".").split("."), n = 0; n < o.length; n++) t3 = o[n], r3.push(i.test(t3) ? "xn--" + s2(t3) : t3);
            return r3.join(".");
          };
        }, {}],
        129: [function(e2, t2, r2) {
          "use strict";
          var n = e2("../internals/to-integer"), s2 = e2("../internals/require-object-coercible");
          t2.exports = "".repeat || function(e3) {
            var t3 = String(s2(this)), r3 = "", o = n(e3);
            if (o < 0 || o == 1 / 0) throw RangeError("Wrong number of repetitions");
            for (; 0 < o; (o >>>= 1) && (t3 += t3)) 1 & o && (r3 += t3);
            return r3;
          };
        }, {
          "../internals/require-object-coercible": 115,
          "../internals/to-integer": 137
        }],
        130: [function(e2, t2, r2) {
          var o = e2("../internals/fails"), n = e2("../internals/whitespaces");
          t2.exports = function(e3) {
            return o(function() {
              return !!n[e3]() || "\u200B\x85\u180E" != "\u200B\x85\u180E"[e3]() || n[e3].name !== e3;
            });
          };
        }, {
          "../internals/fails": 51,
          "../internals/whitespaces": 151
        }],
        131: [function(e2, t2, r2) {
          function o(t3) {
            return function(e3) {
              e3 = String(n(e3));
              return 1 & t3 && (e3 = e3.replace(s2, "")), e3 = 2 & t3 ? e3.replace(i, "") : e3;
            };
          }
          var n = e2("../internals/require-object-coercible"), e2 = "[" + e2("../internals/whitespaces") + "]", s2 = RegExp("^" + e2 + e2 + "*"), i = RegExp(e2 + e2 + "*$");
          t2.exports = {
            start: o(1),
            end: o(2),
            trim: o(3)
          };
        }, {
          "../internals/require-object-coercible": 115,
          "../internals/whitespaces": 151
        }],
        132: [function(e2, t2, r2) {
          function o(e3) {
            return function() {
              x(e3);
            };
          }
          function n(e3) {
            x(e3.data);
          }
          function s2(e3) {
            a.postMessage(e3 + "", f.protocol + "//" + f.host);
          }
          var i, a = e2("../internals/global"), l = e2("../internals/fails"), u2 = e2("../internals/classof-raw"), c = e2("../internals/function-bind-context"), d = e2("../internals/html"), h = e2("../internals/document-create-element"), e2 = e2("../internals/engine-is-ios"), f = a.location, p = a.setImmediate, m = a.clearImmediate, y = a.process, g = a.MessageChannel, v = a.Dispatch, b = 0, _ = {}, j = "onreadystatechange", x = function(e3) {
            var t3;
            _.hasOwnProperty(e3) && (t3 = _[e3], delete _[e3], t3());
          };
          p && m || (p = function(e3) {
            for (var t3 = [], r3 = 1; r3 < arguments.length; ) t3.push(arguments[r3++]);
            return _[++b] = function() {
              ("function" == typeof e3 ? e3 : Function(e3)).apply(void 0, t3);
            }, i(b), b;
          }, m = function(e3) {
            delete _[e3];
          }, "process" == u2(y) ? i = function(e3) {
            y.nextTick(o(e3));
          } : v && v.now ? i = function(e3) {
            v.now(o(e3));
          } : g && !e2 ? (e2 = (u2 = new g()).port2, u2.port1.onmessage = n, i = c(e2.postMessage, e2, 1)) : !a.addEventListener || "function" != typeof postMessage || a.importScripts || l(s2) || "file:" === f.protocol ? i = j in h("script") ? function(e3) {
            d.appendChild(h("script"))[j] = function() {
              d.removeChild(this), x(e3);
            };
          } : function(e3) {
            setTimeout(o(e3), 0);
          } : (i = s2, a.addEventListener("message", n, false))), t2.exports = {
            set: p,
            clear: m
          };
        }, {
          "../internals/classof-raw": 28,
          "../internals/document-create-element": 44,
          "../internals/engine-is-ios": 46,
          "../internals/fails": 51,
          "../internals/function-bind-context": 55,
          "../internals/global": 60,
          "../internals/html": 64
        }],
        133: [function(e2, t2, r2) {
          var o = e2("../internals/classof-raw");
          t2.exports = function(e3) {
            if ("number" != typeof e3 && "Number" != o(e3)) throw TypeError("Incorrect invocation");
            return +e3;
          };
        }, {
          "../internals/classof-raw": 28
        }],
        134: [function(e2, t2, r2) {
          var o = e2("../internals/to-integer"), n = Math.max, s2 = Math.min;
          t2.exports = function(e3, t3) {
            e3 = o(e3);
            return e3 < 0 ? n(e3 + t3, 0) : s2(e3, t3);
          };
        }, {
          "../internals/to-integer": 137
        }],
        135: [function(e2, t2, r2) {
          var o = e2("../internals/to-integer"), n = e2("../internals/to-length");
          t2.exports = function(e3) {
            if (void 0 === e3) return 0;
            var e3 = o(e3), t3 = n(e3);
            if (e3 !== t3) throw RangeError("Wrong length or index");
            return t3;
          };
        }, {
          "../internals/to-integer": 137,
          "../internals/to-length": 138
        }],
        136: [function(e2, t2, r2) {
          var o = e2("../internals/indexed-object"), n = e2("../internals/require-object-coercible");
          t2.exports = function(e3) {
            return o(n(e3));
          };
        }, {
          "../internals/indexed-object": 67,
          "../internals/require-object-coercible": 115
        }],
        137: [function(e2, t2, r2) {
          var o = Math.ceil, n = Math.floor;
          t2.exports = function(e3) {
            return isNaN(e3 = +e3) ? 0 : (0 < e3 ? n : o)(e3);
          };
        }, {}],
        138: [function(e2, t2, r2) {
          var o = e2("../internals/to-integer"), n = Math.min;
          t2.exports = function(e3) {
            return 0 < e3 ? n(o(e3), 9007199254740991) : 0;
          };
        }, {
          "../internals/to-integer": 137
        }],
        139: [function(e2, t2, r2) {
          var o = e2("../internals/require-object-coercible");
          t2.exports = function(e3) {
            return Object(o(e3));
          };
        }, {
          "../internals/require-object-coercible": 115
        }],
        140: [function(e2, t2, r2) {
          var o = e2("../internals/to-positive-integer");
          t2.exports = function(e3, t3) {
            e3 = o(e3);
            if (e3 % t3) throw RangeError("Wrong offset");
            return e3;
          };
        }, {
          "../internals/to-positive-integer": 141
        }],
        141: [function(e2, t2, r2) {
          var o = e2("../internals/to-integer");
          t2.exports = function(e3) {
            e3 = o(e3);
            if (e3 < 0) throw RangeError("The argument can't be less than 0");
            return e3;
          };
        }, {
          "../internals/to-integer": 137
        }],
        142: [function(e2, t2, r2) {
          var n = e2("../internals/is-object");
          t2.exports = function(e3, t3) {
            if (!n(e3)) return e3;
            var r3, o;
            if (t3 && "function" == typeof (r3 = e3.toString) && !n(o = r3.call(e3)) || "function" == typeof (r3 = e3.valueOf) && !n(o = r3.call(e3)) || !t3 && "function" == typeof (r3 = e3.toString) && !n(o = r3.call(e3))) return o;
            throw TypeError("Can't convert object to primitive value");
          };
        }, {
          "../internals/is-object": 75
        }],
        143: [function(e2, t2, r2) {
          var o = {};
          o[e2("../internals/well-known-symbol")("toStringTag")] = "z", t2.exports = "[object z]" === String(o);
        }, {
          "../internals/well-known-symbol": 150
        }],
        144: [function(e2, t2, D) {
          "use strict";
          function f(e3, t3) {
            for (var r3 = 0, o2 = t3.length, n2 = new (K(e3))(o2); r3 < o2; ) n2[r3] = t3[r3++];
            return n2;
          }
          function r2(e3, t3) {
            E(e3, t3, {
              get: function() {
                return T(this)[t3];
              }
            });
          }
          function p(e3) {
            return e3 instanceof k || "ArrayBuffer" == (e3 = B(e3)) || "SharedArrayBuffer" == e3;
          }
          function o(e3, t3) {
            return L(e3) && "symbol" != typeof t3 && t3 in e3 && String(+t3) == String(t3);
          }
          function n(e3, t3) {
            return o(e3, t3 = d(t3, true)) ? U(2, e3[t3]) : X(e3, t3);
          }
          function s2(e3, t3, r3) {
            return !(o(e3, t3 = d(t3, true)) && b(r3) && h(r3, "value")) || h(r3, "get") || h(r3, "set") || r3.configurable || h(r3, "writable") && !r3.writable || h(r3, "enumerable") && !r3.enumerable ? E(e3, t3, r3) : (e3[t3] = r3.value, e3);
          }
          var a = e2("../internals/export"), l = e2("../internals/global"), i = e2("../internals/descriptors"), F = e2("../internals/typed-array-constructors-require-wrappers"), u2 = e2("../internals/array-buffer-view-core"), c = e2("../internals/array-buffer"), m = e2("../internals/an-instance"), U = e2("../internals/create-property-descriptor"), y = e2("../internals/create-non-enumerable-property"), N = e2("../internals/to-length"), g = e2("../internals/to-index"), v = e2("../internals/to-offset"), d = e2("../internals/to-primitive"), h = e2("../internals/has"), B = e2("../internals/classof"), b = e2("../internals/is-object"), G = e2("../internals/object-create"), _ = e2("../internals/object-set-prototype-of"), V = e2("../internals/object-get-own-property-names").f, j = e2("../internals/typed-array-from"), z = e2("../internals/array-iteration").forEach, H = e2("../internals/set-species"), x = e2("../internals/object-define-property"), w = e2("../internals/object-get-own-property-descriptor"), S = e2("../internals/internal-state"), W = e2("../internals/inherit-if-required"), T = S.get, q = S.set, E = x.f, X = w.f, Y = Math.round, M = l.RangeError, k = c.ArrayBuffer, Z = c.DataView, O = u2.NATIVE_ARRAY_BUFFER_VIEWS, C = u2.TYPED_ARRAY_TAG, A = u2.TypedArray, P = u2.TypedArrayPrototype, K = u2.aTypedArrayConstructor, L = u2.isTypedArray, R = "BYTES_PER_ELEMENT", I = "Wrong length";
          i ? (O || (w.f = n, x.f = s2, r2(P, "buffer"), r2(P, "byteOffset"), r2(P, "byteLength"), r2(P, "length")), a({
            target: "Object",
            stat: true,
            forced: !O
          }, {
            getOwnPropertyDescriptor: n,
            defineProperty: s2
          }), t2.exports = function(e3, t3, n2) {
            function u3(e4, o3) {
              E(e4, o3, {
                get: function() {
                  var e5 = this, t4 = o3;
                  return (e5 = T(e5)).view[r3](t4 * c2 + e5.byteOffset, true);
                },
                set: function(e5) {
                  var t4 = this, r4 = o3;
                  t4 = T(t4), n2 && (e5 = (e5 = Y(e5)) < 0 ? 0 : 255 < e5 ? 255 : 255 & e5), t4.view[s3](r4 * c2 + t4.byteOffset, e5, true);
                },
                enumerable: true
              });
            }
            var c2 = e3.match(/\d+$/)[0] / 8, d2 = e3 + (n2 ? "Clamped" : "") + "Array", r3 = "get" + e3, s3 = "set" + e3, i2 = l[d2], h2 = i2, e3 = h2 && h2.prototype, o2 = {};
            O ? F && (h2 = t3(function(e4, t4, r4, o3) {
              return m(e4, h2, d2), W(b(t4) ? p(t4) ? void 0 !== o3 ? new i2(t4, v(r4, c2), o3) : void 0 !== r4 ? new i2(t4, v(r4, c2)) : new i2(t4) : L(t4) ? f(h2, t4) : j.call(h2, t4) : new i2(g(t4)), e4, h2);
            }), _ && _(h2, A), z(V(i2), function(e4) {
              e4 in h2 || y(h2, e4, i2[e4]);
            }), h2.prototype = e3) : (h2 = t3(function(e4, t4, r4, o3) {
              m(e4, h2, d2);
              var n3, s4, i3 = 0, a2 = 0;
              if (b(t4)) {
                if (!p(t4)) return L(t4) ? f(h2, t4) : j.call(h2, t4);
                var l2 = t4, a2 = v(r4, c2), r4 = t4.byteLength;
                if (void 0 === o3) {
                  if (r4 % c2) throw M(I);
                  if ((n3 = r4 - a2) < 0) throw M(I);
                } else if (r4 < (n3 = N(o3) * c2) + a2) throw M(I);
                s4 = n3 / c2;
              } else s4 = g(t4), l2 = new k(n3 = s4 * c2);
              for (q(e4, {
                buffer: l2,
                byteOffset: a2,
                byteLength: n3,
                length: s4,
                view: new Z(l2)
              }); i3 < s4; ) u3(e4, i3++);
            }), _ && _(h2, A), e3 = h2.prototype = G(P)), e3.constructor !== h2 && y(e3, "constructor", h2), C && y(e3, C, d2), o2[d2] = h2, a({
              global: true,
              forced: h2 != i2,
              sham: !O
            }, o2), R in h2 || y(h2, R, c2), R in e3 || y(e3, R, c2), H(d2);
          }) : t2.exports = function() {
          };
        }, {
          "../internals/an-instance": 9,
          "../internals/array-buffer": 13,
          "../internals/array-buffer-view-core": 12,
          "../internals/array-iteration": 19,
          "../internals/classof": 29,
          "../internals/create-non-enumerable-property": 38,
          "../internals/create-property-descriptor": 39,
          "../internals/descriptors": 43,
          "../internals/export": 50,
          "../internals/global": 60,
          "../internals/has": 61,
          "../internals/inherit-if-required": 68,
          "../internals/internal-state": 71,
          "../internals/is-object": 75,
          "../internals/object-create": 91,
          "../internals/object-define-property": 93,
          "../internals/object-get-own-property-descriptor": 94,
          "../internals/object-get-own-property-names": 96,
          "../internals/object-set-prototype-of": 102,
          "../internals/set-species": 118,
          "../internals/to-index": 135,
          "../internals/to-length": 138,
          "../internals/to-offset": 140,
          "../internals/to-primitive": 142,
          "../internals/typed-array-constructors-require-wrappers": 145,
          "../internals/typed-array-from": 146
        }],
        145: [function(e2, t2, r2) {
          var o = e2("../internals/global"), n = e2("../internals/fails"), s2 = e2("../internals/check-correctness-of-iteration"), e2 = e2("../internals/array-buffer-view-core").NATIVE_ARRAY_BUFFER_VIEWS, i = o.ArrayBuffer, a = o.Int8Array;
          t2.exports = !e2 || !n(function() {
            a(1);
          }) || !n(function() {
            new a(-1);
          }) || !s2(function(e3) {
            new a(), new a(null), new a(1.5), new a(e3);
          }, true) || n(function() {
            return 1 !== new a(new i(2), 1, void 0).length;
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/check-correctness-of-iteration": 27,
          "../internals/fails": 51,
          "../internals/global": 60
        }],
        146: [function(e2, t2, r2) {
          var h = e2("../internals/to-object"), f = e2("../internals/to-length"), p = e2("../internals/get-iterator-method"), m = e2("../internals/is-array-iterator-method"), y = e2("../internals/function-bind-context"), g = e2("../internals/array-buffer-view-core").aTypedArrayConstructor;
          t2.exports = function(e3) {
            var t3, r3, o, n, s2, i, a = h(e3), l = arguments.length, u2 = 1 < l ? arguments[1] : void 0, c = void 0 !== u2, d = p(a);
            if (null != d && !m(d)) for (i = (s2 = d.call(a)).next, a = []; !(n = i.call(s2)).done; ) a.push(n.value);
            for (c && 2 < l && (u2 = y(u2, arguments[2], 2)), r3 = f(a.length), o = new (g(this))(r3), t3 = 0; t3 < r3; t3++) o[t3] = c ? u2(a[t3], t3) : a[t3];
            return o;
          };
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/function-bind-context": 55,
          "../internals/get-iterator-method": 58,
          "../internals/is-array-iterator-method": 72,
          "../internals/to-length": 138,
          "../internals/to-object": 139
        }],
        147: [function(e2, t2, r2) {
          var o = 0, n = Math.random();
          t2.exports = function(e3) {
            return "Symbol(" + String(void 0 === e3 ? "" : e3) + ")_" + (++o + n).toString(36);
          };
        }, {}],
        148: [function(e2, t2, r2) {
          e2 = e2("../internals/native-symbol");
          t2.exports = e2 && !Symbol.sham && "symbol" == typeof Symbol.iterator;
        }, {
          "../internals/native-symbol": 84
        }],
        149: [function(e2, t2, r2) {
          e2 = e2("../internals/well-known-symbol");
          r2.f = e2;
        }, {
          "../internals/well-known-symbol": 150
        }],
        150: [function(e2, t2, r2) {
          var o = e2("../internals/global"), n = e2("../internals/shared"), s2 = e2("../internals/has"), i = e2("../internals/uid"), a = e2("../internals/native-symbol"), e2 = e2("../internals/use-symbol-as-uid"), l = n("wks"), u2 = o.Symbol, c = e2 ? u2 : u2 && u2.withoutSetter || i;
          t2.exports = function(e3) {
            return s2(l, e3) || (a && s2(u2, e3) ? l[e3] = u2[e3] : l[e3] = c("Symbol." + e3)), l[e3];
          };
        }, {
          "../internals/global": 60,
          "../internals/has": 61,
          "../internals/native-symbol": 84,
          "../internals/shared": 122,
          "../internals/uid": 147,
          "../internals/use-symbol-as-uid": 148
        }],
        151: [function(e2, t2, r2) {
          t2.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
        }, {}],
        152: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/global"), s2 = e2("../internals/array-buffer"), e2 = e2("../internals/set-species"), i = "ArrayBuffer", s2 = s2[i];
          o({
            global: true,
            forced: n[i] !== s2
          }, {
            ArrayBuffer: s2
          }), e2(i);
        }, {
          "../internals/array-buffer": 13,
          "../internals/export": 50,
          "../internals/global": 60,
          "../internals/set-species": 118
        }],
        153: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/fails"), d = e2("../internals/is-array"), h = e2("../internals/is-object"), f = e2("../internals/to-object"), p = e2("../internals/to-length"), m = e2("../internals/create-property"), y = e2("../internals/array-species-create"), s2 = e2("../internals/array-method-has-species-support"), i = e2("../internals/well-known-symbol"), e2 = e2("../internals/engine-v8-version"), g = i("isConcatSpreadable"), v = 9007199254740991, b = "Maximum allowed index exceeded", i = 51 <= e2 || !n(function() {
            var e3 = [];
            return e3[g] = false, e3.concat()[0] !== e3;
          }), e2 = s2("concat");
          o({
            target: "Array",
            proto: true,
            forced: !i || !e2
          }, {
            concat: function(e3) {
              for (var t3, r3, o2, n2, s3, i2 = f(this), a = y(i2, 0), l = 0, u2 = -1, c = arguments.length; u2 < c; u2++) if (s3 = void 0, !h(n2 = o2 = -1 === u2 ? i2 : arguments[u2]) || (void 0 !== (s3 = n2[g]) ? !s3 : !d(n2))) {
                if (v <= l) throw TypeError(b);
                m(a, l++, o2);
              } else {
                if (r3 = p(o2.length), v < l + r3) throw TypeError(b);
                for (t3 = 0; t3 < r3; t3++, l++) t3 in o2 && m(a, l, o2[t3]);
              }
              return a.length = l, a;
            }
          });
        }, {
          "../internals/array-method-has-species-support": 21,
          "../internals/array-species-create": 25,
          "../internals/create-property": 40,
          "../internals/engine-v8-version": 48,
          "../internals/export": 50,
          "../internals/fails": 51,
          "../internals/is-array": 73,
          "../internals/is-object": 75,
          "../internals/to-length": 138,
          "../internals/to-object": 139,
          "../internals/well-known-symbol": 150
        }],
        154: [function(e2, t2, r2) {
          var o = e2("../internals/export"), n = e2("../internals/array-copy-within"), e2 = e2("../internals/add-to-unscopables");
          o({
            target: "Array",
            proto: true
          }, {
            copyWithin: n
          }), e2("copyWithin");
        }, {
          "../internals/add-to-unscopables": 7,
          "../internals/array-copy-within": 14,
          "../internals/export": 50
        }],
        155: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/array-iteration").every, s2 = e2("../internals/array-method-is-strict"), e2 = e2("../internals/array-method-uses-to-length"), s2 = s2("every"), e2 = e2("every");
          o({
            target: "Array",
            proto: true,
            forced: !s2 || !e2
          }, {
            every: function(e3) {
              return n(this, e3, 1 < arguments.length ? arguments[1] : void 0);
            }
          });
        }, {
          "../internals/array-iteration": 19,
          "../internals/array-method-is-strict": 22,
          "../internals/array-method-uses-to-length": 23,
          "../internals/export": 50
        }],
        156: [function(e2, t2, r2) {
          var o = e2("../internals/export"), n = e2("../internals/array-fill"), e2 = e2("../internals/add-to-unscopables");
          o({
            target: "Array",
            proto: true
          }, {
            fill: n
          }), e2("fill");
        }, {
          "../internals/add-to-unscopables": 7,
          "../internals/array-fill": 15,
          "../internals/export": 50
        }],
        157: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/array-iteration").filter, s2 = e2("../internals/array-method-has-species-support"), e2 = e2("../internals/array-method-uses-to-length"), s2 = s2("filter"), e2 = e2("filter");
          o({
            target: "Array",
            proto: true,
            forced: !s2 || !e2
          }, {
            filter: function(e3) {
              return n(this, e3, 1 < arguments.length ? arguments[1] : void 0);
            }
          });
        }, {
          "../internals/array-iteration": 19,
          "../internals/array-method-has-species-support": 21,
          "../internals/array-method-uses-to-length": 23,
          "../internals/export": 50
        }],
        158: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/array-iteration").findIndex, s2 = e2("../internals/add-to-unscopables"), e2 = e2("../internals/array-method-uses-to-length"), i = "findIndex", a = true, e2 = e2(i);
          i in [] && Array(1)[i](function() {
            a = false;
          }), o({
            target: "Array",
            proto: true,
            forced: a || !e2
          }, {
            findIndex: function(e3) {
              return n(this, e3, 1 < arguments.length ? arguments[1] : void 0);
            }
          }), s2(i);
        }, {
          "../internals/add-to-unscopables": 7,
          "../internals/array-iteration": 19,
          "../internals/array-method-uses-to-length": 23,
          "../internals/export": 50
        }],
        159: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/flatten-into-array"), s2 = e2("../internals/to-object"), i = e2("../internals/to-length"), a = e2("../internals/a-function"), l = e2("../internals/array-species-create");
          o({
            target: "Array",
            proto: true
          }, {
            flatMap: function(e3) {
              var t3, r3 = s2(this), o2 = i(r3.length);
              return a(e3), (t3 = l(r3, 0)).length = n(t3, r3, r3, o2, 0, 1, e3, 1 < arguments.length ? arguments[1] : void 0), t3;
            }
          });
        }, {
          "../internals/a-function": 5,
          "../internals/array-species-create": 25,
          "../internals/export": 50,
          "../internals/flatten-into-array": 53,
          "../internals/to-length": 138,
          "../internals/to-object": 139
        }],
        160: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/flatten-into-array"), s2 = e2("../internals/to-object"), i = e2("../internals/to-length"), a = e2("../internals/to-integer"), l = e2("../internals/array-species-create");
          o({
            target: "Array",
            proto: true
          }, {
            flat: function() {
              var e3 = arguments.length ? arguments[0] : void 0, t3 = s2(this), r3 = i(t3.length), o2 = l(t3, 0);
              return o2.length = n(o2, t3, t3, r3, 0, void 0 === e3 ? 1 : a(e3)), o2;
            }
          });
        }, {
          "../internals/array-species-create": 25,
          "../internals/export": 50,
          "../internals/flatten-into-array": 53,
          "../internals/to-integer": 137,
          "../internals/to-length": 138,
          "../internals/to-object": 139
        }],
        161: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), e2 = e2("../internals/array-for-each");
          o({
            target: "Array",
            proto: true,
            forced: [].forEach != e2
          }, {
            forEach: e2
          });
        }, {
          "../internals/array-for-each": 16,
          "../internals/export": 50
        }],
        162: [function(e2, t2, r2) {
          var o = e2("../internals/export"), n = e2("../internals/array-from");
          o({
            target: "Array",
            stat: true,
            forced: !e2("../internals/check-correctness-of-iteration")(function(e3) {
              Array.from(e3);
            })
          }, {
            from: n
          });
        }, {
          "../internals/array-from": 17,
          "../internals/check-correctness-of-iteration": 27,
          "../internals/export": 50
        }],
        163: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/array-includes").includes, s2 = e2("../internals/add-to-unscopables");
          o({
            target: "Array",
            proto: true,
            forced: !e2("../internals/array-method-uses-to-length")("indexOf", {
              ACCESSORS: true,
              1: 0
            })
          }, {
            includes: function(e3) {
              return n(this, e3, 1 < arguments.length ? arguments[1] : void 0);
            }
          }), s2("includes");
        }, {
          "../internals/add-to-unscopables": 7,
          "../internals/array-includes": 18,
          "../internals/array-method-uses-to-length": 23,
          "../internals/export": 50
        }],
        164: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/array-includes").indexOf, s2 = e2("../internals/array-method-is-strict"), e2 = e2("../internals/array-method-uses-to-length"), i = [].indexOf, a = !!i && 1 / [1].indexOf(1, -0) < 0, s2 = s2("indexOf"), e2 = e2("indexOf", {
            ACCESSORS: true,
            1: 0
          });
          o({
            target: "Array",
            proto: true,
            forced: a || !s2 || !e2
          }, {
            indexOf: function(e3) {
              return a ? i.apply(this, arguments) || 0 : n(this, e3, 1 < arguments.length ? arguments[1] : void 0);
            }
          });
        }, {
          "../internals/array-includes": 18,
          "../internals/array-method-is-strict": 22,
          "../internals/array-method-uses-to-length": 23,
          "../internals/export": 50
        }],
        165: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/to-indexed-object"), n = e2("../internals/add-to-unscopables"), s2 = e2("../internals/iterators"), i = e2("../internals/internal-state"), e2 = e2("../internals/define-iterator"), a = "Array Iterator", l = i.set, u2 = i.getterFor(a);
          t2.exports = e2(Array, "Array", function(e3, t3) {
            l(this, {
              type: a,
              target: o(e3),
              index: 0,
              kind: t3
            });
          }, function() {
            var e3 = u2(this), t3 = e3.target, r3 = e3.kind, o2 = e3.index++;
            return !t3 || o2 >= t3.length ? {
              value: e3.target = void 0,
              done: true
            } : "keys" == r3 ? {
              value: o2,
              done: false
            } : "values" == r3 ? {
              value: t3[o2],
              done: false
            } : {
              value: [o2, t3[o2]],
              done: false
            };
          }, "values"), s2.Arguments = s2.Array, n("keys"), n("values"), n("entries");
        }, {
          "../internals/add-to-unscopables": 7,
          "../internals/define-iterator": 41,
          "../internals/internal-state": 71,
          "../internals/iterators": 80,
          "../internals/to-indexed-object": 136
        }],
        166: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/indexed-object"), s2 = e2("../internals/to-indexed-object"), e2 = e2("../internals/array-method-is-strict"), i = [].join, n = n != Object, e2 = e2("join", ",");
          o({
            target: "Array",
            proto: true,
            forced: n || !e2
          }, {
            join: function(e3) {
              return i.call(s2(this), void 0 === e3 ? "," : e3);
            }
          });
        }, {
          "../internals/array-method-is-strict": 22,
          "../internals/export": 50,
          "../internals/indexed-object": 67,
          "../internals/to-indexed-object": 136
        }],
        167: [function(e2, t2, r2) {
          var o = e2("../internals/export"), e2 = e2("../internals/array-last-index-of");
          o({
            target: "Array",
            proto: true,
            forced: e2 !== [].lastIndexOf
          }, {
            lastIndexOf: e2
          });
        }, {
          "../internals/array-last-index-of": 20,
          "../internals/export": 50
        }],
        168: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/array-iteration").map, s2 = e2("../internals/array-method-has-species-support"), e2 = e2("../internals/array-method-uses-to-length"), s2 = s2("map"), e2 = e2("map");
          o({
            target: "Array",
            proto: true,
            forced: !s2 || !e2
          }, {
            map: function(e3) {
              return n(this, e3, 1 < arguments.length ? arguments[1] : void 0);
            }
          });
        }, {
          "../internals/array-iteration": 19,
          "../internals/array-method-has-species-support": 21,
          "../internals/array-method-uses-to-length": 23,
          "../internals/export": 50
        }],
        169: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), u2 = e2("../internals/is-object"), c = e2("../internals/is-array"), d = e2("../internals/to-absolute-index"), h = e2("../internals/to-length"), f = e2("../internals/to-indexed-object"), p = e2("../internals/create-property"), n = e2("../internals/well-known-symbol"), s2 = e2("../internals/array-method-has-species-support"), e2 = e2("../internals/array-method-uses-to-length"), s2 = s2("slice"), e2 = e2("slice", {
            ACCESSORS: true,
            0: 0,
            1: 2
          }), m = n("species"), y = [].slice, g = Math.max;
          o({
            target: "Array",
            proto: true,
            forced: !s2 || !e2
          }, {
            slice: function(e3, t3) {
              var r3, o2, n2, s3 = f(this), i = h(s3.length), a = d(e3, i), l = d(void 0 === t3 ? i : t3, i);
              if (c(s3) && ((r3 = "function" == typeof (r3 = s3.constructor) && (r3 === Array || c(r3.prototype)) || u2(r3) && null === (r3 = r3[m]) ? void 0 : r3) === Array || void 0 === r3)) return y.call(s3, a, l);
              for (o2 = new (void 0 === r3 ? Array : r3)(g(l - a, 0)), n2 = 0; a < l; a++, n2++) a in s3 && p(o2, n2, s3[a]);
              return o2.length = n2, o2;
            }
          });
        }, {
          "../internals/array-method-has-species-support": 21,
          "../internals/array-method-uses-to-length": 23,
          "../internals/create-property": 40,
          "../internals/export": 50,
          "../internals/is-array": 73,
          "../internals/is-object": 75,
          "../internals/to-absolute-index": 134,
          "../internals/to-indexed-object": 136,
          "../internals/to-length": 138,
          "../internals/well-known-symbol": 150
        }],
        170: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/array-iteration").some, s2 = e2("../internals/array-method-is-strict"), e2 = e2("../internals/array-method-uses-to-length"), s2 = s2("some"), e2 = e2("some");
          o({
            target: "Array",
            proto: true,
            forced: !s2 || !e2
          }, {
            some: function(e3) {
              return n(this, e3, 1 < arguments.length ? arguments[1] : void 0);
            }
          });
        }, {
          "../internals/array-iteration": 19,
          "../internals/array-method-is-strict": 22,
          "../internals/array-method-uses-to-length": 23,
          "../internals/export": 50
        }],
        171: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), d = e2("../internals/to-absolute-index"), h = e2("../internals/to-integer"), f = e2("../internals/to-length"), p = e2("../internals/to-object"), m = e2("../internals/array-species-create"), y = e2("../internals/create-property"), n = e2("../internals/array-method-has-species-support"), e2 = e2("../internals/array-method-uses-to-length"), n = n("splice"), e2 = e2("splice", {
            ACCESSORS: true,
            0: 0,
            1: 2
          }), g = Math.max, v = Math.min;
          o({
            target: "Array",
            proto: true,
            forced: !n || !e2
          }, {
            splice: function(e3, t3) {
              var r3, o2, n2, s2, i, a, l = p(this), u2 = f(l.length), c = d(e3, u2), e3 = arguments.length;
              if (0 === e3 ? r3 = o2 = 0 : o2 = 1 === e3 ? (r3 = 0, u2 - c) : (r3 = e3 - 2, v(g(h(t3), 0), u2 - c)), 9007199254740991 < u2 + r3 - o2) throw TypeError("Maximum allowed length exceeded");
              for (n2 = m(l, o2), s2 = 0; s2 < o2; s2++) (i = c + s2) in l && y(n2, s2, l[i]);
              if (r3 < (n2.length = o2)) {
                for (s2 = c; s2 < u2 - o2; s2++) a = s2 + r3, (i = s2 + o2) in l ? l[a] = l[i] : delete l[a];
                for (s2 = u2; u2 - o2 + r3 < s2; s2--) delete l[s2 - 1];
              } else if (o2 < r3) for (s2 = u2 - o2; c < s2; s2--) a = s2 + r3 - 1, (i = s2 + o2 - 1) in l ? l[a] = l[i] : delete l[a];
              for (s2 = 0; s2 < r3; s2++) l[s2 + c] = arguments[s2 + 2];
              return l.length = u2 - o2 + r3, n2;
            }
          });
        }, {
          "../internals/array-method-has-species-support": 21,
          "../internals/array-method-uses-to-length": 23,
          "../internals/array-species-create": 25,
          "../internals/create-property": 40,
          "../internals/export": 50,
          "../internals/to-absolute-index": 134,
          "../internals/to-integer": 137,
          "../internals/to-length": 138,
          "../internals/to-object": 139
        }],
        172: [function(e2, t2, r2) {
          e2("../internals/add-to-unscopables")("flatMap");
        }, {
          "../internals/add-to-unscopables": 7
        }],
        173: [function(e2, t2, r2) {
          e2("../internals/add-to-unscopables")("flat");
        }, {
          "../internals/add-to-unscopables": 7
        }],
        174: [function(e2, t2, r2) {
          var o = e2("../internals/descriptors"), e2 = e2("../internals/object-define-property").f, n = Function.prototype, s2 = n.toString, i = /^\s*function ([^ (]*)/;
          !o || "name" in n || e2(n, "name", {
            configurable: true,
            get: function() {
              try {
                return s2.call(this).match(i)[1];
              } catch (e3) {
                return "";
              }
            }
          });
        }, {
          "../internals/descriptors": 43,
          "../internals/object-define-property": 93
        }],
        175: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/collection"), e2 = e2("../internals/collection-strong");
          t2.exports = o("Map", function(e3) {
            return function() {
              return e3(this, arguments.length ? arguments[0] : void 0);
            };
          }, e2);
        }, {
          "../internals/collection": 32,
          "../internals/collection-strong": 30
        }],
        176: [function(e2, t2, r2) {
          var e2 = e2("../internals/export"), o = Math.hypot, l = Math.abs, u2 = Math.sqrt;
          e2({
            target: "Math",
            stat: true,
            forced: !!o && o(1 / 0, NaN) !== 1 / 0
          }, {
            hypot: function(e3, t3) {
              for (var r3, o2, n = 0, s2 = 0, i = arguments.length, a = 0; s2 < i; ) a < (r3 = l(arguments[s2++])) ? (n = n * (o2 = a / r3) * o2 + 1, a = r3) : n += 0 < r3 ? (o2 = r3 / a) * o2 : r3;
              return a === 1 / 0 ? 1 / 0 : a * u2(n);
            }
          });
        }, {
          "../internals/export": 50
        }],
        177: [function(e2, t2, r2) {
          var e2 = e2("../internals/export"), o = Math.log, n = Math.LN2;
          e2({
            target: "Math",
            stat: true
          }, {
            log2: function(e3) {
              return o(e3) / n;
            }
          });
        }, {
          "../internals/export": 50
        }],
        178: [function(e2, t2, r2) {
          e2("../internals/export")({
            target: "Math",
            stat: true
          }, {
            sign: e2("../internals/math-sign")
          });
        }, {
          "../internals/export": 50,
          "../internals/math-sign": 81
        }],
        179: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            var t3, r3, o2, n2, s3, i2, a2, l2 = d(e3, false);
            if ("string" == typeof l2 && 2 < l2.length) {
              if (43 === (e3 = (l2 = g(l2)).charCodeAt(0)) || 45 === e3) {
                if (88 === (t3 = l2.charCodeAt(2)) || 120 === t3) return NaN;
              } else if (48 === e3) {
                switch (l2.charCodeAt(1)) {
                  case 66:
                  case 98:
                    r3 = 2, o2 = 49;
                    break;
                  case 79:
                  case 111:
                    r3 = 8, o2 = 55;
                    break;
                  default:
                    return +l2;
                }
                for (s3 = (n2 = l2.slice(2)).length, i2 = 0; i2 < s3; i2++) if ((a2 = n2.charCodeAt(i2)) < 48 || o2 < a2) return NaN;
                return parseInt(n2, r3);
              }
            }
            return +l2;
          }
          var n = e2("../internals/descriptors"), s2 = e2("../internals/global"), i = e2("../internals/is-forced"), a = e2("../internals/redefine"), l = e2("../internals/has"), u2 = e2("../internals/classof-raw"), c = e2("../internals/inherit-if-required"), d = e2("../internals/to-primitive"), h = e2("../internals/fails"), f = e2("../internals/object-create"), p = e2("../internals/object-get-own-property-names").f, m = e2("../internals/object-get-own-property-descriptor").f, y = e2("../internals/object-define-property").f, g = e2("../internals/string-trim").trim, v = "Number", b = s2[v], _ = b.prototype, j = u2(f(_)) == v;
          if (i(v, !b(" 0o1") || !b("0b1") || b("+0x1"))) {
            for (var x, w = function(e3) {
              var e3 = arguments.length < 1 ? 0 : e3, t3 = this;
              return t3 instanceof w && (j ? h(function() {
                _.valueOf.call(t3);
              }) : u2(t3) != v) ? c(new b(o(e3)), t3, w) : o(e3);
            }, S = n ? p(b) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), T = 0; S.length > T; T++) l(b, x = S[T]) && !l(w, x) && y(w, x, m(b, x));
            (w.prototype = _).constructor = w, a(s2, v, w);
          }
        }, {
          "../internals/classof-raw": 28,
          "../internals/descriptors": 43,
          "../internals/fails": 51,
          "../internals/global": 60,
          "../internals/has": 61,
          "../internals/inherit-if-required": 68,
          "../internals/is-forced": 74,
          "../internals/object-create": 91,
          "../internals/object-define-property": 93,
          "../internals/object-get-own-property-descriptor": 94,
          "../internals/object-get-own-property-names": 96,
          "../internals/redefine": 110,
          "../internals/string-trim": 131,
          "../internals/to-primitive": 142
        }],
        180: [function(e2, t2, r2) {
          e2("../internals/export")({
            target: "Number",
            stat: true
          }, {
            EPSILON: Math.pow(2, -52)
          });
        }, {
          "../internals/export": 50
        }],
        181: [function(e2, t2, r2) {
          e2("../internals/export")({
            target: "Number",
            stat: true
          }, {
            isFinite: e2("../internals/number-is-finite")
          });
        }, {
          "../internals/export": 50,
          "../internals/number-is-finite": 89
        }],
        182: [function(e2, t2, r2) {
          "use strict";
          function c(e3, t3, r3) {
            return 0 === t3 ? r3 : t3 % 2 == 1 ? c(e3, t3 - 1, r3 * e3) : c(e3 * e3, t3 / 2, r3);
          }
          var o = e2("../internals/export"), d = e2("../internals/to-integer"), h = e2("../internals/this-number-value"), f = e2("../internals/string-repeat"), e2 = e2("../internals/fails"), n = 1 .toFixed, p = Math.floor;
          o({
            target: "Number",
            proto: true,
            forced: n && ("0.000" !== 8e-5.toFixed(3) || "1" !== 0.9.toFixed(0) || "1.25" !== 1.255.toFixed(2) || "1000000000000000128" !== 1000000000000000100 .toFixed(0)) || !e2(function() {
              n.call({});
            })
          }, {
            toFixed: function(e3) {
              function t3(e4, t4) {
                for (var r4 = -1, o3 = t4; ++r4 < 6; ) o3 += e4 * a[r4], a[r4] = o3 % 1e7, o3 = p(o3 / 1e7);
              }
              function r3(e4) {
                for (var t4 = 6, r4 = 0; 0 <= --t4; ) r4 += a[t4], a[t4] = p(r4 / e4), r4 = r4 % e4 * 1e7;
              }
              function o2() {
                for (var e4, t4 = 6, r4 = ""; 0 <= --t4; ) "" === r4 && 0 !== t4 && 0 === a[t4] || (e4 = String(a[t4]), r4 = "" === r4 ? e4 : r4 + f.call("0", 7 - e4.length) + e4);
                return r4;
              }
              var n2, s2, i = h(this), e3 = d(e3), a = [0, 0, 0, 0, 0, 0], l = "", u2 = "0";
              if (e3 < 0 || 20 < e3) throw RangeError("Incorrect fraction digits");
              if (i != i) return "NaN";
              if (i <= -1e21 || 1e21 <= i) return String(i);
              if (i < 0 && (l = "-", i = -i), 1e-21 < i) if (i = (n2 = function(e4) {
                for (var t4 = 0, r4 = e4; 4096 <= r4; ) t4 += 12, r4 /= 4096;
                for (; 2 <= r4; ) t4 += 1, r4 /= 2;
                return t4;
              }(i * c(2, 69, 1)) - 69) < 0 ? i * c(2, -n2, 1) : i / c(2, n2, 1), i *= 4503599627370496, 0 < (n2 = 52 - n2)) {
                for (t3(0, i), s2 = e3; 7 <= s2; ) t3(1e7, 0), s2 -= 7;
                for (t3(c(10, s2, 1), 0), s2 = n2 - 1; 23 <= s2; ) r3(1 << 23), s2 -= 23;
                r3(1 << s2), t3(1, 1), r3(2), u2 = o2();
              } else t3(0, i), t3(1 << -n2, 0), u2 = o2() + f.call("0", e3);
              return u2 = 0 < e3 ? l + ((i = u2.length) <= e3 ? "0." + f.call("0", e3 - i) + u2 : u2.slice(0, i - e3) + "." + u2.slice(i - e3)) : l + u2;
            }
          });
        }, {
          "../internals/export": 50,
          "../internals/fails": 51,
          "../internals/string-repeat": 129,
          "../internals/this-number-value": 133,
          "../internals/to-integer": 137
        }],
        183: [function(e2, t2, r2) {
          var o = e2("../internals/export"), e2 = e2("../internals/object-assign");
          o({
            target: "Object",
            stat: true,
            forced: Object.assign !== e2
          }, {
            assign: e2
          });
        }, {
          "../internals/export": 50,
          "../internals/object-assign": 90
        }],
        184: [function(e2, t2, r2) {
          var o = e2("../internals/export"), n = e2("../internals/object-to-array").entries;
          o({
            target: "Object",
            stat: true
          }, {
            entries: function(e3) {
              return n(e3);
            }
          });
        }, {
          "../internals/export": 50,
          "../internals/object-to-array": 103
        }],
        185: [function(e2, t2, r2) {
          var o = e2("../internals/export"), n = e2("../internals/iterate"), s2 = e2("../internals/create-property");
          o({
            target: "Object",
            stat: true
          }, {
            fromEntries: function(e3) {
              var r3 = {};
              return n(e3, function(e4, t3) {
                s2(r3, e4, t3);
              }, void 0, true), r3;
            }
          });
        }, {
          "../internals/create-property": 40,
          "../internals/export": 50,
          "../internals/iterate": 78
        }],
        186: [function(e2, t2, r2) {
          var o = e2("../internals/export"), n = e2("../internals/fails"), s2 = e2("../internals/to-indexed-object"), i = e2("../internals/object-get-own-property-descriptor").f, e2 = e2("../internals/descriptors"), n = n(function() {
            i(1);
          });
          o({
            target: "Object",
            stat: true,
            forced: !e2 || n,
            sham: !e2
          }, {
            getOwnPropertyDescriptor: function(e3, t3) {
              return i(s2(e3), t3);
            }
          });
        }, {
          "../internals/descriptors": 43,
          "../internals/export": 50,
          "../internals/fails": 51,
          "../internals/object-get-own-property-descriptor": 94,
          "../internals/to-indexed-object": 136
        }],
        187: [function(e2, t2, r2) {
          var o = e2("../internals/export"), n = e2("../internals/fails"), e2 = e2("../internals/object-get-own-property-names-external").f;
          o({
            target: "Object",
            stat: true,
            forced: n(function() {
              return !Object.getOwnPropertyNames(1);
            })
          }, {
            getOwnPropertyNames: e2
          });
        }, {
          "../internals/export": 50,
          "../internals/fails": 51,
          "../internals/object-get-own-property-names-external": 95
        }],
        188: [function(e2, t2, r2) {
          var o = e2("../internals/export"), n = e2("../internals/fails"), s2 = e2("../internals/to-object"), i = e2("../internals/object-get-prototype-of"), e2 = e2("../internals/correct-prototype-getter");
          o({
            target: "Object",
            stat: true,
            forced: n(function() {
              i(1);
            }),
            sham: !e2
          }, {
            getPrototypeOf: function(e3) {
              return i(s2(e3));
            }
          });
        }, {
          "../internals/correct-prototype-getter": 35,
          "../internals/export": 50,
          "../internals/fails": 51,
          "../internals/object-get-prototype-of": 98,
          "../internals/to-object": 139
        }],
        189: [function(e2, t2, r2) {
          var o = e2("../internals/export"), n = e2("../internals/to-object"), s2 = e2("../internals/object-keys");
          o({
            target: "Object",
            stat: true,
            forced: e2("../internals/fails")(function() {
              s2(1);
            })
          }, {
            keys: function(e3) {
              return s2(n(e3));
            }
          });
        }, {
          "../internals/export": 50,
          "../internals/fails": 51,
          "../internals/object-keys": 100,
          "../internals/to-object": 139
        }],
        190: [function(e2, t2, r2) {
          var o = e2("../internals/to-string-tag-support"), n = e2("../internals/redefine"), e2 = e2("../internals/object-to-string");
          o || n(Object.prototype, "toString", e2, {
            unsafe: true
          });
        }, {
          "../internals/object-to-string": 104,
          "../internals/redefine": 110,
          "../internals/to-string-tag-support": 143
        }],
        191: [function(e2, D, F) {
          "use strict";
          var r2, t2, o, n, s2 = e2("../internals/export"), i = e2("../internals/is-pure"), g = e2("../internals/global"), a = e2("../internals/get-built-in"), l = e2("../internals/native-promise-constructor"), U = e2("../internals/redefine"), N = e2("../internals/redefine-all"), B = e2("../internals/set-to-string-tag"), G = e2("../internals/set-species"), V = e2("../internals/is-object"), c = e2("../internals/a-function"), z = e2("../internals/an-instance"), H = e2("../internals/classof-raw"), W = e2("../internals/inspect-source"), d = e2("../internals/iterate"), q = e2("../internals/check-correctness-of-iteration"), X = e2("../internals/species-constructor"), v = e2("../internals/task").set, u2 = e2("../internals/microtask"), h = e2("../internals/promise-resolve"), Y = e2("../internals/host-report-errors"), f = e2("../internals/new-promise-capability"), b = e2("../internals/perform"), p = e2("../internals/internal-state"), Z = e2("../internals/is-forced"), m = e2("../internals/well-known-symbol"), y = e2("../internals/engine-v8-version"), K = m("species"), _ = "Promise", j = p.get, Q = p.set, J = p.getterFor(_), x = l, w = g.TypeError, S = g.document, T = g.process, E = a("fetch"), M = f.f, $ = M, k = "process" == H(T), ee = !!(S && S.createEvent && g.dispatchEvent), O = "unhandledrejection", te = "rejectionhandled", C = 1, re = 2, A = 1, oe = 2, e2 = Z(_, function() {
            var e3, t3;
            if (!(W(x) !== String(x))) {
              if (66 === y) return true;
              if (!k && "function" != typeof PromiseRejectionEvent) return true;
            }
            return !(!i || x.prototype.finally) || !(51 <= y && /native code/.test(x)) && (t3 = function(e4) {
              e4(function() {
              }, function() {
              });
            }, ((e3 = x.resolve(1)).constructor = {})[K] = t3, !(e3.then(function() {
            }) instanceof t3));
          }), m = e2 || !q(function(e3) {
            x.all(e3).catch(function() {
            });
          }), ne = function(e3) {
            var t3;
            return !(!V(e3) || "function" != typeof (t3 = e3.then)) && t3;
          }, P = function(f2, p2, m2) {
            var y2;
            p2.notified || (p2.notified = true, y2 = p2.reactions, u2(function() {
              for (var r3, o2, e3 = p2.value, t3 = p2.state == C, n2 = 0; y2.length > n2; ) {
                var s3, i2, a2, l2 = y2[n2++], u3 = t3 ? l2.ok : l2.fail, c2 = l2.resolve, d2 = l2.reject, h2 = l2.domain;
                try {
                  u3 ? (t3 || (p2.rejection === oe && function(e4, t4) {
                    v.call(g, function() {
                      if (k) T.emit("rejectionHandled", e4);
                      else se(te, e4, t4.value);
                    });
                  }(f2, p2), p2.rejection = A), true === u3 ? s3 = e3 : (h2 && h2.enter(), s3 = u3(e3), h2 && (h2.exit(), a2 = true)), s3 === l2.promise ? d2(w("Promise-chain cycle")) : (i2 = ne(s3)) ? i2.call(s3, c2, d2) : c2(s3)) : d2(e3);
                } catch (e4) {
                  h2 && !a2 && h2.exit(), d2(e4);
                }
              }
              p2.reactions = [], p2.notified = false, m2 && !p2.rejection && (r3 = f2, o2 = p2, v.call(g, function() {
                var e4 = o2.value, t4 = ie(o2);
                if (t4 && (t4 = b(function() {
                  k ? T.emit("unhandledRejection", e4, r3) : se(O, r3, e4);
                }), o2.rejection = k || ie(o2) ? oe : A, t4.error)) throw t4.value;
              }));
            }));
          }, se = function(e3, t3, r3) {
            var o2;
            ee ? ((o2 = S.createEvent("Event")).promise = t3, o2.reason = r3, o2.initEvent(e3, false, true), g.dispatchEvent(o2)) : o2 = {
              promise: t3,
              reason: r3
            }, (t3 = g["on" + e3]) ? t3(o2) : e3 === O && Y("Unhandled promise rejection", r3);
          }, ie = function(e3) {
            return e3.rejection !== A && !e3.parent;
          }, L = function(t3, r3, o2, n2) {
            return function(e3) {
              t3(r3, o2, e3, n2);
            };
          }, R = function(e3, t3, r3, o2) {
            t3.done || (t3.done = true, (t3 = o2 ? o2 : t3).value = r3, t3.state = re, P(e3, t3, true));
          }, I = function(r3, o2, e3, t3) {
            if (!o2.done) {
              o2.done = true, t3 && (o2 = t3);
              try {
                if (r3 === e3) throw w("Promise can't be resolved itself");
                var n2 = ne(e3);
                n2 ? u2(function() {
                  var t4 = {
                    done: false
                  };
                  try {
                    n2.call(e3, L(I, r3, t4, o2), L(R, r3, t4, o2));
                  } catch (e4) {
                    R(r3, t4, e4, o2);
                  }
                }) : (o2.value = e3, o2.state = C, P(r3, o2, false));
              } catch (e4) {
                R(r3, {
                  done: false
                }, e4, o2);
              }
            }
          };
          e2 && (x = function(e3) {
            z(this, x, _), c(e3), r2.call(this);
            var t3 = j(this);
            try {
              e3(L(I, this, t3), L(R, this, t3));
            } catch (e4) {
              R(this, t3, e4);
            }
          }, (r2 = function(e3) {
            Q(this, {
              type: _,
              done: false,
              notified: false,
              parent: false,
              reactions: [],
              rejection: false,
              state: 0,
              value: void 0
            });
          }).prototype = N(x.prototype, {
            then: function(e3, t3) {
              var r3 = J(this), o2 = M(X(this, x));
              return o2.ok = "function" != typeof e3 || e3, o2.fail = "function" == typeof t3 && t3, o2.domain = k ? T.domain : void 0, r3.parent = true, r3.reactions.push(o2), 0 != r3.state && P(this, r3, false), o2.promise;
            },
            catch: function(e3) {
              return this.then(void 0, e3);
            }
          }), t2 = function() {
            var e3 = new r2(), t3 = j(e3);
            this.promise = e3, this.resolve = L(I, e3, t3), this.reject = L(R, e3, t3);
          }, f.f = M = function(e3) {
            return e3 === x || e3 === o ? new t2() : $(e3);
          }, i || "function" != typeof l || (n = l.prototype.then, U(l.prototype, "then", function(e3, t3) {
            var r3 = this;
            return new x(function(e4, t4) {
              n.call(r3, e4, t4);
            }).then(e3, t3);
          }, {
            unsafe: true
          }), "function" == typeof E && s2({
            global: true,
            enumerable: true,
            forced: true
          }, {
            fetch: function(e3) {
              return h(x, E.apply(g, arguments));
            }
          }))), s2({
            global: true,
            wrap: true,
            forced: e2
          }, {
            Promise: x
          }), B(x, _, false, true), G(_), o = a(_), s2({
            target: _,
            stat: true,
            forced: e2
          }, {
            reject: function(e3) {
              var t3 = M(this);
              return t3.reject.call(void 0, e3), t3.promise;
            }
          }), s2({
            target: _,
            stat: true,
            forced: i || e2
          }, {
            resolve: function(e3) {
              return h(i && this === o ? x : this, e3);
            }
          }), s2({
            target: _,
            stat: true,
            forced: m
          }, {
            all: function(e3) {
              var a2 = this, t3 = M(a2), l2 = t3.resolve, u3 = t3.reject, r3 = b(function() {
                var o2 = c(a2.resolve), n2 = [], s3 = 0, i2 = 1;
                d(e3, function(e4) {
                  var t4 = s3++, r4 = false;
                  n2.push(void 0), i2++, o2.call(a2, e4).then(function(e5) {
                    r4 || (r4 = true, n2[t4] = e5, --i2 || l2(n2));
                  }, u3);
                }), --i2 || l2(n2);
              });
              return r3.error && u3(r3.value), t3.promise;
            },
            race: function(e3) {
              var r3 = this, o2 = M(r3), n2 = o2.reject, t3 = b(function() {
                var t4 = c(r3.resolve);
                d(e3, function(e4) {
                  t4.call(r3, e4).then(o2.resolve, n2);
                });
              });
              return t3.error && n2(t3.value), o2.promise;
            }
          });
        }, {
          "../internals/a-function": 5,
          "../internals/an-instance": 9,
          "../internals/check-correctness-of-iteration": 27,
          "../internals/classof-raw": 28,
          "../internals/engine-v8-version": 48,
          "../internals/export": 50,
          "../internals/get-built-in": 57,
          "../internals/global": 60,
          "../internals/host-report-errors": 63,
          "../internals/inspect-source": 69,
          "../internals/internal-state": 71,
          "../internals/is-forced": 74,
          "../internals/is-object": 75,
          "../internals/is-pure": 76,
          "../internals/iterate": 78,
          "../internals/microtask": 82,
          "../internals/native-promise-constructor": 83,
          "../internals/new-promise-capability": 87,
          "../internals/perform": 107,
          "../internals/promise-resolve": 108,
          "../internals/redefine": 110,
          "../internals/redefine-all": 109,
          "../internals/set-species": 118,
          "../internals/set-to-string-tag": 119,
          "../internals/species-constructor": 123,
          "../internals/task": 132,
          "../internals/well-known-symbol": 150
        }],
        192: [function(e2, t2, r2) {
          var o = e2("../internals/export"), n = e2("../internals/get-built-in"), s2 = e2("../internals/a-function"), i = e2("../internals/an-object"), a = e2("../internals/is-object"), l = e2("../internals/object-create"), u2 = e2("../internals/function-bind"), e2 = e2("../internals/fails"), c = n("Reflect", "construct"), d = e2(function() {
            function e3() {
            }
            return !(c(function() {
            }, [], e3) instanceof e3);
          }), h = !e2(function() {
            c(function() {
            });
          }), n = d || h;
          o({
            target: "Reflect",
            stat: true,
            forced: n,
            sham: n
          }, {
            construct: function(e3, t3) {
              s2(e3), i(t3);
              var r3 = arguments.length < 3 ? e3 : s2(arguments[2]);
              if (h && !d) return c(e3, t3, r3);
              if (e3 == r3) {
                switch (t3.length) {
                  case 0:
                    return new e3();
                  case 1:
                    return new e3(t3[0]);
                  case 2:
                    return new e3(t3[0], t3[1]);
                  case 3:
                    return new e3(t3[0], t3[1], t3[2]);
                  case 4:
                    return new e3(t3[0], t3[1], t3[2], t3[3]);
                }
                var o2 = [null];
                return o2.push.apply(o2, t3), new (u2.apply(e3, o2))();
              }
              o2 = r3.prototype, r3 = l(a(o2) ? o2 : Object.prototype), o2 = Function.apply.call(e3, r3, t3);
              return a(o2) ? o2 : r3;
            }
          });
        }, {
          "../internals/a-function": 5,
          "../internals/an-object": 10,
          "../internals/export": 50,
          "../internals/fails": 51,
          "../internals/function-bind": 56,
          "../internals/get-built-in": 57,
          "../internals/is-object": 75,
          "../internals/object-create": 91
        }],
        193: [function(e2, t2, r2) {
          var o = e2("../internals/export"), s2 = e2("../internals/is-object"), i = e2("../internals/an-object"), a = e2("../internals/has"), l = e2("../internals/object-get-own-property-descriptor"), u2 = e2("../internals/object-get-prototype-of");
          o({
            target: "Reflect",
            stat: true
          }, {
            get: function e3(t3, r3) {
              var o2, n = arguments.length < 3 ? t3 : arguments[2];
              return i(t3) === n ? t3[r3] : (o2 = l.f(t3, r3)) ? a(o2, "value") ? o2.value : void 0 === o2.get ? void 0 : o2.get.call(n) : s2(o2 = u2(t3)) ? e3(o2, r3, n) : void 0;
            }
          });
        }, {
          "../internals/an-object": 10,
          "../internals/export": 50,
          "../internals/has": 61,
          "../internals/is-object": 75,
          "../internals/object-get-own-property-descriptor": 94,
          "../internals/object-get-prototype-of": 98
        }],
        194: [function(e2, t2, r2) {
          var o = e2("../internals/descriptors"), n = e2("../internals/global"), s2 = e2("../internals/is-forced"), i = e2("../internals/inherit-if-required"), a = e2("../internals/object-define-property").f, l = e2("../internals/object-get-own-property-names").f, u2 = e2("../internals/is-regexp"), c = e2("../internals/regexp-flags"), d = e2("../internals/regexp-sticky-helpers"), h = e2("../internals/redefine"), f = e2("../internals/fails"), p = e2("../internals/internal-state").set, m = e2("../internals/set-species"), y = e2("../internals/well-known-symbol")("match"), g = n.RegExp, v = g.prototype, b = /a/g, _ = /a/g, j = new g(b) !== b, x = d.UNSUPPORTED_Y;
          if (o && s2("RegExp", !j || x || f(function() {
            return _[y] = false, g(b) != b || g(_) == _ || "/a/i" != g(b, "i");
          }))) {
            for (var w = function(e3, t3) {
              var r3, o2 = this instanceof w, n2 = u2(e3), s3 = void 0 === t3;
              if (!o2 && n2 && e3.constructor === w && s3) return e3;
              j ? n2 && !s3 && (e3 = e3.source) : e3 instanceof w && (s3 && (t3 = c.call(e3)), e3 = e3.source), x && (r3 = !!t3 && -1 < t3.indexOf("y")) && (t3 = t3.replace(/y/g, ""));
              n2 = i(j ? new g(e3, t3) : g(e3, t3), o2 ? this : v, w);
              return x && r3 && p(n2, {
                sticky: r3
              }), n2;
            }, S = l(g), T = 0; S.length > T; ) !function(t3) {
              t3 in w || a(w, t3, {
                configurable: true,
                get: function() {
                  return g[t3];
                },
                set: function(e3) {
                  g[t3] = e3;
                }
              });
            }(S[T++]);
            (v.constructor = w).prototype = v, h(n, "RegExp", w);
          }
          m("RegExp");
        }, {
          "../internals/descriptors": 43,
          "../internals/fails": 51,
          "../internals/global": 60,
          "../internals/inherit-if-required": 68,
          "../internals/internal-state": 71,
          "../internals/is-forced": 74,
          "../internals/is-regexp": 77,
          "../internals/object-define-property": 93,
          "../internals/object-get-own-property-names": 96,
          "../internals/redefine": 110,
          "../internals/regexp-flags": 113,
          "../internals/regexp-sticky-helpers": 114,
          "../internals/set-species": 118,
          "../internals/well-known-symbol": 150
        }],
        195: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), e2 = e2("../internals/regexp-exec");
          o({
            target: "RegExp",
            proto: true,
            forced: /./.exec !== e2
          }, {
            exec: e2
          });
        }, {
          "../internals/export": 50,
          "../internals/regexp-exec": 112
        }],
        196: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/redefine"), n = e2("../internals/an-object"), s2 = e2("../internals/fails"), i = e2("../internals/regexp-flags"), e2 = "toString", a = RegExp.prototype, l = a[e2], s2 = s2(function() {
            return "/a/b" != l.call({
              source: "a",
              flags: "b"
            });
          }), u2 = l.name != e2;
          (s2 || u2) && o(RegExp.prototype, e2, function() {
            var e3 = n(this), t3 = String(e3.source), r3 = e3.flags;
            return "/" + t3 + "/" + String(void 0 === r3 && e3 instanceof RegExp && !("flags" in a) ? i.call(e3) : r3);
          }, {
            unsafe: true
          });
        }, {
          "../internals/an-object": 10,
          "../internals/fails": 51,
          "../internals/redefine": 110,
          "../internals/regexp-flags": 113
        }],
        197: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/collection"), e2 = e2("../internals/collection-strong");
          t2.exports = o("Set", function(e3) {
            return function() {
              return e3(this, arguments.length ? arguments[0] : void 0);
            };
          }, e2);
        }, {
          "../internals/collection": 32,
          "../internals/collection-strong": 30
        }],
        198: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/object-get-own-property-descriptor").f, s2 = e2("../internals/to-length"), i = e2("../internals/not-a-regexp"), a = e2("../internals/require-object-coercible"), l = e2("../internals/correct-is-regexp-logic"), e2 = e2("../internals/is-pure"), u2 = "".endsWith, c = Math.min, l = l("endsWith");
          o({
            target: "String",
            proto: true,
            forced: !!(e2 || l || !(o = n(String.prototype, "endsWith")) || o.writable) && !l
          }, {
            endsWith: function(e3) {
              var t3 = String(a(this)), r3 = (i(e3), 1 < arguments.length ? arguments[1] : void 0), o2 = s2(t3.length), r3 = void 0 === r3 ? o2 : c(s2(r3), o2), o2 = String(e3);
              return u2 ? u2.call(t3, o2, r3) : t3.slice(r3 - o2.length, r3) === o2;
            }
          });
        }, {
          "../internals/correct-is-regexp-logic": 34,
          "../internals/export": 50,
          "../internals/is-pure": 76,
          "../internals/not-a-regexp": 88,
          "../internals/object-get-own-property-descriptor": 94,
          "../internals/require-object-coercible": 115,
          "../internals/to-length": 138
        }],
        199: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/not-a-regexp"), s2 = e2("../internals/require-object-coercible");
          o({
            target: "String",
            proto: true,
            forced: !e2("../internals/correct-is-regexp-logic")("includes")
          }, {
            includes: function(e3) {
              return !!~String(s2(this)).indexOf(n(e3), 1 < arguments.length ? arguments[1] : void 0);
            }
          });
        }, {
          "../internals/correct-is-regexp-logic": 34,
          "../internals/export": 50,
          "../internals/not-a-regexp": 88,
          "../internals/require-object-coercible": 115
        }],
        200: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/string-multibyte").charAt, n = e2("../internals/internal-state"), e2 = e2("../internals/define-iterator"), s2 = "String Iterator", i = n.set, a = n.getterFor(s2);
          e2(String, "String", function(e3) {
            i(this, {
              type: s2,
              string: String(e3),
              index: 0
            });
          }, function() {
            var e3 = a(this), t3 = e3.string, r3 = e3.index;
            return r3 >= t3.length ? {
              value: void 0,
              done: true
            } : (t3 = o(t3, r3), e3.index += t3.length, {
              value: t3,
              done: false
            });
          });
        }, {
          "../internals/define-iterator": 41,
          "../internals/internal-state": 71,
          "../internals/string-multibyte": 125
        }],
        201: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/fix-regexp-well-known-symbol-logic"), c = e2("../internals/an-object"), d = e2("../internals/to-length"), n = e2("../internals/require-object-coercible"), h = e2("../internals/advance-string-index"), f = e2("../internals/regexp-exec-abstract");
          o("match", 1, function(o2, l, u2) {
            return [function(e3) {
              var t3 = n(this), r3 = null == e3 ? void 0 : e3[o2];
              return void 0 !== r3 ? r3.call(e3, t3) : new RegExp(e3)[o2](String(t3));
            }, function(e3) {
              var t3 = u2(l, e3, this);
              if (t3.done) return t3.value;
              var r3 = c(e3), o3 = String(this);
              if (!r3.global) return f(r3, o3);
              for (var n2 = r3.unicode, s2 = [], i = r3.lastIndex = 0; null !== (a = f(r3, o3)); ) {
                var a = String(a[0]);
                "" === (s2[i] = a) && (r3.lastIndex = h(o3, d(r3.lastIndex), n2)), i++;
              }
              return 0 === i ? null : s2;
            }];
          });
        }, {
          "../internals/advance-string-index": 8,
          "../internals/an-object": 10,
          "../internals/fix-regexp-well-known-symbol-logic": 52,
          "../internals/regexp-exec-abstract": 111,
          "../internals/require-object-coercible": 115,
          "../internals/to-length": 138
        }],
        202: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/string-pad").start;
          o({
            target: "String",
            proto: true,
            forced: e2("../internals/string-pad-webkit-bug")
          }, {
            padStart: function(e3) {
              return n(this, e3, 1 < arguments.length ? arguments[1] : void 0);
            }
          });
        }, {
          "../internals/export": 50,
          "../internals/string-pad": 127,
          "../internals/string-pad-webkit-bug": 126
        }],
        203: [function(e2, t2, r2) {
          e2("../internals/export")({
            target: "String",
            proto: true
          }, {
            repeat: e2("../internals/string-repeat")
          });
        }, {
          "../internals/export": 50,
          "../internals/string-repeat": 129
        }],
        204: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/fix-regexp-well-known-symbol-logic"), T = e2("../internals/an-object"), E = e2("../internals/to-object"), M = e2("../internals/to-length"), k = e2("../internals/to-integer"), s2 = e2("../internals/require-object-coercible"), O = e2("../internals/advance-string-index"), C = e2("../internals/regexp-exec-abstract"), A = Math.max, P = Math.min, L = Math.floor, R = /\$([$&'`]|\d\d?|<[^>]*>)/g, I = /\$([$&'`]|\d\d?)/g;
          o("replace", 2, function(n, _, j, e3) {
            var x = e3.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE, w = e3.REPLACE_KEEPS_$0, S = x ? "$" : "$0";
            return [function(e4, t3) {
              var r3 = s2(this), o2 = null == e4 ? void 0 : e4[n];
              return void 0 !== o2 ? o2.call(e4, r3, t3) : _.call(String(r3), e4, t3);
            }, function(e4, t3) {
              if (!x && w || "string" == typeof t3 && -1 === t3.indexOf(S)) {
                var r3 = j(_, e4, this, t3);
                if (r3.done) return r3.value;
              }
              for (var o2, n2 = T(e4), s3 = String(this), i = "function" == typeof t3, a = (i || (t3 = String(t3)), n2.global), l = (a && (o2 = n2.unicode, n2.lastIndex = 0), []); null !== (f = C(n2, s3)) && (l.push(f), a); ) "" === String(f[0]) && (n2.lastIndex = O(s3, M(n2.lastIndex), o2));
              for (var u2, c = "", d = 0, h = 0; h < l.length; h++) {
                for (var f = l[h], p = String(f[0]), m = A(P(k(f.index), s3.length), 0), y = [], g = 1; g < f.length; g++) y.push(void 0 === (u2 = f[g]) ? u2 : String(u2));
                var v = f.groups, b = i ? (b = [p].concat(y, m, s3), void 0 !== v && b.push(v), String(t3.apply(void 0, b))) : function(s4, i2, a2, l2, u3, e5) {
                  var c2 = a2 + s4.length, d2 = l2.length, t4 = I;
                  void 0 !== u3 && (u3 = E(u3), t4 = R);
                  return _.call(e5, t4, function(e6, t5) {
                    var r4;
                    switch (t5.charAt(0)) {
                      case "$":
                        return "$";
                      case "&":
                        return s4;
                      case "`":
                        return i2.slice(0, a2);
                      case "'":
                        return i2.slice(c2);
                      case "<":
                        r4 = u3[t5.slice(1, -1)];
                        break;
                      default:
                        var o3, n3 = +t5;
                        if (0 == n3) return e6;
                        if (d2 < n3) return 0 !== (o3 = L(n3 / 10)) && o3 <= d2 ? void 0 === l2[o3 - 1] ? t5.charAt(1) : l2[o3 - 1] + t5.charAt(1) : e6;
                        r4 = l2[n3 - 1];
                    }
                    return void 0 === r4 ? "" : r4;
                  });
                }(p, s3, m, y, v, t3);
                d <= m && (c += s3.slice(d, m) + b, d = m + p.length);
              }
              return c + s3.slice(d);
            }];
          });
        }, {
          "../internals/advance-string-index": 8,
          "../internals/an-object": 10,
          "../internals/fix-regexp-well-known-symbol-logic": 52,
          "../internals/regexp-exec-abstract": 111,
          "../internals/require-object-coercible": 115,
          "../internals/to-integer": 137,
          "../internals/to-length": 138,
          "../internals/to-object": 139
        }],
        205: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/fix-regexp-well-known-symbol-logic"), i = e2("../internals/an-object"), a = e2("../internals/require-object-coercible"), l = e2("../internals/same-value"), u2 = e2("../internals/regexp-exec-abstract");
          o("search", 1, function(o2, n, s2) {
            return [function(e3) {
              var t3 = a(this), r3 = null == e3 ? void 0 : e3[o2];
              return void 0 !== r3 ? r3.call(e3, t3) : new RegExp(e3)[o2](String(t3));
            }, function(e3) {
              var t3, r3 = s2(n, e3, this);
              return r3.done ? r3.value : (r3 = i(e3), e3 = String(this), t3 = r3.lastIndex, l(t3, 0) || (r3.lastIndex = 0), e3 = u2(r3, e3), l(r3.lastIndex, t3) || (r3.lastIndex = t3), null === e3 ? -1 : e3.index);
            }];
          });
        }, {
          "../internals/an-object": 10,
          "../internals/fix-regexp-well-known-symbol-logic": 52,
          "../internals/regexp-exec-abstract": 111,
          "../internals/require-object-coercible": 115,
          "../internals/same-value": 116
        }],
        206: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/fix-regexp-well-known-symbol-logic"), c = e2("../internals/is-regexp"), g = e2("../internals/an-object"), d = e2("../internals/require-object-coercible"), v = e2("../internals/species-constructor"), b = e2("../internals/advance-string-index"), _ = e2("../internals/to-length"), j = e2("../internals/regexp-exec-abstract"), h = e2("../internals/regexp-exec"), e2 = e2("../internals/fails"), f = [].push, x = Math.min, w = 4294967295, S = !e2(function() {
            return !RegExp(w, "y");
          });
          o("split", 2, function(n, p, m) {
            var y = "c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || 1 < ".".split(/()()/).length || "".split(/.?/).length ? function(e3, t3) {
              var r3 = String(d(this)), o2 = void 0 === t3 ? w : t3 >>> 0;
              if (0 == o2) return [];
              if (void 0 === e3) return [r3];
              if (!c(e3)) return p.call(r3, e3, o2);
              for (var n2, s2, i, a = [], t3 = (e3.ignoreCase ? "i" : "") + (e3.multiline ? "m" : "") + (e3.unicode ? "u" : "") + (e3.sticky ? "y" : ""), l = 0, u2 = new RegExp(e3.source, t3 + "g"); (n2 = h.call(u2, r3)) && !(l < (s2 = u2.lastIndex) && (a.push(r3.slice(l, n2.index)), 1 < n2.length && n2.index < r3.length && f.apply(a, n2.slice(1)), i = n2[0].length, l = s2, a.length >= o2)); ) u2.lastIndex === n2.index && u2.lastIndex++;
              return l === r3.length ? !i && u2.test("") || a.push("") : a.push(r3.slice(l)), a.length > o2 ? a.slice(0, o2) : a;
            } : "0".split(void 0, 0).length ? function(e3, t3) {
              return void 0 === e3 && 0 === t3 ? [] : p.call(this, e3, t3);
            } : p;
            return [function(e3, t3) {
              var r3 = d(this), o2 = null == e3 ? void 0 : e3[n];
              return void 0 !== o2 ? o2.call(e3, r3, t3) : y.call(String(r3), e3, t3);
            }, function(e3, t3) {
              var r3 = m(y, e3, this, t3, y !== p);
              if (r3.done) return r3.value;
              var r3 = g(e3), o2 = String(this), e3 = v(r3, RegExp), n2 = r3.unicode, s2 = (r3.ignoreCase ? "i" : "") + (r3.multiline ? "m" : "") + (r3.unicode ? "u" : "") + (S ? "y" : "g"), i = new e3(S ? r3 : "^(?:" + r3.source + ")", s2), a = void 0 === t3 ? w : t3 >>> 0;
              if (0 == a) return [];
              if (0 === o2.length) return null === j(i, o2) ? [o2] : [];
              for (var l = 0, u2 = 0, c2 = []; u2 < o2.length; ) {
                i.lastIndex = S ? u2 : 0;
                var d2, h2 = j(i, S ? o2 : o2.slice(u2));
                if (null === h2 || (d2 = x(_(i.lastIndex + (S ? 0 : u2)), o2.length)) === l) u2 = b(o2, u2, n2);
                else {
                  if (c2.push(o2.slice(l, u2)), c2.length === a) return c2;
                  for (var f2 = 1; f2 <= h2.length - 1; f2++) if (c2.push(h2[f2]), c2.length === a) return c2;
                  u2 = l = d2;
                }
              }
              return c2.push(o2.slice(l)), c2;
            }];
          }, !S);
        }, {
          "../internals/advance-string-index": 8,
          "../internals/an-object": 10,
          "../internals/fails": 51,
          "../internals/fix-regexp-well-known-symbol-logic": 52,
          "../internals/is-regexp": 77,
          "../internals/regexp-exec": 112,
          "../internals/regexp-exec-abstract": 111,
          "../internals/require-object-coercible": 115,
          "../internals/species-constructor": 123,
          "../internals/to-length": 138
        }],
        207: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/object-get-own-property-descriptor").f, s2 = e2("../internals/to-length"), i = e2("../internals/not-a-regexp"), a = e2("../internals/require-object-coercible"), l = e2("../internals/correct-is-regexp-logic"), e2 = e2("../internals/is-pure"), u2 = "".startsWith, c = Math.min, l = l("startsWith");
          o({
            target: "String",
            proto: true,
            forced: !!(e2 || l || !(o = n(String.prototype, "startsWith")) || o.writable) && !l
          }, {
            startsWith: function(e3) {
              var t3 = String(a(this)), r3 = (i(e3), s2(c(1 < arguments.length ? arguments[1] : void 0, t3.length))), e3 = String(e3);
              return u2 ? u2.call(t3, e3, r3) : t3.slice(r3, r3 + e3.length) === e3;
            }
          });
        }, {
          "../internals/correct-is-regexp-logic": 34,
          "../internals/export": 50,
          "../internals/is-pure": 76,
          "../internals/not-a-regexp": 88,
          "../internals/object-get-own-property-descriptor": 94,
          "../internals/require-object-coercible": 115,
          "../internals/to-length": 138
        }],
        208: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/create-html");
          o({
            target: "String",
            proto: true,
            forced: e2("../internals/string-html-forced")("sub")
          }, {
            sub: function() {
              return n(this, "sub", "", "");
            }
          });
        }, {
          "../internals/create-html": 36,
          "../internals/export": 50,
          "../internals/string-html-forced": 124
        }],
        209: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/export"), n = e2("../internals/string-trim").trim;
          o({
            target: "String",
            proto: true,
            forced: e2("../internals/string-trim-forced")("trim")
          }, {
            trim: function() {
              return n(this);
            }
          });
        }, {
          "../internals/export": 50,
          "../internals/string-trim": 131,
          "../internals/string-trim-forced": 130
        }],
        210: [function(e2, t2, r2) {
          "use strict";
          var o, n, s2, i, a, l = e2("../internals/export"), u2 = e2("../internals/descriptors"), c = e2("../internals/global"), d = e2("../internals/has"), h = e2("../internals/is-object"), f = e2("../internals/object-define-property").f, e2 = e2("../internals/copy-constructor-properties"), p = c.Symbol;
          !u2 || "function" != typeof p || "description" in p.prototype && void 0 === p().description || (o = {}, e2(n = function() {
            var e3 = arguments.length < 1 || void 0 === arguments[0] ? void 0 : String(arguments[0]), t3 = this instanceof n ? new p(e3) : void 0 === e3 ? p() : p(e3);
            return "" === e3 && (o[t3] = true), t3;
          }, p), (c = n.prototype = p.prototype).constructor = n, s2 = c.toString, i = "Symbol(test)" == String(p("test")), a = /^Symbol\((.*)\)[^)]+$/, f(c, "description", {
            configurable: true,
            get: function() {
              var e3 = h(this) ? this.valueOf() : this, t3 = s2.call(e3);
              return d(o, e3) ? "" : "" === (e3 = i ? t3.slice(7, -1) : t3.replace(a, "$1")) ? void 0 : e3;
            }
          }), l({
            global: true,
            forced: true
          }, {
            Symbol: n
          }));
        }, {
          "../internals/copy-constructor-properties": 33,
          "../internals/descriptors": 43,
          "../internals/export": 50,
          "../internals/global": 60,
          "../internals/has": 61,
          "../internals/is-object": 75,
          "../internals/object-define-property": 93
        }],
        211: [function(e2, t2, r2) {
          e2("../internals/define-well-known-symbol")("iterator");
        }, {
          "../internals/define-well-known-symbol": 42
        }],
        212: [function(e2, D, F) {
          "use strict";
          function o(e3, t3) {
            var r3 = E[e3] = f(w[j]);
            return ie(r3, {
              type: _,
              tag: e3,
              description: t3
            }), s2 || (r3.description = t3), r3;
          }
          function r2(t3, e3) {
            u2(t3);
            var r3 = c(e3), e3 = q(r3).concat(I(r3));
            return v(e3, function(e4) {
              s2 && !R.call(r3, e4) || L(t3, e4, r3[e4]);
            }), t3;
          }
          function t2(e3, t3) {
            var r3, e3 = c(e3), t3 = d(t3, true);
            if (e3 !== x || !l(E, t3) || l(M, t3)) return !(r3 = le(e3, t3)) || !l(E, t3) || l(e3, b) && e3[b][t3] || (r3.enumerable = true), r3;
          }
          function U(e3) {
            var e3 = ue(c(e3)), t3 = [];
            return v(e3, function(e4) {
              l(E, e4) || l(ee, e4) || t3.push(e4);
            }), t3;
          }
          var n = e2("../internals/export"), N = e2("../internals/global"), B = e2("../internals/get-built-in"), G = e2("../internals/is-pure"), s2 = e2("../internals/descriptors"), i = e2("../internals/native-symbol"), V = e2("../internals/use-symbol-as-uid"), a = e2("../internals/fails"), l = e2("../internals/has"), z = e2("../internals/is-array"), H = e2("../internals/is-object"), u2 = e2("../internals/an-object"), W = e2("../internals/to-object"), c = e2("../internals/to-indexed-object"), d = e2("../internals/to-primitive"), h = e2("../internals/create-property-descriptor"), f = e2("../internals/object-create"), q = e2("../internals/object-keys"), X = e2("../internals/object-get-own-property-names"), Y = e2("../internals/object-get-own-property-names-external"), p = e2("../internals/object-get-own-property-symbols"), Z = e2("../internals/object-get-own-property-descriptor"), K = e2("../internals/object-define-property"), Q = e2("../internals/object-property-is-enumerable"), J = e2("../internals/create-non-enumerable-property"), m = e2("../internals/redefine"), y = e2("../internals/shared"), $ = e2("../internals/shared-key"), ee = e2("../internals/hidden-keys"), te = e2("../internals/uid"), re = e2("../internals/well-known-symbol"), oe = e2("../internals/well-known-symbol-wrapped"), ne = e2("../internals/define-well-known-symbol"), se = e2("../internals/set-to-string-tag"), g = e2("../internals/internal-state"), v = e2("../internals/array-iteration").forEach, b = $("hidden"), _ = "Symbol", j = "prototype", e2 = re("toPrimitive"), ie = g.set, ae = g.getterFor(_), x = Object[j], w = N.Symbol, S = B("JSON", "stringify"), le = Z.f, T = K.f, ue = Y.f, ce = Q.f, E = y("symbols"), M = y("op-symbols"), k = y("string-to-symbol-registry"), O = y("symbol-to-string-registry"), $ = y("wks"), g = N.QObject, C = !g || !g[j] || !g[j].findChild, A = s2 && a(function() {
            return 7 != f(T({}, "a", {
              get: function() {
                return T(this, "a", {
                  value: 7
                }).a;
              }
            })).a;
          }) ? function(e3, t3, r3) {
            var o2 = le(x, t3);
            o2 && delete x[t3], T(e3, t3, r3), o2 && e3 !== x && T(x, t3, o2);
          } : T, P = V ? function(e3) {
            return "symbol" == typeof e3;
          } : function(e3) {
            return Object(e3) instanceof w;
          }, L = function(e3, t3, r3) {
            e3 === x && L(M, t3, r3), u2(e3);
            t3 = d(t3, true);
            return u2(r3), (l(E, t3) ? (r3.enumerable ? (l(e3, b) && e3[b][t3] && (e3[b][t3] = false), r3 = f(r3, {
              enumerable: h(0, false)
            })) : (l(e3, b) || T(e3, b, h(1, {})), e3[b][t3] = true), A) : T)(e3, t3, r3);
          }, R = function(e3) {
            var e3 = d(e3, true), t3 = ce.call(this, e3);
            return !(this === x && l(E, e3) && !l(M, e3)) && (!(t3 || !l(this, e3) || !l(E, e3) || l(this, b) && this[b][e3]) || t3);
          }, I = function(e3) {
            var t3 = e3 === x, e3 = ue(t3 ? M : c(e3)), r3 = [];
            return v(e3, function(e4) {
              !l(E, e4) || t3 && !l(x, e4) || r3.push(E[e4]);
            }), r3;
          };
          i || (m((w = function() {
            if (this instanceof w) throw TypeError("Symbol is not a constructor");
            var e3 = arguments.length && void 0 !== arguments[0] ? String(arguments[0]) : void 0, t3 = te(e3), r3 = function(e4) {
              this === x && r3.call(M, e4), l(this, b) && l(this[b], t3) && (this[b][t3] = false), A(this, t3, h(1, e4));
            };
            return s2 && C && A(x, t3, {
              configurable: true,
              set: r3
            }), o(t3, e3);
          })[j], "toString", function() {
            return ae(this).tag;
          }), m(w, "withoutSetter", function(e3) {
            return o(te(e3), e3);
          }), Q.f = R, K.f = L, Z.f = t2, X.f = Y.f = U, p.f = I, oe.f = function(e3) {
            return o(re(e3), e3);
          }, s2 && (T(w[j], "description", {
            configurable: true,
            get: function() {
              return ae(this).description;
            }
          }), G || m(x, "propertyIsEnumerable", R, {
            unsafe: true
          }))), n({
            global: true,
            wrap: true,
            forced: !i,
            sham: !i
          }, {
            Symbol: w
          }), v(q($), function(e3) {
            ne(e3);
          }), n({
            target: _,
            stat: true,
            forced: !i
          }, {
            for: function(e3) {
              var t3, e3 = String(e3);
              return l(k, e3) ? k[e3] : (t3 = w(e3), k[e3] = t3, O[t3] = e3, t3);
            },
            keyFor: function(e3) {
              if (!P(e3)) throw TypeError(e3 + " is not a symbol");
              if (l(O, e3)) return O[e3];
            },
            useSetter: function() {
              C = true;
            },
            useSimple: function() {
              C = false;
            }
          }), n({
            target: "Object",
            stat: true,
            forced: !i,
            sham: !s2
          }, {
            create: function(e3, t3) {
              return void 0 === t3 ? f(e3) : r2(f(e3), t3);
            },
            defineProperty: L,
            defineProperties: r2,
            getOwnPropertyDescriptor: t2
          }), n({
            target: "Object",
            stat: true,
            forced: !i
          }, {
            getOwnPropertyNames: U,
            getOwnPropertySymbols: I
          }), n({
            target: "Object",
            stat: true,
            forced: a(function() {
              p.f(1);
            })
          }, {
            getOwnPropertySymbols: function(e3) {
              return p.f(W(e3));
            }
          }), S && n({
            target: "JSON",
            stat: true,
            forced: !i || a(function() {
              var e3 = w();
              return "[null]" != S([e3]) || "{}" != S({
                a: e3
              }) || "{}" != S(Object(e3));
            })
          }, {
            stringify: function(e3, t3, r3) {
              for (var o2, n2 = [e3], s3 = 1; s3 < arguments.length; ) n2.push(arguments[s3++]);
              if ((H(o2 = t3) || void 0 !== e3) && !P(e3)) return z(t3) || (t3 = function(e4, t4) {
                if ("function" == typeof o2 && (t4 = o2.call(this, e4, t4)), !P(t4)) return t4;
              }), n2[1] = t3, S.apply(null, n2);
            }
          }), w[j][e2] || J(w[j], e2, w[j].valueOf), se(w, _), ee[b] = true;
        }, {
          "../internals/an-object": 10,
          "../internals/array-iteration": 19,
          "../internals/create-non-enumerable-property": 38,
          "../internals/create-property-descriptor": 39,
          "../internals/define-well-known-symbol": 42,
          "../internals/descriptors": 43,
          "../internals/export": 50,
          "../internals/fails": 51,
          "../internals/get-built-in": 57,
          "../internals/global": 60,
          "../internals/has": 61,
          "../internals/hidden-keys": 62,
          "../internals/internal-state": 71,
          "../internals/is-array": 73,
          "../internals/is-object": 75,
          "../internals/is-pure": 76,
          "../internals/native-symbol": 84,
          "../internals/object-create": 91,
          "../internals/object-define-property": 93,
          "../internals/object-get-own-property-descriptor": 94,
          "../internals/object-get-own-property-names": 96,
          "../internals/object-get-own-property-names-external": 95,
          "../internals/object-get-own-property-symbols": 97,
          "../internals/object-keys": 100,
          "../internals/object-property-is-enumerable": 101,
          "../internals/redefine": 110,
          "../internals/set-to-string-tag": 119,
          "../internals/shared": 122,
          "../internals/shared-key": 120,
          "../internals/to-indexed-object": 136,
          "../internals/to-object": 139,
          "../internals/to-primitive": 142,
          "../internals/uid": 147,
          "../internals/use-symbol-as-uid": 148,
          "../internals/well-known-symbol": 150,
          "../internals/well-known-symbol-wrapped": 149
        }],
        213: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-copy-within"), s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("copyWithin", function(e3, t3) {
            return n.call(s2(this), e3, t3, 2 < arguments.length ? arguments[2] : void 0);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-copy-within": 14
        }],
        214: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-iteration").every, s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("every", function(e3) {
            return n(s2(this), e3, 1 < arguments.length ? arguments[1] : void 0);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-iteration": 19
        }],
        215: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-fill"), s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("fill", function(e3) {
            return n.apply(s2(this), arguments);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-fill": 15
        }],
        216: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), s2 = e2("../internals/array-iteration").filter, i = e2("../internals/species-constructor"), a = o.aTypedArray, l = o.aTypedArrayConstructor;
          (0, o.exportTypedArrayMethod)("filter", function(e3) {
            for (var t3 = s2(a(this), e3, 1 < arguments.length ? arguments[1] : void 0), e3 = i(this, this.constructor), r3 = 0, o2 = t3.length, n = new (l(e3))(o2); r3 < o2; ) n[r3] = t3[r3++];
            return n;
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-iteration": 19,
          "../internals/species-constructor": 123
        }],
        217: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-iteration").findIndex, s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("findIndex", function(e3) {
            return n(s2(this), e3, 1 < arguments.length ? arguments[1] : void 0);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-iteration": 19
        }],
        218: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-iteration").find, s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("find", function(e3) {
            return n(s2(this), e3, 1 < arguments.length ? arguments[1] : void 0);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-iteration": 19
        }],
        219: [function(e2, t2, r2) {
          e2("../internals/typed-array-constructor")("Float32", function(o) {
            return function(e3, t3, r3) {
              return o(this, e3, t3, r3);
            };
          });
        }, {
          "../internals/typed-array-constructor": 144
        }],
        220: [function(e2, t2, r2) {
          e2("../internals/typed-array-constructor")("Float64", function(o) {
            return function(e3, t3, r3) {
              return o(this, e3, t3, r3);
            };
          });
        }, {
          "../internals/typed-array-constructor": 144
        }],
        221: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-iteration").forEach, s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("forEach", function(e3) {
            n(s2(this), e3, 1 < arguments.length ? arguments[1] : void 0);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-iteration": 19
        }],
        222: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-includes").includes, s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("includes", function(e3) {
            return n(s2(this), e3, 1 < arguments.length ? arguments[1] : void 0);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-includes": 18
        }],
        223: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-includes").indexOf, s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("indexOf", function(e3) {
            return n(s2(this), e3, 1 < arguments.length ? arguments[1] : void 0);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-includes": 18
        }],
        224: [function(e2, t2, r2) {
          e2("../internals/typed-array-constructor")("Int16", function(o) {
            return function(e3, t3, r3) {
              return o(this, e3, t3, r3);
            };
          });
        }, {
          "../internals/typed-array-constructor": 144
        }],
        225: [function(e2, t2, r2) {
          e2("../internals/typed-array-constructor")("Int32", function(o) {
            return function(e3, t3, r3) {
              return o(this, e3, t3, r3);
            };
          });
        }, {
          "../internals/typed-array-constructor": 144
        }],
        226: [function(e2, t2, r2) {
          "use strict";
          function o() {
            return a.call(c(this));
          }
          var n = e2("../internals/global"), s2 = e2("../internals/array-buffer-view-core"), i = e2("../modules/es.array.iterator"), e2 = e2("../internals/well-known-symbol")("iterator"), n = n.Uint8Array, a = i.values, l = i.keys, u2 = i.entries, c = s2.aTypedArray, i = s2.exportTypedArrayMethod, s2 = n && n.prototype[e2], n = !!s2 && ("values" == s2.name || null == s2.name);
          i("entries", function() {
            return u2.call(c(this));
          }), i("keys", function() {
            return l.call(c(this));
          }), i("values", o, !n), i(e2, o, !n);
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/global": 60,
          "../internals/well-known-symbol": 150,
          "../modules/es.array.iterator": 165
        }],
        227: [function(e2, t2, r2) {
          "use strict";
          var e2 = e2("../internals/array-buffer-view-core"), o = e2.aTypedArray, e2 = e2.exportTypedArrayMethod, n = [].join;
          e2("join", function(e3) {
            return n.apply(o(this), arguments);
          });
        }, {
          "../internals/array-buffer-view-core": 12
        }],
        228: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-last-index-of"), s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("lastIndexOf", function(e3) {
            return n.apply(s2(this), arguments);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-last-index-of": 20
        }],
        229: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-iteration").map, s2 = e2("../internals/species-constructor"), i = o.aTypedArray, a = o.aTypedArrayConstructor;
          (0, o.exportTypedArrayMethod)("map", function(e3) {
            return n(i(this), e3, 1 < arguments.length ? arguments[1] : void 0, function(e4, t3) {
              return new (a(s2(e4, e4.constructor)))(t3);
            });
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-iteration": 19,
          "../internals/species-constructor": 123
        }],
        230: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-reduce").right, s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("reduceRight", function(e3) {
            return n(s2(this), e3, arguments.length, 1 < arguments.length ? arguments[1] : void 0);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-reduce": 24
        }],
        231: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-reduce").left, s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("reduce", function(e3) {
            return n(s2(this), e3, arguments.length, 1 < arguments.length ? arguments[1] : void 0);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-reduce": 24
        }],
        232: [function(e2, t2, r2) {
          "use strict";
          var e2 = e2("../internals/array-buffer-view-core"), n = e2.aTypedArray, e2 = e2.exportTypedArrayMethod, s2 = Math.floor;
          e2("reverse", function() {
            for (var e3, t3 = n(this).length, r3 = s2(t3 / 2), o = 0; o < r3; ) e3 = this[o], this[o++] = this[--t3], this[t3] = e3;
            return this;
          });
        }, {
          "../internals/array-buffer-view-core": 12
        }],
        233: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), i = e2("../internals/to-length"), a = e2("../internals/to-offset"), l = e2("../internals/to-object"), e2 = e2("../internals/fails"), u2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("set", function(e3) {
            u2(this);
            var t3 = a(1 < arguments.length ? arguments[1] : void 0, 1), r3 = this.length, o2 = l(e3), n = i(o2.length), s2 = 0;
            if (r3 < n + t3) throw RangeError("Wrong length");
            for (; s2 < n; ) this[t3 + s2] = o2[s2++];
          }, e2(function() {
            new Int8Array(1).set({});
          }));
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/fails": 51,
          "../internals/to-length": 138,
          "../internals/to-object": 139,
          "../internals/to-offset": 140
        }],
        234: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), i = e2("../internals/species-constructor"), e2 = e2("../internals/fails"), a = o.aTypedArray, l = o.aTypedArrayConstructor, o = o.exportTypedArrayMethod, u2 = [].slice;
          o("slice", function(e3, t3) {
            for (var r3 = u2.call(a(this), e3, t3), e3 = i(this, this.constructor), o2 = 0, n = r3.length, s2 = new (l(e3))(n); o2 < n; ) s2[o2] = r3[o2++];
            return s2;
          }, e2(function() {
            new Int8Array(1).slice();
          }));
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/fails": 51,
          "../internals/species-constructor": 123
        }],
        235: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/array-iteration").some, s2 = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("some", function(e3) {
            return n(s2(this), e3, 1 < arguments.length ? arguments[1] : void 0);
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/array-iteration": 19
        }],
        236: [function(e2, t2, r2) {
          "use strict";
          var e2 = e2("../internals/array-buffer-view-core"), o = e2.aTypedArray, e2 = e2.exportTypedArrayMethod, n = [].sort;
          e2("sort", function(e3) {
            return n.call(o(this), e3);
          });
        }, {
          "../internals/array-buffer-view-core": 12
        }],
        237: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core"), n = e2("../internals/to-length"), s2 = e2("../internals/to-absolute-index"), i = e2("../internals/species-constructor"), a = o.aTypedArray;
          (0, o.exportTypedArrayMethod)("subarray", function(e3, t3) {
            var r3 = a(this), o2 = r3.length, e3 = s2(e3, o2);
            return new (i(r3, r3.constructor))(r3.buffer, r3.byteOffset + e3 * r3.BYTES_PER_ELEMENT, n((void 0 === t3 ? o2 : s2(t3, o2)) - e3));
          });
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/species-constructor": 123,
          "../internals/to-absolute-index": 134,
          "../internals/to-length": 138
        }],
        238: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/global"), n = e2("../internals/array-buffer-view-core"), e2 = e2("../internals/fails"), s2 = o.Int8Array, i = n.aTypedArray, o = n.exportTypedArrayMethod, a = [].toLocaleString, l = [].slice, u2 = !!s2 && e2(function() {
            a.call(new s2(1));
          });
          o("toLocaleString", function() {
            return a.apply(u2 ? l.call(i(this)) : i(this), arguments);
          }, e2(function() {
            return [1, 2].toLocaleString() != new s2([1, 2]).toLocaleString();
          }) || !e2(function() {
            s2.prototype.toLocaleString.call([1, 2]);
          }));
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/fails": 51,
          "../internals/global": 60
        }],
        239: [function(e2, t2, r2) {
          "use strict";
          var o = e2("../internals/array-buffer-view-core").exportTypedArrayMethod, n = e2("../internals/fails"), e2 = e2("../internals/global").Uint8Array, e2 = e2 && e2.prototype || {}, s2 = [].toString, i = [].join, n = (n(function() {
            s2.call({});
          }) && (s2 = function() {
            return i.call(this);
          }), e2.toString != s2);
          o("toString", s2, n);
        }, {
          "../internals/array-buffer-view-core": 12,
          "../internals/fails": 51,
          "../internals/global": 60
        }],
        240: [function(e2, t2, r2) {
          e2("../internals/typed-array-constructor")("Uint16", function(o) {
            return function(e3, t3, r3) {
              return o(this, e3, t3, r3);
            };
          });
        }, {
          "../internals/typed-array-constructor": 144
        }],
        241: [function(e2, t2, r2) {
          e2("../internals/typed-array-constructor")("Uint32", function(o) {
            return function(e3, t3, r3) {
              return o(this, e3, t3, r3);
            };
          });
        }, {
          "../internals/typed-array-constructor": 144
        }],
        242: [function(e2, t2, r2) {
          e2("../internals/typed-array-constructor")("Uint8", function(o) {
            return function(e3, t3, r3) {
              return o(this, e3, t3, r3);
            };
          });
        }, {
          "../internals/typed-array-constructor": 144
        }],
        243: [function(e2, t2, r2) {
          e2("../internals/typed-array-constructor")("Uint8", function(o) {
            return function(e3, t3, r3) {
              return o(this, e3, t3, r3);
            };
          }, true);
        }, {
          "../internals/typed-array-constructor": 144
        }],
        244: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return function() {
              return e3(this, arguments.length ? arguments[0] : void 0);
            };
          }
          var n, s2, i, a, l, u2 = e2("../internals/global"), c = e2("../internals/redefine-all"), d = e2("../internals/internal-metadata"), h = e2("../internals/collection"), f = e2("../internals/collection-weak"), p = e2("../internals/is-object"), m = e2("../internals/internal-state").enforce, e2 = e2("../internals/native-weak-map"), u2 = !u2.ActiveXObject && "ActiveXObject" in u2, y = Object.isExtensible, t2 = t2.exports = h("WeakMap", o, f);
          e2 && u2 && (n = f.getConstructor(o, "WeakMap", true), d.REQUIRED = true, h = t2.prototype, s2 = h.delete, i = h.has, a = h.get, l = h.set, c(h, {
            delete: function(e3) {
              var t3;
              return p(e3) && !y(e3) ? ((t3 = m(this)).frozen || (t3.frozen = new n()), s2.call(this, e3) || t3.frozen.delete(e3)) : s2.call(this, e3);
            },
            has: function(e3) {
              var t3;
              return p(e3) && !y(e3) ? ((t3 = m(this)).frozen || (t3.frozen = new n()), i.call(this, e3) || t3.frozen.has(e3)) : i.call(this, e3);
            },
            get: function(e3) {
              var t3;
              return !p(e3) || y(e3) || ((t3 = m(this)).frozen || (t3.frozen = new n()), i.call(this, e3)) ? a.call(this, e3) : t3.frozen.get(e3);
            },
            set: function(e3, t3) {
              var r3;
              return !p(e3) || y(e3) || ((r3 = m(this)).frozen || (r3.frozen = new n()), i.call(this, e3)) ? l.call(this, e3, t3) : r3.frozen.set(e3, t3), this;
            }
          }));
        }, {
          "../internals/collection": 32,
          "../internals/collection-weak": 31,
          "../internals/global": 60,
          "../internals/internal-metadata": 70,
          "../internals/internal-state": 71,
          "../internals/is-object": 75,
          "../internals/native-weak-map": 86,
          "../internals/redefine-all": 109
        }],
        245: [function(e2, t2, r2) {
          var o, n = e2("../internals/global"), s2 = e2("../internals/dom-iterables"), i = e2("../internals/array-for-each"), a = e2("../internals/create-non-enumerable-property");
          for (o in s2) {
            var l = n[o], l = l && l.prototype;
            if (l && l.forEach !== i) try {
              a(l, "forEach", i);
            } catch (e3) {
              l.forEach = i;
            }
          }
        }, {
          "../internals/array-for-each": 16,
          "../internals/create-non-enumerable-property": 38,
          "../internals/dom-iterables": 45,
          "../internals/global": 60
        }],
        246: [function(e2, t2, r2) {
          var o, n = e2("../internals/global"), s2 = e2("../internals/dom-iterables"), i = e2("../modules/es.array.iterator"), a = e2("../internals/create-non-enumerable-property"), e2 = e2("../internals/well-known-symbol"), l = e2("iterator"), u2 = e2("toStringTag"), c = i.values;
          for (o in s2) {
            var d = n[o], h = d && d.prototype;
            if (h) {
              if (h[l] !== c) try {
                a(h, l, c);
              } catch (e3) {
                h[l] = c;
              }
              if (h[u2] || a(h, u2, o), s2[o]) {
                for (var f in i) if (h[f] !== i[f]) try {
                  a(h, f, i[f]);
                } catch (e3) {
                  h[f] = i[f];
                }
              }
            }
          }
        }, {
          "../internals/create-non-enumerable-property": 38,
          "../internals/dom-iterables": 45,
          "../internals/global": 60,
          "../internals/well-known-symbol": 150,
          "../modules/es.array.iterator": 165
        }],
        247: [function(e2, t2, D) {
          "use strict";
          e2("../modules/es.array.iterator");
          function n(t3) {
            try {
              return decodeURIComponent(t3);
            } catch (e3) {
              return t3;
            }
          }
          function r2(e3) {
            return B[e3];
          }
          function s2(e3) {
            return encodeURIComponent(e3).replace(N, r2);
          }
          function c(e3) {
            this.entries.length = 0, R(this.entries, e3);
          }
          function u2(e3, t3) {
            if (e3 < t3) throw TypeError("Not enough arguments");
          }
          function d() {
            y(this, d, k);
            var e3, t3, r3, o2, n2, s3, i2, a2, l2 = 0 < arguments.length ? arguments[0] : void 0, u3 = [];
            if (C(this, {
              type: k,
              entries: u3,
              updateURL: function() {
              },
              updateSearchParams: c
            }), void 0 !== l2) if (j(l2)) {
              if ("function" == typeof (e3 = T(l2))) for (r3 = (t3 = e3.call(l2)).next; !(o2 = r3.call(t3)).done; ) {
                if ((s3 = (n2 = (o2 = S(_(o2.value))).next).call(o2)).done || (i2 = n2.call(o2)).done || !n2.call(o2).done) throw TypeError("Expected sequence with length 2");
                u3.push({
                  key: s3.value + "",
                  value: i2.value + ""
                });
              }
              else for (a2 in l2) g(l2, a2) && u3.push({
                key: a2,
                value: l2[a2] + ""
              });
            } else R(u3, "string" == typeof l2 ? "?" === l2.charAt(0) ? l2.slice(1) : l2 : l2 + "");
          }
          var o = e2("../internals/export"), i = e2("../internals/get-built-in"), a = e2("../internals/native-url"), l = e2("../internals/redefine"), h = e2("../internals/redefine-all"), f = e2("../internals/set-to-string-tag"), p = e2("../internals/create-iterator-constructor"), m = e2("../internals/internal-state"), y = e2("../internals/an-instance"), g = e2("../internals/has"), v = e2("../internals/function-bind-context"), b = e2("../internals/classof"), _ = e2("../internals/an-object"), j = e2("../internals/is-object"), x = e2("../internals/object-create"), w = e2("../internals/create-property-descriptor"), S = e2("../internals/get-iterator"), T = e2("../internals/get-iterator-method"), e2 = e2("../internals/well-known-symbol"), E = i("fetch"), M = i("Headers"), i = e2("iterator"), k = "URLSearchParams", O = k + "Iterator", C = m.set, A = m.getterFor(k), F = m.getterFor(O), U = /\+/g, P = Array(4), L = function(e3) {
            var t3, r3 = e3.replace(U, " "), o2 = 4;
            try {
              return decodeURIComponent(r3);
            } catch (e4) {
              for (; o2; ) r3 = r3.replace((t3 = o2--, P[t3 - 1] || (P[t3 - 1] = RegExp("((?:%[\\da-f]{2}){" + t3 + "})", "gi"))), n);
              return r3;
            }
          }, N = /[!'()~]|%20/g, B = {
            "!": "%21",
            "'": "%27",
            "(": "%28",
            ")": "%29",
            "~": "%7E",
            "%20": "+"
          }, R = function(e3, t3) {
            if (t3) for (var r3, o2 = t3.split("&"), n2 = 0; n2 < o2.length; ) (r3 = o2[n2++]).length && (r3 = r3.split("="), e3.push({
              key: L(r3.shift()),
              value: L(r3.join("="))
            }));
          }, I = p(function(e3, t3) {
            C(this, {
              type: O,
              iterator: S(A(e3).entries),
              kind: t3
            });
          }, "Iterator", function() {
            var e3 = F(this), t3 = e3.kind, e3 = e3.iterator.next(), r3 = e3.value;
            return e3.done || (e3.value = "keys" === t3 ? r3.key : "values" === t3 ? r3.value : [r3.key, r3.value]), e3;
          }), e2 = d.prototype;
          h(e2, {
            append: function(e3, t3) {
              u2(arguments.length, 2);
              var r3 = A(this);
              r3.entries.push({
                key: e3 + "",
                value: t3 + ""
              }), r3.updateURL();
            },
            delete: function(e3) {
              u2(arguments.length, 1);
              for (var t3 = A(this), r3 = t3.entries, o2 = e3 + "", n2 = 0; n2 < r3.length; ) r3[n2].key === o2 ? r3.splice(n2, 1) : n2++;
              t3.updateURL();
            },
            get: function(e3) {
              u2(arguments.length, 1);
              for (var t3 = A(this).entries, r3 = e3 + "", o2 = 0; o2 < t3.length; o2++) if (t3[o2].key === r3) return t3[o2].value;
              return null;
            },
            getAll: function(e3) {
              u2(arguments.length, 1);
              for (var t3 = A(this).entries, r3 = e3 + "", o2 = [], n2 = 0; n2 < t3.length; n2++) t3[n2].key === r3 && o2.push(t3[n2].value);
              return o2;
            },
            has: function(e3) {
              u2(arguments.length, 1);
              for (var t3 = A(this).entries, r3 = e3 + "", o2 = 0; o2 < t3.length; ) if (t3[o2++].key === r3) return true;
              return false;
            },
            set: function(e3, t3) {
              u2(arguments.length, 1);
              for (var r3, o2 = A(this), n2 = o2.entries, s3 = false, i2 = e3 + "", a2 = t3 + "", l2 = 0; l2 < n2.length; l2++) (r3 = n2[l2]).key === i2 && (s3 ? n2.splice(l2--, 1) : (s3 = true, r3.value = a2));
              s3 || n2.push({
                key: i2,
                value: a2
              }), o2.updateURL();
            },
            sort: function() {
              for (var e3, t3, r3 = A(this), o2 = r3.entries, n2 = o2.slice(), s3 = o2.length = 0; s3 < n2.length; s3++) {
                for (e3 = n2[s3], t3 = 0; t3 < s3; t3++) if (o2[t3].key > e3.key) {
                  o2.splice(t3, 0, e3);
                  break;
                }
                t3 === s3 && o2.push(e3);
              }
              r3.updateURL();
            },
            forEach: function(e3) {
              for (var t3, r3 = A(this).entries, o2 = v(e3, 1 < arguments.length ? arguments[1] : void 0, 3), n2 = 0; n2 < r3.length; ) o2((t3 = r3[n2++]).value, t3.key, this);
            },
            keys: function() {
              return new I(this, "keys");
            },
            values: function() {
              return new I(this, "values");
            },
            entries: function() {
              return new I(this, "entries");
            }
          }, {
            enumerable: true
          }), l(e2, i, e2.entries), l(e2, "toString", function() {
            for (var e3, t3 = A(this).entries, r3 = [], o2 = 0; o2 < t3.length; ) e3 = t3[o2++], r3.push(s2(e3.key) + "=" + s2(e3.value));
            return r3.join("&");
          }, {
            enumerable: true
          }), f(d, k), o({
            global: true,
            forced: !a
          }, {
            URLSearchParams: d
          }), a || "function" != typeof E || "function" != typeof M || o({
            global: true,
            enumerable: true,
            forced: true
          }, {
            fetch: function(e3) {
              var t3, r3, o2, e3 = [e3];
              return 1 < arguments.length && (j(t3 = arguments[1]) && (r3 = t3.body, b(r3) === k && ((o2 = t3.headers ? new M(t3.headers) : new M()).has("content-type") || o2.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"), t3 = x(t3, {
                body: w(0, String(r3)),
                headers: w(0, o2)
              }))), e3.push(t3)), E.apply(this, e3);
            }
          }), t2.exports = {
            URLSearchParams: d,
            getState: A
          };
        }, {
          "../internals/an-instance": 9,
          "../internals/an-object": 10,
          "../internals/classof": 29,
          "../internals/create-iterator-constructor": 37,
          "../internals/create-property-descriptor": 39,
          "../internals/export": 50,
          "../internals/function-bind-context": 55,
          "../internals/get-built-in": 57,
          "../internals/get-iterator": 59,
          "../internals/get-iterator-method": 58,
          "../internals/has": 61,
          "../internals/internal-state": 71,
          "../internals/is-object": 75,
          "../internals/native-url": 85,
          "../internals/object-create": 91,
          "../internals/redefine": 110,
          "../internals/redefine-all": 109,
          "../internals/set-to-string-tag": 119,
          "../internals/well-known-symbol": 150,
          "../modules/es.array.iterator": 165
        }],
        248: [function(e2, y, F) {
          "use strict";
          e2("../modules/es.string.iterator");
          function c(e3) {
            var t3, r3, o2, n2;
            if ("number" == typeof e3) {
              for (t3 = [], r3 = 0; r3 < 4; r3++) t3.unshift(e3 % 256), e3 = Y(e3 / 256);
              return t3.join(".");
            }
            if ("object" != typeof e3) return e3;
            for (t3 = "", o2 = le(e3), r3 = 0; r3 < 8; r3++) n2 && 0 === e3[r3] || (n2 = n2 && false, o2 === r3 ? (t3 += r3 ? ":" : "::", n2 = true) : (t3 += e3[r3].toString(16), r3 < 7 && (t3 += ":")));
            return "[" + t3 + "]";
          }
          function n(e3) {
            return !e3.host || e3.cannotBeABaseURL || "file" == e3.scheme;
          }
          function a(e3, t3, r3, o2) {
            var n2, s3, i2, a2 = r3 || me, l2 = 0, u3 = "", c2 = false, d2 = false, h2 = false;
            for (r3 || (e3.scheme = "", e3.username = "", e3.password = "", e3.host = null, e3.port = null, e3.path = [], e3.query = null, e3.fragment = null, e3.cannotBeABaseURL = false, t3 = t3.replace(ie, "")), t3 = t3.replace(ae, ""), n2 = b(t3); l2 <= n2.length; ) {
              switch (s3 = n2[l2], a2) {
                case me:
                  if (!s3 || !J.test(s3)) {
                    if (r3) return _;
                    a2 = ge;
                    continue;
                  }
                  u3 += s3.toLowerCase(), a2 = ye;
                  break;
                case ye:
                  if (s3 && ($.test(s3) || "+" == s3 || "-" == s3 || "." == s3)) u3 += s3.toLowerCase();
                  else {
                    if (":" != s3) {
                      if (r3) return _;
                      u3 = "", a2 = ge, l2 = 0;
                      continue;
                    }
                    if (r3 && (k(e3) != v(M, u3) || "file" == u3 && (O(e3) || null !== e3.port) || "file" == e3.scheme && !e3.host)) return;
                    if (e3.scheme = u3, r3) return void (k(e3) && M[e3.scheme] == e3.port && (e3.port = null));
                    u3 = "", "file" == e3.scheme ? a2 = Ee : k(e3) && o2 && o2.scheme == e3.scheme ? a2 = ve : k(e3) ? a2 = xe : "/" == n2[l2 + 1] ? (a2 = be, l2++) : (e3.cannotBeABaseURL = true, e3.path.push(""), a2 = Oe);
                  }
                  break;
                case ge:
                  if (!o2 || o2.cannotBeABaseURL && "#" != s3) return _;
                  if (o2.cannotBeABaseURL && "#" == s3) {
                    e3.scheme = o2.scheme, e3.path = o2.path.slice(), e3.query = o2.query, e3.fragment = "", e3.cannotBeABaseURL = true, a2 = D;
                    break;
                  }
                  a2 = "file" == o2.scheme ? Ee : _e;
                  continue;
                case ve:
                  if ("/" != s3 || "/" != n2[l2 + 1]) {
                    a2 = _e;
                    continue;
                  }
                  a2 = A, l2++;
                  break;
                case be:
                  if ("/" == s3) {
                    a2 = P;
                    break;
                  }
                  a2 = R;
                  continue;
                case _e:
                  if (e3.scheme = o2.scheme, s3 == g) e3.username = o2.username, e3.password = o2.password, e3.host = o2.host, e3.port = o2.port, e3.path = o2.path.slice(), e3.query = o2.query;
                  else if ("/" == s3 || "\\" == s3 && k(e3)) a2 = je;
                  else if ("?" == s3) e3.username = o2.username, e3.password = o2.password, e3.host = o2.host, e3.port = o2.port, e3.path = o2.path.slice(), e3.query = "", a2 = I;
                  else {
                    if ("#" != s3) {
                      e3.username = o2.username, e3.password = o2.password, e3.host = o2.host, e3.port = o2.port, e3.path = o2.path.slice(), e3.path.pop(), a2 = R;
                      continue;
                    }
                    e3.username = o2.username, e3.password = o2.password, e3.host = o2.host, e3.port = o2.port, e3.path = o2.path.slice(), e3.query = o2.query, e3.fragment = "", a2 = D;
                  }
                  break;
                case je:
                  if (!k(e3) || "/" != s3 && "\\" != s3) {
                    if ("/" != s3) {
                      e3.username = o2.username, e3.password = o2.password, e3.host = o2.host, e3.port = o2.port, a2 = R;
                      continue;
                    }
                    a2 = P;
                  } else a2 = A;
                  break;
                case xe:
                  if (a2 = A, "/" != s3 || "/" != u3.charAt(l2 + 1)) continue;
                  l2++;
                  break;
                case A:
                  if ("/" == s3 || "\\" == s3) break;
                  a2 = P;
                  continue;
                case P:
                  if ("@" == s3) {
                    c2 && (u3 = "%40" + u3);
                    for (var c2 = true, f2 = b(u3), p2 = 0; p2 < f2.length; p2++) {
                      var m2 = f2[p2];
                      ":" != m2 || h2 ? (m2 = E(m2, T), h2 ? e3.password += m2 : e3.username += m2) : h2 = true;
                    }
                    u3 = "";
                  } else if (s3 == g || "/" == s3 || "?" == s3 || "#" == s3 || "\\" == s3 && k(e3)) {
                    if (c2 && "" == u3) return K;
                    l2 -= b(u3).length + 1, u3 = "", a2 = we;
                  } else u3 += s3;
                  break;
                case we:
                case Se:
                  if (r3 && "file" == e3.scheme) {
                    a2 = ke;
                    continue;
                  }
                  if (":" != s3 || d2) {
                    if (s3 == g || "/" == s3 || "?" == s3 || "#" == s3 || "\\" == s3 && k(e3)) {
                      if (k(e3) && "" == u3) return j;
                      if (r3 && "" == u3 && (O(e3) || null !== e3.port)) return;
                      if (i2 = w(e3, u3)) return i2;
                      if (u3 = "", a2 = L, r3) return;
                      continue;
                    }
                    "[" == s3 ? d2 = true : "]" == s3 && (d2 = false), u3 += s3;
                  } else {
                    if ("" == u3) return j;
                    if (i2 = w(e3, u3)) return i2;
                    if (u3 = "", a2 = Te, r3 == Se) return;
                  }
                  break;
                case Te:
                  if (!x.test(s3)) {
                    if (s3 == g || "/" == s3 || "?" == s3 || "#" == s3 || "\\" == s3 && k(e3) || r3) {
                      if ("" != u3) {
                        var y2 = parseInt(u3, 10);
                        if (65535 < y2) return Q;
                        e3.port = k(e3) && y2 === M[e3.scheme] ? null : y2, u3 = "";
                      }
                      if (r3) return;
                      a2 = L;
                      continue;
                    }
                    return Q;
                  }
                  u3 += s3;
                  break;
                case Ee:
                  if (e3.scheme = "file", "/" == s3 || "\\" == s3) a2 = Me;
                  else {
                    if (!o2 || "file" != o2.scheme) {
                      a2 = R;
                      continue;
                    }
                    if (s3 == g) e3.host = o2.host, e3.path = o2.path.slice(), e3.query = o2.query;
                    else if ("?" == s3) e3.host = o2.host, e3.path = o2.path.slice(), e3.query = "", a2 = I;
                    else {
                      if ("#" != s3) {
                        de(n2.slice(l2).join("")) || (e3.host = o2.host, e3.path = o2.path.slice(), he(e3)), a2 = R;
                        continue;
                      }
                      e3.host = o2.host, e3.path = o2.path.slice(), e3.query = o2.query, e3.fragment = "", a2 = D;
                    }
                  }
                  break;
                case Me:
                  if ("/" == s3 || "\\" == s3) {
                    a2 = ke;
                    break;
                  }
                  o2 && "file" == o2.scheme && !de(n2.slice(l2).join("")) && (C(o2.path[0], true) ? e3.path.push(o2.path[0]) : e3.host = o2.host), a2 = R;
                  continue;
                case ke:
                  if (s3 == g || "/" == s3 || "\\" == s3 || "?" == s3 || "#" == s3) {
                    if (!r3 && C(u3)) a2 = R;
                    else {
                      if ("" == u3) {
                        if (e3.host = "", r3) return;
                      } else {
                        if (i2 = w(e3, u3)) return i2;
                        if ("localhost" == e3.host && (e3.host = ""), r3) return;
                        u3 = "";
                      }
                      a2 = L;
                    }
                    continue;
                  }
                  u3 += s3;
                  break;
                case L:
                  if (k(e3)) {
                    if (a2 = R, "/" != s3 && "\\" != s3) continue;
                  } else if (r3 || "?" != s3) {
                    if (r3 || "#" != s3) {
                      if (s3 != g && (a2 = R, "/" != s3)) continue;
                    } else e3.fragment = "", a2 = D;
                  } else e3.query = "", a2 = I;
                  break;
                case R:
                  if (s3 == g || "/" == s3 || "\\" == s3 && k(e3) || !r3 && ("?" == s3 || "#" == s3)) {
                    if (pe(u3) ? (he(e3), "/" == s3 || "\\" == s3 && k(e3) || e3.path.push("")) : fe(u3) ? "/" == s3 || "\\" == s3 && k(e3) || e3.path.push("") : ("file" == e3.scheme && !e3.path.length && C(u3) && (e3.host && (e3.host = ""), u3 = u3.charAt(0) + ":"), e3.path.push(u3)), u3 = "", "file" == e3.scheme && (s3 == g || "?" == s3 || "#" == s3)) for (; 1 < e3.path.length && "" === e3.path[0]; ) e3.path.shift();
                    "?" == s3 ? (e3.query = "", a2 = I) : "#" == s3 && (e3.fragment = "", a2 = D);
                  } else u3 += E(s3, ce);
                  break;
                case Oe:
                  "?" == s3 ? (e3.query = "", a2 = I) : "#" == s3 ? (e3.fragment = "", a2 = D) : s3 != g && (e3.path[0] += E(s3, S));
                  break;
                case I:
                  r3 || "#" != s3 ? s3 != g && ("'" == s3 && k(e3) ? e3.query += "%27" : e3.query += "#" == s3 ? "%23" : E(s3, S)) : (e3.fragment = "", a2 = D);
                  break;
                case D:
                  s3 != g && (e3.fragment += E(s3, ue));
              }
              l2++;
            }
          }
          function l(e3) {
            var t3, r3, o2 = G(this, l, "URL"), n2 = 1 < arguments.length ? arguments[1] : void 0, e3 = String(e3), s3 = X(o2, {
              type: "URL"
            });
            if (void 0 !== n2) {
              if (n2 instanceof l) t3 = p(n2);
              else if (r3 = a(t3 = {}, String(n2))) throw TypeError(r3);
            }
            if (r3 = a(s3, e3, null, t3)) throw TypeError(r3);
            var i2 = s3.searchParams = new q();
            (n2 = f(i2)).updateSearchParams(s3.query), n2.updateURL = function() {
              s3.query = String(i2) || null;
            }, u2 || (o2.href = m.call(o2), o2.origin = Ce.call(o2), o2.protocol = Ae.call(o2), o2.username = Pe.call(o2), o2.password = Le.call(o2), o2.host = Re.call(o2), o2.hostname = Ie.call(o2), o2.port = De.call(o2), o2.pathname = Fe.call(o2), o2.search = Ue.call(o2), o2.searchParams = Ne.call(o2), o2.hash = Be.call(o2));
          }
          function t2(e3, t3) {
            return {
              get: e3,
              set: t3,
              configurable: true,
              enumerable: true
            };
          }
          var g, r2, o, U = e2("../internals/export"), u2 = e2("../internals/descriptors"), N = e2("../internals/native-url"), s2 = e2("../internals/global"), B = e2("../internals/object-define-properties"), i = e2("../internals/redefine"), G = e2("../internals/an-instance"), v = e2("../internals/has"), d = e2("../internals/object-assign"), b = e2("../internals/array-from"), V = e2("../internals/string-multibyte").codeAt, z = e2("../internals/string-punycode-to-ascii"), H = e2("../internals/set-to-string-tag"), W = e2("../modules/web.url-search-params"), e2 = e2("../internals/internal-state"), h = s2.URL, q = W.URLSearchParams, f = W.getState, X = e2.set, p = e2.getterFor("URL"), Y = Math.floor, Z = Math.pow, K = "Invalid authority", _ = "Invalid scheme", j = "Invalid host", Q = "Invalid port", J = /[A-Za-z]/, $ = /[\d+-.A-Za-z]/, x = /\d/, ee = /^(0x|0X)/, te = /^[0-7]+$/, re = /^\d+$/, oe = /^[\dA-Fa-f]+$/, ne = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/, se = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/, ie = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g, ae = /[\u0009\u000A\u000D]/g, w = function(e3, t3) {
            var r3, o2, n2;
            if ("[" == t3.charAt(0)) return "]" == t3.charAt(t3.length - 1) && (r3 = function(e4) {
              var t4 = [0, 0, 0, 0, 0, 0, 0, 0], r4 = 0, o3 = null, n3 = 0, s3, i2, a2, l2, u3, c2, d2, h2 = function() {
                return e4.charAt(n3);
              };
              if (h2() == ":") {
                if (e4.charAt(1) != ":") return;
                n3 += 2;
                r4++;
                o3 = r4;
              }
              while (h2()) {
                if (r4 == 8) return;
                if (h2() == ":") {
                  if (o3 !== null) return;
                  n3++;
                  r4++;
                  o3 = r4;
                  continue;
                }
                s3 = i2 = 0;
                while (i2 < 4 && oe.test(h2())) {
                  s3 = s3 * 16 + parseInt(h2(), 16);
                  n3++;
                  i2++;
                }
                if (h2() == ".") {
                  if (i2 == 0) return;
                  n3 -= i2;
                  if (r4 > 6) return;
                  a2 = 0;
                  while (h2()) {
                    l2 = null;
                    if (a2 > 0) if (h2() == "." && a2 < 4) n3++;
                    else return;
                    if (!x.test(h2())) return;
                    while (x.test(h2())) {
                      u3 = parseInt(h2(), 10);
                      if (l2 === null) l2 = u3;
                      else if (l2 == 0) return;
                      else l2 = l2 * 10 + u3;
                      if (l2 > 255) return;
                      n3++;
                    }
                    t4[r4] = t4[r4] * 256 + l2;
                    a2++;
                    if (a2 == 2 || a2 == 4) r4++;
                  }
                  if (a2 != 4) return;
                  break;
                } else if (h2() == ":") {
                  n3++;
                  if (!h2()) return;
                } else if (h2()) return;
                t4[r4++] = s3;
              }
              if (o3 !== null) {
                c2 = r4 - o3;
                r4 = 7;
                while (r4 != 0 && c2 > 0) {
                  d2 = t4[r4];
                  t4[r4--] = t4[o3 + c2 - 1];
                  t4[o3 + --c2] = d2;
                }
              } else if (r4 != 8) return;
              return t4;
            }(t3.slice(1, -1))) ? void (e3.host = r3) : j;
            if (k(e3)) return t3 = z(t3), ne.test(t3) || null === (r3 = function(e4) {
              var t4 = e4.split("."), r4, o3, n3, s3, i2, a2, l2;
              if (t4.length && t4[t4.length - 1] == "") t4.pop();
              if ((r4 = t4.length) > 4) return e4;
              for (o3 = [], n3 = 0; n3 < r4; n3++) {
                s3 = t4[n3];
                if (s3 == "") return e4;
                i2 = 10;
                if (s3.length > 1 && s3.charAt(0) == "0") {
                  i2 = ee.test(s3) ? 16 : 8;
                  s3 = s3.slice(i2 == 8 ? 1 : 2);
                }
                if (s3 === "") a2 = 0;
                else {
                  if (!(i2 == 10 ? re : i2 == 8 ? te : oe).test(s3)) return e4;
                  a2 = parseInt(s3, i2);
                }
                o3.push(a2);
              }
              for (n3 = 0; n3 < r4; n3++) {
                a2 = o3[n3];
                if (n3 == r4 - 1) {
                  if (a2 >= Z(256, 5 - r4)) return null;
                } else if (a2 > 255) return null;
              }
              for (l2 = o3.pop(), n3 = 0; n3 < o3.length; n3++) l2 += o3[n3] * Z(256, 3 - n3);
              return l2;
            }(t3)) ? j : void (e3.host = r3);
            if (se.test(t3)) return j;
            for (r3 = "", o2 = b(t3), n2 = 0; n2 < o2.length; n2++) r3 += E(o2[n2], S);
            e3.host = r3;
          }, le = function(e3) {
            for (var t3 = null, r3 = 1, o2 = null, n2 = 0, s3 = 0; s3 < 8; s3++) 0 !== e3[s3] ? (r3 < n2 && (t3 = o2, r3 = n2), o2 = null, n2 = 0) : (null === o2 && (o2 = s3), ++n2);
            return r3 < n2 && (t3 = o2, r3 = n2), t3;
          }, S = {}, ue = d({}, S, {
            " ": 1,
            '"': 1,
            "<": 1,
            ">": 1,
            "`": 1
          }), ce = d({}, ue, {
            "#": 1,
            "?": 1,
            "{": 1,
            "}": 1
          }), T = d({}, ce, {
            "/": 1,
            ":": 1,
            ";": 1,
            "=": 1,
            "@": 1,
            "[": 1,
            "\\": 1,
            "]": 1,
            "^": 1,
            "|": 1
          }), E = function(e3, t3) {
            var r3 = V(e3, 0);
            return 32 < r3 && r3 < 127 && !v(t3, e3) ? e3 : encodeURIComponent(e3);
          }, M = {
            ftp: 21,
            file: null,
            http: 80,
            https: 443,
            ws: 80,
            wss: 443
          }, k = function(e3) {
            return v(M, e3.scheme);
          }, O = function(e3) {
            return "" != e3.username || "" != e3.password;
          }, C = function(e3, t3) {
            return 2 == e3.length && J.test(e3.charAt(0)) && (":" == (e3 = e3.charAt(1)) || !t3 && "|" == e3);
          }, de = function(e3) {
            return 1 < e3.length && C(e3.slice(0, 2)) && (2 == e3.length || "/" === (e3 = e3.charAt(2)) || "\\" === e3 || "?" === e3 || "#" === e3);
          }, he = function(e3) {
            var t3 = e3.path, r3 = t3.length;
            !r3 || "file" == e3.scheme && 1 == r3 && C(t3[0], true) || t3.pop();
          }, fe = function(e3) {
            return "." === e3 || "%2e" === e3.toLowerCase();
          }, pe = function(e3) {
            return ".." === (e3 = e3.toLowerCase()) || "%2e." === e3 || ".%2e" === e3 || "%2e%2e" === e3;
          }, me = {}, ye = {}, ge = {}, ve = {}, be = {}, _e = {}, je = {}, xe = {}, A = {}, P = {}, we = {}, Se = {}, Te = {}, Ee = {}, Me = {}, ke = {}, L = {}, R = {}, Oe = {}, I = {}, D = {}, s2 = l.prototype, m = function() {
            var e3 = p(this), t3 = e3.scheme, r3 = e3.username, o2 = e3.password, n2 = e3.host, s3 = e3.port, i2 = e3.path, a2 = e3.query, l2 = e3.fragment, u3 = t3 + ":";
            return null !== n2 ? (u3 += "//", O(e3) && (u3 += r3 + (o2 ? ":" + o2 : "") + "@"), u3 += c(n2), null !== s3 && (u3 += ":" + s3)) : "file" == t3 && (u3 += "//"), u3 += e3.cannotBeABaseURL ? i2[0] : i2.length ? "/" + i2.join("/") : "", null !== a2 && (u3 += "?" + a2), null !== l2 && (u3 += "#" + l2), u3;
          }, Ce = function() {
            var e3 = p(this), t3 = e3.scheme, r3 = e3.port;
            if ("blob" == t3) try {
              return new URL(t3.path[0]).origin;
            } catch (e4) {
              return "null";
            }
            return "file" != t3 && k(e3) ? t3 + "://" + c(e3.host) + (null !== r3 ? ":" + r3 : "") : "null";
          }, Ae = function() {
            return p(this).scheme + ":";
          }, Pe = function() {
            return p(this).username;
          }, Le = function() {
            return p(this).password;
          }, Re = function() {
            var e3 = p(this), t3 = e3.host, e3 = e3.port;
            return null === t3 ? "" : null === e3 ? c(t3) : c(t3) + ":" + e3;
          }, Ie = function() {
            var e3 = p(this).host;
            return null === e3 ? "" : c(e3);
          }, De = function() {
            var e3 = p(this).port;
            return null === e3 ? "" : String(e3);
          }, Fe = function() {
            var e3 = p(this), t3 = e3.path;
            return e3.cannotBeABaseURL ? t3[0] : t3.length ? "/" + t3.join("/") : "";
          }, Ue = function() {
            var e3 = p(this).query;
            return e3 ? "?" + e3 : "";
          }, Ne = function() {
            return p(this).searchParams;
          }, Be = function() {
            var e3 = p(this).fragment;
            return e3 ? "#" + e3 : "";
          };
          u2 && B(s2, {
            href: t2(m, function(e3) {
              var t3 = p(this), e3 = String(e3), e3 = a(t3, e3);
              if (e3) throw TypeError(e3);
              f(t3.searchParams).updateSearchParams(t3.query);
            }),
            origin: t2(Ce),
            protocol: t2(Ae, function(e3) {
              var t3 = p(this);
              a(t3, String(e3) + ":", me);
            }),
            username: t2(Pe, function(e3) {
              var t3 = p(this), r3 = b(String(e3));
              if (!n(t3)) {
                t3.username = "";
                for (var o2 = 0; o2 < r3.length; o2++) t3.username += E(r3[o2], T);
              }
            }),
            password: t2(Le, function(e3) {
              var t3 = p(this), r3 = b(String(e3));
              if (!n(t3)) {
                t3.password = "";
                for (var o2 = 0; o2 < r3.length; o2++) t3.password += E(r3[o2], T);
              }
            }),
            host: t2(Re, function(e3) {
              var t3 = p(this);
              t3.cannotBeABaseURL || a(t3, String(e3), we);
            }),
            hostname: t2(Ie, function(e3) {
              var t3 = p(this);
              t3.cannotBeABaseURL || a(t3, String(e3), Se);
            }),
            port: t2(De, function(e3) {
              var t3 = p(this);
              n(t3) || ("" == (e3 = String(e3)) ? t3.port = null : a(t3, e3, Te));
            }),
            pathname: t2(Fe, function(e3) {
              var t3 = p(this);
              t3.cannotBeABaseURL || (t3.path = [], a(t3, e3 + "", L));
            }),
            search: t2(Ue, function(e3) {
              var t3 = p(this);
              "" == (e3 = String(e3)) ? t3.query = null : ("?" == e3.charAt(0) && (e3 = e3.slice(1)), t3.query = "", a(t3, e3, I)), f(t3.searchParams).updateSearchParams(t3.query);
            }),
            searchParams: t2(Ne),
            hash: t2(Be, function(e3) {
              var t3 = p(this);
              "" == (e3 = String(e3)) ? t3.fragment = null : ("#" == e3.charAt(0) && (e3 = e3.slice(1)), t3.fragment = "", a(t3, e3, D));
            })
          }), i(s2, "toJSON", function() {
            return m.call(this);
          }, {
            enumerable: true
          }), i(s2, "toString", function() {
            return m.call(this);
          }, {
            enumerable: true
          }), h && (r2 = h.createObjectURL, o = h.revokeObjectURL, r2 && i(l, "createObjectURL", function(e3) {
            return r2.apply(h, arguments);
          }), o && i(l, "revokeObjectURL", function(e3) {
            return o.apply(h, arguments);
          })), H(l, "URL"), U({
            global: true,
            forced: !N,
            sham: !u2
          }, {
            URL: l
          });
        }, {
          "../internals/an-instance": 9,
          "../internals/array-from": 17,
          "../internals/descriptors": 43,
          "../internals/export": 50,
          "../internals/global": 60,
          "../internals/has": 61,
          "../internals/internal-state": 71,
          "../internals/native-url": 85,
          "../internals/object-assign": 90,
          "../internals/object-define-properties": 92,
          "../internals/redefine": 110,
          "../internals/set-to-string-tag": 119,
          "../internals/string-multibyte": 125,
          "../internals/string-punycode-to-ascii": 128,
          "../modules/es.string.iterator": 200,
          "../modules/web.url-search-params": 247
        }],
        249: [function(e2, t2, r2) {
          "use strict";
          t2.exports = e2("./").polyfill();
        }, {
          "./": 250
        }],
        250: [function(V, r2, o) {
          !function(B, G) {
            var e2, t2;
            e2 = this, t2 = function() {
              "use strict";
              function l(e4) {
                return "function" == typeof e4;
              }
              var r3 = Array.isArray || function(e4) {
                return "[object Array]" === Object.prototype.toString.call(e4);
              }, o2 = 0, t3 = void 0, n = void 0, i = function(e4, t4) {
                d[o2] = e4, d[o2 + 1] = t4, 2 === (o2 += 2) && (n ? n(h) : D());
              };
              var e3 = "undefined" != typeof window ? window : void 0, s2 = e3 || {}, s2 = s2.MutationObserver || s2.WebKitMutationObserver, a = "undefined" == typeof self && void 0 !== B && "[object process]" === {}.toString.call(B), u2 = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel;
              function c() {
                var e4 = setTimeout;
                return function() {
                  return e4(h, 1);
                };
              }
              var d = new Array(1e3);
              function h() {
                for (var e4 = 0; e4 < o2; e4 += 2) (0, d[e4])(d[e4 + 1]), d[e4] = void 0, d[e4 + 1] = void 0;
                o2 = 0;
              }
              function f() {
                try {
                  var e4 = Function("return this")().require("vertx");
                  return void 0 !== (t3 = e4.runOnLoop || e4.runOnContext) ? function() {
                    t3(h);
                  } : c();
                } catch (e5) {
                  return c();
                }
              }
              var p, m, y, D = void 0;
              function g(e4, t4) {
                var r4, o3 = this, n2 = new this.constructor(_), s3 = (void 0 === n2[b] && P(n2), o3._state);
                return s3 ? (r4 = arguments[s3 - 1], i(function() {
                  return C(s3, n2, r4, o3._result);
                })) : k(o3, n2, e4, t4), n2;
              }
              function v(e4) {
                var t4;
                return e4 && "object" == typeof e4 && e4.constructor === this ? e4 : (T(t4 = new this(_), e4), t4);
              }
              var D = a ? function() {
                return B.nextTick(h);
              } : s2 ? (m = 0, a = new s2(h), y = document.createTextNode(""), a.observe(y, {
                characterData: true
              }), function() {
                y.data = m = ++m % 2;
              }) : u2 ? ((p = new MessageChannel()).port1.onmessage = h, function() {
                return p.port2.postMessage(0);
              }) : (void 0 === e3 && "function" == typeof V ? f : c)(), b = Math.random().toString(36).substring(2);
              function _() {
              }
              var j = void 0, x = 1, w = 2;
              function F(e4, o3, n2) {
                i(function(t4) {
                  var r4 = false, e5 = function(e6, t5, r5, o4) {
                    try {
                      e6.call(t5, r5, o4);
                    } catch (e7) {
                      return e7;
                    }
                  }(n2, o3, function(e6) {
                    r4 || (r4 = true, (o3 !== e6 ? T : E)(t4, e6));
                  }, function(e6) {
                    r4 || (r4 = true, M(t4, e6));
                  }, t4._label);
                  !r4 && e5 && (r4 = true, M(t4, e5));
                }, e4);
              }
              function S(e4, t4, r4) {
                var o3, n2;
                t4.constructor === e4.constructor && r4 === g && t4.constructor.resolve === v ? (o3 = e4, (n2 = t4)._state === x ? E(o3, n2._result) : n2._state === w ? M(o3, n2._result) : k(n2, void 0, function(e5) {
                  return T(o3, e5);
                }, function(e5) {
                  return M(o3, e5);
                })) : void 0 !== r4 && l(r4) ? F(e4, t4, r4) : E(e4, t4);
              }
              function T(t4, e4) {
                if (t4 === e4) M(t4, new TypeError("You cannot resolve a promise with itself"));
                else if (r4 = typeof e4, null === e4 || "object" != r4 && "function" != r4) E(t4, e4);
                else {
                  r4 = void 0;
                  try {
                    r4 = e4.then;
                  } catch (e5) {
                    return void M(t4, e5);
                  }
                  S(t4, e4, r4);
                }
                var r4;
              }
              function U(e4) {
                e4._onerror && e4._onerror(e4._result), O(e4);
              }
              function E(e4, t4) {
                e4._state === j && (e4._result = t4, e4._state = x, 0 !== e4._subscribers.length && i(O, e4));
              }
              function M(e4, t4) {
                e4._state === j && (e4._state = w, e4._result = t4, i(U, e4));
              }
              function k(e4, t4, r4, o3) {
                var n2 = e4._subscribers, s3 = n2.length;
                e4._onerror = null, n2[s3] = t4, n2[s3 + x] = r4, n2[s3 + w] = o3, 0 === s3 && e4._state && i(O, e4);
              }
              function O(e4) {
                var t4 = e4._subscribers, r4 = e4._state;
                if (0 !== t4.length) {
                  for (var o3, n2 = void 0, s3 = e4._result, i2 = 0; i2 < t4.length; i2 += 3) o3 = t4[i2], n2 = t4[i2 + r4], o3 ? C(r4, o3, n2, s3) : n2(s3);
                  e4._subscribers.length = 0;
                }
              }
              function C(e4, t4, r4, o3) {
                var n2 = l(r4), s3 = void 0, i2 = void 0, a2 = true;
                if (n2) {
                  try {
                    s3 = r4(o3);
                  } catch (e5) {
                    a2 = false, i2 = e5;
                  }
                  if (t4 === s3) return void M(t4, new TypeError("A promises callback cannot return that same promise."));
                } else s3 = o3;
                t4._state === j && (n2 && a2 ? T(t4, s3) : false === a2 ? M(t4, i2) : e4 === x ? E(t4, s3) : e4 === w && M(t4, s3));
              }
              var A = 0;
              function P(e4) {
                e4[b] = A++, e4._state = void 0, e4._result = void 0, e4._subscribers = [];
              }
              L.prototype._enumerate = function(e4) {
                for (var t4 = 0; this._state === j && t4 < e4.length; t4++) this._eachEntry(e4[t4], t4);
              }, L.prototype._eachEntry = function(t4, e4) {
                var r4 = this._instanceConstructor, o3 = r4.resolve;
                if (o3 === v) {
                  var n2, s3 = void 0, i2 = void 0, a2 = false;
                  try {
                    s3 = t4.then;
                  } catch (e5) {
                    a2 = true, i2 = e5;
                  }
                  s3 === g && t4._state !== j ? this._settledAt(t4._state, e4, t4._result) : "function" != typeof s3 ? (this._remaining--, this._result[e4] = t4) : r4 === R ? (n2 = new r4(_), a2 ? M(n2, i2) : S(n2, t4, s3), this._willSettleAt(n2, e4)) : this._willSettleAt(new r4(function(e5) {
                    return e5(t4);
                  }), e4);
                } else this._willSettleAt(o3(t4), e4);
              }, L.prototype._settledAt = function(e4, t4, r4) {
                var o3 = this.promise;
                o3._state === j && (this._remaining--, e4 === w ? M(o3, r4) : this._result[t4] = r4), 0 === this._remaining && E(o3, this._result);
              }, L.prototype._willSettleAt = function(e4, t4) {
                var r4 = this;
                k(e4, void 0, function(e5) {
                  return r4._settledAt(x, t4, e5);
                }, function(e5) {
                  return r4._settledAt(w, t4, e5);
                });
              };
              var N = L;
              function L(e4, t4) {
                this._instanceConstructor = e4, this.promise = new e4(_), this.promise[b] || P(this.promise), r3(t4) ? (this.length = t4.length, this._remaining = t4.length, this._result = new Array(this.length), 0 !== this.length && (this.length = this.length || 0, this._enumerate(t4), 0 !== this._remaining) || E(this.promise, this._result)) : M(this.promise, new Error("Array Methods must be provided an Array"));
              }
              I.prototype.catch = function(e4) {
                return this.then(null, e4);
              }, I.prototype.finally = function(t4) {
                var r4 = this.constructor;
                return l(t4) ? this.then(function(e4) {
                  return r4.resolve(t4()).then(function() {
                    return e4;
                  });
                }, function(e4) {
                  return r4.resolve(t4()).then(function() {
                    throw e4;
                  });
                }) : this.then(t4, t4);
              };
              var R = I;
              function I(e4) {
                if (this[b] = A++, this._result = this._state = void 0, this._subscribers = [], _ !== e4) {
                  if ("function" != typeof e4) throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
                  if (!(this instanceof I)) throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                  var t4 = this;
                  try {
                    e4(function(e5) {
                      T(t4, e5);
                    }, function(e5) {
                      M(t4, e5);
                    });
                  } catch (e5) {
                    M(t4, e5);
                  }
                }
              }
              return R.prototype.then = g, R.all = function(e4) {
                return new N(this, e4).promise;
              }, R.race = function(n2) {
                var s3 = this;
                return r3(n2) ? new s3(function(e4, t4) {
                  for (var r4 = n2.length, o3 = 0; o3 < r4; o3++) s3.resolve(n2[o3]).then(e4, t4);
                }) : new s3(function(e4, t4) {
                  return t4(new TypeError("You must pass an array to race."));
                });
              }, R.resolve = v, R.reject = function(e4) {
                var t4 = new this(_);
                return M(t4, e4), t4;
              }, R._setScheduler = function(e4) {
                n = e4;
              }, R._setAsap = function(e4) {
                i = e4;
              }, R._asap = i, R.polyfill = function() {
                var e4 = void 0;
                if (void 0 !== G) e4 = G;
                else if ("undefined" != typeof self) e4 = self;
                else try {
                  e4 = Function("return this")();
                } catch (e5) {
                  throw new Error("polyfill failed because global object is unavailable in this environment");
                }
                var t4 = e4.Promise;
                if (t4) {
                  var r4 = null;
                  try {
                    r4 = Object.prototype.toString.call(t4.resolve());
                  } catch (e5) {
                  }
                  if ("[object Promise]" === r4 && !t4.cast) return;
                }
                e4.Promise = R;
              }, R.Promise = R;
            }, "object" == typeof o && void 0 !== r2 ? r2.exports = t2() : "function" == typeof s && s.amd ? s(t2) : e2.ES6Promise = t2();
          }.call(this, V("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
        }, {
          _process: 259
        }],
        251: [function(e2, t2, r2) {
          var o, n;
          o = this, n = function(e3, t3) {
            "use strict";
            var r3 = 5e3, o2 = "callback";
            function d(t4) {
              try {
                delete window[t4];
              } catch (e4) {
                window[t4] = void 0;
              }
            }
            function h(e4) {
              e4 = document.getElementById(e4);
              e4 && document.getElementsByTagName("head")[0].removeChild(e4);
            }
            t3.exports = function(s2) {
              var i = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1], a = s2, l = i.timeout || r3, u2 = i.jsonpCallback || o2, c = void 0;
              return new Promise(function(t4, e4) {
                var r4 = i.jsonpCallbackFunction || "jsonp_" + Date.now() + "_" + Math.ceil(1e5 * Math.random()), o3 = u2 + "_" + r4, n2 = (window[r4] = function(e5) {
                  t4({
                    ok: true,
                    json: function() {
                      return Promise.resolve(e5);
                    }
                  }), c && clearTimeout(c), h(o3), d(r4);
                }, a += -1 === a.indexOf("?") ? "?" : "&", document.createElement("script"));
                n2.setAttribute("src", "" + a + u2 + "=" + r4), i.charset && n2.setAttribute("charset", i.charset), n2.id = o3, document.getElementsByTagName("head")[0].appendChild(n2), c = setTimeout(function() {
                  e4(new Error("JSONP request to " + s2 + " timed out")), d(r4), h(o3), window[r4] = function() {
                    d(r4);
                  };
                }, l), n2.onerror = function() {
                  e4(new Error("JSONP request to " + s2 + " failed")), d(r4), h(o3), c && clearTimeout(c);
                };
              });
            };
          }, "function" == typeof s && s.amd ? s(["exports", "module"], n) : void 0 !== r2 && void 0 !== t2 ? n(0, t2) : (n(n = {
            exports: {}
          }, n), o.fetchJsonp = n.exports);
        }, {}],
        252: [function(e2, t2, r2) {
          var o = function(a) {
            "use strict";
            var l, u2, c, d, h, f, t3, p, m, o2, e3;
            if (!(void 0 === a || "undefined" != typeof navigator && /MSIE [1-9]\./.test(navigator.userAgent))) return e3 = a.document, l = function() {
              return a.URL || a.webkitURL || a;
            }, u2 = e3.createElementNS("http://www.w3.org/1999/xhtml", "a"), c = "download" in u2, d = /constructor/i.test(a.HTMLElement) || a.safari, h = /CriOS\/[\d]+/.test(navigator.userAgent), f = function(e4) {
              (a.setImmediate || a.setTimeout)(function() {
                throw e4;
              }, 0);
            }, t3 = 4e4, p = function(e4) {
              setTimeout(function() {
                "string" == typeof e4 ? l().revokeObjectURL(e4) : e4.remove();
              }, t3);
            }, m = function(e4) {
              return /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e4.type) ? new Blob([String.fromCharCode(65279), e4], {
                type: e4.type
              }) : e4;
            }, e3 = (o2 = function(e4, r3, t4) {
              t4 || (e4 = m(e4));
              var o3, n, s2 = this, t4 = "application/octet-stream" === e4.type, i = function() {
                for (var e5 = s2, t5 = "writestart progress write writeend".split(" "), r4 = void 0, o4 = (t5 = [].concat(t5)).length; o4--; ) {
                  var n2 = e5["on" + t5[o4]];
                  if ("function" == typeof n2) try {
                    n2.call(e5, r4 || e5);
                  } catch (e6) {
                    f(e6);
                  }
                }
              };
              s2.readyState = s2.INIT, c ? (o3 = l().createObjectURL(e4), setTimeout(function() {
                var e5, t5;
                u2.href = o3, u2.download = r3, e5 = u2, t5 = new MouseEvent("click"), e5.dispatchEvent(t5), i(), p(o3), s2.readyState = s2.DONE;
              })) : (h || t4 && d) && a.FileReader ? ((n = new FileReader()).onloadend = function() {
                var e5 = h ? n.result : n.result.replace(/^data:[^;]*;/, "data:attachment/file;");
                a.open(e5, "_blank") || (a.location.href = e5), e5 = void 0, s2.readyState = s2.DONE, i();
              }, n.readAsDataURL(e4), s2.readyState = s2.INIT) : (o3 = o3 || l().createObjectURL(e4), !t4 && a.open(o3, "_blank") || (a.location.href = o3), s2.readyState = s2.DONE, i(), p(o3));
            }).prototype, "undefined" != typeof navigator && navigator.msSaveOrOpenBlob ? function(e4, t4, r3) {
              return t4 = t4 || e4.name || "download", r3 || (e4 = m(e4)), navigator.msSaveOrOpenBlob(e4, t4);
            } : (e3.abort = function() {
            }, e3.readyState = e3.INIT = 0, e3.WRITING = 1, e3.DONE = 2, e3.error = e3.onwritestart = e3.onprogress = e3.onwrite = e3.onabort = e3.onerror = e3.onwriteend = null, function(e4, t4, r3) {
              return new o2(e4, t4 || e4.name || "download", r3);
            });
          }("undefined" != typeof self && self || "undefined" != typeof window && window || this.content);
          void 0 !== t2 && t2.exports ? t2.exports.saveAs = o : null != s && null !== s.amd && s("FileSaver.js", function() {
            return o;
          });
        }, {}],
        253: [function(e2, t2, r2) {
          var o, n = Object.defineProperty, s2 = (n(r2, "__esModule", {
            value: true
          }), r2), i = {
            GIFEncoder: () => h,
            applyPalette: () => function(e3, t3, r3 = "rgb565") {
              if (!e3 || !e3.buffer) throw new Error("quantize() expected RGBA Uint8Array data");
              if (!(e3 instanceof Uint8Array || e3 instanceof Uint8ClampedArray)) throw new Error("quantize() expected RGBA Uint8Array data");
              if (256 < t3.length) throw new Error("applyPalette() only works with 256 colors or less");
              const o2 = new Uint32Array(e3.buffer), n2 = o2.length, s3 = "rgb444" === r3 ? 4096 : 65536, i2 = new Uint8Array(n2), a2 = new Array(s3);
              if ("rgba4444" === r3) for (let e4 = 0; e4 < n2; e4++) {
                var l2 = o2[e4], u3 = l2 >> 24 & 255, c2 = l2 >> 16 & 255, d2 = l2 >> 8 & 255, l2 = 255 & l2, h2 = A(l2, d2, c2, u3), h2 = h2 in a2 ? a2[h2] : a2[h2] = function(t4, r4, o3, n3, s4) {
                  let i3 = 0, a3 = 1e100;
                  for (let e5 = 0; e5 < s4.length; e5++) {
                    var l3, u4 = s4[e5], c3 = v(u4[3] - n3);
                    c3 > a3 || (l3 = u4[0], (c3 += v(l3 - t4)) > a3 || (l3 = u4[1], (c3 += v(l3 - r4)) > a3 || (l3 = u4[2], (c3 += v(l3 - o3)) > a3 || (a3 = c3, i3 = e5))));
                  }
                  return i3;
                }(l2, d2, c2, u3, t3);
                i2[e4] = h2;
              }
              else {
                const g = "rgb444" === r3 ? P : C;
                for (let e4 = 0; e4 < n2; e4++) {
                  var f2 = o2[e4], p = f2 >> 16 & 255, m = f2 >> 8 & 255, f2 = 255 & f2, y = g(f2, m, p), y = y in a2 ? a2[y] : a2[y] = function(t4, r4, o3, n3) {
                    let s4 = 0, i3 = 1e100;
                    for (let e5 = 0; e5 < n3.length; e5++) {
                      var a3, l3 = n3[e5], u4 = v(l3[0] - t4);
                      u4 > i3 || (a3 = l3[1], (u4 += v(a3 - r4)) > i3 || (a3 = l3[2], (u4 += v(a3 - o3)) > i3 || (i3 = u4, s4 = e5)));
                    }
                    return s4;
                  }(f2, m, p, t3);
                  i2[e4] = y;
                }
              }
              return i2;
            },
            default: () => f,
            nearestColor: () => function(e3, t3, r3 = u2) {
              return e3[l(e3, t3, r3)];
            },
            nearestColorIndex: () => l,
            nearestColorIndexWithDistance: () => d,
            prequantize: () => function(e3, {
              roundRGB: r3 = 5,
              roundAlpha: o2 = 10,
              oneBitAlpha: n2 = null
            } = {}) {
              const s3 = new Uint32Array(e3.buffer);
              for (let t3 = 0; t3 < s3.length; t3++) {
                var i2 = s3[t3];
                let e4 = i2 >> 24 & 255;
                var a2, l2 = i2 >> 16 & 255, u3 = i2 >> 8 & 255, i2 = 255 & i2;
                e4 = c(e4, o2), n2 && (a2 = "number" == typeof n2 ? n2 : 127, e4 = e4 <= a2 ? 0 : 255), i2 = c(i2, r3), u3 = c(u3, r3), l2 = c(l2, r3), s3[t3] = e4 << 24 | l2 << 16 | u3 << 8 | i2 << 0;
              }
            },
            quantize: () => function(e3, t3, r3 = {}) {
              var {
                format: o2 = "rgb565",
                clearAlpha: n2 = true,
                clearAlphaColor: s3 = 0,
                clearAlphaThreshold: i2 = 0,
                oneBitAlpha: a2 = false
              } = r3;
              if (!e3 || !e3.buffer) throw new Error("quantize() expected RGBA Uint8Array data");
              if (!(e3 instanceof Uint8Array || e3 instanceof Uint8ClampedArray)) throw new Error("quantize() expected RGBA Uint8Array data");
              e3 = new Uint32Array(e3.buffer);
              let l2 = false !== r3.useSqrt;
              const u3 = "rgba4444" === o2, c2 = function(r4, e4) {
                const t4 = "rgb444" === e4 ? 4096 : 65536, o3 = new Array(t4), n3 = r4.length;
                if ("rgba4444" === e4) for (let t5 = 0; t5 < n3; ++t5) {
                  var s4 = r4[t5], i3 = s4 >> 24 & 255, a3 = s4 >> 16 & 255, l3 = s4 >> 8 & 255, s4 = 255 & s4, u4 = A(s4, l3, a3, i3);
                  let e5 = u4 in o3 ? o3[u4] : o3[u4] = D();
                  e5.rc += s4, e5.gc += l3, e5.bc += a3, e5.ac += i3, e5.cnt++;
                }
                else if ("rgb444" === e4) for (let t5 = 0; t5 < n3; ++t5) {
                  var c3 = r4[t5], d3 = c3 >> 16 & 255, h3 = c3 >> 8 & 255, c3 = 255 & c3, f3 = P(c3, h3, d3);
                  let e5 = f3 in o3 ? o3[f3] : o3[f3] = D();
                  e5.rc += c3, e5.gc += h3, e5.bc += d3, e5.cnt++;
                }
                else for (let t5 = 0; t5 < n3; ++t5) {
                  var p2 = r4[t5], m2 = p2 >> 16 & 255, y2 = p2 >> 8 & 255, p2 = 255 & p2, g2 = C(p2, y2, m2);
                  let e5 = g2 in o3 ? o3[g2] : o3[g2] = D();
                  e5.rc += p2, e5.gc += y2, e5.bc += m2, e5.cnt++;
                }
                return o3;
              }(e3, o2), d2 = c2.length, h2 = d2 - 1, f2 = new Uint32Array(d2 + 1);
              for (var p = 0, m = 0; m < d2; ++m) {
                const O2 = c2[m];
                null != O2 && (E2 = 1 / O2.cnt, u3 && (O2.ac *= E2), O2.rc *= E2, O2.gc *= E2, O2.bc *= E2, c2[p++] = O2);
              }
              R(t3) / p < 0.022 && (l2 = false);
              for (var y, g, v2, m = 0; m < p - 1; ++m) c2[m].fw = m + 1, c2[m + 1].bk = m, l2 && (c2[m].cnt = Math.sqrt(c2[m].cnt));
              l2 && (c2[m].cnt = Math.sqrt(c2[m].cnt));
              for (m = 0; m < p; ++m) {
                I(c2, m, false);
                var b = c2[m].err;
                for (g = ++f2[0]; 1 < g && (v2 = g >> 1, !(c2[y = f2[v2]].err <= b)); g = v2) f2[g] = y;
                f2[g] = m;
              }
              var _, j = p - t3;
              for (m = 0; m < j; ) {
                for (; ; ) {
                  var x = f2[1];
                  if ((_ = c2[x]).tm >= _.mtm && c2[_.nn].mtm <= _.tm) break;
                  _.mtm == h2 ? x = f2[1] = f2[f2[0]--] : (I(c2, x, false), _.tm = m);
                  b = c2[x].err;
                  for (g = 1; (v2 = g + g) <= f2[0] && (v2 < f2[0] && c2[f2[v2]].err > c2[f2[v2 + 1]].err && v2++, !(b <= c2[y = f2[v2]].err)); g = v2) f2[g] = y;
                  f2[g] = x;
                }
                var w = c2[_.nn], S2 = _.cnt, T2 = w.cnt, E2 = 1 / (S2 + T2);
                u3 && (_.ac = E2 * (S2 * _.ac + T2 * w.ac)), _.rc = E2 * (S2 * _.rc + T2 * w.rc), _.gc = E2 * (S2 * _.gc + T2 * w.gc), _.bc = E2 * (S2 * _.bc + T2 * w.bc), _.cnt += w.cnt, _.mtm = ++m, c2[w.bk].fw = w.fw, c2[w.fw].bk = w.bk, w.mtm = h2;
              }
              let M2 = [];
              for (m = 0; ; 0) {
                let e4 = L(Math.round(c2[m].rc), 0, 255), t4 = L(Math.round(c2[m].gc), 0, 255), r4 = L(Math.round(c2[m].bc), 0, 255), o3 = 255;
                u3 && (o3 = L(Math.round(c2[m].ac), 0, 255), a2 && (k2 = "number" == typeof a2 ? a2 : 127, o3 = o3 <= k2 ? 0 : 255), n2 && o3 <= i2 && (e4 = t4 = r4 = s3, o3 = 0));
                var k2 = u3 ? [e4, t4, r4, o3] : [e4, t4, r4];
                if (function(t5, r5) {
                  for (let e5 = 0; e5 < t5.length; e5++) {
                    var o4 = t5[e5], n3 = o4[0] === r5[0] && o4[1] === r5[1] && o4[2] === r5[2], o4 = !(4 <= o4.length && 4 <= r5.length) || o4[3] === r5[3];
                    if (n3 && o4) return true;
                  }
                  return false;
                }(M2, k2) || M2.push(k2), 0 == (m = c2[m].fw)) break;
              }
              return M2;
            },
            snapColorsToPalette: () => function(r3, o2, e3 = 5) {
              if (r3.length && o2.length) {
                var n2 = r3.map((e4) => e4.slice(0, 3)), s3 = e3 * e3, i2 = r3[0].length;
                for (let t3 = 0; t3 < o2.length; t3++) {
                  let e4 = o2[t3];
                  e4 = e4.length < i2 ? [e4[0], e4[1], e4[2], 255] : e4.length > i2 ? e4.slice(0, 3) : e4.slice();
                  var a2 = d(n2, e4.slice(0, 3), u2), l2 = a2[0], a2 = a2[1];
                  0 < a2 && a2 <= s3 && (r3[l2] = e4);
                }
              }
            }
          };
          for (o in i) n(s2, o, {
            get: i[o],
            enumerable: true
          });
          var a = {
            signature: "GIF",
            version: "89a",
            trailer: 59,
            extensionIntroducer: 33,
            applicationExtensionLabel: 255,
            graphicControlExtensionLabel: 249,
            imageSeparator: 44,
            signatureSize: 3,
            versionSize: 3,
            globalColorTableFlagMask: 128,
            colorResolutionMask: 112,
            sortFlagMask: 8,
            globalColorTableSizeMask: 7,
            applicationIdentifierSize: 8,
            applicationAuthCodeSize: 3,
            disposalMethodMask: 28,
            userInputFlagMask: 2,
            transparentColorFlagMask: 1,
            localColorTableFlagMask: 128,
            interlaceFlagMask: 64,
            idSortFlagMask: 32,
            localColorTableSizeMask: 7
          };
          function M(e3 = 256) {
            let n2 = 0, s3 = new Uint8Array(e3);
            return {
              get buffer() {
                return s3.buffer;
              },
              reset() {
                n2 = 0;
              },
              bytesView() {
                return s3.subarray(0, n2);
              },
              bytes() {
                return s3.slice(0, n2);
              },
              writeByte(e4) {
                i2(n2 + 1), s3[n2] = e4, n2++;
              },
              writeBytes(t3, r3 = 0, o2 = t3.length) {
                i2(n2 + o2);
                for (let e4 = 0; e4 < o2; e4++) s3[n2++] = t3[e4 + r3];
              },
              writeBytesView(e4, t3 = 0, r3 = e4.byteLength) {
                i2(n2 + r3), s3.set(e4.subarray(t3, t3 + r3), n2), n2 += r3;
              }
            };
            function i2(e4) {
              var t3 = s3.length;
              if (!(e4 <= t3)) {
                e4 = Math.max(e4, t3 * (t3 < 1048576 ? 2 : 1.125) >>> 0), 0 != t3 && (e4 = Math.max(e4, 256));
                const r3 = s3;
                s3 = new Uint8Array(e4), 0 < n2 && s3.set(r3.subarray(0, n2), 0);
              }
            }
          }
          var k = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535];
          var S = function(e3, t3, r3, o2, n2 = M(512), s3 = new Uint8Array(256), i2 = new Int32Array(5003), a2 = new Int32Array(5003)) {
            var l2 = i2.length, o2 = Math.max(2, o2);
            s3.fill(0), a2.fill(0), i2.fill(-1);
            let u3 = 0, c2 = 0;
            var d2 = o2 + 1;
            const h2 = d2;
            let f2 = false, p = h2, m = (1 << p) - 1;
            var y = 1 << d2 - 1;
            const g = 1 + y;
            let v2 = 2 + y, b = 0, _ = r3[0], j = 0;
            for (let e4 = l2; e4 < 65536; e4 *= 2) ++j;
            j = 8 - j, n2.writeByte(o2), E2(y);
            var x = r3.length;
            for (let t4 = 1; t4 < x; t4++) e: {
              var w = r3[t4], S2 = (w << 12) + _;
              let e4 = w << j ^ _;
              if (i2[e4] === S2) _ = a2[e4];
              else {
                for (var T2 = 0 === e4 ? 1 : l2 - e4; 0 <= i2[e4]; ) if ((e4 -= T2) < 0 && (e4 += l2), i2[e4] === S2) {
                  _ = a2[e4];
                  break e;
                }
                E2(_), _ = w, v2 < 4096 ? (a2[e4] = v2++, i2[e4] = S2) : (i2.fill(-1), v2 = 2 + y, f2 = true, E2(y));
              }
            }
            return E2(_), E2(g), n2.writeByte(0), n2.bytesView();
            function E2(e4) {
              for (u3 &= k[c2], 0 < c2 ? u3 |= e4 << c2 : u3 = e4, c2 += p; 8 <= c2; ) s3[b++] = 255 & u3, 254 <= b && (n2.writeByte(b), n2.writeBytesView(s3, 0, b), b = 0), u3 >>= 8, c2 -= 8;
              if ((v2 > m || f2) && (f2 ? (p = h2, m = (1 << p) - 1, f2 = false) : (++p, m = 12 === p ? 1 << p : (1 << p) - 1)), e4 == g) {
                for (; 0 < c2; ) s3[b++] = 255 & u3, 254 <= b && (n2.writeByte(b), n2.writeBytesView(s3, 0, b), b = 0), u3 >>= 8, c2 -= 8;
                0 < b && (n2.writeByte(b), n2.writeBytesView(s3, 0, b), b = 0);
              }
            }
          };
          function C(e3, t3, r3) {
            return e3 << 8 & 63488 | t3 << 2 & 992 | r3 >> 3;
          }
          function A(e3, t3, r3, o2) {
            return e3 >> 4 | 240 & t3 | (240 & r3) << 4 | (240 & o2) << 8;
          }
          function P(e3, t3, r3) {
            return e3 >> 4 << 8 | 240 & t3 | r3 >> 4;
          }
          function L(e3, t3, r3) {
            return e3 < t3 ? t3 : r3 < e3 ? r3 : e3;
          }
          function R(e3) {
            return e3 * e3;
          }
          function I(e3, t3, r3) {
            var o2 = 0, n2 = 1e100;
            const s3 = e3[t3];
            for (var i2 = s3.cnt, a2 = s3.ac, l2 = s3.rc, u3 = s3.gc, c2 = s3.bc, d2 = s3.fw; 0 != d2; d2 = e3[d2].fw) {
              var h2, f2 = e3[d2], p = f2.cnt, p = i2 * p / (i2 + p);
              n2 <= p || (h2 = 0, r3 && n2 <= (h2 += p * R(f2.ac - a2)) || n2 <= (h2 += p * R(f2.rc - l2)) || n2 <= (h2 += p * R(f2.gc - u3)) || n2 <= (h2 += p * R(f2.bc - c2)) || (n2 = h2, o2 = d2));
            }
            s3.err = n2, s3.nn = o2;
          }
          function D() {
            return {
              ac: 0,
              rc: 0,
              gc: 0,
              bc: 0,
              cnt: 0,
              nn: 0,
              fw: 0,
              bk: 0,
              tm: 0,
              mtm: 0,
              err: 0
            };
          }
          function u2(e3, t3) {
            for (var r3 = 0, o2 = 0; o2 < e3.length; o2++) {
              var n2 = e3[o2] - t3[o2];
              r3 += n2 * n2;
            }
            return r3;
          }
          function c(e3, t3) {
            return 1 < t3 ? Math.round(e3 / t3) * t3 : e3;
          }
          function v(e3) {
            return e3 * e3;
          }
          function l(t3, r3, o2 = u2) {
            let n2 = 1 / 0, s3 = -1;
            for (let e3 = 0; e3 < t3.length; e3++) {
              var i2 = o2(r3, t3[e3]);
              i2 < n2 && (n2 = i2, s3 = e3);
            }
            return s3;
          }
          function d(t3, r3, o2 = u2) {
            let n2 = 1 / 0, s3 = -1;
            for (let e3 = 0; e3 < t3.length; e3++) {
              var i2 = o2(r3, t3[e3]);
              i2 < n2 && (n2 = i2, s3 = e3);
            }
            return [s3, n2];
          }
          function h(e3 = {}) {
            const {
              initialCapacity: t3 = 4096,
              auto: g = true
            } = e3, v2 = M(t3);
            const b = new Uint8Array(256), _ = new Int32Array(5003), j = new Int32Array(5003);
            let x = false;
            return {
              reset() {
                v2.reset(), x = false;
              },
              finish() {
                v2.writeByte(a.trailer);
              },
              bytes() {
                return v2.bytes();
              },
              bytesView() {
                return v2.bytesView();
              },
              get buffer() {
                return v2.buffer;
              },
              get stream() {
                return v2;
              },
              writeHeader: w,
              writeFrame(e4, t4, r3, o2 = {}) {
                var {
                  transparent: n2 = false,
                  transparentIndex: s3 = 0,
                  delay: i2 = 0,
                  palette: a2 = null,
                  repeat: l2 = 0,
                  colorDepth: u3 = 8,
                  dispose: c2 = -1
                } = o2;
                let d2 = false;
                if (g ? x || (d2 = true, w(), x = true) : d2 = Boolean(o2.first), t4 = Math.max(0, Math.floor(t4)), r3 = Math.max(0, Math.floor(r3)), d2) {
                  if (!a2) throw new Error("First frame must include a { palette } option");
                  var [o2, h2, f2, p, m = 8] = [v2, t4, r3, a2, u3];
                  p = F(p.length) - 1, m = 128 | m - 1 << 4 | p, E(o2, h2), E(o2, f2), o2.writeBytes([m, 0, 0]), T(v2, a2), 0 <= l2 && (p = v2, h2 = l2, p.writeByte(33), p.writeByte(255), p.writeByte(11), O(p, "NETSCAPE2.0"), p.writeByte(3), p.writeByte(1), E(p, h2), p.writeByte(0));
                }
                var y, f2 = Math.round(i2 / 10), o2 = v2, m = c2, l2 = f2, h2 = n2, p = s3, i2 = (o2.writeByte(33), o2.writeByte(249), o2.writeByte(4), p < 0 && (p = 0, h2 = false), h2 = h2 ? (y = 1, 2) : y = 0, 0 <= m && (h2 = 7 & m), h2 <<= 2, o2.writeByte(0 | h2 | y), E(o2, l2), o2.writeByte(p || 0), o2.writeByte(0), Boolean(a2) && !d2);
                c2 = v2, n2 = t4, s3 = r3, y = i2 ? a2 : null, c2.writeByte(44), E(c2, 0), E(c2, 0), E(c2, n2), E(c2, s3), y ? (n2 = F(y.length) - 1, c2.writeByte(128 | n2)) : c2.writeByte(0), i2 && T(v2, a2), [l2, o2, s3, n2, c2 = 8, i2, a2, e4] = [v2, e4, t4, r3, u3, b, _, j], S(s3, n2, o2, c2, l2, i2, a2, e4);
              }
            };
            function w() {
              O(v2, "GIF89a");
            }
          }
          function T(r3, o2) {
            var e3 = 1 << F(o2.length);
            for (let t3 = 0; t3 < e3; t3++) {
              let e4 = [0, 0, 0];
              t3 < o2.length && (e4 = o2[t3]), r3.writeByte(e4[0]), r3.writeByte(e4[1]), r3.writeByte(e4[2]);
            }
          }
          function E(e3, t3) {
            e3.writeByte(255 & t3), e3.writeByte(t3 >> 8 & 255);
          }
          function O(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) e3.writeByte(t3.charCodeAt(r3));
          }
          function F(e3) {
            return Math.max(Math.ceil(Math.log2(e3)), 1);
          }
          var f = h;
        }, {}],
        254: [function(e2, t2, r2) {
          r2.read = function(e3, t3, r3, o, n) {
            var s2, i, a = 8 * n - o - 1, l = (1 << a) - 1, u2 = l >> 1, c = -7, d = r3 ? n - 1 : 0, h = r3 ? -1 : 1, n = e3[t3 + d];
            for (d += h, s2 = n & (1 << -c) - 1, n >>= -c, c += a; 0 < c; s2 = 256 * s2 + e3[t3 + d], d += h, c -= 8) ;
            for (i = s2 & (1 << -c) - 1, s2 >>= -c, c += o; 0 < c; i = 256 * i + e3[t3 + d], d += h, c -= 8) ;
            if (0 === s2) s2 = 1 - u2;
            else {
              if (s2 === l) return i ? NaN : 1 / 0 * (n ? -1 : 1);
              i += Math.pow(2, o), s2 -= u2;
            }
            return (n ? -1 : 1) * i * Math.pow(2, s2 - o);
          }, r2.write = function(e3, t3, r3, o, n, s2) {
            var i, a, l = 8 * s2 - n - 1, u2 = (1 << l) - 1, c = u2 >> 1, d = 23 === n ? Math.pow(2, -24) - Math.pow(2, -77) : 0, h = o ? 0 : s2 - 1, f = o ? 1 : -1, s2 = t3 < 0 || 0 === t3 && 1 / t3 < 0 ? 1 : 0;
            for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (a = isNaN(t3) ? 1 : 0, i = u2) : (i = Math.floor(Math.log(t3) / Math.LN2), t3 * (o = Math.pow(2, -i)) < 1 && (i--, o *= 2), 2 <= (t3 += 1 <= i + c ? d / o : d * Math.pow(2, 1 - c)) * o && (i++, o /= 2), u2 <= i + c ? (a = 0, i = u2) : 1 <= i + c ? (a = (t3 * o - 1) * Math.pow(2, n), i += c) : (a = t3 * Math.pow(2, c - 1) * Math.pow(2, n), i = 0)); 8 <= n; e3[r3 + h] = 255 & a, h += f, a /= 256, n -= 8) ;
            for (i = i << n | a, l += n; 0 < l; e3[r3 + h] = 255 & i, h += f, i /= 256, l -= 8) ;
            e3[r3 + h - f] |= 128 * s2;
          };
        }, {}],
        255: [function(o, e2, c) {
          "use strict";
          var t2;
          function y(e3, t3) {
            return e3.b === t3.b && e3.a === t3.a;
          }
          function g(e3, t3) {
            return e3.b < t3.b || e3.b === t3.b && e3.a <= t3.a;
          }
          function v(e3, t3, r3) {
            var o2 = t3.b - e3.b, n2 = r3.b - t3.b;
            return 0 < o2 + n2 ? o2 < n2 ? t3.a - e3.a + o2 / (o2 + n2) * (e3.a - r3.a) : t3.a - r3.a + n2 / (o2 + n2) * (r3.a - e3.a) : 0;
          }
          function b(e3, t3, r3) {
            var o2 = t3.b - e3.b, n2 = r3.b - t3.b;
            return 0 < o2 + n2 ? (t3.a - r3.a) * o2 + (t3.a - e3.a) * n2 : 0;
          }
          function _(e3, t3) {
            return e3.a < t3.a || e3.a === t3.a && e3.b <= t3.b;
          }
          function V(e3, t3, r3) {
            var o2 = t3.a - e3.a, n2 = r3.a - t3.a;
            return 0 < o2 + n2 ? o2 < n2 ? t3.b - e3.b + o2 / (o2 + n2) * (e3.b - r3.b) : t3.b - r3.b + n2 / (o2 + n2) * (r3.b - e3.b) : 0;
          }
          function z(e3, t3, r3) {
            var o2 = t3.a - e3.a, n2 = r3.a - t3.a;
            return 0 < o2 + n2 ? (t3.b - r3.b) * o2 + (t3.b - e3.b) * n2 : 0;
          }
          function j(e3, t3, r3, o2) {
            return (e3 = e3 < 0 ? 0 : e3) <= (r3 = r3 < 0 ? 0 : r3) ? 0 === r3 ? (t3 + o2) / 2 : t3 + e3 / (e3 + r3) * (o2 - t3) : o2 + r3 / (e3 + r3) * (t3 - o2);
          }
          function d(e3) {
            var t3 = s2(e3.b);
            return n(t3, e3.c), n(t3.b, e3.c), i(t3, e3.a), t3;
          }
          function x(e3, t3) {
            var r3 = false, o2 = false;
            e3 !== t3 && (t3.a !== e3.a && (o2 = true, E(t3.a, e3.a)), t3.d !== e3.d && (r3 = true, a(t3.d, e3.d)), T(t3, e3), o2 || (n(t3, e3.a), e3.a.c = e3), r3 || (i(t3, e3.d), e3.d.a = e3));
          }
          function m(e3) {
            var t3 = e3.b, r3 = false;
            e3.d !== e3.b.d && (r3 = true, a(e3.d, e3.b.d)), e3.c === e3 ? E(e3.a, null) : (e3.b.d.a = e3.b.e, e3.a.c = e3.c, T(e3, e3.b.e), r3 || i(e3, e3.d)), t3.c === t3 ? (E(t3.a, null), a(t3.d, null)) : (e3.d.a = t3.b.e, t3.a.c = t3.c, T(t3, t3.b.e)), H(e3);
          }
          function w(e3) {
            var t3 = s2(e3), r3 = t3.b;
            return T(t3, e3.e), t3.a = e3.b.a, n(r3, t3.a), t3.d = r3.d = e3.d, t3 = t3.b, T(e3.b, e3.b.b.e), T(e3.b, t3), e3.b.a = t3.a, t3.b.a.c = t3.b, t3.b.d = e3.b.d, t3.f = e3.f, t3.b.f = e3.b.f, t3;
          }
          function S(e3, t3) {
            var r3 = false, o2 = s2(e3), n2 = o2.b;
            return t3.d !== e3.d && (r3 = true, a(t3.d, e3.d)), T(o2, e3.e), T(n2, t3), o2.a = e3.b.a, n2.a = t3.a, o2.d = n2.d = e3.d, e3.d.a = n2, r3 || i(o2, e3.d), o2;
          }
          function s2(e3) {
            var t3 = new u2(), r3 = new u2(), o2 = e3.b.h;
            return (((r3.h = o2).b.h = t3).h = e3).b.h = r3, t3.b = r3, ((t3.c = t3).e = r3).b = t3, (r3.c = r3).e = t3;
          }
          function T(e3, t3) {
            var r3 = e3.c, o2 = t3.c;
            r3.b.e = t3, (o2.b.e = e3).c = o2, t3.c = r3;
          }
          function n(e3, t3) {
            var r3 = t3.f, o2 = new D(t3, r3);
            for (r3.e = o2, r3 = (t3.f = o2).c = e3; r3.a = o2, (r3 = r3.c) !== e3; ) ;
          }
          function i(e3, t3) {
            var r3 = t3.d, o2 = new te(t3, r3);
            for (r3.b = o2, (t3.d = o2).a = e3, o2.c = t3.c, r3 = e3; r3.d = o2, (r3 = r3.e) !== e3; ) ;
          }
          function H(e3) {
            var t3 = e3.h;
            e3 = e3.b.h, (t3.b.h = e3).b.h = t3;
          }
          function E(e3, t3) {
            for (var r3 = e3.c, o2 = r3; o2.a = t3, (o2 = o2.c) !== r3; ) ;
            r3 = e3.f, ((o2 = e3.e).f = r3).e = o2;
          }
          function a(e3, t3) {
            for (var r3 = e3.a, o2 = r3; o2.d = t3, (o2 = o2.e) !== r3; ) ;
            r3 = e3.d, ((o2 = e3.b).d = r3).b = o2;
          }
          function W(e3) {
            var t3 = 0;
            return Math.abs(e3[1]) > Math.abs(e3[0]) && (t3 = 1), t3 = Math.abs(e3[2]) > Math.abs(e3[t3]) ? 2 : t3;
          }
          function M(e3, t3) {
            e3.f += t3.f, e3.b.f += t3.b.f;
          }
          function h(e3, t3, r3) {
            return e3 = e3.a, t3 = t3.a, r3 = r3.a, t3.b.a === e3 ? r3.b.a === e3 ? g(t3.a, r3.a) ? b(r3.b.a, t3.a, r3.a) <= 0 : 0 <= b(t3.b.a, r3.a, t3.a) : b(r3.b.a, e3, r3.a) <= 0 : r3.b.a === e3 ? 0 <= b(t3.b.a, e3, t3.a) : (t3 = v(t3.b.a, e3, t3.a), (e3 = v(r3.b.a, e3, r3.a)) <= t3);
          }
          function k(e3) {
            e3.a.i = null;
            var t3 = e3.e;
            t3.a.c = t3.c, t3.c.a = t3.a, e3.e = null;
          }
          function O(e3, t3) {
            m(e3.a), e3.c = false, (e3.a = t3).i = e3;
          }
          function C(e3) {
            for (var t3 = e3.a.a; (e3 = G(e3)).a.a === t3; ) ;
            return e3.c && (O(e3, t3 = S(B(e3).a.b, e3.a.e)), e3 = G(e3)), e3;
          }
          function q(e3, t3, r3) {
            var o2 = new N();
            return o2.a = r3, o2.e = p(e3.f, t3.e, o2), r3.i = o2;
          }
          function X(e3, t3) {
            switch (e3.s) {
              case 100130:
                return 0 != (1 & t3);
              case 100131:
                return 0 !== t3;
              case 100132:
                return 0 < t3;
              case 100133:
                return t3 < 0;
              case 100134:
                return 2 <= t3 || t3 <= -2;
            }
            return false;
          }
          function f(e3) {
            var t3 = e3.a, r3 = t3.d;
            r3.c = e3.d, r3.a = t3, k(e3);
          }
          function A(e3, t3, r3) {
            for (t3 = (e3 = t3).a; e3 !== r3; ) {
              e3.c = false;
              var o2 = B(e3), n2 = o2.a;
              if (n2.a !== t3.a) {
                if (!o2.c) {
                  f(e3);
                  break;
                }
                O(o2, n2 = S(t3.c.b, n2.b));
              }
              t3.c !== n2 && (x(n2.b.e, n2), x(t3, n2)), f(e3), t3 = o2.a, e3 = o2;
            }
            return t3;
          }
          function P(e3, t3, r3, o2, n2, s3) {
            for (var i2 = true; q(e3, t3, r3.b), (r3 = r3.c) !== o2; ) ;
            for (null === n2 && (n2 = B(t3).a.b.c); (r3 = (o2 = B(t3)).a.b).a === n2.a; ) r3.c !== n2 && (x(r3.b.e, r3), x(n2.b.e, r3)), o2.f = t3.f - r3.f, o2.d = X(e3, o2.f), t3.b = true, !i2 && R(e3, t3) && (M(r3, n2), k(t3), m(n2)), i2 = false, t3 = o2, n2 = r3;
            t3.b = true, s3 && Q(e3, t3);
          }
          function Y(e3, t3, r3, o2, n2) {
            var s3 = [t3.g[0], t3.g[1], t3.g[2]];
            t3.d = null, t3.d = e3.o && e3.o(s3, r3, o2, e3.c) || null, null === t3.d && (n2 ? e3.n || (l(e3, 100156), e3.n = true) : t3.d = r3[0]);
          }
          function L(e3, t3, r3) {
            var o2 = [null, null, null, null];
            o2[0] = t3.a.d, o2[1] = r3.a.d, Y(e3, t3.a, o2, [0.5, 0.5, 0, 0], false), x(t3, r3);
          }
          function Z(e3, t3, r3, o2, n2) {
            var s3 = Math.abs(t3.b - e3.b) + Math.abs(t3.a - e3.a), i2 = Math.abs(r3.b - e3.b) + Math.abs(r3.a - e3.a), a2 = n2 + 1;
            o2[n2] = 0.5 * i2 / (s3 + i2), o2[a2] = 0.5 * s3 / (s3 + i2), e3.g[0] += o2[n2] * t3.g[0] + o2[a2] * r3.g[0], e3.g[1] += o2[n2] * t3.g[1] + o2[a2] * r3.g[1], e3.g[2] += o2[n2] * t3.g[2] + o2[a2] * r3.g[2];
          }
          function R(e3, t3) {
            var r3 = B(t3), o2 = t3.a, n2 = r3.a;
            if (g(o2.a, n2.a)) {
              if (0 < b(n2.b.a, o2.a, n2.a)) return;
              if (y(o2.a, n2.a)) {
                if (o2.a !== n2.a) {
                  var r3 = e3.e, s3 = o2.a.h;
                  if (0 <= s3) {
                    var i2 = (r3 = r3.b).d, a2 = r3.e, l2 = r3.c, u3 = l2[s3];
                    i2[u3] = i2[r3.a], (l2[i2[u3]] = u3) <= --r3.a && (u3 <= 1 || g(a2[i2[u3 >> 1]], a2[i2[u3]]) ? U : ue)(r3, u3), a2[s3] = null, l2[s3] = r3.b, r3.b = s3;
                  } else for (r3.c[-(s3 + 1)] = null; 0 < r3.a && null === r3.c[r3.d[r3.a - 1]]; ) --r3.a;
                  L(e3, n2.b.e, o2);
                }
              } else w(n2.b), x(o2, n2.b.e), t3.b = r3.b = true;
            } else {
              if (b(o2.b.a, n2.a, o2.a) < 0) return;
              G(t3).b = t3.b = true, w(o2.b), x(n2.b.e, o2);
            }
            return 1;
          }
          function K(e3, t3) {
            var r3 = B(t3), o2 = t3.a, n2 = r3.a, s3 = o2.a, i2 = n2.a, a2 = o2.b.a, l2 = n2.b.a, u3 = new D();
            if (b(a2, e3.a, s3), b(l2, e3.a, i2), !(s3 === i2 || Math.min(s3.a, a2.a) > Math.max(i2.a, l2.a))) {
              if (g(s3, i2)) {
                if (0 < b(l2, s3, i2)) return;
              } else if (b(a2, i2, s3) < 0) return;
              var c2, d2, h2 = a2, f2 = s3, p2 = l2, m2 = i2;
              if (g(h2, f2) || (c2 = h2, h2 = f2, f2 = c2), g(p2, m2) || (c2 = p2, p2 = m2, m2 = c2), g(h2, p2) || (c2 = h2, h2 = p2, p2 = c2, c2 = f2, f2 = m2, m2 = c2), g(p2, f2) ? g(f2, m2) ? ((c2 = v(h2, p2, f2)) + (d2 = v(p2, f2, m2)) < 0 && (c2 = -c2, d2 = -d2), u3.b = j(c2, p2.b, d2, f2.b)) : ((c2 = b(h2, p2, f2)) + (d2 = -b(h2, m2, f2)) < 0 && (c2 = -c2, d2 = -d2), u3.b = j(c2, p2.b, d2, m2.b)) : u3.b = (p2.b + f2.b) / 2, _(h2, f2) || (c2 = h2, h2 = f2, f2 = c2), _(p2, m2) || (c2 = p2, p2 = m2, m2 = c2), _(h2, p2) || (c2 = h2, h2 = p2, p2 = c2, c2 = f2, f2 = m2, m2 = c2), _(p2, f2) ? _(f2, m2) ? ((c2 = V(h2, p2, f2)) + (d2 = V(p2, f2, m2)) < 0 && (c2 = -c2, d2 = -d2), u3.a = j(c2, p2.a, d2, f2.a)) : ((c2 = z(h2, p2, f2)) + (d2 = -z(h2, m2, f2)) < 0 && (c2 = -c2, d2 = -d2), u3.a = j(c2, p2.a, d2, m2.a)) : u3.a = (p2.a + f2.a) / 2, g(u3, e3.a) && (u3.b = e3.a.b, u3.a = e3.a.a), h2 = g(s3, i2) ? s3 : i2, g(h2, u3) && (u3.b = h2.b, u3.a = h2.a), y(u3, s3) || y(u3, i2)) return R(e3, t3), 0;
              if (!y(a2, e3.a) && 0 <= b(a2, e3.a, u3) || !y(l2, e3.a) && b(l2, e3.a, u3) <= 0) {
                if (l2 === e3.a) w(o2.b), x(n2.b, o2), o2 = B(t3 = C(t3)).a, A(e3, B(t3), r3), P(e3, t3, o2.b.e, o2, o2, true);
                else {
                  if (a2 !== e3.a) return 0 <= b(a2, e3.a, u3) && (G(t3).b = t3.b = true, w(o2.b), o2.a.b = e3.a.b, o2.a.a = e3.a.a), void (b(l2, e3.a, u3) <= 0 && (t3.b = r3.b = true, w(n2.b), n2.a.b = e3.a.b, n2.a.a = e3.a.a));
                  for (w(n2.b), x(o2.e, n2.b.e), i2 = (s3 = r3 = t3).a.b.a; (s3 = G(s3)).a.b.a === i2; ) ;
                  s3 = B(t3 = s3).a.b.c, r3.a = n2.b.e, P(e3, t3, (n2 = A(e3, r3, null)).c, o2.b.c, s3, true);
                }
                return 1;
              }
              w(o2.b), w(n2.b), x(n2.b.e, o2), o2.a.b = u3.b, o2.a.a = u3.a, o2.a.h = ne(e3.e, o2.a), o2 = o2.a, n2 = [0, 0, 0, 0], u3 = [s3.d, a2.d, i2.d, l2.d], o2.g[0] = o2.g[1] = o2.g[2] = 0, Z(o2, s3, a2, n2, 0), Z(o2, i2, l2, n2, 2), Y(e3, o2, u3, n2, true), G(t3).b = t3.b = r3.b = true;
            }
          }
          function Q(e3, t3) {
            for (var r3 = B(t3); ; ) {
              for (; r3.b; ) r3 = B(t3 = r3);
              if (!t3.b && (null === (t3 = G(r3 = t3)) || !t3.b)) break;
              t3.b = false;
              var o2 = t3.a, n2 = r3.a;
              if (s3 = o2.b.a !== n2.b.a) e: {
                var s3, i2 = B(s3 = t3), a2 = s3.a, l2 = i2.a, u3 = void 0;
                if (g(a2.b.a, l2.b.a)) {
                  if (b(a2.b.a, l2.b.a, a2.a) < 0) {
                    s3 = false;
                    break e;
                  }
                  G(s3).b = s3.b = true, u3 = w(a2), x(l2.b, u3), u3.d.c = s3.d;
                } else {
                  if (0 < b(l2.b.a, a2.b.a, l2.a)) {
                    s3 = false;
                    break e;
                  }
                  s3.b = i2.b = true, u3 = w(l2), x(a2.e, l2.b), u3.b.d.c = s3.d;
                }
                s3 = true;
              }
              if (s3 && (r3.c ? (k(r3), m(n2), n2 = (r3 = B(t3)).a) : t3.c && (k(t3), m(o2), o2 = (t3 = G(r3)).a)), o2.a !== n2.a) {
                if (o2.b.a === n2.b.a || t3.c || r3.c || o2.b.a !== e3.a && n2.b.a !== e3.a) R(e3, t3);
                else if (K(e3, t3)) break;
              }
              o2.a === n2.a && o2.b.a === n2.b.a && (M(n2, o2), k(t3), m(o2), t3 = G(r3));
            }
          }
          function J(e3, t3) {
            var r3 = new N(), o2 = d(e3.b);
            o2.a.b = 4e150, o2.a.a = t3, o2.b.a.b = -4e150, o2.b.a.a = t3, e3.a = o2.b.a, r3.a = o2, r3.f = 0, r3.d = false, r3.c = false, r3.h = true, r3.b = false, o2 = p(o2 = e3.f, o2.a, r3), r3.e = o2;
          }
          function $(e3) {
            this.a = new ee(), this.b = e3, this.c = h;
          }
          function p(e3, t3, r3) {
            for (; null !== (t3 = t3.c).b && !e3.c(e3.b, t3.b, r3); ) ;
            return e3 = new ee(r3, t3.a, t3), t3.a.c = e3, t3.a = e3;
          }
          function ee(e3, t3, r3) {
            this.b = e3 || null, this.a = t3 || this, this.c = r3 || this;
          }
          function r2() {
            this.d = 0, this.p = this.b = this.q = null, this.j = [0, 0, 0], this.s = 100130, this.n = false, this.o = this.a = this.e = this.f = null, this.m = false, this.c = this.r = this.i = this.k = this.l = this.h = null;
          }
          function I(e3, t3) {
            if (e3.d !== t3) for (; e3.d !== t3; ) if (e3.d < t3) switch (e3.d) {
              case 0:
                l(e3, 100151), e3.u(null);
                break;
              case 1:
                l(e3, 100152), e3.t();
            }
            else switch (e3.d) {
              case 2:
                l(e3, 100154), e3.v();
                break;
              case 1:
                l(e3, 100153), e3.w();
            }
          }
          function l(e3, t3) {
            e3.p && e3.p(t3, e3.c);
          }
          function te(e3, t3) {
            this.b = e3 || this, this.d = t3 || this, this.a = null, this.c = false;
          }
          function u2() {
            (this.h = this).i = this.d = this.a = this.e = this.c = this.b = null, this.f = 0;
          }
          function re() {
            this.c = new D(), this.a = new te(), this.b = new u2(), this.d = new u2(), this.b.b = this.d, this.d.b = this.b;
          }
          function D(e3, t3) {
            this.e = e3 || this, this.f = t3 || this, this.d = this.c = null, this.g = [0, 0, 0], this.h = this.a = this.b = 0;
          }
          function oe() {
            this.c = [], this.d = null, this.a = 0, this.e = false, this.b = new ie();
          }
          function ne(e3, t3) {
            var r3, o2, n2;
            return e3.e ? (2 * (o2 = ++(r3 = e3.b).a) > r3.f && (r3.f *= 2, r3.c = ae(r3.c, r3.f + 1)), 0 === r3.b ? n2 = o2 : (n2 = r3.b, r3.b = r3.c[r3.b]), r3.e[n2] = t3, r3.c[n2] = o2, r3.d[o2] = n2, r3.h && ue(r3, o2), n2) : (r3 = e3.a++, e3.c[r3] = t3, -(r3 + 1));
          }
          function se(e3) {
            if (0 === e3.a) return le(e3.b);
            var t3 = e3.c[e3.d[e3.a - 1]];
            if (0 !== e3.b.a && g(F(e3.b), t3)) return le(e3.b);
            for (; --e3.a, 0 < e3.a && null === e3.c[e3.d[e3.a - 1]]; ) ;
            return t3;
          }
          function ie() {
            this.d = ae([0], 33), this.e = [null, null], this.c = [0, 0], this.a = 0, this.f = 32, this.b = 0, this.h = false, this.d[1] = 1;
          }
          function ae(e3, t3) {
            for (var r3 = Array(t3), o2 = 0; o2 < e3.length; o2++) r3[o2] = e3[o2];
            for (; o2 < t3; o2++) r3[o2] = 0;
            return r3;
          }
          function F(e3) {
            return e3.e[e3.d[1]];
          }
          function le(e3) {
            var t3 = e3.d, r3 = e3.e, o2 = e3.c, n2 = t3[1], s3 = r3[n2];
            return 0 < e3.a && (t3[1] = t3[e3.a], o2[t3[1]] = 1, r3[n2] = null, o2[n2] = e3.b, e3.b = n2, 0 < --e3.a && U(e3, 1)), s3;
          }
          function U(e3, t3) {
            for (var r3 = e3.d, o2 = e3.e, n2 = e3.c, s3 = t3, i2 = r3[s3]; ; ) {
              var a2 = s3 << 1, l2 = (a2 < e3.a && g(o2[r3[a2 + 1]], o2[r3[a2]]) && (a2 += 1), r3[a2]);
              if (a2 > e3.a || g(o2[i2], o2[l2])) {
                n2[r3[s3] = i2] = s3;
                break;
              }
              n2[r3[s3] = l2] = s3, s3 = a2;
            }
          }
          function ue(e3, t3) {
            for (var r3 = e3.d, o2 = e3.e, n2 = e3.c, s3 = t3, i2 = r3[s3]; ; ) {
              var a2 = s3 >> 1, l2 = r3[a2];
              if (0 == a2 || g(o2[l2], o2[i2])) {
                n2[r3[s3] = i2] = s3;
                break;
              }
              n2[r3[s3] = l2] = s3, s3 = a2;
            }
          }
          function N() {
            this.e = this.a = null, this.f = 0, this.c = this.b = this.h = this.d = false;
          }
          function B(e3) {
            return e3.e.c.b;
          }
          function G(e3) {
            return e3.e.a.b;
          }
          (t2 = r2.prototype).x = function() {
            I(this, 0);
          }, t2.B = function(e3, t3) {
            switch (e3) {
              case 100142:
                return;
              case 100140:
                switch (t3) {
                  case 100130:
                  case 100131:
                  case 100132:
                  case 100133:
                  case 100134:
                    return void (this.s = t3);
                }
                break;
              case 100141:
                return void (this.m = !!t3);
              default:
                return void l(this, 100900);
            }
            l(this, 100901);
          }, t2.y = function(e3) {
            switch (e3) {
              case 100142:
                return 0;
              case 100140:
                return this.s;
              case 100141:
                return this.m;
              default:
                l(this, 100900);
            }
            return false;
          }, t2.A = function(e3, t3, r3) {
            this.j[0] = e3, this.j[1] = t3, this.j[2] = r3;
          }, t2.z = function(e3, t3) {
            var r3 = t3 || null;
            switch (e3) {
              case 100100:
              case 100106:
                this.h = r3;
                break;
              case 100104:
              case 100110:
                this.l = r3;
                break;
              case 100101:
              case 100107:
                this.k = r3;
                break;
              case 100102:
              case 100108:
                this.i = r3;
                break;
              case 100103:
              case 100109:
                this.p = r3;
                break;
              case 100105:
              case 100111:
                this.o = r3;
                break;
              case 100112:
                this.r = r3;
                break;
              default:
                l(this, 100900);
            }
          }, t2.C = function(e3, t3) {
            var r3 = false, o2 = [0, 0, 0];
            I(this, 2);
            for (var n2 = 0; n2 < 3; ++n2) {
              var s3 = e3[n2];
              s3 < -1e150 && (s3 = -1e150, r3 = true), 1e150 < s3 && (s3 = 1e150, r3 = true), o2[n2] = s3;
            }
            r3 && l(this, 100155), null === (r3 = this.q) ? x(r3 = d(this.b), r3.b) : (w(r3), r3 = r3.e), r3.a.d = t3, r3.a.g[0] = o2[0], r3.a.g[1] = o2[1], r3.a.g[2] = o2[2], r3.f = 1, r3.b.f = -1, this.q = r3;
          }, t2.u = function(e3) {
            I(this, 0), this.d = 1, this.b = new re(), this.c = e3;
          }, t2.t = function() {
            I(this, 1), this.d = 2, this.q = null;
          }, t2.v = function() {
            I(this, 2), this.d = 1;
          }, t2.w = function() {
            I(this, 1), this.d = 0;
            var e3, t3, r3 = this.j[0], o2 = this.j[1], n2 = this.j[2], s3 = false, i2 = [r3, o2, n2];
            if (0 === r3 && 0 === o2 && 0 === n2) {
              for (var o2 = [-2e150, -2e150, -2e150], a2 = [2e150, 2e150, 2e150], n2 = [], l2 = [], r3 = (s3 = this.b.c).e; r3 !== s3; r3 = r3.e) for (var u3 = 0; u3 < 3; ++u3) {
                var c2 = r3.g[u3];
                c2 < a2[u3] && (a2[u3] = c2, l2[u3] = r3), c2 > o2[u3] && (o2[u3] = c2, n2[u3] = r3);
              }
              if (o2[1] - a2[1] > o2[r3 = 0] - a2[0] && (r3 = 1), a2[r3 = o2[2] - a2[2] > o2[r3] - a2[r3] ? 2 : r3] >= o2[r3]) i2[0] = 0, i2[1] = 0, i2[2] = 1;
              else {
                for (a2 = l2[r3], n2 = n2[r3], l2 = [o2 = 0, 0, 0], a2 = [a2.g[0] - n2.g[0], a2.g[1] - n2.g[1], a2.g[2] - n2.g[2]], u3 = [0, 0, 0], r3 = s3.e; r3 !== s3; r3 = r3.e) u3[0] = r3.g[0] - n2.g[0], u3[1] = r3.g[1] - n2.g[1], u3[2] = r3.g[2] - n2.g[2], l2[0] = a2[1] * u3[2] - a2[2] * u3[1], l2[1] = a2[2] * u3[0] - a2[0] * u3[2], l2[2] = a2[0] * u3[1] - a2[1] * u3[0], o2 < (c2 = l2[0] * l2[0] + l2[1] * l2[1] + l2[2] * l2[2]) && (o2 = c2, i2[0] = l2[0], i2[1] = l2[1], i2[2] = l2[2]);
                o2 <= 0 && (i2[0] = i2[1] = i2[2] = 0, i2[W(a2)] = 1);
              }
              s3 = true;
            }
            for (l2 = W(i2), r3 = this.b.c, o2 = (l2 + 1) % 3, n2 = (l2 + 2) % 3, l2 = 0 < i2[l2] ? 1 : -1, i2 = r3.e; i2 !== r3; i2 = i2.e) i2.b = i2.g[o2], i2.a = l2 * i2.g[n2];
            if (s3) {
              for (i2 = 0, r3 = (s3 = this.b.a).b; r3 !== s3; r3 = r3.b) if (!((o2 = r3.a).f <= 0)) for (; i2 += (o2.a.b - o2.b.a.b) * (o2.a.a + o2.b.a.a), (o2 = o2.e) !== r3.a; ) ;
              if (i2 < 0) for (s3 = (i2 = this.b.c).e; s3 !== i2; s3 = s3.e) s3.a = -s3.a;
            }
            for (this.n = false, i2 = this.b.b, r3 = i2.h; r3 !== i2; r3 = s3) s3 = r3.h, o2 = r3.e, y(r3.a, r3.b.a) && r3.e.e !== r3 && (L(this, o2, r3), m(r3), o2 = (r3 = o2).e), o2.e === r3 && (o2 !== r3 && (o2 !== s3 && o2 !== s3.b || (s3 = s3.h), m(o2)), r3 !== s3 && r3 !== s3.b || (s3 = s3.h), m(r3));
            for (this.e = i2 = new oe(), s3 = this.b.c, r3 = s3.e; r3 !== s3; r3 = r3.e) r3.h = ne(i2, r3);
            var d2 = i2;
            d2.d = [];
            for (var h2 = 0; h2 < d2.a; h2++) d2.d[h2] = h2;
            d2.d.sort(/* @__PURE__ */ function(r4) {
              return function(e4, t4) {
                return g(r4[e4], r4[t4]) ? 1 : -1;
              };
            }(d2.c)), d2.e = true;
            for (var f2 = d2.b, p2 = f2.a; 1 <= p2; --p2) U(f2, p2);
            for (f2.h = true, this.f = new $(this), J(this, -4e150), J(this, 4e150); null !== (i2 = se(this.e)); ) {
              for (; ; ) {
                e: if (0 === (r3 = this.e).a) s3 = F(r3.b);
                else if (s3 = r3.c[r3.d[r3.a - 1]], 0 !== r3.b.a && g(r3 = F(r3.b), s3)) {
                  s3 = r3;
                  break e;
                }
                if (null === s3 || !y(s3, i2)) break;
                s3 = se(this.e), L(this, i2.c, s3.c);
              }
              !function e4(t4, r4) {
                for (var o3, n3 = (t4.a = r4).c; null === n3.i; ) if ((n3 = n3.c) === r4.c) {
                  var n3 = t4, s4 = r4;
                  (c3 = new N()).a = s4.c.b;
                  for (var i3 = (a3 = n3.f).a; null !== (i3 = i3.a).b && !a3.c(a3.b, c3, i3.b); ) ;
                  var a3, l3, u4 = B(a3 = i3.b), c3 = a3.a, i3 = u4.a;
                  return void (0 === b(c3.b.a, s4, c3.a) ? y((c3 = a3.a).a, s4) || y(c3.b.a, s4) || (w(c3.b), a3.c && (m(c3.c), a3.c = false), x(s4.c, c3), e4(n3, s4)) : (l3 = g(i3.b.a, c3.b.a) ? a3 : u4, u4 = void 0, a3.d || l3.c ? (u4 = l3 === a3 ? S(s4.c.b, c3.e) : S(i3.b.c.b, s4.c).b, l3.c ? O(l3, u4) : ((a3 = q(c3 = n3, a3, u4)).f = G(a3).f + a3.a.f, a3.d = X(c3, a3.f)), e4(n3, s4)) : P(n3, a3, s4.c, s4.c, null, true)));
                }
                a3 = (c3 = B(n3 = C(n3.i))).a, (c3 = A(t4, c3, null)).c === a3 ? (c3 = (a3 = c3).c, i3 = B(n3), u4 = n3.a, l3 = i3.a, o3 = false, u4.b.a !== l3.b.a && K(t4, n3), y(u4.a, t4.a) && (x(c3.b.e, u4), c3 = B(n3 = C(n3)).a, A(t4, B(n3), i3), o3 = true), y(l3.a, t4.a) && (x(a3, l3.b.e), a3 = A(t4, i3, null), o3 = true), o3 ? P(t4, n3, a3.c, c3, c3, true) : (s4 = g(l3.a, u4.a) ? l3.b.e : u4, P(t4, n3, s4 = S(a3.c.b, s4), s4.c, s4.c, false), s4.b.i.c = true, Q(t4, n3))) : P(t4, n3, c3.c, a3, a3, true);
              }(this, i2);
            }
            for (this.a = this.f.a.a.b.a.a, i2 = 0; null !== (s3 = this.f.a.a.b); ) s3.h || ++i2, k(s3);
            for (this.f = null, (i2 = this.e).b = null, i2.d = null, this.e = i2.c = null, i2 = this.b, r3 = i2.a.b; r3 !== i2.a; r3 = s3) s3 = r3.b, (r3 = r3.a).e.e === r3 && (M(r3.c, r3), m(r3));
            if (!this.n) {
              if (i2 = this.b, this.m) for (r3 = i2.b.h; r3 !== i2.b; r3 = s3) s3 = r3.h, r3.b.d.c !== r3.d.c ? r3.f = r3.d.c ? 1 : -1 : m(r3);
              else for (r3 = i2.a.b; r3 !== i2.a; r3 = s3) if (s3 = r3.b, r3.c) {
                for (r3 = r3.a; g(r3.b.a, r3.a); r3 = r3.c.b) ;
                for (; g(r3.a, r3.b.a); r3 = r3.e) ;
                for (o2 = r3.c.b, n2 = void 0; r3.e !== o2; ) if (g(r3.b.a, o2.a)) {
                  for (; o2.e !== r3 && (g((t3 = o2.e).b.a, t3.a) || b(o2.a, o2.b.a, o2.e.b.a) <= 0); ) o2 = (n2 = S(o2.e, o2)).b;
                  o2 = o2.c.b;
                } else {
                  for (; o2.e !== r3 && (g((e3 = r3.c.b).a, e3.b.a) || 0 <= b(r3.b.a, r3.a, r3.c.b.a)); ) r3 = (n2 = S(r3, r3.c.b)).b;
                  r3 = r3.e;
                }
                for (; o2.e.e !== r3; ) n2 = S(o2.e, o2), o2 = n2.b;
              }
              if (this.h || this.i || this.k || this.l) if (this.m) {
                for (s3 = (i2 = this.b).a.b; s3 !== i2.a; s3 = s3.b) if (s3.c) {
                  for (this.h && this.h(2, this.c), r3 = s3.a; this.k && this.k(r3.a.d, this.c), (r3 = r3.e) !== s3.a; ) ;
                  this.i && this.i(this.c);
                }
              } else {
                for (i2 = this.b, s3 = !!this.l, r3 = false, o2 = -1, n2 = i2.a.d; n2 !== i2.a; n2 = n2.d) if (n2.c) for (r3 || (this.h && this.h(4, this.c), r3 = true), l2 = n2.a; s3 && (a2 = l2.b.d.c ? 0 : 1, o2 !== a2 && (o2 = a2, this.l && this.l(!!o2, this.c))), this.k && this.k(l2.a.d, this.c), (l2 = l2.e) !== n2.a; ) ;
                r3 && this.i && this.i(this.c);
              }
              if (this.r) {
                for (i2 = this.b, r3 = i2.a.b; r3 !== i2.a; r3 = s3) if (s3 = r3.b, !r3.c) {
                  for (n2 = (o2 = r3.a).e, l2 = void 0; n2 = (l2 = n2).e, (l2.d = null) === l2.b.d && (l2.c === l2 ? E(l2.a, null) : (l2.a.c = l2.c, T(l2, l2.b.e)), (a2 = l2.b).c === a2 ? E(a2.a, null) : (a2.a.c = a2.c, T(a2, a2.b.e)), H(l2)), l2 !== o2; ) ;
                  o2 = r3.d, ((r3 = r3.b).d = o2).b = r3;
                }
                return this.r(this.b), void (this.c = this.b = null);
              }
            }
            this.b = this.c = null;
          }, this.libtess = {
            GluTesselator: r2,
            windingRule: {
              GLU_TESS_WINDING_ODD: 100130,
              GLU_TESS_WINDING_NONZERO: 100131,
              GLU_TESS_WINDING_POSITIVE: 100132,
              GLU_TESS_WINDING_NEGATIVE: 100133,
              GLU_TESS_WINDING_ABS_GEQ_TWO: 100134
            },
            primitiveType: {
              GL_LINE_LOOP: 2,
              GL_TRIANGLES: 4,
              GL_TRIANGLE_STRIP: 5,
              GL_TRIANGLE_FAN: 6
            },
            errorType: {
              GLU_TESS_MISSING_BEGIN_POLYGON: 100151,
              GLU_TESS_MISSING_END_POLYGON: 100153,
              GLU_TESS_MISSING_BEGIN_CONTOUR: 100152,
              GLU_TESS_MISSING_END_CONTOUR: 100154,
              GLU_TESS_COORD_TOO_LARGE: 100155,
              GLU_TESS_NEED_COMBINE_CALLBACK: 100156
            },
            gluEnum: {
              GLU_TESS_MESH: 100112,
              GLU_TESS_TOLERANCE: 100142,
              GLU_TESS_WINDING_RULE: 100140,
              GLU_TESS_BOUNDARY_ONLY: 100141,
              GLU_INVALID_ENUM: 100900,
              GLU_INVALID_VALUE: 100901,
              GLU_TESS_BEGIN: 100100,
              GLU_TESS_VERTEX: 100101,
              GLU_TESS_END: 100102,
              GLU_TESS_ERROR: 100103,
              GLU_TESS_EDGE_FLAG: 100104,
              GLU_TESS_COMBINE: 100105,
              GLU_TESS_BEGIN_DATA: 100106,
              GLU_TESS_VERTEX_DATA: 100107,
              GLU_TESS_END_DATA: 100108,
              GLU_TESS_ERROR_DATA: 100109,
              GLU_TESS_EDGE_FLAG_DATA: 100110,
              GLU_TESS_COMBINE_DATA: 100111
            }
          }, r2.prototype.gluDeleteTess = r2.prototype.x, r2.prototype.gluTessProperty = r2.prototype.B, r2.prototype.gluGetTessProperty = r2.prototype.y, r2.prototype.gluTessNormal = r2.prototype.A, r2.prototype.gluTessCallback = r2.prototype.z, r2.prototype.gluTessVertex = r2.prototype.C, r2.prototype.gluTessBeginPolygon = r2.prototype.u, r2.prototype.gluTessBeginContour = r2.prototype.t, r2.prototype.gluTessEndContour = r2.prototype.v, r2.prototype.gluTessEndPolygon = r2.prototype.w, void 0 !== e2 && (e2.exports = this.libtess);
        }, {}],
        256: [function(e2, t2, r2) {
          "use strict";
          function o(g, e3, t3, r3) {
            var v = 0, o2 = void 0 === (r3 = void 0 === r3 ? {} : r3).loop ? null : r3.loop, b = void 0 === r3.palette ? null : r3.palette;
            if (e3 <= 0 || t3 <= 0 || 65535 < e3 || 65535 < t3) throw new Error("Width/Height invalid.");
            function _(e4) {
              e4 = e4.length;
              if (e4 < 2 || 256 < e4 || e4 & e4 - 1) throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");
              return e4;
            }
            g[v++] = 71, g[v++] = 73, g[v++] = 70, g[v++] = 56, g[v++] = 57, g[v++] = 97;
            var n = 0, s2 = 0;
            if (null !== b) {
              for (var i = _(b); i >>= 1; ) ++n;
              if (i = 1 << n, --n, void 0 !== r3.background) {
                if (i <= (s2 = r3.background)) throw new Error("Background index out of range.");
                if (0 === s2) throw new Error("Background index explicitly passed as 0.");
              }
            }
            if (g[v++] = 255 & e3, g[v++] = e3 >> 8 & 255, g[v++] = 255 & t3, g[v++] = t3 >> 8 & 255, g[v++] = (null !== b ? 128 : 0) | n, g[v++] = s2, g[v++] = 0, null !== b) for (var a = 0, l = b.length; a < l; ++a) {
              var u2 = b[a];
              g[v++] = u2 >> 16 & 255, g[v++] = u2 >> 8 & 255, g[v++] = 255 & u2;
            }
            if (null !== o2) {
              if (o2 < 0 || 65535 < o2) throw new Error("Loop count invalid.");
              g[v++] = 33, g[v++] = 255, g[v++] = 11, g[v++] = 78, g[v++] = 69, g[v++] = 84, g[v++] = 83, g[v++] = 67, g[v++] = 65, g[v++] = 80, g[v++] = 69, g[v++] = 50, g[v++] = 46, g[v++] = 48, g[v++] = 3, g[v++] = 1, g[v++] = 255 & o2, g[v++] = o2 >> 8 & 255, g[v++] = 0;
            }
            var j = false;
            this.addFrame = function(e4, t4, r4, o3, n2, s3) {
              if (true === j && (--v, j = false), s3 = void 0 === s3 ? {} : s3, e4 < 0 || t4 < 0 || 65535 < e4 || 65535 < t4) throw new Error("x/y invalid.");
              if (r4 <= 0 || o3 <= 0 || 65535 < r4 || 65535 < o3) throw new Error("Width/Height invalid.");
              if (n2.length < r4 * o3) throw new Error("Not enough pixels for the frame size.");
              var i2 = true, a2 = s3.palette;
              if (null == a2 && (i2 = false, a2 = b), null == a2) throw new Error("Must supply either a local or global palette.");
              for (var l2 = _(a2), u3 = 0; l2 >>= 1; ) ++u3;
              var l2 = 1 << u3, c = void 0 === s3.delay ? 0 : s3.delay, d = void 0 === s3.disposal ? 0 : s3.disposal;
              if (d < 0 || 3 < d) throw new Error("Disposal out of range.");
              var h = false, f = 0;
              if (void 0 !== s3.transparent && null !== s3.transparent && (h = true, (f = s3.transparent) < 0 || l2 <= f)) throw new Error("Transparent color index.");
              if (0 === d && !h && 0 === c || (g[v++] = 33, g[v++] = 249, g[v++] = 4, g[v++] = d << 2 | (true === h ? 1 : 0), g[v++] = 255 & c, g[v++] = c >> 8 & 255, g[v++] = f, g[v++] = 0), g[v++] = 44, g[v++] = 255 & e4, g[v++] = e4 >> 8 & 255, g[v++] = 255 & t4, g[v++] = t4 >> 8 & 255, g[v++] = 255 & r4, g[v++] = r4 >> 8 & 255, g[v++] = 255 & o3, g[v++] = o3 >> 8 & 255, g[v++] = true === i2 ? 128 | u3 - 1 : 0, true === i2) for (var p = 0, m = a2.length; p < m; ++p) {
                var y = a2[p];
                g[v++] = y >> 16 & 255, g[v++] = y >> 8 & 255, g[v++] = 255 & y;
              }
              return v = function(t5, r5, e5, o4) {
                t5[r5++] = e5;
                var n3 = r5++, s4 = 1 << e5, i3 = s4 - 1, a3 = 1 + s4, l3 = 1 + a3, u4 = e5 + 1, c2 = 0, d2 = 0;
                function h2(e6) {
                  for (; e6 <= c2; ) t5[r5++] = 255 & d2, d2 >>= 8, c2 -= 8, r5 === n3 + 256 && (t5[n3] = 255, n3 = r5++);
                }
                function f2(e6) {
                  d2 |= e6 << c2, c2 += u4, h2(8);
                }
                var p2 = o4[0] & i3, m2 = {};
                f2(s4);
                for (var y2 = 1, g2 = o4.length; y2 < g2; ++y2) {
                  var v2 = o4[y2] & i3, b2 = p2 << 8 | v2, _2 = m2[b2];
                  if (void 0 === _2) {
                    for (d2 |= p2 << c2, c2 += u4; 8 <= c2; ) t5[r5++] = 255 & d2, d2 >>= 8, c2 -= 8, r5 === n3 + 256 && (t5[n3] = 255, n3 = r5++);
                    4096 === l3 ? (f2(s4), l3 = 1 + a3, u4 = e5 + 1, m2 = {}) : (1 << u4 <= l3 && ++u4, m2[b2] = l3++), p2 = v2;
                  } else p2 = _2;
                }
                f2(p2), f2(a3), h2(1), n3 + 1 === r5 ? t5[n3] = 0 : (t5[n3] = r5 - n3 - 1, t5[r5++] = 0);
                return r5;
              }(g, v, u3 < 2 ? 2 : u3, n2);
            }, this.end = function() {
              return false === j && (g[v++] = 59, j = true), v;
            }, this.getOutputBuffer = function() {
              return g;
            }, this.setOutputBuffer = function(e4) {
              g = e4;
            }, this.getOutputBufferPosition = function() {
              return v;
            }, this.setOutputBufferPosition = function(e4) {
              v = e4;
            };
          }
          function E(e3, t3, r3, o2) {
            for (var n = e3[t3++], s2 = 1 << n, i = 1 + s2, a = 1 + i, l = n + 1, u2 = (1 << l) - 1, c = 0, d = 0, h = 0, f = e3[t3++], p = new Int32Array(4096), m = null; ; ) {
              for (; c < 16 && 0 !== f; ) d |= e3[t3++] << c, c += 8, 1 === f ? f = e3[t3++] : --f;
              if (c < l) break;
              var y = d & u2;
              if (d >>= l, c -= l, y == s2) a = 1 + i, u2 = (1 << (l = n + 1)) - 1, m = null;
              else {
                if (y == i) break;
                for (var g = y < a ? y : m, v = 0, b = g; s2 < b; ) b = p[b] >> 8, ++v;
                var _ = b;
                if (o2 < h + v + (g !== y ? 1 : 0)) return void console.log("Warning, gif stream longer than expected.");
                r3[h++] = _;
                var j = h += v;
                for (g !== y && (r3[h++] = _), b = g; v--; ) b = p[b], r3[--j] = 255 & b, b >>= 8;
                null !== m && a < 4096 && (p[a++] = m << 8 | _, u2 + 1 <= a && l < 12 && (++l, u2 = u2 << 1 | 1)), m = y;
              }
            }
            h !== o2 && console.log("Warning, gif stream shorter than expected.");
          }
          try {
            r2.GifWriter = o, r2.GifReader = function(b) {
              var e3 = 0;
              if (71 !== b[e3++] || 73 !== b[e3++] || 70 !== b[e3++] || 56 !== b[e3++] || 56 != (b[e3++] + 1 & 253) || 97 !== b[e3++]) throw new Error("Invalid GIF 87a/89a header.");
              var _ = b[e3++] | b[e3++] << 8, t3 = b[e3++] | b[e3++] << 8, r3 = b[e3++], o2 = 1 << 1 + (7 & r3), n = (b[e3++], b[e3++], null), s2 = null, i = (r3 >> 7 && (n = e3, e3 += 3 * (s2 = o2)), true), a = [], l = 0, u2 = null, c = 0, d = null;
              for (this.width = _, this.height = t3; i && e3 < b.length; ) switch (b[e3++]) {
                case 33:
                  switch (b[e3++]) {
                    case 255:
                      if (11 !== b[e3] || 78 == b[e3 + 1] && 69 == b[e3 + 2] && 84 == b[e3 + 3] && 83 == b[e3 + 4] && 67 == b[e3 + 5] && 65 == b[e3 + 6] && 80 == b[e3 + 7] && 69 == b[e3 + 8] && 50 == b[e3 + 9] && 46 == b[e3 + 10] && 48 == b[e3 + 11] && 3 == b[e3 + 12] && 1 == b[e3 + 13] && 0 == b[e3 + 16]) e3 += 14, d = b[e3++] | b[e3++] << 8, e3++;
                      else for (e3 += 12; ; ) {
                        if (!(0 <= (f = b[e3++]))) throw Error("Invalid block size");
                        if (0 === f) break;
                        e3 += f;
                      }
                      break;
                    case 249:
                      if (4 !== b[e3++] || 0 !== b[e3 + 4]) throw new Error("Invalid graphics extension block.");
                      var h = b[e3++], l = b[e3++] | b[e3++] << 8, u2 = b[e3++];
                      0 == (1 & h) && (u2 = null), c = h >> 2 & 7, e3++;
                      break;
                    case 254:
                      for (; ; ) {
                        if (!(0 <= (f = b[e3++]))) throw Error("Invalid block size");
                        if (0 === f) break;
                        e3 += f;
                      }
                      break;
                    default:
                      throw new Error("Unknown graphic control label: 0x" + b[e3 - 1].toString(16));
                  }
                  break;
                case 44:
                  var f, p = b[e3++] | b[e3++] << 8, m = b[e3++] | b[e3++] << 8, y = b[e3++] | b[e3++] << 8, g = b[e3++] | b[e3++] << 8, v = b[e3++], j = v >> 6 & 1, x = 1 << 1 + (7 & v), w = n, S = s2, T = false, v = (v >> 7 && (T = true, w = e3, e3 += 3 * (S = x)), e3);
                  for (e3++; ; ) {
                    if (!(0 <= (f = b[e3++]))) throw Error("Invalid block size");
                    if (0 === f) break;
                    e3 += f;
                  }
                  a.push({
                    x: p,
                    y: m,
                    width: y,
                    height: g,
                    has_local_palette: T,
                    palette_offset: w,
                    palette_size: S,
                    data_offset: v,
                    data_length: e3 - v,
                    transparent_index: u2,
                    interlaced: !!j,
                    delay: l,
                    disposal: c
                  });
                  break;
                case 59:
                  i = false;
                  break;
                default:
                  throw new Error("Unknown gif block: 0x" + b[e3 - 1].toString(16));
              }
              this.numFrames = function() {
                return a.length;
              }, this.loopCount = function() {
                return d;
              }, this.frameInfo = function(e4) {
                if (e4 < 0 || e4 >= a.length) throw new Error("Frame index out of range.");
                return a[e4];
              }, this.decodeAndBlitFrameBGRA = function(e4, t4) {
                for (var e4 = this.frameInfo(e4), r4 = e4.width * e4.height, o3 = new Uint8Array(r4), n2 = (E(b, e4.data_offset, o3, r4), e4.palette_offset), s3 = e4.transparent_index, i2 = (null === s3 && (s3 = 256), e4.width), a2 = _ - i2, l2 = i2, u3 = 4 * (e4.y * _ + e4.x), c2 = 4 * ((e4.y + e4.height) * _ + e4.x), d2 = u3, h2 = 4 * a2, f2 = (true === e4.interlaced && (h2 += 4 * _ * 7), 8), p2 = 0, m2 = o3.length; p2 < m2; ++p2) {
                  var y2, g2, v2 = o3[p2];
                  0 === l2 && (l2 = i2, c2 <= (d2 += h2) && (h2 = 4 * a2 + 4 * _ * (f2 - 1), d2 = u3 + (i2 + a2) * (f2 << 1), f2 >>= 1)), v2 === s3 ? d2 += 4 : (y2 = b[n2 + 3 * v2], g2 = b[n2 + 3 * v2 + 1], v2 = b[n2 + 3 * v2 + 2], t4[d2++] = v2, t4[d2++] = g2, t4[d2++] = y2, t4[d2++] = 255), --l2;
                }
              }, this.decodeAndBlitFrameRGBA = function(e4, t4) {
                for (var e4 = this.frameInfo(e4), r4 = e4.width * e4.height, o3 = new Uint8Array(r4), n2 = (E(b, e4.data_offset, o3, r4), e4.palette_offset), s3 = e4.transparent_index, i2 = (null === s3 && (s3 = 256), e4.width), a2 = _ - i2, l2 = i2, u3 = 4 * (e4.y * _ + e4.x), c2 = 4 * ((e4.y + e4.height) * _ + e4.x), d2 = u3, h2 = 4 * a2, f2 = (true === e4.interlaced && (h2 += 4 * _ * 7), 8), p2 = 0, m2 = o3.length; p2 < m2; ++p2) {
                  var y2, g2, v2 = o3[p2];
                  0 === l2 && (l2 = i2, c2 <= (d2 += h2) && (h2 = 4 * a2 + 4 * _ * (f2 - 1), d2 = u3 + (i2 + a2) * (f2 << 1), f2 >>= 1)), v2 === s3 ? d2 += 4 : (y2 = b[n2 + 3 * v2], g2 = b[n2 + 3 * v2 + 1], v2 = b[n2 + 3 * v2 + 2], t4[d2++] = y2, t4[d2++] = g2, t4[d2++] = v2, t4[d2++] = 255), --l2;
                }
              };
            };
          } catch (e3) {
          }
        }, {}],
        257: [function(Pr, r2, o) {
          !function(Ar) {
            var e2, t2;
            e2 = this, t2 = function(_) {
              "use strict";
              function D(e4) {
                if (null == this) throw TypeError();
                var t4, r4 = String(this), o3 = r4.length, e4 = e4 ? Number(e4) : 0;
                if (!((e4 = e4 != e4 ? 0 : e4) < 0 || o3 <= e4)) return 55296 <= (t4 = r4.charCodeAt(e4)) && t4 <= 56319 && e4 + 1 < o3 && 56320 <= (o3 = r4.charCodeAt(e4 + 1)) && o3 <= 57343 ? 1024 * (t4 - 55296) + o3 - 56320 + 65536 : t4;
              }
              String.prototype.codePointAt || ((F = function() {
                try {
                  var e4 = {}, t4 = Object.defineProperty, r4 = t4(e4, e4, e4) && t4;
                } catch (e5) {
                }
                return r4;
              }()) ? F(String.prototype, "codePointAt", {
                value: D,
                configurable: true,
                writable: true
              }) : String.prototype.codePointAt = D);
              var F, U = 0, N = -3;
              function B() {
                this.table = new Uint16Array(16), this.trans = new Uint16Array(288);
              }
              function G(e4, t4) {
                this.source = e4, this.sourceIndex = 0, this.tag = 0, this.bitcount = 0, this.dest = t4, this.destLen = 0, this.ltree = new B(), this.dtree = new B();
              }
              var V = new B(), z = new B(), H = new Uint8Array(30), W = new Uint16Array(30), q = new Uint8Array(30), X = new Uint16Array(30), Y = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), Z = new B(), v = new Uint8Array(320);
              function K(e4, t4, r4, o3) {
                for (var n2, s3 = 0; s3 < r4; ++s3) e4[s3] = 0;
                for (s3 = 0; s3 < 30 - r4; ++s3) e4[s3 + r4] = s3 / r4 | 0;
                for (n2 = o3, s3 = 0; s3 < 30; ++s3) t4[s3] = n2, n2 += 1 << e4[s3];
              }
              var Q = new Uint16Array(16);
              function J(e4, t4, r4, o3) {
                for (var n2, s3 = 0; s3 < 16; ++s3) e4.table[s3] = 0;
                for (s3 = 0; s3 < o3; ++s3) e4.table[t4[r4 + s3]]++;
                for (s3 = n2 = e4.table[0] = 0; s3 < 16; ++s3) Q[s3] = n2, n2 += e4.table[s3];
                for (s3 = 0; s3 < o3; ++s3) t4[r4 + s3] && (e4.trans[Q[t4[r4 + s3]]++] = s3);
              }
              function b(e4, t4, r4) {
                if (!t4) return r4;
                for (; e4.bitcount < 24; ) e4.tag |= e4.source[e4.sourceIndex++] << e4.bitcount, e4.bitcount += 8;
                var o3 = e4.tag & 65535 >>> 16 - t4;
                return e4.tag >>>= t4, e4.bitcount -= t4, o3 + r4;
              }
              function $(e4, t4) {
                for (; e4.bitcount < 24; ) e4.tag |= e4.source[e4.sourceIndex++] << e4.bitcount, e4.bitcount += 8;
                for (var r4 = 0, o3 = 0, n2 = 0, s3 = e4.tag; o3 = 2 * o3 + (1 & s3), s3 >>>= 1, r4 += t4.table[++n2], 0 <= (o3 -= t4.table[n2]); ) ;
                return e4.tag = s3, e4.bitcount -= n2, t4.trans[r4 + o3];
              }
              function ee(e4, t4, r4) {
                for (; ; ) {
                  var o3 = $(e4, t4);
                  if (256 === o3) return U;
                  if (o3 < 256) e4.dest[e4.destLen++] = o3;
                  else for (var n2, s3 = b(e4, H[o3 -= 257], W[o3]), o3 = $(e4, r4), i2 = n2 = e4.destLen - b(e4, q[o3], X[o3]); i2 < n2 + s3; ++i2) e4.dest[e4.destLen++] = e4.dest[i2];
                }
              }
              for (var e3 = V, te = z, t3 = 0; t3 < 7; ++t3) e3.table[t3] = 0;
              for (e3.table[7] = 24, e3.table[8] = 152, e3.table[9] = 112, t3 = 0; t3 < 24; ++t3) e3.trans[t3] = 256 + t3;
              for (t3 = 0; t3 < 144; ++t3) e3.trans[24 + t3] = t3;
              for (t3 = 0; t3 < 8; ++t3) e3.trans[168 + t3] = 280 + t3;
              for (t3 = 0; t3 < 112; ++t3) e3.trans[176 + t3] = 144 + t3;
              for (t3 = 0; t3 < 5; ++t3) te.table[t3] = 0;
              for (te.table[5] = 32, t3 = 0; t3 < 32; ++t3) te.trans[t3] = t3;
              K(H, W, 4, 3), K(q, X, 2, 1), H[28] = 0, W[28] = 258;
              var re = function(e4, t4) {
                var r4, o3, n2, s3 = new G(e4, t4);
                do {
                  switch (n2 = void 0, (o3 = s3).bitcount-- || (o3.tag = o3.source[o3.sourceIndex++], o3.bitcount = 7), n2 = 1 & o3.tag, o3.tag >>>= 1, o3 = n2, b(s3, 2, 0)) {
                    case 0:
                      r4 = function(e5) {
                        for (var t5, r5; 8 < e5.bitcount; ) e5.sourceIndex--, e5.bitcount -= 8;
                        if ((t5 = 256 * e5.source[e5.sourceIndex + 1] + e5.source[e5.sourceIndex]) !== (65535 & ~(256 * e5.source[e5.sourceIndex + 3] + e5.source[e5.sourceIndex + 2]))) return N;
                        for (e5.sourceIndex += 4, r5 = t5; r5; --r5) e5.dest[e5.destLen++] = e5.source[e5.sourceIndex++];
                        return e5.bitcount = 0, U;
                      }(s3);
                      break;
                    case 1:
                      r4 = ee(s3, V, z);
                      break;
                    case 2:
                      y2 = m2 = p2 = g2 = i2 = f2 = h2 = d2 = c2 = u3 = l2 = a2 = void 0;
                      for (var i2, a2 = s3, l2 = s3.ltree, u3 = s3.dtree, c2 = b(a2, 5, 257), d2 = b(a2, 5, 1), h2 = b(a2, 4, 4), f2 = 0; f2 < 19; ++f2) v[f2] = 0;
                      for (f2 = 0; f2 < h2; ++f2) {
                        var p2 = b(a2, 3, 0);
                        v[Y[f2]] = p2;
                      }
                      for (J(Z, v, 0, 19), i2 = 0; i2 < c2 + d2; ) {
                        var m2 = $(a2, Z);
                        switch (m2) {
                          case 16:
                            for (var y2 = v[i2 - 1], g2 = b(a2, 2, 3); g2; --g2) v[i2++] = y2;
                            break;
                          case 17:
                            for (g2 = b(a2, 3, 3); g2; --g2) v[i2++] = 0;
                            break;
                          case 18:
                            for (g2 = b(a2, 7, 11); g2; --g2) v[i2++] = 0;
                            break;
                          default:
                            v[i2++] = m2;
                        }
                      }
                      J(l2, v, 0, c2), J(u3, v, c2, d2), r4 = ee(s3, s3.ltree, s3.dtree);
                      break;
                    default:
                      r4 = N;
                  }
                  if (r4 !== U) throw new Error("Data error");
                } while (!o3);
                return s3.destLen < s3.dest.length ? "function" == typeof s3.dest.slice ? s3.dest.slice(0, s3.destLen) : s3.dest.subarray(0, s3.destLen) : s3.dest;
              };
              function g(e4, t4, r4, o3, n2) {
                return Math.pow(1 - n2, 3) * e4 + 3 * Math.pow(1 - n2, 2) * n2 * t4 + 3 * (1 - n2) * Math.pow(n2, 2) * r4 + Math.pow(n2, 3) * o3;
              }
              function a() {
                this.x1 = Number.NaN, this.y1 = Number.NaN, this.x2 = Number.NaN, this.y2 = Number.NaN;
              }
              function h() {
                this.commands = [], this.fill = "black", this.stroke = null, this.strokeWidth = 1;
              }
              function oe(e4) {
                throw new Error(e4);
              }
              function ne(e4, t4) {
                e4 || oe(t4);
              }
              a.prototype.isEmpty = function() {
                return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
              }, a.prototype.addPoint = function(e4, t4) {
                "number" == typeof e4 && ((isNaN(this.x1) || isNaN(this.x2)) && (this.x1 = e4, this.x2 = e4), e4 < this.x1 && (this.x1 = e4), e4 > this.x2 && (this.x2 = e4)), "number" == typeof t4 && ((isNaN(this.y1) || isNaN(this.y2)) && (this.y1 = t4, this.y2 = t4), t4 < this.y1 && (this.y1 = t4), t4 > this.y2 && (this.y2 = t4));
              }, a.prototype.addX = function(e4) {
                this.addPoint(e4, null);
              }, a.prototype.addY = function(e4) {
                this.addPoint(null, e4);
              }, a.prototype.addBezier = function(e4, t4, r4, o3, n2, s3, i2, a2) {
                var l2 = [e4, t4], u3 = [r4, o3], c2 = [n2, s3], d2 = [i2, a2];
                this.addPoint(e4, t4), this.addPoint(i2, a2);
                for (var h2 = 0; h2 <= 1; h2++) {
                  var f2, p2 = 6 * l2[h2] - 12 * u3[h2] + 6 * c2[h2], m2 = -3 * l2[h2] + 9 * u3[h2] - 9 * c2[h2] + 3 * d2[h2], y2 = 3 * u3[h2] - 3 * l2[h2];
                  0 == m2 ? 0 == p2 || 0 < (f2 = -y2 / p2) && f2 < 1 && (0 === h2 && this.addX(g(l2[h2], u3[h2], c2[h2], d2[h2], f2)), 1 === h2 && this.addY(g(l2[h2], u3[h2], c2[h2], d2[h2], f2))) : (f2 = Math.pow(p2, 2) - 4 * y2 * m2) < 0 || (0 < (y2 = (-p2 + Math.sqrt(f2)) / (2 * m2)) && y2 < 1 && (0 === h2 && this.addX(g(l2[h2], u3[h2], c2[h2], d2[h2], y2)), 1 === h2 && this.addY(g(l2[h2], u3[h2], c2[h2], d2[h2], y2))), 0 < (y2 = (-p2 - Math.sqrt(f2)) / (2 * m2)) && y2 < 1 && (0 === h2 && this.addX(g(l2[h2], u3[h2], c2[h2], d2[h2], y2)), 1 === h2 && this.addY(g(l2[h2], u3[h2], c2[h2], d2[h2], y2))));
                }
              }, a.prototype.addQuad = function(e4, t4, r4, o3, n2, s3) {
                r4 = e4 + 2 / 3 * (r4 - e4), o3 = t4 + 2 / 3 * (o3 - t4);
                this.addBezier(e4, t4, r4, o3, r4 + 1 / 3 * (n2 - e4), o3 + 1 / 3 * (s3 - t4), n2, s3);
              }, h.prototype.moveTo = function(e4, t4) {
                this.commands.push({
                  type: "M",
                  x: e4,
                  y: t4
                });
              }, h.prototype.lineTo = function(e4, t4) {
                this.commands.push({
                  type: "L",
                  x: e4,
                  y: t4
                });
              }, h.prototype.curveTo = h.prototype.bezierCurveTo = function(e4, t4, r4, o3, n2, s3) {
                this.commands.push({
                  type: "C",
                  x1: e4,
                  y1: t4,
                  x2: r4,
                  y2: o3,
                  x: n2,
                  y: s3
                });
              }, h.prototype.quadTo = h.prototype.quadraticCurveTo = function(e4, t4, r4, o3) {
                this.commands.push({
                  type: "Q",
                  x1: e4,
                  y1: t4,
                  x: r4,
                  y: o3
                });
              }, h.prototype.close = h.prototype.closePath = function() {
                this.commands.push({
                  type: "Z"
                });
              }, h.prototype.extend = function(e4) {
                var t4;
                if (e4.commands) e4 = e4.commands;
                else if (e4 instanceof a) return t4 = e4, this.moveTo(t4.x1, t4.y1), this.lineTo(t4.x2, t4.y1), this.lineTo(t4.x2, t4.y2), this.lineTo(t4.x1, t4.y2), void this.close();
                Array.prototype.push.apply(this.commands, e4);
              }, h.prototype.getBoundingBox = function() {
                for (var e4 = new a(), t4 = 0, r4 = 0, o3 = 0, n2 = 0, s3 = 0; s3 < this.commands.length; s3++) {
                  var i2 = this.commands[s3];
                  switch (i2.type) {
                    case "M":
                      e4.addPoint(i2.x, i2.y), t4 = o3 = i2.x, r4 = n2 = i2.y;
                      break;
                    case "L":
                      e4.addPoint(i2.x, i2.y), o3 = i2.x, n2 = i2.y;
                      break;
                    case "Q":
                      e4.addQuad(o3, n2, i2.x1, i2.y1, i2.x, i2.y), o3 = i2.x, n2 = i2.y;
                      break;
                    case "C":
                      e4.addBezier(o3, n2, i2.x1, i2.y1, i2.x2, i2.y2, i2.x, i2.y), o3 = i2.x, n2 = i2.y;
                      break;
                    case "Z":
                      o3 = t4, n2 = r4;
                      break;
                    default:
                      throw new Error("Unexpected path command " + i2.type);
                  }
                }
                return e4.isEmpty() && e4.addPoint(0, 0), e4;
              }, h.prototype.draw = function(e4) {
                e4.beginPath();
                for (var t4 = 0; t4 < this.commands.length; t4 += 1) {
                  var r4 = this.commands[t4];
                  "M" === r4.type ? e4.moveTo(r4.x, r4.y) : "L" === r4.type ? e4.lineTo(r4.x, r4.y) : "C" === r4.type ? e4.bezierCurveTo(r4.x1, r4.y1, r4.x2, r4.y2, r4.x, r4.y) : "Q" === r4.type ? e4.quadraticCurveTo(r4.x1, r4.y1, r4.x, r4.y) : "Z" === r4.type && e4.closePath();
                }
                this.fill && (e4.fillStyle = this.fill, e4.fill()), this.stroke && (e4.strokeStyle = this.stroke, e4.lineWidth = this.strokeWidth, e4.stroke());
              }, h.prototype.toPathData = function(n2) {
                function e4() {
                  for (var e5 = arguments, t5 = "", r5 = 0; r5 < arguments.length; r5 += 1) {
                    var o4 = e5[r5];
                    0 <= o4 && 0 < r5 && (t5 += " "), t5 += (o4 = o4, Math.round(o4) === o4 ? "" + Math.round(o4) : o4.toFixed(n2));
                  }
                  return t5;
                }
                n2 = void 0 !== n2 ? n2 : 2;
                for (var t4 = "", r4 = 0; r4 < this.commands.length; r4 += 1) {
                  var o3 = this.commands[r4];
                  "M" === o3.type ? t4 += "M" + e4(o3.x, o3.y) : "L" === o3.type ? t4 += "L" + e4(o3.x, o3.y) : "C" === o3.type ? t4 += "C" + e4(o3.x1, o3.y1, o3.x2, o3.y2, o3.x, o3.y) : "Q" === o3.type ? t4 += "Q" + e4(o3.x1, o3.y1, o3.x, o3.y) : "Z" === o3.type && (t4 += "Z");
                }
                return t4;
              }, h.prototype.toSVG = function(e4) {
                var t4 = (t4 = '<path d="') + this.toPathData(e4) + '"';
                return this.fill && "black" !== this.fill && (null === this.fill ? t4 += ' fill="none"' : t4 += ' fill="' + this.fill + '"'), this.stroke && (t4 += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"'), t4 += "/>";
              }, h.prototype.toDOMElement = function(e4) {
                var e4 = this.toPathData(e4), t4 = document.createElementNS("http://www.w3.org/2000/svg", "path");
                return t4.setAttribute("d", e4), t4;
              };
              var L = {
                fail: oe,
                argument: ne,
                assert: ne
              }, m = {}, w = {}, l = {};
              function r3(e4) {
                return function() {
                  return e4;
                };
              }
              w.BYTE = function(e4) {
                return L.argument(0 <= e4 && e4 <= 255, "Byte value should be between 0 and 255."), [e4];
              }, l.BYTE = r3(1), w.CHAR = function(e4) {
                return [e4.charCodeAt(0)];
              }, l.CHAR = r3(1), w.CHARARRAY = function(e4) {
                for (var t4 = [], r4 = 0; r4 < e4.length; r4 += 1) t4[r4] = e4.charCodeAt(r4);
                return t4;
              }, l.CHARARRAY = function(e4) {
                return e4.length;
              }, w.USHORT = function(e4) {
                return [e4 >> 8 & 255, 255 & e4];
              }, l.USHORT = r3(2), w.SHORT = function(e4) {
                return [(e4 = 32768 <= e4 ? -(65536 - e4) : e4) >> 8 & 255, 255 & e4];
              }, l.SHORT = r3(2), w.UINT24 = function(e4) {
                return [e4 >> 16 & 255, e4 >> 8 & 255, 255 & e4];
              }, l.UINT24 = r3(3), w.ULONG = function(e4) {
                return [e4 >> 24 & 255, e4 >> 16 & 255, e4 >> 8 & 255, 255 & e4];
              }, l.ULONG = r3(4), w.LONG = function(e4) {
                return [(e4 = 2147483648 <= e4 ? -(4294967296 - e4) : e4) >> 24 & 255, e4 >> 16 & 255, e4 >> 8 & 255, 255 & e4];
              }, l.LONG = r3(4), w.FIXED = w.ULONG, l.FIXED = l.ULONG, w.FWORD = w.SHORT, l.FWORD = l.SHORT, w.UFWORD = w.USHORT, l.UFWORD = l.USHORT, w.LONGDATETIME = function(e4) {
                return [0, 0, 0, 0, e4 >> 24 & 255, e4 >> 16 & 255, e4 >> 8 & 255, 255 & e4];
              }, l.LONGDATETIME = r3(8), w.TAG = function(e4) {
                return L.argument(4 === e4.length, "Tag should be exactly 4 ASCII characters."), [e4.charCodeAt(0), e4.charCodeAt(1), e4.charCodeAt(2), e4.charCodeAt(3)];
              }, l.TAG = r3(4), w.Card8 = w.BYTE, l.Card8 = l.BYTE, w.Card16 = w.USHORT, l.Card16 = l.USHORT, w.OffSize = w.BYTE, l.OffSize = l.BYTE, w.SID = w.USHORT, l.SID = l.USHORT, w.NUMBER = function(e4) {
                return -107 <= e4 && e4 <= 107 ? [e4 + 139] : 108 <= e4 && e4 <= 1131 ? [247 + ((e4 -= 108) >> 8), 255 & e4] : -1131 <= e4 && e4 <= -108 ? [251 + ((e4 = -e4 - 108) >> 8), 255 & e4] : -32768 <= e4 && e4 <= 32767 ? w.NUMBER16(e4) : w.NUMBER32(e4);
              }, l.NUMBER = function(e4) {
                return w.NUMBER(e4).length;
              }, w.NUMBER16 = function(e4) {
                return [28, e4 >> 8 & 255, 255 & e4];
              }, l.NUMBER16 = r3(3), w.NUMBER32 = function(e4) {
                return [29, e4 >> 24 & 255, e4 >> 16 & 255, e4 >> 8 & 255, 255 & e4];
              }, l.NUMBER32 = r3(5), w.REAL = function(e4) {
                for (var t4 = e4.toString(), r4 = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t4), o3 = (r4 && (r4 = parseFloat("1e" + ((r4[2] ? +r4[2] : 0) + r4[1].length)), t4 = (Math.round(e4 * r4) / r4).toString()), ""), n2 = 0, s3 = t4.length; n2 < s3; n2 += 1) {
                  var i2 = t4[n2];
                  o3 += "e" === i2 ? "-" === t4[++n2] ? "c" : "b" : "." === i2 ? "a" : "-" === i2 ? "e" : i2;
                }
                for (var a2 = [30], l2 = 0, u3 = (o3 += 1 & o3.length ? "f" : "ff").length; l2 < u3; l2 += 2) a2.push(parseInt(o3.substr(l2, 2), 16));
                return a2;
              }, l.REAL = function(e4) {
                return w.REAL(e4).length;
              }, w.NAME = w.CHARARRAY, l.NAME = l.CHARARRAY, w.STRING = w.CHARARRAY, l.STRING = l.CHARARRAY, m.UTF8 = function(e4, t4, r4) {
                for (var o3 = [], n2 = r4, s3 = 0; s3 < n2; s3++, t4 += 1) o3[s3] = e4.getUint8(t4);
                return String.fromCharCode.apply(null, o3);
              }, m.UTF16 = function(e4, t4, r4) {
                for (var o3 = [], n2 = r4 / 2, s3 = 0; s3 < n2; s3++, t4 += 2) o3[s3] = e4.getUint16(t4);
                return String.fromCharCode.apply(null, o3);
              }, w.UTF16 = function(e4) {
                for (var t4 = [], r4 = 0; r4 < e4.length; r4 += 1) {
                  var o3 = e4.charCodeAt(r4);
                  t4[t4.length] = o3 >> 8 & 255, t4[t4.length] = 255 & o3;
                }
                return t4;
              }, l.UTF16 = function(e4) {
                return 2 * e4.length;
              };
              var se, ie = {
                "x-mac-croatian": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\u0160\u2122\xB4\xA8\u2260\u017D\xD8\u221E\xB1\u2264\u2265\u2206\xB5\u2202\u2211\u220F\u0161\u222B\xAA\xBA\u03A9\u017E\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u0106\xAB\u010C\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u0110\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\uF8FF\xA9\u2044\u20AC\u2039\u203A\xC6\xBB\u2013\xB7\u201A\u201E\u2030\xC2\u0107\xC1\u010D\xC8\xCD\xCE\xCF\xCC\xD3\xD4\u0111\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u03C0\xCB\u02DA\xB8\xCA\xE6\u02C7",
                "x-mac-cyrillic": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\u0490\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E",
                "x-mac-gaelic": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u1E02\xB1\u2264\u2265\u1E03\u010A\u010B\u1E0A\u1E0B\u1E1E\u1E1F\u0120\u0121\u1E40\xE6\xF8\u1E41\u1E56\u1E57\u027C\u0192\u017F\u1E60\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\u1E61\u1E9B\xFF\u0178\u1E6A\u20AC\u2039\u203A\u0176\u0177\u1E6B\xB7\u1EF2\u1EF3\u204A\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\u2663\xD2\xDA\xDB\xD9\u0131\xDD\xFD\u0174\u0175\u1E84\u1E85\u1E80\u1E81\u1E82\u1E83",
                "x-mac-greek": "\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\u20AC\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\xB7\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026\xA0\u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\xAD",
                "x-mac-icelandic": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u03A9\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\u20AC\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uF8FF\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7",
                "x-mac-inuit": "\u1403\u1404\u1405\u1406\u140A\u140B\u1431\u1432\u1433\u1434\u1438\u1439\u1449\u144E\u144F\u1450\u1451\u1455\u1456\u1466\u146D\u146E\u146F\u1470\u1472\u1473\u1483\u148B\u148C\u148D\u148E\u1490\u1491\xB0\u14A1\u14A5\u14A6\u2022\xB6\u14A7\xAE\xA9\u2122\u14A8\u14AA\u14AB\u14BB\u14C2\u14C3\u14C4\u14C5\u14C7\u14C8\u14D0\u14EF\u14F0\u14F1\u14F2\u14F4\u14F5\u1505\u14D5\u14D6\u14D7\u14D8\u14DA\u14DB\u14EA\u1528\u1529\u152A\u152B\u152D\u2026\xA0\u152E\u153E\u1555\u1556\u1557\u2013\u2014\u201C\u201D\u2018\u2019\u1558\u1559\u155A\u155D\u1546\u1547\u1548\u1549\u154B\u154C\u1550\u157F\u1580\u1581\u1582\u1583\u1584\u1585\u158F\u1590\u1591\u1592\u1593\u1594\u1595\u1671\u1672\u1673\u1674\u1675\u1676\u1596\u15A0\u15A1\u15A2\u15A3\u15A4\u15A5\u15A6\u157C\u0141\u0142",
                "x-mac-ce": "\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026\xA0\u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7",
                macintosh: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u03A9\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\u20AC\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uF8FF\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7",
                "x-mac-romanian": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\u0102\u0218\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u03A9\u0103\u0219\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\u20AC\u2039\u203A\u021A\u021B\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uF8FF\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7",
                "x-mac-turkish": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u03A9\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uF8FF\xD2\xDA\xDB\xD9\uF8A0\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
              }, ae = (m.MACSTRING = function(e4, t4, r4, o3) {
                var n2 = ie[o3];
                if (void 0 !== n2) {
                  for (var s3 = "", i2 = 0; i2 < r4; i2++) {
                    var a2 = e4.getUint8(t4 + i2);
                    s3 += a2 <= 127 ? String.fromCharCode(a2) : n2[127 & a2];
                  }
                  return s3;
                }
              }, "function" == typeof WeakMap && /* @__PURE__ */ new WeakMap());
              function le(e4) {
                return -128 <= e4 && e4 <= 127;
              }
              w.MACSTRING = function(e4, t4) {
                var r4 = function(e5) {
                  if (!se) for (var t5 in se = {}, ie) se[t5] = new String(t5);
                  var r5 = se[e5];
                  if (void 0 !== r5) {
                    if (ae) {
                      var o4 = ae.get(r5);
                      if (void 0 !== o4) return o4;
                    }
                    var n3 = ie[e5];
                    if (void 0 !== n3) {
                      for (var s4 = {}, i2 = 0; i2 < n3.length; i2++) s4[n3.charCodeAt(i2)] = i2 + 128;
                      return ae && ae.set(r5, s4), s4;
                    }
                  }
                }(t4);
                if (void 0 !== r4) {
                  for (var o3 = [], n2 = 0; n2 < e4.length; n2++) {
                    var s3 = e4.charCodeAt(n2);
                    if (128 <= s3 && void 0 === (s3 = r4[s3])) return;
                    o3[n2] = s3;
                  }
                  return o3;
                }
              }, l.MACSTRING = function(e4, t4) {
                e4 = w.MACSTRING(e4, t4);
                return void 0 !== e4 ? e4.length : 0;
              }, w.VARDELTAS = function(e4) {
                for (var t4 = 0, r4 = []; t4 < e4.length; ) var o3 = e4[t4], t4 = (0 === o3 ? function(e5, t5, r5) {
                  for (var o4 = 0, n2 = e5.length; t5 < n2 && o4 < 64 && 0 === e5[t5]; ) ++t5, ++o4;
                  return r5.push(128 | o4 - 1), t5;
                } : -128 <= o3 && o3 <= 127 ? function(e5, t5, r5) {
                  for (var o4 = 0, n2 = e5.length, s3 = t5; s3 < n2 && o4 < 64; ) {
                    var i2 = e5[s3];
                    if (!le(i2)) break;
                    if (0 === i2 && s3 + 1 < n2 && 0 === e5[s3 + 1]) break;
                    ++s3, ++o4;
                  }
                  r5.push(o4 - 1);
                  for (var a2 = t5; a2 < s3; ++a2) r5.push(e5[a2] + 256 & 255);
                  return s3;
                } : function(e5, t5, r5) {
                  for (var o4 = 0, n2 = e5.length, s3 = t5; s3 < n2 && o4 < 64; ) {
                    var i2 = e5[s3];
                    if (0 === i2) break;
                    if (le(i2) && s3 + 1 < n2 && le(e5[s3 + 1])) break;
                    ++s3, ++o4;
                  }
                  r5.push(64 | o4 - 1);
                  for (var a2 = t5; a2 < s3; ++a2) {
                    var l2 = e5[a2];
                    r5.push(l2 + 65536 >> 8 & 255, l2 + 256 & 255);
                  }
                  return s3;
                })(e4, t4, r4);
                return r4;
              }, w.INDEX = function(e4) {
                for (var t4 = 1, r4 = [t4], o3 = [], n2 = 0; n2 < e4.length; n2 += 1) {
                  var s3 = w.OBJECT(e4[n2]);
                  Array.prototype.push.apply(o3, s3), t4 += s3.length, r4.push(t4);
                }
                if (0 === o3.length) return [0, 0];
                for (var i2 = [], a2 = 1 + Math.floor(Math.log(t4) / Math.log(2)) / 8 | 0, l2 = [void 0, w.BYTE, w.USHORT, w.UINT24, w.ULONG][a2], u3 = 0; u3 < r4.length; u3 += 1) {
                  var c2 = l2(r4[u3]);
                  Array.prototype.push.apply(i2, c2);
                }
                return Array.prototype.concat(w.Card16(e4.length), w.OffSize(a2), i2, o3);
              }, l.INDEX = function(e4) {
                return w.INDEX(e4).length;
              }, w.DICT = function(e4) {
                for (var t4 = [], r4 = Object.keys(e4), o3 = r4.length, n2 = 0; n2 < o3; n2 += 1) {
                  var s3 = parseInt(r4[n2], 0), i2 = e4[s3];
                  t4 = (t4 = t4.concat(w.OPERAND(i2.value, i2.type))).concat(w.OPERATOR(s3));
                }
                return t4;
              }, l.DICT = function(e4) {
                return w.DICT(e4).length;
              }, w.OPERATOR = function(e4) {
                return e4 < 1200 ? [e4] : [12, e4 - 1200];
              }, w.OPERAND = function(e4, t4) {
                var r4 = [];
                if (Array.isArray(t4)) for (var o3 = 0; o3 < t4.length; o3 += 1) L.argument(e4.length === t4.length, "Not enough arguments given for type" + t4), r4 = r4.concat(w.OPERAND(e4[o3], t4[o3]));
                else if ("SID" === t4) r4 = r4.concat(w.NUMBER(e4));
                else if ("offset" === t4) r4 = r4.concat(w.NUMBER32(e4));
                else if ("number" === t4) r4 = r4.concat(w.NUMBER(e4));
                else {
                  if ("real" !== t4) throw new Error("Unknown operand type " + t4);
                  r4 = r4.concat(w.REAL(e4));
                }
                return r4;
              }, w.OP = w.BYTE, l.OP = l.BYTE;
              var ue = "function" == typeof WeakMap && /* @__PURE__ */ new WeakMap();
              function n(e4, t4, r4) {
                for (var o3 = 0; o3 < t4.length; o3 += 1) {
                  var n2 = t4[o3];
                  this[n2.name] = n2.value;
                }
                if (this.tableName = e4, this.fields = t4, r4) for (var s3 = Object.keys(r4), i2 = 0; i2 < s3.length; i2 += 1) {
                  var a2 = s3[i2], l2 = r4[a2];
                  void 0 !== this[a2] && (this[a2] = l2);
                }
              }
              function ce(e4, t4, r4) {
                void 0 === r4 && (r4 = t4.length);
                var o3 = new Array(t4.length + 1);
                o3[0] = {
                  name: e4 + "Count",
                  type: "USHORT",
                  value: r4
                };
                for (var n2 = 0; n2 < t4.length; n2++) o3[n2 + 1] = {
                  name: e4 + n2,
                  type: "USHORT",
                  value: t4[n2]
                };
                return o3;
              }
              function de(e4, t4, r4) {
                var o3 = t4.length, n2 = new Array(o3 + 1);
                n2[0] = {
                  name: e4 + "Count",
                  type: "USHORT",
                  value: o3
                };
                for (var s3 = 0; s3 < o3; s3++) n2[s3 + 1] = {
                  name: e4 + s3,
                  type: "TABLE",
                  value: r4(t4[s3], s3)
                };
                return n2;
              }
              function he(e4, t4, r4) {
                var o3 = t4.length, n2 = [];
                n2[0] = {
                  name: e4 + "Count",
                  type: "USHORT",
                  value: o3
                };
                for (var s3 = 0; s3 < o3; s3++) n2 = n2.concat(r4(t4[s3], s3));
                return n2;
              }
              function fe(e4) {
                1 === e4.format ? n.call(this, "coverageTable", [{
                  name: "coverageFormat",
                  type: "USHORT",
                  value: 1
                }].concat(ce("glyph", e4.glyphs))) : L.assert(false, "Can't create coverage table format 2 yet.");
              }
              function pe(e4) {
                n.call(this, "scriptListTable", he("scriptRecord", e4, function(e5, t4) {
                  var r4 = e5.script, o3 = r4.defaultLangSys;
                  return L.assert(!!o3, "Unable to write GSUB: script " + e5.tag + " has no default language system."), [{
                    name: "scriptTag" + t4,
                    type: "TAG",
                    value: e5.tag
                  }, {
                    name: "script" + t4,
                    type: "TABLE",
                    value: new n("scriptTable", [{
                      name: "defaultLangSys",
                      type: "TABLE",
                      value: new n("defaultLangSys", [{
                        name: "lookupOrder",
                        type: "USHORT",
                        value: 0
                      }, {
                        name: "reqFeatureIndex",
                        type: "USHORT",
                        value: o3.reqFeatureIndex
                      }].concat(ce("featureIndex", o3.featureIndexes)))
                    }].concat(he("langSys", r4.langSysRecords, function(e6, t5) {
                      var r5 = e6.langSys;
                      return [{
                        name: "langSysTag" + t5,
                        type: "TAG",
                        value: e6.tag
                      }, {
                        name: "langSys" + t5,
                        type: "TABLE",
                        value: new n("langSys", [{
                          name: "lookupOrder",
                          type: "USHORT",
                          value: 0
                        }, {
                          name: "reqFeatureIndex",
                          type: "USHORT",
                          value: r5.reqFeatureIndex
                        }].concat(ce("featureIndex", r5.featureIndexes)))
                      }];
                    })))
                  }];
                }));
              }
              function me(e4) {
                n.call(this, "featureListTable", he("featureRecord", e4, function(e5, t4) {
                  var r4 = e5.feature;
                  return [{
                    name: "featureTag" + t4,
                    type: "TAG",
                    value: e5.tag
                  }, {
                    name: "feature" + t4,
                    type: "TABLE",
                    value: new n("featureTable", [{
                      name: "featureParams",
                      type: "USHORT",
                      value: r4.featureParams
                    }].concat(ce("lookupListIndex", r4.lookupListIndexes)))
                  }];
                }));
              }
              function ye(e4, r4) {
                n.call(this, "lookupListTable", de("lookup", e4, function(e5) {
                  var t4 = r4[e5.lookupType];
                  return L.assert(!!t4, "Unable to write GSUB lookup type " + e5.lookupType + " tables."), new n("lookupTable", [{
                    name: "lookupType",
                    type: "USHORT",
                    value: e5.lookupType
                  }, {
                    name: "lookupFlag",
                    type: "USHORT",
                    value: e5.lookupFlag
                  }].concat(de("subtable", e5.subtables, t4)));
                }));
              }
              w.CHARSTRING = function(e4) {
                if (ue) {
                  var t4 = ue.get(e4);
                  if (void 0 !== t4) return t4;
                }
                for (var r4 = [], o3 = e4.length, n2 = 0; n2 < o3; n2 += 1) var s3 = e4[n2], r4 = r4.concat(w[s3.type](s3.value));
                return ue && ue.set(e4, r4), r4;
              }, l.CHARSTRING = function(e4) {
                return w.CHARSTRING(e4).length;
              }, w.OBJECT = function(e4) {
                var t4 = w[e4.type];
                return L.argument(void 0 !== t4, "No encoding function for type " + e4.type), t4(e4.value);
              }, l.OBJECT = function(e4) {
                var t4 = l[e4.type];
                return L.argument(void 0 !== t4, "No sizeOf function for type " + e4.type), t4(e4.value);
              }, w.TABLE = function(e4) {
                for (var t4 = [], r4 = e4.fields.length, o3 = [], n2 = [], s3 = 0; s3 < r4; s3 += 1) {
                  var i2 = e4.fields[s3], a2 = w[i2.type], l2 = (L.argument(void 0 !== a2, "No encoding function for field type " + i2.type + " (" + i2.name + ")"), e4[i2.name]), a2 = a2(l2 = void 0 === l2 ? i2.value : l2);
                  "TABLE" === i2.type ? (n2.push(t4.length), t4 = t4.concat([0, 0]), o3.push(a2)) : t4 = t4.concat(a2);
                }
                for (var u3 = 0; u3 < o3.length; u3 += 1) {
                  var c2 = n2[u3], d2 = t4.length;
                  L.argument(d2 < 65536, "Table " + e4.tableName + " too big."), t4[c2] = d2 >> 8, t4[c2 + 1] = 255 & d2, t4 = t4.concat(o3[u3]);
                }
                return t4;
              }, l.TABLE = function(e4) {
                for (var t4 = 0, r4 = e4.fields.length, o3 = 0; o3 < r4; o3 += 1) {
                  var n2 = e4.fields[o3], s3 = l[n2.type], i2 = (L.argument(void 0 !== s3, "No sizeOf function for field type " + n2.type + " (" + n2.name + ")"), e4[n2.name]);
                  t4 += s3(i2 = void 0 === i2 ? n2.value : i2), "TABLE" === n2.type && (t4 += 2);
                }
                return t4;
              }, w.RECORD = w.TABLE, l.RECORD = l.TABLE, w.LITERAL = function(e4) {
                return e4;
              }, l.LITERAL = function(e4) {
                return e4.length;
              }, n.prototype.encode = function() {
                return w.TABLE(this);
              }, n.prototype.sizeOf = function() {
                return l.TABLE(this);
              };
              var S = {
                Table: n,
                Record: n,
                Coverage: (fe.prototype = Object.create(n.prototype)).constructor = fe,
                ScriptList: (pe.prototype = Object.create(n.prototype)).constructor = pe,
                FeatureList: (me.prototype = Object.create(n.prototype)).constructor = me,
                LookupList: (ye.prototype = Object.create(n.prototype)).constructor = ye,
                ushortList: ce,
                tableList: de,
                recordList: he
              };
              function ge(e4, t4) {
                return e4.getUint8(t4);
              }
              function ve(e4, t4) {
                return e4.getUint16(t4, false);
              }
              function be(e4, t4) {
                return e4.getUint32(t4, false);
              }
              function _e(e4, t4) {
                return e4.getInt16(t4, false) + e4.getUint16(t4 + 2, false) / 65535;
              }
              var je = {
                byte: 1,
                uShort: 2,
                short: 2,
                uLong: 4,
                fixed: 4,
                longDateTime: 8,
                tag: 4
              };
              function u2(e4, t4) {
                this.data = e4, this.offset = t4, this.relativeOffset = 0;
              }
              u2.prototype.parseByte = function() {
                var e4 = this.data.getUint8(this.offset + this.relativeOffset);
                return this.relativeOffset += 1, e4;
              }, u2.prototype.parseChar = function() {
                var e4 = this.data.getInt8(this.offset + this.relativeOffset);
                return this.relativeOffset += 1, e4;
              }, u2.prototype.parseCard8 = u2.prototype.parseByte, u2.prototype.parseCard16 = u2.prototype.parseUShort = function() {
                var e4 = this.data.getUint16(this.offset + this.relativeOffset);
                return this.relativeOffset += 2, e4;
              }, u2.prototype.parseSID = u2.prototype.parseUShort, u2.prototype.parseOffset16 = u2.prototype.parseUShort, u2.prototype.parseShort = function() {
                var e4 = this.data.getInt16(this.offset + this.relativeOffset);
                return this.relativeOffset += 2, e4;
              }, u2.prototype.parseF2Dot14 = function() {
                var e4 = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
                return this.relativeOffset += 2, e4;
              }, u2.prototype.parseOffset32 = u2.prototype.parseULong = function() {
                var e4 = be(this.data, this.offset + this.relativeOffset);
                return this.relativeOffset += 4, e4;
              }, u2.prototype.parseFixed = function() {
                var e4 = _e(this.data, this.offset + this.relativeOffset);
                return this.relativeOffset += 4, e4;
              }, u2.prototype.parseString = function(e4) {
                var t4 = this.data, r4 = this.offset + this.relativeOffset, o3 = "";
                this.relativeOffset += e4;
                for (var n2 = 0; n2 < e4; n2++) o3 += String.fromCharCode(t4.getUint8(r4 + n2));
                return o3;
              }, u2.prototype.parseTag = function() {
                return this.parseString(4);
              }, u2.prototype.parseLongDateTime = function() {
                var e4 = be(this.data, this.offset + this.relativeOffset + 4);
                return e4 -= 2082844800, this.relativeOffset += 8, e4;
              }, u2.prototype.parseVersion = function(e4) {
                var t4 = ve(this.data, this.offset + this.relativeOffset), r4 = ve(this.data, this.offset + this.relativeOffset + 2);
                return this.relativeOffset += 4, t4 + r4 / (e4 = void 0 === e4 ? 4096 : e4) / 10;
              }, u2.prototype.skip = function(e4, t4) {
                this.relativeOffset += je[e4] * (t4 = void 0 === t4 ? 1 : t4);
              }, u2.prototype.parseULongList = function(e4) {
                void 0 === e4 && (e4 = this.parseULong());
                for (var t4 = new Array(e4), r4 = this.data, o3 = this.offset + this.relativeOffset, n2 = 0; n2 < e4; n2++) t4[n2] = r4.getUint32(o3), o3 += 4;
                return this.relativeOffset += 4 * e4, t4;
              }, u2.prototype.parseOffset16List = u2.prototype.parseUShortList = function(e4) {
                void 0 === e4 && (e4 = this.parseUShort());
                for (var t4 = new Array(e4), r4 = this.data, o3 = this.offset + this.relativeOffset, n2 = 0; n2 < e4; n2++) t4[n2] = r4.getUint16(o3), o3 += 2;
                return this.relativeOffset += 2 * e4, t4;
              }, u2.prototype.parseShortList = function(e4) {
                for (var t4 = new Array(e4), r4 = this.data, o3 = this.offset + this.relativeOffset, n2 = 0; n2 < e4; n2++) t4[n2] = r4.getInt16(o3), o3 += 2;
                return this.relativeOffset += 2 * e4, t4;
              }, u2.prototype.parseByteList = function(e4) {
                for (var t4 = new Array(e4), r4 = this.data, o3 = this.offset + this.relativeOffset, n2 = 0; n2 < e4; n2++) t4[n2] = r4.getUint8(o3++);
                return this.relativeOffset += e4, t4;
              }, u2.prototype.parseList = function(e4, t4) {
                t4 || (t4 = e4, e4 = this.parseUShort());
                for (var r4 = new Array(e4), o3 = 0; o3 < e4; o3++) r4[o3] = t4.call(this);
                return r4;
              }, u2.prototype.parseList32 = function(e4, t4) {
                t4 || (t4 = e4, e4 = this.parseULong());
                for (var r4 = new Array(e4), o3 = 0; o3 < e4; o3++) r4[o3] = t4.call(this);
                return r4;
              }, u2.prototype.parseRecordList = function(e4, t4) {
                t4 || (t4 = e4, e4 = this.parseUShort());
                for (var r4 = new Array(e4), o3 = Object.keys(t4), n2 = 0; n2 < e4; n2++) {
                  for (var s3 = {}, i2 = 0; i2 < o3.length; i2++) {
                    var a2 = o3[i2], l2 = t4[a2];
                    s3[a2] = l2.call(this);
                  }
                  r4[n2] = s3;
                }
                return r4;
              }, u2.prototype.parseRecordList32 = function(e4, t4) {
                t4 || (t4 = e4, e4 = this.parseULong());
                for (var r4 = new Array(e4), o3 = Object.keys(t4), n2 = 0; n2 < e4; n2++) {
                  for (var s3 = {}, i2 = 0; i2 < o3.length; i2++) {
                    var a2 = o3[i2], l2 = t4[a2];
                    s3[a2] = l2.call(this);
                  }
                  r4[n2] = s3;
                }
                return r4;
              }, u2.prototype.parseStruct = function(e4) {
                if ("function" == typeof e4) return e4.call(this);
                for (var t4 = Object.keys(e4), r4 = {}, o3 = 0; o3 < t4.length; o3++) {
                  var n2 = t4[o3], s3 = e4[n2];
                  r4[n2] = s3.call(this);
                }
                return r4;
              }, u2.prototype.parseValueRecord = function(e4) {
                var t4;
                if (0 !== (e4 = void 0 === e4 ? this.parseUShort() : e4)) return t4 = {}, 1 & e4 && (t4.xPlacement = this.parseShort()), 2 & e4 && (t4.yPlacement = this.parseShort()), 4 & e4 && (t4.xAdvance = this.parseShort()), 8 & e4 && (t4.yAdvance = this.parseShort()), 16 & e4 && (t4.xPlaDevice = void 0, this.parseShort()), 32 & e4 && (t4.yPlaDevice = void 0, this.parseShort()), 64 & e4 && (t4.xAdvDevice = void 0, this.parseShort()), 128 & e4 && (t4.yAdvDevice = void 0, this.parseShort()), t4;
              }, u2.prototype.parseValueRecordList = function() {
                for (var e4 = this.parseUShort(), t4 = this.parseUShort(), r4 = new Array(t4), o3 = 0; o3 < t4; o3++) r4[o3] = this.parseValueRecord(e4);
                return r4;
              }, u2.prototype.parsePointer = function(e4) {
                var t4 = this.parseOffset16();
                if (0 < t4) return new u2(this.data, this.offset + t4).parseStruct(e4);
              }, u2.prototype.parsePointer32 = function(e4) {
                var t4 = this.parseOffset32();
                if (0 < t4) return new u2(this.data, this.offset + t4).parseStruct(e4);
              }, u2.prototype.parseListOfLists = function(e4) {
                for (var t4 = this.parseOffset16List(), r4 = t4.length, o3 = this.relativeOffset, n2 = new Array(r4), s3 = 0; s3 < r4; s3++) {
                  var i2 = t4[s3];
                  if (0 === i2) n2[s3] = void 0;
                  else if (this.relativeOffset = i2, e4) {
                    for (var a2 = this.parseOffset16List(), l2 = new Array(a2.length), u3 = 0; u3 < a2.length; u3++) this.relativeOffset = i2 + a2[u3], l2[u3] = e4.call(this);
                    n2[s3] = l2;
                  } else n2[s3] = this.parseUShortList();
                }
                return this.relativeOffset = o3, n2;
              }, u2.prototype.parseCoverage = function() {
                var e4 = this.offset + this.relativeOffset, t4 = this.parseUShort(), r4 = this.parseUShort();
                if (1 === t4) return {
                  format: 1,
                  glyphs: this.parseUShortList(r4)
                };
                if (2 !== t4) throw new Error("0x" + e4.toString(16) + ": Coverage format must be 1 or 2.");
                for (var o3 = new Array(r4), n2 = 0; n2 < r4; n2++) o3[n2] = {
                  start: this.parseUShort(),
                  end: this.parseUShort(),
                  index: this.parseUShort()
                };
                return {
                  format: 2,
                  ranges: o3
                };
              }, u2.prototype.parseClassDef = function() {
                var e4 = this.offset + this.relativeOffset, t4 = this.parseUShort();
                if (1 === t4) return {
                  format: 1,
                  startGlyph: this.parseUShort(),
                  classes: this.parseUShortList()
                };
                if (2 === t4) return {
                  format: 2,
                  ranges: this.parseRecordList({
                    start: u2.uShort,
                    end: u2.uShort,
                    classId: u2.uShort
                  })
                };
                throw new Error("0x" + e4.toString(16) + ": ClassDef format must be 1 or 2.");
              }, u2.list = function(e4, t4) {
                return function() {
                  return this.parseList(e4, t4);
                };
              }, u2.list32 = function(e4, t4) {
                return function() {
                  return this.parseList32(e4, t4);
                };
              }, u2.recordList = function(e4, t4) {
                return function() {
                  return this.parseRecordList(e4, t4);
                };
              }, u2.recordList32 = function(e4, t4) {
                return function() {
                  return this.parseRecordList32(e4, t4);
                };
              }, u2.pointer = function(e4) {
                return function() {
                  return this.parsePointer(e4);
                };
              }, u2.pointer32 = function(e4) {
                return function() {
                  return this.parsePointer32(e4);
                };
              }, u2.tag = u2.prototype.parseTag, u2.byte = u2.prototype.parseByte, u2.uShort = u2.offset16 = u2.prototype.parseUShort, u2.uShortList = u2.prototype.parseUShortList, u2.uLong = u2.offset32 = u2.prototype.parseULong, u2.uLongList = u2.prototype.parseULongList, u2.struct = u2.prototype.parseStruct, u2.coverage = u2.prototype.parseCoverage, u2.classDef = u2.prototype.parseClassDef;
              var xe = {
                reserved: u2.uShort,
                reqFeatureIndex: u2.uShort,
                featureIndexes: u2.uShortList
              }, R = (u2.prototype.parseScriptList = function() {
                return this.parsePointer(u2.recordList({
                  tag: u2.tag,
                  script: u2.pointer({
                    defaultLangSys: u2.pointer(xe),
                    langSysRecords: u2.recordList({
                      tag: u2.tag,
                      langSys: u2.pointer(xe)
                    })
                  })
                })) || [];
              }, u2.prototype.parseFeatureList = function() {
                return this.parsePointer(u2.recordList({
                  tag: u2.tag,
                  feature: u2.pointer({
                    featureParams: u2.offset16,
                    lookupListIndexes: u2.uShortList
                  })
                })) || [];
              }, u2.prototype.parseLookupList = function(o3) {
                return this.parsePointer(u2.list(u2.pointer(function() {
                  var e4 = this.parseUShort(), t4 = (L.argument(1 <= e4 && e4 <= 9, "GPOS/GSUB lookup type " + e4 + " unknown."), this.parseUShort()), r4 = 16 & t4;
                  return {
                    lookupType: e4,
                    lookupFlag: t4,
                    subtables: this.parseList(u2.pointer(o3[e4])),
                    markFilteringSet: r4 ? this.parseUShort() : void 0
                  };
                }))) || [];
              }, u2.prototype.parseFeatureVariationsList = function() {
                return this.parsePointer32(function() {
                  var e4 = this.parseUShort(), t4 = this.parseUShort();
                  return L.argument(1 === e4 && t4 < 1, "GPOS/GSUB feature variations table unknown."), this.parseRecordList32({
                    conditionSetOffset: u2.offset32,
                    featureTableSubstitutionOffset: u2.offset32
                  });
                }) || [];
              }, {
                getByte: ge,
                getCard8: ge,
                getUShort: ve,
                getCard16: ve,
                getShort: function(e4, t4) {
                  return e4.getInt16(t4, false);
                },
                getULong: be,
                getFixed: _e,
                getTag: function(e4, t4) {
                  for (var r4 = "", o3 = t4; o3 < t4 + 4; o3 += 1) r4 += String.fromCharCode(e4.getInt8(o3));
                  return r4;
                },
                getOffset: function(e4, t4, r4) {
                  for (var o3 = 0, n2 = 0; n2 < r4; n2 += 1) o3 = (o3 <<= 8) + e4.getUint8(t4 + n2);
                  return o3;
                },
                getBytes: function(e4, t4, r4) {
                  for (var o3 = [], n2 = t4; n2 < r4; n2 += 1) o3.push(e4.getUint8(n2));
                  return o3;
                },
                bytesToString: function(e4) {
                  for (var t4 = "", r4 = 0; r4 < e4.length; r4 += 1) t4 += String.fromCharCode(e4[r4]);
                  return t4;
                },
                Parser: u2
              });
              var we = {
                parse: function(e4, t4) {
                  for (var r4 = {}, o3 = (r4.version = R.getUShort(e4, t4), L.argument(0 === r4.version, "cmap table version should be 0."), r4.numTables = R.getUShort(e4, t4 + 2), -1), n2 = r4.numTables - 1; 0 <= n2; --n2) {
                    var s3 = R.getUShort(e4, t4 + 4 + 8 * n2), i2 = R.getUShort(e4, t4 + 4 + 8 * n2 + 2);
                    if (3 === s3 && (0 === i2 || 1 === i2 || 10 === i2) || 0 === s3 && (0 === i2 || 1 === i2 || 2 === i2 || 3 === i2 || 4 === i2)) {
                      o3 = R.getULong(e4, t4 + 4 + 8 * n2 + 4);
                      break;
                    }
                  }
                  if (-1 === o3) throw new Error("No valid cmap sub-tables found.");
                  var a2 = new R.Parser(e4, t4 + o3);
                  if (r4.format = a2.parseUShort(), 12 === r4.format) {
                    var l2, u3 = r4, c2 = a2;
                    c2.parseUShort(), u3.length = c2.parseULong(), u3.language = c2.parseULong(), u3.groupCount = l2 = c2.parseULong(), u3.glyphIndexMap = {};
                    for (var d2 = 0; d2 < l2; d2 += 1) for (var h2 = c2.parseULong(), f2 = c2.parseULong(), p2 = c2.parseULong(), m2 = h2; m2 <= f2; m2 += 1) u3.glyphIndexMap[m2] = p2, p2++;
                  } else {
                    if (4 !== r4.format) throw new Error("Only format 4 and 12 cmap tables are supported (found format " + r4.format + ").");
                    var y2 = r4, g2 = e4, v2 = t4, b2 = o3;
                    y2.length = a2.parseUShort(), y2.language = a2.parseUShort(), y2.segCount = _2 = a2.parseUShort() >> 1, a2.skip("uShort", 3), y2.glyphIndexMap = {};
                    for (var _2, j2 = new R.Parser(g2, v2 + b2 + 14), x2 = new R.Parser(g2, v2 + b2 + 16 + 2 * _2), w2 = new R.Parser(g2, v2 + b2 + 16 + 4 * _2), S2 = new R.Parser(g2, v2 + b2 + 16 + 6 * _2), T2 = v2 + b2 + 16 + 8 * _2, E2 = 0; E2 < _2 - 1; E2 += 1) for (var M2 = void 0, k2 = j2.parseUShort(), O2 = x2.parseUShort(), C2 = w2.parseShort(), A2 = S2.parseUShort(), P2 = O2; P2 <= k2; P2 += 1) 0 !== A2 ? (T2 = (T2 = S2.offset + S2.relativeOffset - 2) + A2 + 2 * (P2 - O2), 0 !== (M2 = R.getUShort(g2, T2)) && (M2 = M2 + C2 & 65535)) : M2 = P2 + C2 & 65535, y2.glyphIndexMap[P2] = M2;
                  }
                  return r4;
                },
                make: function(e4) {
                  for (var t4 = true, r4 = e4.length - 1; 0 < r4; --r4) if (65535 < e4.get(r4).unicode) {
                    console.log("Adding CMAP format 12 (needed!)"), t4 = false;
                    break;
                  }
                  var o3, n2, s3 = [{
                    name: "version",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "numTables",
                    type: "USHORT",
                    value: t4 ? 1 : 2
                  }, {
                    name: "platformID",
                    type: "USHORT",
                    value: 3
                  }, {
                    name: "encodingID",
                    type: "USHORT",
                    value: 1
                  }, {
                    name: "offset",
                    type: "ULONG",
                    value: t4 ? 12 : 20
                  }], i2 = (s3 = (s3 = t4 ? s3 : s3.concat([{
                    name: "cmap12PlatformID",
                    type: "USHORT",
                    value: 3
                  }, {
                    name: "cmap12EncodingID",
                    type: "USHORT",
                    value: 10
                  }, {
                    name: "cmap12Offset",
                    type: "ULONG",
                    value: 0
                  }])).concat([{
                    name: "format",
                    type: "USHORT",
                    value: 4
                  }, {
                    name: "cmap4Length",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "language",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "segCountX2",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "searchRange",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "entrySelector",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "rangeShift",
                    type: "USHORT",
                    value: 0
                  }]), new S.Table("cmap", s3));
                  for (i2.segments = [], r4 = 0; r4 < e4.length; r4 += 1) {
                    for (var a2 = e4.get(r4), l2 = 0; l2 < a2.unicodes.length; l2 += 1) o3 = a2.unicodes[l2], n2 = r4, i2.segments.push({
                      end: o3,
                      start: o3,
                      delta: -(o3 - n2),
                      offset: 0,
                      glyphIndex: n2
                    });
                    i2.segments = i2.segments.sort(function(e5, t5) {
                      return e5.start - t5.start;
                    });
                  }
                  i2.segments.push({
                    end: 65535,
                    start: 65535,
                    delta: 1,
                    offset: 0
                  });
                  var u3 = i2.segments.length, c2 = 0, d2 = [], h2 = [], f2 = [], p2 = [], m2 = [], y2 = [];
                  for (r4 = 0; r4 < u3; r4 += 1) {
                    var g2 = i2.segments[r4];
                    g2.end <= 65535 && g2.start <= 65535 ? (d2 = d2.concat({
                      name: "end_" + r4,
                      type: "USHORT",
                      value: g2.end
                    }), h2 = h2.concat({
                      name: "start_" + r4,
                      type: "USHORT",
                      value: g2.start
                    }), f2 = f2.concat({
                      name: "idDelta_" + r4,
                      type: "SHORT",
                      value: g2.delta
                    }), p2 = p2.concat({
                      name: "idRangeOffset_" + r4,
                      type: "USHORT",
                      value: g2.offset
                    }), void 0 !== g2.glyphId && (m2 = m2.concat({
                      name: "glyph_" + r4,
                      type: "USHORT",
                      value: g2.glyphId
                    }))) : c2 += 1, t4 || void 0 === g2.glyphIndex || (y2 = (y2 = (y2 = y2.concat({
                      name: "cmap12Start_" + r4,
                      type: "ULONG",
                      value: g2.start
                    })).concat({
                      name: "cmap12End_" + r4,
                      type: "ULONG",
                      value: g2.end
                    })).concat({
                      name: "cmap12Glyph_" + r4,
                      type: "ULONG",
                      value: g2.glyphIndex
                    }));
                  }
                  return i2.segCountX2 = 2 * (u3 - c2), i2.searchRange = 2 * Math.pow(2, Math.floor(Math.log(u3 - c2) / Math.log(2))), i2.entrySelector = Math.log(i2.searchRange / 2) / Math.log(2), i2.rangeShift = i2.segCountX2 - i2.searchRange, i2.fields = i2.fields.concat(d2), i2.fields.push({
                    name: "reservedPad",
                    type: "USHORT",
                    value: 0
                  }), i2.fields = i2.fields.concat(h2), i2.fields = i2.fields.concat(f2), i2.fields = i2.fields.concat(p2), i2.fields = i2.fields.concat(m2), i2.cmap4Length = 14 + 2 * d2.length + 2 + 2 * h2.length + 2 * f2.length + 2 * p2.length + 2 * m2.length, t4 || (s3 = 16 + 4 * y2.length, i2.cmap12Offset = 20 + i2.cmap4Length, i2.fields = i2.fields.concat([{
                    name: "cmap12Format",
                    type: "USHORT",
                    value: 12
                  }, {
                    name: "cmap12Reserved",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "cmap12Length",
                    type: "ULONG",
                    value: s3
                  }, {
                    name: "cmap12Language",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "cmap12nGroups",
                    type: "ULONG",
                    value: y2.length / 3
                  }]), i2.fields = i2.fields.concat(y2)), i2;
                }
              }, Se = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "266 ff", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"], Te = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "", "endash", "dagger", "daggerdbl", "periodcentered", "", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "", "questiondown", "", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "", "ring", "cedilla", "", "hungarumlaut", "ogonek", "caron", "emdash", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AE", "", "ordfeminine", "", "", "", "", "Lslash", "Oslash", "OE", "ordmasculine", "", "", "", "", "", "ae", "", "", "", "dotlessi", "", "", "lslash", "oslash", "oe", "germandbls"], Ee = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "", "", "isuperior", "", "", "lsuperior", "msuperior", "nsuperior", "osuperior", "", "", "rsuperior", "ssuperior", "tsuperior", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdownsmall", "centoldstyle", "Lslashsmall", "", "", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "", "Dotaccentsmall", "", "", "Macronsmall", "", "", "figuredash", "hypheninferior", "", "", "Ogoneksmall", "Ringsmall", "Cedillasmall", "", "", "", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"], c = [".notdef", ".null", "nonmarkingreturn", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "nonbreakingspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idotaccent", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "dcroat"];
              function Me(e4) {
                this.font = e4;
              }
              function ke(e4) {
                this.cmap = e4;
              }
              function Oe(e4, t4) {
                this.encoding = e4, this.charset = t4;
              }
              function Ce(e4) {
                switch (e4.version) {
                  case 1:
                    this.names = c.slice();
                    break;
                  case 2:
                    this.names = new Array(e4.numberOfGlyphs);
                    for (var t4 = 0; t4 < e4.numberOfGlyphs; t4++) e4.glyphNameIndex[t4] < c.length ? this.names[t4] = c[e4.glyphNameIndex[t4]] : this.names[t4] = e4.names[e4.glyphNameIndex[t4] - c.length];
                    break;
                  case 2.5:
                    this.names = new Array(e4.numberOfGlyphs);
                    for (var r4 = 0; r4 < e4.numberOfGlyphs; r4++) this.names[r4] = c[r4 + e4.glyphNameIndex[r4]];
                    break;
                  default:
                    this.names = [];
                }
              }
              Me.prototype.charToGlyphIndex = function(e4) {
                var t4 = e4.codePointAt(0), r4 = this.font.glyphs;
                if (r4) {
                  for (var o3 = 0; o3 < r4.length; o3 += 1) for (var n2 = r4.get(o3), s3 = 0; s3 < n2.unicodes.length; s3 += 1) if (n2.unicodes[s3] === t4) return o3;
                }
                return null;
              }, ke.prototype.charToGlyphIndex = function(e4) {
                return this.cmap.glyphIndexMap[e4.codePointAt(0)] || 0;
              }, Oe.prototype.charToGlyphIndex = function(e4) {
                e4 = e4.codePointAt(0), e4 = this.encoding[e4];
                return this.charset.indexOf(e4);
              }, Ce.prototype.nameToGlyphIndex = function(e4) {
                return this.names.indexOf(e4);
              }, Ce.prototype.glyphIndexToName = function(e4) {
                return this.names[e4];
              };
              var d = {
                line: function(e4, t4, r4, o3, n2) {
                  e4.beginPath(), e4.moveTo(t4, r4), e4.lineTo(o3, n2), e4.stroke();
                }
              };
              function f(e4) {
                this.bindConstructorValues(e4);
              }
              function Ae(t4, e4, r4) {
                Object.defineProperty(t4, e4, {
                  get: function() {
                    return t4.path, t4[r4];
                  },
                  set: function(e5) {
                    t4[r4] = e5;
                  },
                  enumerable: true,
                  configurable: true
                });
              }
              function Pe(e4, t4) {
                if (this.font = e4, this.glyphs = {}, Array.isArray(t4)) for (var r4 = 0; r4 < t4.length; r4++) this.glyphs[r4] = t4[r4];
                this.length = t4 && t4.length || 0;
              }
              f.prototype.bindConstructorValues = function(e4) {
                var t4;
                this.index = e4.index || 0, this.name = e4.name || null, this.unicode = e4.unicode || void 0, this.unicodes = e4.unicodes || void 0 !== e4.unicode ? [e4.unicode] : [], e4.xMin && (this.xMin = e4.xMin), e4.yMin && (this.yMin = e4.yMin), e4.xMax && (this.xMax = e4.xMax), e4.yMax && (this.yMax = e4.yMax), e4.advanceWidth && (this.advanceWidth = e4.advanceWidth), Object.defineProperty(this, "path", (e4 = e4.path, t4 = e4 || new h(), {
                  configurable: true,
                  get: function() {
                    return t4 = "function" == typeof t4 ? t4() : t4;
                  },
                  set: function(e5) {
                    t4 = e5;
                  }
                }));
              }, f.prototype.addUnicode = function(e4) {
                0 === this.unicodes.length && (this.unicode = e4), this.unicodes.push(e4);
              }, f.prototype.getBoundingBox = function() {
                return this.path.getBoundingBox();
              }, f.prototype.getPath = function(e4, t4, r4, o3, n2) {
                e4 = void 0 !== e4 ? e4 : 0, t4 = void 0 !== t4 ? t4 : 0, r4 = void 0 !== r4 ? r4 : 72;
                for (var s3, i2, a2 = (o3 = o3 || {}).xScale, l2 = o3.yScale, u3 = ((s3 = o3.hinting && n2 && n2.hinting ? this.path && n2.hinting.exec(this, r4) : s3) ? (i2 = n2.hinting.getCommands(s3), e4 = Math.round(e4), t4 = Math.round(t4), a2 = l2 = 1) : (i2 = this.path.commands, o3 = 1 / this.path.unitsPerEm * r4, void 0 === a2 && (a2 = o3), void 0 === l2 && (l2 = o3)), new h()), c2 = 0; c2 < i2.length; c2 += 1) {
                  var d2 = i2[c2];
                  "M" === d2.type ? u3.moveTo(e4 + d2.x * a2, t4 + -d2.y * l2) : "L" === d2.type ? u3.lineTo(e4 + d2.x * a2, t4 + -d2.y * l2) : "Q" === d2.type ? u3.quadraticCurveTo(e4 + d2.x1 * a2, t4 + -d2.y1 * l2, e4 + d2.x * a2, t4 + -d2.y * l2) : "C" === d2.type ? u3.curveTo(e4 + d2.x1 * a2, t4 + -d2.y1 * l2, e4 + d2.x2 * a2, t4 + -d2.y2 * l2, e4 + d2.x * a2, t4 + -d2.y * l2) : "Z" === d2.type && u3.closePath();
                }
                return u3;
              }, f.prototype.getContours = function() {
                if (void 0 === this.points) return [];
                for (var e4 = [], t4 = [], r4 = 0; r4 < this.points.length; r4 += 1) {
                  var o3 = this.points[r4];
                  t4.push(o3), o3.lastPointOfContour && (e4.push(t4), t4 = []);
                }
                return L.argument(0 === t4.length, "There are still points left in the current contour."), e4;
              }, f.prototype.getMetrics = function() {
                for (var e4 = this.path.commands, t4 = [], r4 = [], o3 = 0; o3 < e4.length; o3 += 1) {
                  var n2 = e4[o3];
                  "Z" !== n2.type && (t4.push(n2.x), r4.push(n2.y)), "Q" !== n2.type && "C" !== n2.type || (t4.push(n2.x1), r4.push(n2.y1)), "C" === n2.type && (t4.push(n2.x2), r4.push(n2.y2));
                }
                var s3 = {
                  xMin: Math.min.apply(null, t4),
                  yMin: Math.min.apply(null, r4),
                  xMax: Math.max.apply(null, t4),
                  yMax: Math.max.apply(null, r4),
                  leftSideBearing: this.leftSideBearing
                };
                return isFinite(s3.xMin) || (s3.xMin = 0), isFinite(s3.xMax) || (s3.xMax = this.advanceWidth), isFinite(s3.yMin) || (s3.yMin = 0), isFinite(s3.yMax) || (s3.yMax = 0), s3.rightSideBearing = this.advanceWidth - s3.leftSideBearing - (s3.xMax - s3.xMin), s3;
              }, f.prototype.draw = function(e4, t4, r4, o3, n2) {
                this.getPath(t4, r4, o3, n2).draw(e4);
              }, f.prototype.drawPoints = function(i2, e4, t4, r4) {
                function o3(e5, t5, r5, o4) {
                  var n3 = 2 * Math.PI;
                  i2.beginPath();
                  for (var s4 = 0; s4 < e5.length; s4 += 1) i2.moveTo(t5 + e5[s4].x * o4, r5 + e5[s4].y * o4), i2.arc(t5 + e5[s4].x * o4, r5 + e5[s4].y * o4, 2, 0, n3, false);
                  i2.closePath(), i2.fill();
                }
                e4 = void 0 !== e4 ? e4 : 0, t4 = void 0 !== t4 ? t4 : 0;
                for (var r4 = 1 / this.path.unitsPerEm * (r4 = void 0 !== r4 ? r4 : 24), n2 = [], s3 = [], a2 = this.path, l2 = 0; l2 < a2.commands.length; l2 += 1) {
                  var u3 = a2.commands[l2];
                  void 0 !== u3.x && n2.push({
                    x: u3.x,
                    y: -u3.y
                  }), void 0 !== u3.x1 && s3.push({
                    x: u3.x1,
                    y: -u3.y1
                  }), void 0 !== u3.x2 && s3.push({
                    x: u3.x2,
                    y: -u3.y2
                  });
                }
                i2.fillStyle = "blue", o3(n2, e4, t4, r4), i2.fillStyle = "red", o3(s3, e4, t4, r4);
              }, f.prototype.drawMetrics = function(e4, t4, r4, o3) {
                t4 = void 0 !== t4 ? t4 : 0, r4 = void 0 !== r4 ? r4 : 0, o3 = 1 / this.path.unitsPerEm * (o3 = void 0 !== o3 ? o3 : 24), e4.lineWidth = 1, e4.strokeStyle = "black", d.line(e4, t4, -1e4, t4, 1e4), d.line(e4, -1e4, r4, 1e4, r4);
                var n2 = this.xMin || 0, s3 = this.yMin || 0, i2 = this.xMax || 0, a2 = this.yMax || 0, l2 = this.advanceWidth || 0;
                e4.strokeStyle = "blue", d.line(e4, t4 + n2 * o3, -1e4, t4 + n2 * o3, 1e4), d.line(e4, t4 + i2 * o3, -1e4, t4 + i2 * o3, 1e4), d.line(e4, -1e4, r4 + -s3 * o3, 1e4, r4 + -s3 * o3), d.line(e4, -1e4, r4 + -a2 * o3, 1e4, r4 + -a2 * o3), e4.strokeStyle = "green", d.line(e4, t4 + l2 * o3, -1e4, t4 + l2 * o3, 1e4);
              }, Pe.prototype.get = function(e4) {
                return "function" == typeof this.glyphs[e4] && (this.glyphs[e4] = this.glyphs[e4]()), this.glyphs[e4];
              }, Pe.prototype.push = function(e4, t4) {
                this.glyphs[e4] = t4, this.length++;
              };
              var p = {
                GlyphSet: Pe,
                glyphLoader: function(e4, t4) {
                  return new f({
                    index: t4,
                    font: e4
                  });
                },
                ttfGlyphLoader: function(r4, e4, o3, n2, s3, i2) {
                  return function() {
                    var t4 = new f({
                      index: e4,
                      font: r4
                    });
                    return t4.path = function() {
                      o3(t4, n2, s3);
                      var e5 = i2(r4.glyphs, t4);
                      return e5.unitsPerEm = r4.unitsPerEm, e5;
                    }, Ae(t4, "xMin", "_xMin"), Ae(t4, "xMax", "_xMax"), Ae(t4, "yMin", "_yMin"), Ae(t4, "yMax", "_yMax"), t4;
                  };
                },
                cffGlyphLoader: function(r4, e4, o3, n2) {
                  return function() {
                    var t4 = new f({
                      index: e4,
                      font: r4
                    });
                    return t4.path = function() {
                      var e5 = o3(r4, t4, n2);
                      return e5.unitsPerEm = r4.unitsPerEm, e5;
                    }, t4;
                  };
                }
              };
              function Le(e4) {
                e4 = e4.length < 1240 ? 107 : e4.length < 33900 ? 1131 : 32768;
                return e4;
              }
              function y(e4, t4, r4) {
                var o3, n2 = [], s3 = [], i2 = R.getCard16(e4, t4);
                if (0 !== i2) {
                  for (var a2 = R.getByte(e4, t4 + 2), l2 = t4 + (i2 + 1) * a2 + 2, u3 = t4 + 3, c2 = 0; c2 < i2 + 1; c2 += 1) n2.push(R.getOffset(e4, u3, a2)), u3 += a2;
                  o3 = l2 + n2[i2];
                } else o3 = t4 + 2;
                for (var d2 = 0; d2 < n2.length - 1; d2 += 1) {
                  var h2 = R.getBytes(e4, l2 + n2[d2], l2 + n2[d2 + 1]);
                  r4 && (h2 = r4(h2)), s3.push(h2);
                }
                return {
                  objects: s3,
                  startOffset: t4,
                  endOffset: o3
                };
              }
              function Re(e4, t4) {
                if (28 === t4) return e4.parseByte() << 8 | e4.parseByte();
                if (29 === t4) return e4.parseByte() << 24 | e4.parseByte() << 16 | e4.parseByte() << 8 | e4.parseByte();
                if (30 === t4) {
                  for (var r4 = e4, o3 = "", n2 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"]; ; ) {
                    var s3 = r4.parseByte(), i2 = s3 >> 4, s3 = 15 & s3;
                    if (15 == i2) break;
                    if (o3 += n2[i2], 15 == s3) break;
                    o3 += n2[s3];
                  }
                  return parseFloat(o3);
                }
                if (32 <= t4 && t4 <= 246) return t4 - 139;
                if (247 <= t4 && t4 <= 250) return 256 * (t4 - 247) + e4.parseByte() + 108;
                if (251 <= t4 && t4 <= 254) return 256 * -(t4 - 251) - e4.parseByte() - 108;
                throw new Error("Invalid b0 " + t4);
              }
              function Ie(e4, t4, r4) {
                var o3 = new R.Parser(e4, t4 = void 0 !== t4 ? t4 : 0), n2 = [], s3 = [];
                for (r4 = void 0 !== r4 ? r4 : e4.length; o3.relativeOffset < r4; ) {
                  var i2 = o3.parseByte();
                  i2 <= 21 ? (12 === i2 && (i2 = 1200 + o3.parseByte()), n2.push([i2, s3]), s3 = []) : s3.push(Re(o3, i2));
                }
                for (var a2 = n2, l2 = {}, u3 = 0; u3 < a2.length; u3 += 1) {
                  var c2 = a2[u3][0], d2 = a2[u3][1], h2 = void 0, h2 = 1 === d2.length ? d2[0] : d2;
                  if (l2.hasOwnProperty(c2) && !isNaN(l2[c2])) throw new Error("Object " + l2 + " already has key " + c2);
                  l2[c2] = h2;
                }
                return l2;
              }
              function De(e4, t4) {
                return t4 = t4 <= 390 ? Se[t4] : e4[t4 - 391];
              }
              function Fe(e4, t4, r4) {
                for (var o3, n2 = {}, s3 = 0; s3 < t4.length; s3 += 1) {
                  var i2 = t4[s3];
                  if (Array.isArray(i2.type)) {
                    var a2 = [];
                    a2.length = i2.type.length;
                    for (var l2 = 0; l2 < i2.type.length; l2++) void 0 === (o3 = void 0 !== e4[i2.op] ? e4[i2.op][l2] : void 0) && (o3 = void 0 !== i2.value && void 0 !== i2.value[l2] ? i2.value[l2] : null), "SID" === i2.type[l2] && (o3 = De(r4, o3)), a2[l2] = o3;
                    n2[i2.name] = a2;
                  } else void 0 === (o3 = e4[i2.op]) && (o3 = void 0 !== i2.value ? i2.value : null), "SID" === i2.type && (o3 = De(r4, o3)), n2[i2.name] = o3;
                }
                return n2;
              }
              var Ue = [{
                name: "version",
                op: 0,
                type: "SID"
              }, {
                name: "notice",
                op: 1,
                type: "SID"
              }, {
                name: "copyright",
                op: 1200,
                type: "SID"
              }, {
                name: "fullName",
                op: 2,
                type: "SID"
              }, {
                name: "familyName",
                op: 3,
                type: "SID"
              }, {
                name: "weight",
                op: 4,
                type: "SID"
              }, {
                name: "isFixedPitch",
                op: 1201,
                type: "number",
                value: 0
              }, {
                name: "italicAngle",
                op: 1202,
                type: "number",
                value: 0
              }, {
                name: "underlinePosition",
                op: 1203,
                type: "number",
                value: -100
              }, {
                name: "underlineThickness",
                op: 1204,
                type: "number",
                value: 50
              }, {
                name: "paintType",
                op: 1205,
                type: "number",
                value: 0
              }, {
                name: "charstringType",
                op: 1206,
                type: "number",
                value: 2
              }, {
                name: "fontMatrix",
                op: 1207,
                type: ["real", "real", "real", "real", "real", "real"],
                value: [1e-3, 0, 0, 1e-3, 0, 0]
              }, {
                name: "uniqueId",
                op: 13,
                type: "number"
              }, {
                name: "fontBBox",
                op: 5,
                type: ["number", "number", "number", "number"],
                value: [0, 0, 0, 0]
              }, {
                name: "strokeWidth",
                op: 1208,
                type: "number",
                value: 0
              }, {
                name: "xuid",
                op: 14,
                type: [],
                value: null
              }, {
                name: "charset",
                op: 15,
                type: "offset",
                value: 0
              }, {
                name: "encoding",
                op: 16,
                type: "offset",
                value: 0
              }, {
                name: "charStrings",
                op: 17,
                type: "offset",
                value: 0
              }, {
                name: "private",
                op: 18,
                type: ["number", "offset"],
                value: [0, 0]
              }, {
                name: "ros",
                op: 1230,
                type: ["SID", "SID", "number"]
              }, {
                name: "cidFontVersion",
                op: 1231,
                type: "number",
                value: 0
              }, {
                name: "cidFontRevision",
                op: 1232,
                type: "number",
                value: 0
              }, {
                name: "cidFontType",
                op: 1233,
                type: "number",
                value: 0
              }, {
                name: "cidCount",
                op: 1234,
                type: "number",
                value: 8720
              }, {
                name: "uidBase",
                op: 1235,
                type: "number"
              }, {
                name: "fdArray",
                op: 1236,
                type: "offset"
              }, {
                name: "fdSelect",
                op: 1237,
                type: "offset"
              }, {
                name: "fontName",
                op: 1238,
                type: "SID"
              }], Ne = [{
                name: "subrs",
                op: 19,
                type: "offset",
                value: 0
              }, {
                name: "defaultWidthX",
                op: 20,
                type: "number",
                value: 0
              }, {
                name: "nominalWidthX",
                op: 21,
                type: "number",
                value: 0
              }];
              function Be(e4, t4, r4, o3) {
                return Fe(Ie(e4, t4, r4), Ne, o3);
              }
              function Ge(e4, t4, r4, o3) {
                for (var n2 = [], s3 = 0; s3 < r4.length; s3 += 1) {
                  var i2 = new DataView(new Uint8Array(r4[s3]).buffer), i2 = (a2 = o3, Fe(Ie(i2, 0, i2.byteLength), Ue, a2)), a2 = (i2._subrs = [], i2._subrsBias = 0, i2.private[0]), l2 = i2.private[1];
                  0 !== a2 && 0 !== l2 && (a2 = Be(e4, l2 + t4, a2, o3), i2._defaultWidthX = a2.defaultWidthX, i2._nominalWidthX = a2.nominalWidthX, 0 !== a2.subrs && (l2 = y(e4, l2 + a2.subrs + t4), i2._subrs = l2.objects, i2._subrsBias = Le(i2._subrs)), i2._privateDict = a2), n2.push(i2);
                }
                return n2;
              }
              function Ve(y2, g2, e4) {
                var v2, b2, _2, j2, t4, x2, w2, r4, S2, T2 = new h(), E2 = [], M2 = 0, k2 = false, O2 = false, C2 = 0, A2 = 0, P2 = (S2 = (y2.isCIDFont ? (t4 = y2.tables.cff.topDict._fdSelect[g2.index], t4 = y2.tables.cff.topDict._fdArray[t4], x2 = t4._subrs, w2 = t4._subrsBias, r4 = t4._defaultWidthX, t4) : (x2 = y2.tables.cff.topDict._subrs, w2 = y2.tables.cff.topDict._subrsBias, r4 = y2.tables.cff.topDict._defaultWidthX, y2.tables.cff.topDict))._nominalWidthX, r4);
                function L2(e5, t5) {
                  O2 && T2.closePath(), T2.moveTo(e5, t5), O2 = true;
                }
                function R2() {
                  E2.length % 2 == 0 || k2 || (P2 = E2.shift() + S2), M2 += E2.length >> 1, E2.length = 0, k2 = true;
                }
                return function e5(t5) {
                  for (var r5, o3, n2, s3, i2, a2, l2, u3, c2, d2, h2, f2, p2 = 0; p2 < t5.length; ) {
                    var m2 = t5[p2];
                    switch (p2 += 1, m2) {
                      case 1:
                      case 3:
                        R2();
                        break;
                      case 4:
                        1 < E2.length && !k2 && (P2 = E2.shift() + S2, k2 = true), A2 += E2.pop(), L2(C2, A2);
                        break;
                      case 5:
                        for (; 0 < E2.length; ) C2 += E2.shift(), A2 += E2.shift(), T2.lineTo(C2, A2);
                        break;
                      case 6:
                        for (; 0 < E2.length && (C2 += E2.shift(), T2.lineTo(C2, A2), 0 !== E2.length); ) A2 += E2.shift(), T2.lineTo(C2, A2);
                        break;
                      case 7:
                        for (; 0 < E2.length && (A2 += E2.shift(), T2.lineTo(C2, A2), 0 !== E2.length); ) C2 += E2.shift(), T2.lineTo(C2, A2);
                        break;
                      case 8:
                        for (; 0 < E2.length; ) v2 = C2 + E2.shift(), b2 = A2 + E2.shift(), _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), C2 = _2 + E2.shift(), A2 = j2 + E2.shift(), T2.curveTo(v2, b2, _2, j2, C2, A2);
                        break;
                      case 10:
                        i2 = E2.pop() + w2, (a2 = x2[i2]) && e5(a2);
                        break;
                      case 11:
                        return;
                      case 12:
                        switch (m2 = t5[p2], p2 += 1, m2) {
                          case 35:
                            v2 = C2 + E2.shift(), b2 = A2 + E2.shift(), _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), l2 = _2 + E2.shift(), u3 = j2 + E2.shift(), c2 = l2 + E2.shift(), d2 = u3 + E2.shift(), h2 = c2 + E2.shift(), f2 = d2 + E2.shift(), C2 = h2 + E2.shift(), A2 = f2 + E2.shift(), E2.shift(), T2.curveTo(v2, b2, _2, j2, l2, u3), T2.curveTo(c2, d2, h2, f2, C2, A2);
                            break;
                          case 34:
                            v2 = C2 + E2.shift(), b2 = A2, _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), l2 = _2 + E2.shift(), u3 = j2, c2 = l2 + E2.shift(), d2 = j2, h2 = c2 + E2.shift(), f2 = A2, C2 = h2 + E2.shift(), T2.curveTo(v2, b2, _2, j2, l2, u3), T2.curveTo(c2, d2, h2, f2, C2, A2);
                            break;
                          case 36:
                            v2 = C2 + E2.shift(), b2 = A2 + E2.shift(), _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), l2 = _2 + E2.shift(), u3 = j2, c2 = l2 + E2.shift(), d2 = j2, h2 = c2 + E2.shift(), f2 = d2 + E2.shift(), C2 = h2 + E2.shift(), T2.curveTo(v2, b2, _2, j2, l2, u3), T2.curveTo(c2, d2, h2, f2, C2, A2);
                            break;
                          case 37:
                            v2 = C2 + E2.shift(), b2 = A2 + E2.shift(), _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), l2 = _2 + E2.shift(), u3 = j2 + E2.shift(), c2 = l2 + E2.shift(), d2 = u3 + E2.shift(), h2 = c2 + E2.shift(), f2 = d2 + E2.shift(), Math.abs(h2 - C2) > Math.abs(f2 - A2) ? C2 = h2 + E2.shift() : A2 = f2 + E2.shift(), T2.curveTo(v2, b2, _2, j2, l2, u3), T2.curveTo(c2, d2, h2, f2, C2, A2);
                            break;
                          default:
                            console.log("Glyph " + g2.index + ": unknown operator 1200" + m2), E2.length = 0;
                        }
                        break;
                      case 14:
                        0 < E2.length && !k2 && (P2 = E2.shift() + S2, k2 = true), O2 && (T2.closePath(), O2 = false);
                        break;
                      case 18:
                        R2();
                        break;
                      case 19:
                      case 20:
                        R2(), p2 += M2 + 7 >> 3;
                        break;
                      case 21:
                        2 < E2.length && !k2 && (P2 = E2.shift() + S2, k2 = true), A2 += E2.pop(), L2(C2 += E2.pop(), A2);
                        break;
                      case 22:
                        1 < E2.length && !k2 && (P2 = E2.shift() + S2, k2 = true), L2(C2 += E2.pop(), A2);
                        break;
                      case 23:
                        R2();
                        break;
                      case 24:
                        for (; 2 < E2.length; ) v2 = C2 + E2.shift(), b2 = A2 + E2.shift(), _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), C2 = _2 + E2.shift(), A2 = j2 + E2.shift(), T2.curveTo(v2, b2, _2, j2, C2, A2);
                        C2 += E2.shift(), A2 += E2.shift(), T2.lineTo(C2, A2);
                        break;
                      case 25:
                        for (; 6 < E2.length; ) C2 += E2.shift(), A2 += E2.shift(), T2.lineTo(C2, A2);
                        v2 = C2 + E2.shift(), b2 = A2 + E2.shift(), _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), C2 = _2 + E2.shift(), A2 = j2 + E2.shift(), T2.curveTo(v2, b2, _2, j2, C2, A2);
                        break;
                      case 26:
                        for (E2.length % 2 && (C2 += E2.shift()); 0 < E2.length; ) v2 = C2, b2 = A2 + E2.shift(), _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), C2 = _2, A2 = j2 + E2.shift(), T2.curveTo(v2, b2, _2, j2, C2, A2);
                        break;
                      case 27:
                        for (E2.length % 2 && (A2 += E2.shift()); 0 < E2.length; ) v2 = C2 + E2.shift(), b2 = A2, _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), C2 = _2 + E2.shift(), A2 = j2, T2.curveTo(v2, b2, _2, j2, C2, A2);
                        break;
                      case 28:
                        r5 = t5[p2], o3 = t5[p2 + 1], E2.push((r5 << 24 | o3 << 16) >> 16), p2 += 2;
                        break;
                      case 29:
                        i2 = E2.pop() + y2.gsubrsBias, (a2 = y2.gsubrs[i2]) && e5(a2);
                        break;
                      case 30:
                        for (; 0 < E2.length && (v2 = C2, b2 = A2 + E2.shift(), _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), C2 = _2 + E2.shift(), A2 = j2 + (1 === E2.length ? E2.shift() : 0), T2.curveTo(v2, b2, _2, j2, C2, A2), 0 !== E2.length); ) v2 = C2 + E2.shift(), b2 = A2, _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), A2 = j2 + E2.shift(), C2 = _2 + (1 === E2.length ? E2.shift() : 0), T2.curveTo(v2, b2, _2, j2, C2, A2);
                        break;
                      case 31:
                        for (; 0 < E2.length && (v2 = C2 + E2.shift(), b2 = A2, _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), A2 = j2 + E2.shift(), C2 = _2 + (1 === E2.length ? E2.shift() : 0), T2.curveTo(v2, b2, _2, j2, C2, A2), 0 !== E2.length); ) v2 = C2, b2 = A2 + E2.shift(), _2 = v2 + E2.shift(), j2 = b2 + E2.shift(), C2 = _2 + E2.shift(), A2 = j2 + (1 === E2.length ? E2.shift() : 0), T2.curveTo(v2, b2, _2, j2, C2, A2);
                        break;
                      default:
                        m2 < 32 ? console.log("Glyph " + g2.index + ": unknown operator " + m2) : m2 < 247 ? E2.push(m2 - 139) : m2 < 251 ? (r5 = t5[p2], p2 += 1, E2.push(256 * (m2 - 247) + r5 + 108)) : m2 < 255 ? (r5 = t5[p2], p2 += 1, E2.push(256 * -(m2 - 251) - r5 - 108)) : (r5 = t5[p2], o3 = t5[p2 + 1], n2 = t5[p2 + 2], s3 = t5[p2 + 3], p2 += 4, E2.push((r5 << 24 | o3 << 16 | n2 << 8 | s3) / 65536));
                    }
                  }
                }(e4), g2.advanceWidth = P2, T2;
              }
              function ze(e4, t4) {
                var r4, o3 = Se.indexOf(e4);
                return 0 <= o3 && (r4 = o3), 0 <= (o3 = t4.indexOf(e4)) ? r4 = o3 + Se.length : (r4 = Se.length + t4.length, t4.push(e4)), r4;
              }
              function He(e4, t4, r4) {
                for (var o3 = {}, n2 = 0; n2 < e4.length; n2 += 1) {
                  var s3 = e4[n2], i2 = t4[s3.name];
                  void 0 === i2 || function e5(t5, r5) {
                    if (t5 === r5) return 1;
                    if (Array.isArray(t5) && Array.isArray(r5) && t5.length === r5.length) {
                      for (var o4 = 0; o4 < t5.length; o4 += 1) if (!e5(t5[o4], r5[o4])) return;
                      return 1;
                    }
                  }(i2, s3.value) || ("SID" === s3.type && (i2 = ze(i2, r4)), o3[s3.op] = {
                    name: s3.name,
                    type: s3.type,
                    value: i2
                  });
                }
                return o3;
              }
              function We(e4, t4) {
                var r4 = new S.Record("Top DICT", [{
                  name: "dict",
                  type: "DICT",
                  value: {}
                }]);
                return r4.dict = He(Ue, e4, t4), r4;
              }
              function qe(e4) {
                var t4 = new S.Record("Top DICT INDEX", [{
                  name: "topDicts",
                  type: "INDEX",
                  value: []
                }]);
                return t4.topDicts = [{
                  name: "topDict_0",
                  type: "TABLE",
                  value: e4
                }], t4;
              }
              function Xe(e4) {
                for (var t4 = new S.Record("CharStrings INDEX", [{
                  name: "charStrings",
                  type: "INDEX",
                  value: []
                }]), r4 = 0; r4 < e4.length; r4 += 1) {
                  var o3 = e4.get(r4), n2 = function(e5) {
                    for (var t5 = [], r5 = e5.path, o4 = (t5.push({
                      name: "width",
                      type: "NUMBER",
                      value: e5.advanceWidth
                    }), 0), n3 = 0, s3 = 0; s3 < r5.commands.length; s3 += 1) {
                      var i2, a2, l2, u3, c2 = void 0, d2 = void 0, h2 = r5.commands[s3];
                      "M" === (h2 = "Q" === h2.type ? {
                        type: "C",
                        x: h2.x,
                        y: h2.y,
                        x1: 1 / 3 * o4 + 2 / 3 * h2.x1,
                        y1: 1 / 3 * n3 + 2 / 3 * h2.y1,
                        x2: 1 / 3 * h2.x + 2 / 3 * h2.x1,
                        y2: 1 / 3 * h2.y + 2 / 3 * h2.y1
                      } : h2).type ? (c2 = Math.round(h2.x - o4), d2 = Math.round(h2.y - n3), t5.push({
                        name: "dx",
                        type: "NUMBER",
                        value: c2
                      }), t5.push({
                        name: "dy",
                        type: "NUMBER",
                        value: d2
                      }), t5.push({
                        name: "rmoveto",
                        type: "OP",
                        value: 21
                      }), o4 = Math.round(h2.x), n3 = Math.round(h2.y)) : "L" === h2.type ? (c2 = Math.round(h2.x - o4), d2 = Math.round(h2.y - n3), t5.push({
                        name: "dx",
                        type: "NUMBER",
                        value: c2
                      }), t5.push({
                        name: "dy",
                        type: "NUMBER",
                        value: d2
                      }), t5.push({
                        name: "rlineto",
                        type: "OP",
                        value: 5
                      }), o4 = Math.round(h2.x), n3 = Math.round(h2.y)) : "C" === h2.type && (i2 = Math.round(h2.x1 - o4), a2 = Math.round(h2.y1 - n3), l2 = Math.round(h2.x2 - h2.x1), u3 = Math.round(h2.y2 - h2.y1), c2 = Math.round(h2.x - h2.x2), d2 = Math.round(h2.y - h2.y2), t5.push({
                        name: "dx1",
                        type: "NUMBER",
                        value: i2
                      }), t5.push({
                        name: "dy1",
                        type: "NUMBER",
                        value: a2
                      }), t5.push({
                        name: "dx2",
                        type: "NUMBER",
                        value: l2
                      }), t5.push({
                        name: "dy2",
                        type: "NUMBER",
                        value: u3
                      }), t5.push({
                        name: "dx",
                        type: "NUMBER",
                        value: c2
                      }), t5.push({
                        name: "dy",
                        type: "NUMBER",
                        value: d2
                      }), t5.push({
                        name: "rrcurveto",
                        type: "OP",
                        value: 8
                      }), o4 = Math.round(h2.x), n3 = Math.round(h2.y));
                    }
                    return t5.push({
                      name: "endchar",
                      type: "OP",
                      value: 14
                    }), t5;
                  }(o3);
                  t4.charStrings.push({
                    name: o3.name,
                    type: "CHARSTRING",
                    value: n2
                  });
                }
                return t4;
              }
              var Ye = {
                parse: function(e4, t4, r4) {
                  r4.tables.cff = {}, o3 = e4, n2 = t4, (s3 = {}).formatMajor = R.getCard8(o3, n2), s3.formatMinor = R.getCard8(o3, n2 + 1), s3.size = R.getCard8(o3, n2 + 2), s3.offsetSize = R.getCard8(o3, n2 + 3), s3.startOffset = n2, s3.endOffset = n2 + 4;
                  var o3 = y(e4, s3.endOffset, R.bytesToString), n2 = y(e4, o3.endOffset), s3 = y(e4, n2.endOffset, R.bytesToString), o3 = y(e4, s3.endOffset);
                  if (r4.gsubrs = o3.objects, r4.gsubrsBias = Le(r4.gsubrs), 1 !== (o3 = Ge(e4, t4, n2.objects, s3.objects)).length) throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = " + o3.length);
                  if (n2 = o3[0], (r4.tables.cff.topDict = n2)._privateDict && (r4.defaultWidthX = n2._privateDict.defaultWidthX, r4.nominalWidthX = n2._privateDict.nominalWidthX), void 0 !== n2.ros[0] && void 0 !== n2.ros[1] && (r4.isCIDFont = true), r4.isCIDFont) {
                    var o3 = n2.fdArray, i2 = n2.fdSelect;
                    if (0 === o3 || 0 === i2) throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");
                    o3 = Ge(e4, t4, y(e4, o3 += t4).objects, s3.objects);
                    n2._fdArray = o3, n2._fdSelect = function(e5, t5, r5, o4) {
                      var n3, s4 = [], i3 = new R.Parser(e5, t5);
                      if (0 === (e5 = i3.parseCard8())) for (var a3 = 0; a3 < r5; a3++) {
                        if (o4 <= (n3 = i3.parseCard8())) throw new Error("CFF table CID Font FDSelect has bad FD index value " + n3 + " (FD count " + o4 + ")");
                        s4.push(n3);
                      }
                      else {
                        if (3 !== e5) throw new Error("CFF Table CID Font FDSelect table has unsupported format " + e5);
                        var l3, u4 = i3.parseCard16(), c2 = i3.parseCard16();
                        if (0 !== c2) throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID " + c2);
                        for (var d2 = 0; d2 < u4; d2++) {
                          if (n3 = i3.parseCard8(), l3 = i3.parseCard16(), o4 <= n3) throw new Error("CFF table CID Font FDSelect has bad FD index value " + n3 + " (FD count " + o4 + ")");
                          if (r5 < l3) throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID " + l3);
                          for (; c2 < l3; c2++) s4.push(n3);
                          c2 = l3;
                        }
                        if (l3 !== r5) throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID " + l3);
                      }
                      return s4;
                    }(e4, i2 += t4, r4.numGlyphs, o3.length);
                  }
                  var i2 = t4 + n2.private[1], o3 = Be(e4, i2, n2.private[0], s3.objects), a2 = (r4.defaultWidthX = o3.defaultWidthX, r4.nominalWidthX = o3.nominalWidthX, 0 !== o3.subrs ? (i2 = y(e4, i2 + o3.subrs), r4.subrs = i2.objects, r4.subrsBias = Le(r4.subrs)) : (r4.subrs = [], r4.subrsBias = 0), y(e4, t4 + n2.charStrings)), o3 = (r4.nGlyphs = a2.objects.length, function(e5, t5, r5, o4) {
                    var n3 = new R.Parser(e5, t5), s4 = (--r5, [".notdef"]);
                    if (0 === (e5 = n3.parseCard8())) for (var i3 = 0; i3 < r5; i3 += 1) a3 = n3.parseSID(), s4.push(De(o4, a3));
                    else if (1 === e5) for (; s4.length <= r5; ) for (var a3 = n3.parseSID(), l3 = n3.parseCard8(), u4 = 0; u4 <= l3; u4 += 1) s4.push(De(o4, a3)), a3 += 1;
                    else {
                      if (2 !== e5) throw new Error("Unknown charset format " + e5);
                      for (; s4.length <= r5; ) {
                        a3 = n3.parseSID(), l3 = n3.parseCard16();
                        for (var c2 = 0; c2 <= l3; c2 += 1) s4.push(De(o4, a3)), a3 += 1;
                      }
                    }
                    return s4;
                  }(e4, t4 + n2.charset, r4.nGlyphs, s3.objects));
                  0 === n2.encoding ? r4.cffEncoding = new Oe(Te, o3) : 1 === n2.encoding ? r4.cffEncoding = new Oe(Ee, o3) : r4.cffEncoding = function(e5, t5, r5) {
                    var o4 = {}, n3 = new R.Parser(e5, t5);
                    if (0 === (e5 = n3.parseCard8())) for (var s4 = n3.parseCard8(), i3 = 0; i3 < s4; i3 += 1) o4[l3 = n3.parseCard8()] = i3;
                    else {
                      if (1 !== e5) throw new Error("Unknown encoding format " + e5);
                      for (var a3 = n3.parseCard8(), l3 = 1, u4 = 0; u4 < a3; u4 += 1) for (var c2 = n3.parseCard8(), d2 = n3.parseCard8(), h2 = c2; h2 <= c2 + d2; h2 += 1) o4[h2] = l3, l3 += 1;
                    }
                    return new Oe(o4, r5);
                  }(e4, t4 + n2.encoding, o3), r4.encoding = r4.encoding || r4.cffEncoding, r4.glyphs = new p.GlyphSet(r4);
                  for (var l2 = 0; l2 < r4.nGlyphs; l2 += 1) {
                    var u3 = a2.objects[l2];
                    r4.glyphs.push(l2, p.cffGlyphLoader(r4, l2, Ve, u3));
                  }
                },
                make: function(e4, t4) {
                  for (var r4, o3 = new S.Table("CFF ", [{
                    name: "header",
                    type: "RECORD"
                  }, {
                    name: "nameIndex",
                    type: "RECORD"
                  }, {
                    name: "topDictIndex",
                    type: "RECORD"
                  }, {
                    name: "stringIndex",
                    type: "RECORD"
                  }, {
                    name: "globalSubrIndex",
                    type: "RECORD"
                  }, {
                    name: "charsets",
                    type: "RECORD"
                  }, {
                    name: "charStringsIndex",
                    type: "RECORD"
                  }, {
                    name: "privateDict",
                    type: "RECORD"
                  }]), n2 = 1 / t4.unitsPerEm, n2 = {
                    version: t4.version,
                    fullName: t4.fullName,
                    familyName: t4.familyName,
                    weight: t4.weightName,
                    fontBBox: t4.fontBBox || [0, 0, 0, 0],
                    fontMatrix: [n2, 0, 0, n2, 0, 0],
                    charset: 999,
                    encoding: 0,
                    charStrings: 999,
                    private: [0, 999]
                  }, s3 = [], i2 = 1; i2 < e4.length; i2 += 1) r4 = e4.get(i2), s3.push(r4.name);
                  var a2, l2, u3 = [], t4 = (o3.header = new S.Record("Header", [{
                    name: "major",
                    type: "Card8",
                    value: 1
                  }, {
                    name: "minor",
                    type: "Card8",
                    value: 0
                  }, {
                    name: "hdrSize",
                    type: "Card8",
                    value: 4
                  }, {
                    name: "major",
                    type: "Card8",
                    value: 1
                  }]), o3.nameIndex = function(e5) {
                    var t5 = new S.Record("Name INDEX", [{
                      name: "names",
                      type: "INDEX",
                      value: []
                    }]);
                    t5.names = [];
                    for (var r5 = 0; r5 < e5.length; r5 += 1) t5.names.push({
                      name: "name_" + r5,
                      type: "NAME",
                      value: e5[r5]
                    });
                    return t5;
                  }([t4.postScriptName]), We(n2, u3)), c2 = (o3.topDictIndex = qe(t4), o3.globalSubrIndex = new S.Record("Global Subr INDEX", [{
                    name: "subrs",
                    type: "INDEX",
                    value: []
                  }]), o3.charsets = function(e5, t5) {
                    for (var r5 = new S.Record("Charsets", [{
                      name: "format",
                      type: "Card8",
                      value: 0
                    }]), o4 = 0; o4 < e5.length; o4 += 1) {
                      var n3 = ze(e5[o4], t5);
                      r5.fields.push({
                        name: "glyph_" + o4,
                        type: "SID",
                        value: n3
                      });
                    }
                    return r5;
                  }(s3, u3), o3.charStringsIndex = Xe(e4), o3.privateDict = (c2 = {}, a2 = u3, (l2 = new S.Record("Private DICT", [{
                    name: "dict",
                    type: "DICT",
                    value: {}
                  }])).dict = He(Ne, c2, a2), l2), o3.stringIndex = function(e5) {
                    var t5 = new S.Record("String INDEX", [{
                      name: "strings",
                      type: "INDEX",
                      value: []
                    }]);
                    t5.strings = [];
                    for (var r5 = 0; r5 < e5.length; r5 += 1) t5.strings.push({
                      name: "string_" + r5,
                      type: "STRING",
                      value: e5[r5]
                    });
                    return t5;
                  }(u3), o3.header.sizeOf() + o3.nameIndex.sizeOf() + o3.topDictIndex.sizeOf() + o3.stringIndex.sizeOf() + o3.globalSubrIndex.sizeOf());
                  return n2.charset = c2, n2.encoding = 0, n2.charStrings = n2.charset + o3.charsets.sizeOf(), n2.private[1] = n2.charStrings + o3.charStringsIndex.sizeOf(), t4 = We(n2, u3), o3.topDictIndex = qe(t4), o3;
                }
              };
              var Ze = {
                parse: function(e4, t4) {
                  var r4 = {}, e4 = new R.Parser(e4, t4);
                  return r4.version = e4.parseVersion(), r4.fontRevision = Math.round(1e3 * e4.parseFixed()) / 1e3, r4.checkSumAdjustment = e4.parseULong(), r4.magicNumber = e4.parseULong(), L.argument(1594834165 === r4.magicNumber, "Font header has wrong magic number."), r4.flags = e4.parseUShort(), r4.unitsPerEm = e4.parseUShort(), r4.created = e4.parseLongDateTime(), r4.modified = e4.parseLongDateTime(), r4.xMin = e4.parseShort(), r4.yMin = e4.parseShort(), r4.xMax = e4.parseShort(), r4.yMax = e4.parseShort(), r4.macStyle = e4.parseUShort(), r4.lowestRecPPEM = e4.parseUShort(), r4.fontDirectionHint = e4.parseShort(), r4.indexToLocFormat = e4.parseShort(), r4.glyphDataFormat = e4.parseShort(), r4;
                },
                make: function(e4) {
                  var t4 = Math.round((/* @__PURE__ */ new Date()).getTime() / 1e3) + 2082844800, r4 = t4;
                  return e4.createdTimestamp && (r4 = e4.createdTimestamp + 2082844800), new S.Table("head", [{
                    name: "version",
                    type: "FIXED",
                    value: 65536
                  }, {
                    name: "fontRevision",
                    type: "FIXED",
                    value: 65536
                  }, {
                    name: "checkSumAdjustment",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "magicNumber",
                    type: "ULONG",
                    value: 1594834165
                  }, {
                    name: "flags",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "unitsPerEm",
                    type: "USHORT",
                    value: 1e3
                  }, {
                    name: "created",
                    type: "LONGDATETIME",
                    value: r4
                  }, {
                    name: "modified",
                    type: "LONGDATETIME",
                    value: t4
                  }, {
                    name: "xMin",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "yMin",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "xMax",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "yMax",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "macStyle",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "lowestRecPPEM",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "fontDirectionHint",
                    type: "SHORT",
                    value: 2
                  }, {
                    name: "indexToLocFormat",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "glyphDataFormat",
                    type: "SHORT",
                    value: 0
                  }], e4);
                }
              };
              var Ke = {
                parse: function(e4, t4) {
                  var r4 = {}, e4 = new R.Parser(e4, t4);
                  return r4.version = e4.parseVersion(), r4.ascender = e4.parseShort(), r4.descender = e4.parseShort(), r4.lineGap = e4.parseShort(), r4.advanceWidthMax = e4.parseUShort(), r4.minLeftSideBearing = e4.parseShort(), r4.minRightSideBearing = e4.parseShort(), r4.xMaxExtent = e4.parseShort(), r4.caretSlopeRise = e4.parseShort(), r4.caretSlopeRun = e4.parseShort(), r4.caretOffset = e4.parseShort(), e4.relativeOffset += 8, r4.metricDataFormat = e4.parseShort(), r4.numberOfHMetrics = e4.parseUShort(), r4;
                },
                make: function(e4) {
                  return new S.Table("hhea", [{
                    name: "version",
                    type: "FIXED",
                    value: 65536
                  }, {
                    name: "ascender",
                    type: "FWORD",
                    value: 0
                  }, {
                    name: "descender",
                    type: "FWORD",
                    value: 0
                  }, {
                    name: "lineGap",
                    type: "FWORD",
                    value: 0
                  }, {
                    name: "advanceWidthMax",
                    type: "UFWORD",
                    value: 0
                  }, {
                    name: "minLeftSideBearing",
                    type: "FWORD",
                    value: 0
                  }, {
                    name: "minRightSideBearing",
                    type: "FWORD",
                    value: 0
                  }, {
                    name: "xMaxExtent",
                    type: "FWORD",
                    value: 0
                  }, {
                    name: "caretSlopeRise",
                    type: "SHORT",
                    value: 1
                  }, {
                    name: "caretSlopeRun",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "caretOffset",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "reserved1",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "reserved2",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "reserved3",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "reserved4",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "metricDataFormat",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "numberOfHMetrics",
                    type: "USHORT",
                    value: 0
                  }], e4);
                }
              };
              var Qe = {
                parse: function(e4, t4, r4, o3, n2) {
                  for (var s3, i2, a2 = new R.Parser(e4, t4), l2 = 0; l2 < o3; l2 += 1) {
                    l2 < r4 && (s3 = a2.parseUShort(), i2 = a2.parseShort());
                    var u3 = n2.get(l2);
                    u3.advanceWidth = s3, u3.leftSideBearing = i2;
                  }
                },
                make: function(e4) {
                  for (var t4 = new S.Table("hmtx", []), r4 = 0; r4 < e4.length; r4 += 1) {
                    var o3 = e4.get(r4), n2 = o3.advanceWidth || 0, o3 = o3.leftSideBearing || 0;
                    t4.fields.push({
                      name: "advanceWidth_" + r4,
                      type: "USHORT",
                      value: n2
                    }), t4.fields.push({
                      name: "leftSideBearing_" + r4,
                      type: "SHORT",
                      value: o3
                    });
                  }
                  return t4;
                }
              };
              var Je = {
                make: function(e4) {
                  for (var t4 = new S.Table("ltag", [{
                    name: "version",
                    type: "ULONG",
                    value: 1
                  }, {
                    name: "flags",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "numTags",
                    type: "ULONG",
                    value: e4.length
                  }]), r4 = "", o3 = 12 + 4 * e4.length, n2 = 0; n2 < e4.length; ++n2) {
                    var s3 = r4.indexOf(e4[n2]);
                    s3 < 0 && (s3 = r4.length, r4 += e4[n2]), t4.fields.push({
                      name: "offset " + n2,
                      type: "USHORT",
                      value: o3 + s3
                    }), t4.fields.push({
                      name: "length " + n2,
                      type: "USHORT",
                      value: e4[n2].length
                    });
                  }
                  return t4.fields.push({
                    name: "stringPool",
                    type: "CHARARRAY",
                    value: r4
                  }), t4;
                },
                parse: function(e4, t4) {
                  for (var r4 = new R.Parser(e4, t4), o3 = r4.parseULong(), n2 = (L.argument(1 === o3, "Unsupported ltag table version."), r4.skip("uLong", 1), r4.parseULong()), s3 = [], i2 = 0; i2 < n2; i2++) {
                    for (var a2 = "", l2 = t4 + r4.parseUShort(), u3 = r4.parseUShort(), c2 = l2; c2 < l2 + u3; ++c2) a2 += String.fromCharCode(e4.getInt8(c2));
                    s3.push(a2);
                  }
                  return s3;
                }
              };
              var $e = {
                parse: function(e4, t4) {
                  var r4 = {}, e4 = new R.Parser(e4, t4);
                  return r4.version = e4.parseVersion(), r4.numGlyphs = e4.parseUShort(), 1 === r4.version && (r4.maxPoints = e4.parseUShort(), r4.maxContours = e4.parseUShort(), r4.maxCompositePoints = e4.parseUShort(), r4.maxCompositeContours = e4.parseUShort(), r4.maxZones = e4.parseUShort(), r4.maxTwilightPoints = e4.parseUShort(), r4.maxStorage = e4.parseUShort(), r4.maxFunctionDefs = e4.parseUShort(), r4.maxInstructionDefs = e4.parseUShort(), r4.maxStackElements = e4.parseUShort(), r4.maxSizeOfInstructions = e4.parseUShort(), r4.maxComponentElements = e4.parseUShort(), r4.maxComponentDepth = e4.parseUShort()), r4;
                },
                make: function(e4) {
                  return new S.Table("maxp", [{
                    name: "version",
                    type: "FIXED",
                    value: 20480
                  }, {
                    name: "numGlyphs",
                    type: "USHORT",
                    value: e4
                  }]);
                }
              }, et = ["copyright", "fontFamily", "fontSubfamily", "uniqueID", "fullName", "version", "postScriptName", "trademark", "manufacturer", "designer", "description", "manufacturerURL", "designerURL", "license", "licenseURL", "reserved", "preferredFamily", "preferredSubfamily", "compatibleFullName", "sampleText", "postScriptFindFontName", "wwsFamily", "wwsSubfamily"], tt = {
                0: "en",
                1: "fr",
                2: "de",
                3: "it",
                4: "nl",
                5: "sv",
                6: "es",
                7: "da",
                8: "pt",
                9: "no",
                10: "he",
                11: "ja",
                12: "ar",
                13: "fi",
                14: "el",
                15: "is",
                16: "mt",
                17: "tr",
                18: "hr",
                19: "zh-Hant",
                20: "ur",
                21: "hi",
                22: "th",
                23: "ko",
                24: "lt",
                25: "pl",
                26: "hu",
                27: "es",
                28: "lv",
                29: "se",
                30: "fo",
                31: "fa",
                32: "ru",
                33: "zh",
                34: "nl-BE",
                35: "ga",
                36: "sq",
                37: "ro",
                38: "cz",
                39: "sk",
                40: "si",
                41: "yi",
                42: "sr",
                43: "mk",
                44: "bg",
                45: "uk",
                46: "be",
                47: "uz",
                48: "kk",
                49: "az-Cyrl",
                50: "az-Arab",
                51: "hy",
                52: "ka",
                53: "mo",
                54: "ky",
                55: "tg",
                56: "tk",
                57: "mn-CN",
                58: "mn",
                59: "ps",
                60: "ks",
                61: "ku",
                62: "sd",
                63: "bo",
                64: "ne",
                65: "sa",
                66: "mr",
                67: "bn",
                68: "as",
                69: "gu",
                70: "pa",
                71: "or",
                72: "ml",
                73: "kn",
                74: "ta",
                75: "te",
                76: "si",
                77: "my",
                78: "km",
                79: "lo",
                80: "vi",
                81: "id",
                82: "tl",
                83: "ms",
                84: "ms-Arab",
                85: "am",
                86: "ti",
                87: "om",
                88: "so",
                89: "sw",
                90: "rw",
                91: "rn",
                92: "ny",
                93: "mg",
                94: "eo",
                128: "cy",
                129: "eu",
                130: "ca",
                131: "la",
                132: "qu",
                133: "gn",
                134: "ay",
                135: "tt",
                136: "ug",
                137: "dz",
                138: "jv",
                139: "su",
                140: "gl",
                141: "af",
                142: "br",
                143: "iu",
                144: "gd",
                145: "gv",
                146: "ga",
                147: "to",
                148: "el-polyton",
                149: "kl",
                150: "az",
                151: "nn"
              }, rt = {
                0: 0,
                1: 0,
                2: 0,
                3: 0,
                4: 0,
                5: 0,
                6: 0,
                7: 0,
                8: 0,
                9: 0,
                10: 5,
                11: 1,
                12: 4,
                13: 0,
                14: 6,
                15: 0,
                16: 0,
                17: 0,
                18: 0,
                19: 2,
                20: 4,
                21: 9,
                22: 21,
                23: 3,
                24: 29,
                25: 29,
                26: 29,
                27: 29,
                28: 29,
                29: 0,
                30: 0,
                31: 4,
                32: 7,
                33: 25,
                34: 0,
                35: 0,
                36: 0,
                37: 0,
                38: 29,
                39: 29,
                40: 0,
                41: 5,
                42: 7,
                43: 7,
                44: 7,
                45: 7,
                46: 7,
                47: 7,
                48: 7,
                49: 7,
                50: 4,
                51: 24,
                52: 23,
                53: 7,
                54: 7,
                55: 7,
                56: 7,
                57: 27,
                58: 7,
                59: 4,
                60: 4,
                61: 4,
                62: 4,
                63: 26,
                64: 9,
                65: 9,
                66: 9,
                67: 13,
                68: 13,
                69: 11,
                70: 10,
                71: 12,
                72: 17,
                73: 16,
                74: 14,
                75: 15,
                76: 18,
                77: 19,
                78: 20,
                79: 22,
                80: 30,
                81: 0,
                82: 0,
                83: 0,
                84: 4,
                85: 28,
                86: 28,
                87: 28,
                88: 0,
                89: 0,
                90: 0,
                91: 0,
                92: 0,
                93: 0,
                94: 0,
                128: 0,
                129: 0,
                130: 0,
                131: 0,
                132: 0,
                133: 0,
                134: 0,
                135: 7,
                136: 4,
                137: 26,
                138: 0,
                139: 0,
                140: 0,
                141: 0,
                142: 0,
                143: 28,
                144: 0,
                145: 0,
                146: 0,
                147: 0,
                148: 6,
                149: 0,
                150: 0,
                151: 0
              }, ot = {
                1078: "af",
                1052: "sq",
                1156: "gsw",
                1118: "am",
                5121: "ar-DZ",
                15361: "ar-BH",
                3073: "ar",
                2049: "ar-IQ",
                11265: "ar-JO",
                13313: "ar-KW",
                12289: "ar-LB",
                4097: "ar-LY",
                6145: "ary",
                8193: "ar-OM",
                16385: "ar-QA",
                1025: "ar-SA",
                10241: "ar-SY",
                7169: "aeb",
                14337: "ar-AE",
                9217: "ar-YE",
                1067: "hy",
                1101: "as",
                2092: "az-Cyrl",
                1068: "az",
                1133: "ba",
                1069: "eu",
                1059: "be",
                2117: "bn",
                1093: "bn-IN",
                8218: "bs-Cyrl",
                5146: "bs",
                1150: "br",
                1026: "bg",
                1027: "ca",
                3076: "zh-HK",
                5124: "zh-MO",
                2052: "zh",
                4100: "zh-SG",
                1028: "zh-TW",
                1155: "co",
                1050: "hr",
                4122: "hr-BA",
                1029: "cs",
                1030: "da",
                1164: "prs",
                1125: "dv",
                2067: "nl-BE",
                1043: "nl",
                3081: "en-AU",
                10249: "en-BZ",
                4105: "en-CA",
                9225: "en-029",
                16393: "en-IN",
                6153: "en-IE",
                8201: "en-JM",
                17417: "en-MY",
                5129: "en-NZ",
                13321: "en-PH",
                18441: "en-SG",
                7177: "en-ZA",
                11273: "en-TT",
                2057: "en-GB",
                1033: "en",
                12297: "en-ZW",
                1061: "et",
                1080: "fo",
                1124: "fil",
                1035: "fi",
                2060: "fr-BE",
                3084: "fr-CA",
                1036: "fr",
                5132: "fr-LU",
                6156: "fr-MC",
                4108: "fr-CH",
                1122: "fy",
                1110: "gl",
                1079: "ka",
                3079: "de-AT",
                1031: "de",
                5127: "de-LI",
                4103: "de-LU",
                2055: "de-CH",
                1032: "el",
                1135: "kl",
                1095: "gu",
                1128: "ha",
                1037: "he",
                1081: "hi",
                1038: "hu",
                1039: "is",
                1136: "ig",
                1057: "id",
                1117: "iu",
                2141: "iu-Latn",
                2108: "ga",
                1076: "xh",
                1077: "zu",
                1040: "it",
                2064: "it-CH",
                1041: "ja",
                1099: "kn",
                1087: "kk",
                1107: "km",
                1158: "quc",
                1159: "rw",
                1089: "sw",
                1111: "kok",
                1042: "ko",
                1088: "ky",
                1108: "lo",
                1062: "lv",
                1063: "lt",
                2094: "dsb",
                1134: "lb",
                1071: "mk",
                2110: "ms-BN",
                1086: "ms",
                1100: "ml",
                1082: "mt",
                1153: "mi",
                1146: "arn",
                1102: "mr",
                1148: "moh",
                1104: "mn",
                2128: "mn-CN",
                1121: "ne",
                1044: "nb",
                2068: "nn",
                1154: "oc",
                1096: "or",
                1123: "ps",
                1045: "pl",
                1046: "pt",
                2070: "pt-PT",
                1094: "pa",
                1131: "qu-BO",
                2155: "qu-EC",
                3179: "qu",
                1048: "ro",
                1047: "rm",
                1049: "ru",
                9275: "smn",
                4155: "smj-NO",
                5179: "smj",
                3131: "se-FI",
                1083: "se",
                2107: "se-SE",
                8251: "sms",
                6203: "sma-NO",
                7227: "sms",
                1103: "sa",
                7194: "sr-Cyrl-BA",
                3098: "sr",
                6170: "sr-Latn-BA",
                2074: "sr-Latn",
                1132: "nso",
                1074: "tn",
                1115: "si",
                1051: "sk",
                1060: "sl",
                11274: "es-AR",
                16394: "es-BO",
                13322: "es-CL",
                9226: "es-CO",
                5130: "es-CR",
                7178: "es-DO",
                12298: "es-EC",
                17418: "es-SV",
                4106: "es-GT",
                18442: "es-HN",
                2058: "es-MX",
                19466: "es-NI",
                6154: "es-PA",
                15370: "es-PY",
                10250: "es-PE",
                20490: "es-PR",
                3082: "es",
                1034: "es",
                21514: "es-US",
                14346: "es-UY",
                8202: "es-VE",
                2077: "sv-FI",
                1053: "sv",
                1114: "syr",
                1064: "tg",
                2143: "tzm",
                1097: "ta",
                1092: "tt",
                1098: "te",
                1054: "th",
                1105: "bo",
                1055: "tr",
                1090: "tk",
                1152: "ug",
                1058: "uk",
                1070: "hsb",
                1056: "ur",
                2115: "uz-Cyrl",
                1091: "uz",
                1066: "vi",
                1106: "cy",
                1160: "wo",
                1157: "sah",
                1144: "ii",
                1130: "yo"
              };
              var nt = "utf-16", st = {
                0: "macintosh",
                1: "x-mac-japanese",
                2: "x-mac-chinesetrad",
                3: "x-mac-korean",
                6: "x-mac-greek",
                7: "x-mac-cyrillic",
                9: "x-mac-devanagai",
                10: "x-mac-gurmukhi",
                11: "x-mac-gujarati",
                12: "x-mac-oriya",
                13: "x-mac-bengali",
                14: "x-mac-tamil",
                15: "x-mac-telugu",
                16: "x-mac-kannada",
                17: "x-mac-malayalam",
                18: "x-mac-sinhalese",
                19: "x-mac-burmese",
                20: "x-mac-khmer",
                21: "x-mac-thai",
                22: "x-mac-lao",
                23: "x-mac-georgian",
                24: "x-mac-armenian",
                25: "x-mac-chinesesimp",
                26: "x-mac-tibetan",
                27: "x-mac-mongolian",
                28: "x-mac-ethiopic",
                29: "x-mac-ce",
                30: "x-mac-vietnamese",
                31: "x-mac-extarabic"
              }, it = {
                15: "x-mac-icelandic",
                17: "x-mac-turkish",
                18: "x-mac-croatian",
                24: "x-mac-ce",
                25: "x-mac-ce",
                26: "x-mac-ce",
                27: "x-mac-ce",
                28: "x-mac-ce",
                30: "x-mac-icelandic",
                37: "x-mac-romanian",
                38: "x-mac-ce",
                39: "x-mac-ce",
                40: "x-mac-ce",
                143: "x-mac-inuit",
                146: "x-mac-gaelic"
              };
              function at(e4, t4, r4) {
                switch (e4) {
                  case 0:
                    return nt;
                  case 1:
                    return it[r4] || st[t4];
                  case 3:
                    if (1 === t4 || 10 === t4) return nt;
                }
              }
              function lt(e4) {
                var t4, r4 = {};
                for (t4 in e4) r4[e4[t4]] = parseInt(t4);
                return r4;
              }
              function ut(e4, t4, r4, o3, n2, s3) {
                return new S.Record("NameRecord", [{
                  name: "platformID",
                  type: "USHORT",
                  value: e4
                }, {
                  name: "encodingID",
                  type: "USHORT",
                  value: t4
                }, {
                  name: "languageID",
                  type: "USHORT",
                  value: r4
                }, {
                  name: "nameID",
                  type: "USHORT",
                  value: o3
                }, {
                  name: "length",
                  type: "USHORT",
                  value: n2
                }, {
                  name: "offset",
                  type: "USHORT",
                  value: s3
                }]);
              }
              function ct(e4, t4) {
                if ((r4 = function(e5, t5) {
                  var r5 = e5.length, o4 = t5.length - r5 + 1;
                  e: for (var n3 = 0; n3 < o4; n3++) for (; n3 < o4; n3++) {
                    for (var s3 = 0; s3 < r5; s3++) if (t5[n3 + s3] !== e5[s3]) continue e;
                    return n3;
                  }
                  return -1;
                }(e4, t4)) < 0) for (var r4 = t4.length, o3 = 0, n2 = e4.length; o3 < n2; ++o3) t4.push(e4[o3]);
                return r4;
              }
              var dt = {
                parse: function(e4, t4, r4) {
                  for (var o3 = {}, n2 = new R.Parser(e4, t4), t4 = n2.parseUShort(), s3 = n2.parseUShort(), i2 = n2.offset + n2.parseUShort(), a2 = 0; a2 < s3; a2++) {
                    var l2 = n2.parseUShort(), u3 = n2.parseUShort(), c2 = n2.parseUShort(), d2 = n2.parseUShort(), d2 = et[d2] || d2, h2 = n2.parseUShort(), f2 = n2.parseUShort(), p2 = function(e5, t5, r5) {
                      switch (e5) {
                        case 0:
                          if (65535 === t5) return "und";
                          if (r5) return r5[t5];
                          break;
                        case 1:
                          return tt[t5];
                        case 3:
                          return ot[t5];
                      }
                    }(l2, c2, r4), l2 = at(l2, u3, c2);
                    void 0 !== l2 && void 0 !== p2 && (u3 = void 0, (u3 = l2 === nt ? m.UTF16(e4, i2 + f2, h2) : m.MACSTRING(e4, i2 + f2, h2, l2)) && ((c2 = void 0 === (c2 = o3[d2]) ? o3[d2] = {} : c2)[p2] = u3));
                  }
                  return 1 === t4 && n2.parseUShort(), o3;
                },
                make: function(e4, t4) {
                  var r4, o3 = [], n2 = {}, s3 = lt(et);
                  for (r4 in e4) {
                    var i2 = s3[r4];
                    if (void 0 === i2 && (i2 = r4), h2 = parseInt(i2), isNaN(h2)) throw new Error('Name table entry "' + r4 + '" does not exist, see nameTableNames for complete list.');
                    n2[h2] = e4[r4], o3.push(h2);
                  }
                  for (var a2 = lt(tt), l2 = lt(ot), u3 = [], c2 = [], d2 = 0; d2 < o3.length; d2++) {
                    var h2, f2, p2 = n2[h2 = o3[d2]];
                    for (f2 in p2) {
                      var m2 = p2[f2], y2 = 1, g2 = a2[f2], v2 = rt[g2], b2 = at(y2, v2, g2), b2 = w.MACSTRING(m2, b2), _2 = (void 0 === b2 && (y2 = 0, (g2 = t4.indexOf(f2)) < 0 && (g2 = t4.length, t4.push(f2)), v2 = 4, b2 = w.UTF16(m2)), ct(b2, c2)), y2 = (u3.push(ut(y2, v2, g2, h2, b2.length, _2)), l2[f2]);
                      void 0 !== y2 && (g2 = ct(v2 = w.UTF16(m2), c2), u3.push(ut(3, 1, y2, h2, v2.length, g2)));
                    }
                  }
                  u3.sort(function(e5, t5) {
                    return e5.platformID - t5.platformID || e5.encodingID - t5.encodingID || e5.languageID - t5.languageID || e5.nameID - t5.nameID;
                  });
                  for (var j2 = new S.Table("name", [{
                    name: "format",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "count",
                    type: "USHORT",
                    value: u3.length
                  }, {
                    name: "stringOffset",
                    type: "USHORT",
                    value: 6 + 12 * u3.length
                  }]), x2 = 0; x2 < u3.length; x2++) j2.fields.push({
                    name: "record_" + x2,
                    type: "RECORD",
                    value: u3[x2]
                  });
                  return j2.fields.push({
                    name: "strings",
                    type: "LITERAL",
                    value: c2
                  }), j2;
                }
              }, ht = [{
                begin: 0,
                end: 127
              }, {
                begin: 128,
                end: 255
              }, {
                begin: 256,
                end: 383
              }, {
                begin: 384,
                end: 591
              }, {
                begin: 592,
                end: 687
              }, {
                begin: 688,
                end: 767
              }, {
                begin: 768,
                end: 879
              }, {
                begin: 880,
                end: 1023
              }, {
                begin: 11392,
                end: 11519
              }, {
                begin: 1024,
                end: 1279
              }, {
                begin: 1328,
                end: 1423
              }, {
                begin: 1424,
                end: 1535
              }, {
                begin: 42240,
                end: 42559
              }, {
                begin: 1536,
                end: 1791
              }, {
                begin: 1984,
                end: 2047
              }, {
                begin: 2304,
                end: 2431
              }, {
                begin: 2432,
                end: 2559
              }, {
                begin: 2560,
                end: 2687
              }, {
                begin: 2688,
                end: 2815
              }, {
                begin: 2816,
                end: 2943
              }, {
                begin: 2944,
                end: 3071
              }, {
                begin: 3072,
                end: 3199
              }, {
                begin: 3200,
                end: 3327
              }, {
                begin: 3328,
                end: 3455
              }, {
                begin: 3584,
                end: 3711
              }, {
                begin: 3712,
                end: 3839
              }, {
                begin: 4256,
                end: 4351
              }, {
                begin: 6912,
                end: 7039
              }, {
                begin: 4352,
                end: 4607
              }, {
                begin: 7680,
                end: 7935
              }, {
                begin: 7936,
                end: 8191
              }, {
                begin: 8192,
                end: 8303
              }, {
                begin: 8304,
                end: 8351
              }, {
                begin: 8352,
                end: 8399
              }, {
                begin: 8400,
                end: 8447
              }, {
                begin: 8448,
                end: 8527
              }, {
                begin: 8528,
                end: 8591
              }, {
                begin: 8592,
                end: 8703
              }, {
                begin: 8704,
                end: 8959
              }, {
                begin: 8960,
                end: 9215
              }, {
                begin: 9216,
                end: 9279
              }, {
                begin: 9280,
                end: 9311
              }, {
                begin: 9312,
                end: 9471
              }, {
                begin: 9472,
                end: 9599
              }, {
                begin: 9600,
                end: 9631
              }, {
                begin: 9632,
                end: 9727
              }, {
                begin: 9728,
                end: 9983
              }, {
                begin: 9984,
                end: 10175
              }, {
                begin: 12288,
                end: 12351
              }, {
                begin: 12352,
                end: 12447
              }, {
                begin: 12448,
                end: 12543
              }, {
                begin: 12544,
                end: 12591
              }, {
                begin: 12592,
                end: 12687
              }, {
                begin: 43072,
                end: 43135
              }, {
                begin: 12800,
                end: 13055
              }, {
                begin: 13056,
                end: 13311
              }, {
                begin: 44032,
                end: 55215
              }, {
                begin: 55296,
                end: 57343
              }, {
                begin: 67840,
                end: 67871
              }, {
                begin: 19968,
                end: 40959
              }, {
                begin: 57344,
                end: 63743
              }, {
                begin: 12736,
                end: 12783
              }, {
                begin: 64256,
                end: 64335
              }, {
                begin: 64336,
                end: 65023
              }, {
                begin: 65056,
                end: 65071
              }, {
                begin: 65040,
                end: 65055
              }, {
                begin: 65104,
                end: 65135
              }, {
                begin: 65136,
                end: 65279
              }, {
                begin: 65280,
                end: 65519
              }, {
                begin: 65520,
                end: 65535
              }, {
                begin: 3840,
                end: 4095
              }, {
                begin: 1792,
                end: 1871
              }, {
                begin: 1920,
                end: 1983
              }, {
                begin: 3456,
                end: 3583
              }, {
                begin: 4096,
                end: 4255
              }, {
                begin: 4608,
                end: 4991
              }, {
                begin: 5024,
                end: 5119
              }, {
                begin: 5120,
                end: 5759
              }, {
                begin: 5760,
                end: 5791
              }, {
                begin: 5792,
                end: 5887
              }, {
                begin: 6016,
                end: 6143
              }, {
                begin: 6144,
                end: 6319
              }, {
                begin: 10240,
                end: 10495
              }, {
                begin: 40960,
                end: 42127
              }, {
                begin: 5888,
                end: 5919
              }, {
                begin: 66304,
                end: 66351
              }, {
                begin: 66352,
                end: 66383
              }, {
                begin: 66560,
                end: 66639
              }, {
                begin: 118784,
                end: 119039
              }, {
                begin: 119808,
                end: 120831
              }, {
                begin: 1044480,
                end: 1048573
              }, {
                begin: 65024,
                end: 65039
              }, {
                begin: 917504,
                end: 917631
              }, {
                begin: 6400,
                end: 6479
              }, {
                begin: 6480,
                end: 6527
              }, {
                begin: 6528,
                end: 6623
              }, {
                begin: 6656,
                end: 6687
              }, {
                begin: 11264,
                end: 11359
              }, {
                begin: 11568,
                end: 11647
              }, {
                begin: 19904,
                end: 19967
              }, {
                begin: 43008,
                end: 43055
              }, {
                begin: 65536,
                end: 65663
              }, {
                begin: 65856,
                end: 65935
              }, {
                begin: 66432,
                end: 66463
              }, {
                begin: 66464,
                end: 66527
              }, {
                begin: 66640,
                end: 66687
              }, {
                begin: 66688,
                end: 66735
              }, {
                begin: 67584,
                end: 67647
              }, {
                begin: 68096,
                end: 68191
              }, {
                begin: 119552,
                end: 119647
              }, {
                begin: 73728,
                end: 74751
              }, {
                begin: 119648,
                end: 119679
              }, {
                begin: 7040,
                end: 7103
              }, {
                begin: 7168,
                end: 7247
              }, {
                begin: 7248,
                end: 7295
              }, {
                begin: 43136,
                end: 43231
              }, {
                begin: 43264,
                end: 43311
              }, {
                begin: 43312,
                end: 43359
              }, {
                begin: 43520,
                end: 43615
              }, {
                begin: 65936,
                end: 65999
              }, {
                begin: 66e3,
                end: 66047
              }, {
                begin: 66208,
                end: 66271
              }, {
                begin: 127024,
                end: 127135
              }];
              var ft = {
                parse: function(e4, t4) {
                  var r4 = {}, o3 = new R.Parser(e4, t4);
                  r4.version = o3.parseUShort(), r4.xAvgCharWidth = o3.parseShort(), r4.usWeightClass = o3.parseUShort(), r4.usWidthClass = o3.parseUShort(), r4.fsType = o3.parseUShort(), r4.ySubscriptXSize = o3.parseShort(), r4.ySubscriptYSize = o3.parseShort(), r4.ySubscriptXOffset = o3.parseShort(), r4.ySubscriptYOffset = o3.parseShort(), r4.ySuperscriptXSize = o3.parseShort(), r4.ySuperscriptYSize = o3.parseShort(), r4.ySuperscriptXOffset = o3.parseShort(), r4.ySuperscriptYOffset = o3.parseShort(), r4.yStrikeoutSize = o3.parseShort(), r4.yStrikeoutPosition = o3.parseShort(), r4.sFamilyClass = o3.parseShort(), r4.panose = [];
                  for (var n2 = 0; n2 < 10; n2++) r4.panose[n2] = o3.parseByte();
                  return r4.ulUnicodeRange1 = o3.parseULong(), r4.ulUnicodeRange2 = o3.parseULong(), r4.ulUnicodeRange3 = o3.parseULong(), r4.ulUnicodeRange4 = o3.parseULong(), r4.achVendID = String.fromCharCode(o3.parseByte(), o3.parseByte(), o3.parseByte(), o3.parseByte()), r4.fsSelection = o3.parseUShort(), r4.usFirstCharIndex = o3.parseUShort(), r4.usLastCharIndex = o3.parseUShort(), r4.sTypoAscender = o3.parseShort(), r4.sTypoDescender = o3.parseShort(), r4.sTypoLineGap = o3.parseShort(), r4.usWinAscent = o3.parseUShort(), r4.usWinDescent = o3.parseUShort(), 1 <= r4.version && (r4.ulCodePageRange1 = o3.parseULong(), r4.ulCodePageRange2 = o3.parseULong()), 2 <= r4.version && (r4.sxHeight = o3.parseShort(), r4.sCapHeight = o3.parseShort(), r4.usDefaultChar = o3.parseUShort(), r4.usBreakChar = o3.parseUShort(), r4.usMaxContent = o3.parseUShort()), r4;
                },
                make: function(e4) {
                  return new S.Table("OS/2", [{
                    name: "version",
                    type: "USHORT",
                    value: 3
                  }, {
                    name: "xAvgCharWidth",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "usWeightClass",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "usWidthClass",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "fsType",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "ySubscriptXSize",
                    type: "SHORT",
                    value: 650
                  }, {
                    name: "ySubscriptYSize",
                    type: "SHORT",
                    value: 699
                  }, {
                    name: "ySubscriptXOffset",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "ySubscriptYOffset",
                    type: "SHORT",
                    value: 140
                  }, {
                    name: "ySuperscriptXSize",
                    type: "SHORT",
                    value: 650
                  }, {
                    name: "ySuperscriptYSize",
                    type: "SHORT",
                    value: 699
                  }, {
                    name: "ySuperscriptXOffset",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "ySuperscriptYOffset",
                    type: "SHORT",
                    value: 479
                  }, {
                    name: "yStrikeoutSize",
                    type: "SHORT",
                    value: 49
                  }, {
                    name: "yStrikeoutPosition",
                    type: "SHORT",
                    value: 258
                  }, {
                    name: "sFamilyClass",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "bFamilyType",
                    type: "BYTE",
                    value: 0
                  }, {
                    name: "bSerifStyle",
                    type: "BYTE",
                    value: 0
                  }, {
                    name: "bWeight",
                    type: "BYTE",
                    value: 0
                  }, {
                    name: "bProportion",
                    type: "BYTE",
                    value: 0
                  }, {
                    name: "bContrast",
                    type: "BYTE",
                    value: 0
                  }, {
                    name: "bStrokeVariation",
                    type: "BYTE",
                    value: 0
                  }, {
                    name: "bArmStyle",
                    type: "BYTE",
                    value: 0
                  }, {
                    name: "bLetterform",
                    type: "BYTE",
                    value: 0
                  }, {
                    name: "bMidline",
                    type: "BYTE",
                    value: 0
                  }, {
                    name: "bXHeight",
                    type: "BYTE",
                    value: 0
                  }, {
                    name: "ulUnicodeRange1",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "ulUnicodeRange2",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "ulUnicodeRange3",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "ulUnicodeRange4",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "achVendID",
                    type: "CHARARRAY",
                    value: "XXXX"
                  }, {
                    name: "fsSelection",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "usFirstCharIndex",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "usLastCharIndex",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "sTypoAscender",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "sTypoDescender",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "sTypoLineGap",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "usWinAscent",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "usWinDescent",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "ulCodePageRange1",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "ulCodePageRange2",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "sxHeight",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "sCapHeight",
                    type: "SHORT",
                    value: 0
                  }, {
                    name: "usDefaultChar",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "usBreakChar",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "usMaxContext",
                    type: "USHORT",
                    value: 0
                  }], e4);
                },
                unicodeRanges: ht,
                getUnicodeRange: function(e4) {
                  for (var t4 = 0; t4 < ht.length; t4 += 1) {
                    var r4 = ht[t4];
                    if (e4 >= r4.begin && e4 < r4.end) return t4;
                  }
                  return -1;
                }
              };
              var pt = {
                parse: function(e4, t4) {
                  var r4 = {}, o3 = new R.Parser(e4, t4);
                  switch (r4.version = o3.parseVersion(), r4.italicAngle = o3.parseFixed(), r4.underlinePosition = o3.parseShort(), r4.underlineThickness = o3.parseShort(), r4.isFixedPitch = o3.parseULong(), r4.minMemType42 = o3.parseULong(), r4.maxMemType42 = o3.parseULong(), r4.minMemType1 = o3.parseULong(), r4.maxMemType1 = o3.parseULong(), r4.version) {
                    case 1:
                      r4.names = c.slice();
                      break;
                    case 2:
                      r4.numberOfGlyphs = o3.parseUShort(), r4.glyphNameIndex = new Array(r4.numberOfGlyphs);
                      for (var n2 = 0; n2 < r4.numberOfGlyphs; n2++) r4.glyphNameIndex[n2] = o3.parseUShort();
                      r4.names = [];
                      for (var s3, i2 = 0; i2 < r4.numberOfGlyphs; i2++) r4.glyphNameIndex[i2] >= c.length && (s3 = o3.parseChar(), r4.names.push(o3.parseString(s3)));
                      break;
                    case 2.5:
                      r4.numberOfGlyphs = o3.parseUShort(), r4.offset = new Array(r4.numberOfGlyphs);
                      for (var a2 = 0; a2 < r4.numberOfGlyphs; a2++) r4.offset[a2] = o3.parseChar();
                  }
                  return r4;
                },
                make: function() {
                  return new S.Table("post", [{
                    name: "version",
                    type: "FIXED",
                    value: 196608
                  }, {
                    name: "italicAngle",
                    type: "FIXED",
                    value: 0
                  }, {
                    name: "underlinePosition",
                    type: "FWORD",
                    value: 0
                  }, {
                    name: "underlineThickness",
                    type: "FWORD",
                    value: 0
                  }, {
                    name: "isFixedPitch",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "minMemType42",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "maxMemType42",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "minMemType1",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "maxMemType1",
                    type: "ULONG",
                    value: 0
                  }]);
                }
              }, o2 = new Array(9), s2 = (o2[1] = function() {
                var e4 = this.offset + this.relativeOffset, t4 = this.parseUShort();
                return 1 === t4 ? {
                  substFormat: 1,
                  coverage: this.parsePointer(u2.coverage),
                  deltaGlyphId: this.parseUShort()
                } : 2 === t4 ? {
                  substFormat: 2,
                  coverage: this.parsePointer(u2.coverage),
                  substitute: this.parseOffset16List()
                } : void L.assert(false, "0x" + e4.toString(16) + ": lookup type 1 format must be 1 or 2.");
              }, o2[2] = function() {
                var e4 = this.parseUShort();
                return L.argument(1 === e4, "GSUB Multiple Substitution Subtable identifier-format must be 1"), {
                  substFormat: e4,
                  coverage: this.parsePointer(u2.coverage),
                  sequences: this.parseListOfLists()
                };
              }, o2[3] = function() {
                var e4 = this.parseUShort();
                return L.argument(1 === e4, "GSUB Alternate Substitution Subtable identifier-format must be 1"), {
                  substFormat: e4,
                  coverage: this.parsePointer(u2.coverage),
                  alternateSets: this.parseListOfLists()
                };
              }, o2[4] = function() {
                var e4 = this.parseUShort();
                return L.argument(1 === e4, "GSUB ligature table identifier-format must be 1"), {
                  substFormat: e4,
                  coverage: this.parsePointer(u2.coverage),
                  ligatureSets: this.parseListOfLists(function() {
                    return {
                      ligGlyph: this.parseUShort(),
                      components: this.parseUShortList(this.parseUShort() - 1)
                    };
                  })
                };
              }, {
                sequenceIndex: u2.uShort,
                lookupListIndex: u2.uShort
              });
              o2[5] = function() {
                var e4, t4, r4 = this.offset + this.relativeOffset, o3 = this.parseUShort();
                return 1 === o3 ? {
                  substFormat: o3,
                  coverage: this.parsePointer(u2.coverage),
                  ruleSets: this.parseListOfLists(function() {
                    var e5 = this.parseUShort(), t5 = this.parseUShort();
                    return {
                      input: this.parseUShortList(e5 - 1),
                      lookupRecords: this.parseRecordList(t5, s2)
                    };
                  })
                } : 2 === o3 ? {
                  substFormat: o3,
                  coverage: this.parsePointer(u2.coverage),
                  classDef: this.parsePointer(u2.classDef),
                  classSets: this.parseListOfLists(function() {
                    var e5 = this.parseUShort(), t5 = this.parseUShort();
                    return {
                      classes: this.parseUShortList(e5 - 1),
                      lookupRecords: this.parseRecordList(t5, s2)
                    };
                  })
                } : 3 === o3 ? (e4 = this.parseUShort(), t4 = this.parseUShort(), {
                  substFormat: o3,
                  coverages: this.parseList(e4, u2.pointer(u2.coverage)),
                  lookupRecords: this.parseRecordList(t4, s2)
                }) : void L.assert(false, "0x" + r4.toString(16) + ": lookup type 5 format must be 1, 2 or 3.");
              }, o2[6] = function() {
                var e4 = this.offset + this.relativeOffset, t4 = this.parseUShort();
                return 1 === t4 ? {
                  substFormat: 1,
                  coverage: this.parsePointer(u2.coverage),
                  chainRuleSets: this.parseListOfLists(function() {
                    return {
                      backtrack: this.parseUShortList(),
                      input: this.parseUShortList(this.parseShort() - 1),
                      lookahead: this.parseUShortList(),
                      lookupRecords: this.parseRecordList(s2)
                    };
                  })
                } : 2 === t4 ? {
                  substFormat: 2,
                  coverage: this.parsePointer(u2.coverage),
                  backtrackClassDef: this.parsePointer(u2.classDef),
                  inputClassDef: this.parsePointer(u2.classDef),
                  lookaheadClassDef: this.parsePointer(u2.classDef),
                  chainClassSet: this.parseListOfLists(function() {
                    return {
                      backtrack: this.parseUShortList(),
                      input: this.parseUShortList(this.parseShort() - 1),
                      lookahead: this.parseUShortList(),
                      lookupRecords: this.parseRecordList(s2)
                    };
                  })
                } : 3 === t4 ? {
                  substFormat: 3,
                  backtrackCoverage: this.parseList(u2.pointer(u2.coverage)),
                  inputCoverage: this.parseList(u2.pointer(u2.coverage)),
                  lookaheadCoverage: this.parseList(u2.pointer(u2.coverage)),
                  lookupRecords: this.parseRecordList(s2)
                } : void L.assert(false, "0x" + e4.toString(16) + ": lookup type 6 format must be 1, 2 or 3.");
              }, o2[7] = function() {
                var e4 = this.parseUShort(), e4 = (L.argument(1 === e4, "GSUB Extension Substitution subtable identifier-format must be 1"), this.parseUShort()), t4 = new u2(this.data, this.offset + this.parseULong());
                return {
                  substFormat: 1,
                  lookupType: e4,
                  extension: o2[e4].call(t4)
                };
              }, o2[8] = function() {
                var e4 = this.parseUShort();
                return L.argument(1 === e4, "GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"), {
                  substFormat: e4,
                  coverage: this.parsePointer(u2.coverage),
                  backtrackCoverage: this.parseList(u2.pointer(u2.coverage)),
                  lookaheadCoverage: this.parseList(u2.pointer(u2.coverage)),
                  substitutes: this.parseUShortList()
                };
              };
              var mt = new Array(9);
              mt[1] = function(e4) {
                return 1 === e4.substFormat ? new S.Table("substitutionTable", [{
                  name: "substFormat",
                  type: "USHORT",
                  value: 1
                }, {
                  name: "coverage",
                  type: "TABLE",
                  value: new S.Coverage(e4.coverage)
                }, {
                  name: "deltaGlyphID",
                  type: "USHORT",
                  value: e4.deltaGlyphId
                }]) : new S.Table("substitutionTable", [{
                  name: "substFormat",
                  type: "USHORT",
                  value: 2
                }, {
                  name: "coverage",
                  type: "TABLE",
                  value: new S.Coverage(e4.coverage)
                }].concat(S.ushortList("substitute", e4.substitute)));
              }, mt[3] = function(e4) {
                return L.assert(1 === e4.substFormat, "Lookup type 3 substFormat must be 1."), new S.Table("substitutionTable", [{
                  name: "substFormat",
                  type: "USHORT",
                  value: 1
                }, {
                  name: "coverage",
                  type: "TABLE",
                  value: new S.Coverage(e4.coverage)
                }].concat(S.tableList("altSet", e4.alternateSets, function(e5) {
                  return new S.Table("alternateSetTable", S.ushortList("alternate", e5));
                })));
              }, mt[4] = function(e4) {
                return L.assert(1 === e4.substFormat, "Lookup type 4 substFormat must be 1."), new S.Table("substitutionTable", [{
                  name: "substFormat",
                  type: "USHORT",
                  value: 1
                }, {
                  name: "coverage",
                  type: "TABLE",
                  value: new S.Coverage(e4.coverage)
                }].concat(S.tableList("ligSet", e4.ligatureSets, function(e5) {
                  return new S.Table("ligatureSetTable", S.tableList("ligature", e5, function(e6) {
                    return new S.Table("ligatureTable", [{
                      name: "ligGlyph",
                      type: "USHORT",
                      value: e6.ligGlyph
                    }].concat(S.ushortList("component", e6.components, e6.components.length + 1)));
                  }));
                })));
              };
              var yt = {
                parse: function(e4, t4) {
                  return t4 = (e4 = new u2(e4, t4 = t4 || 0)).parseVersion(1), L.argument(1 === t4 || 1.1 === t4, "Unsupported GSUB table version."), 1 === t4 ? {
                    version: t4,
                    scripts: e4.parseScriptList(),
                    features: e4.parseFeatureList(),
                    lookups: e4.parseLookupList(o2)
                  } : {
                    version: t4,
                    scripts: e4.parseScriptList(),
                    features: e4.parseFeatureList(),
                    lookups: e4.parseLookupList(o2),
                    variations: e4.parseFeatureVariationsList()
                  };
                },
                make: function(e4) {
                  return new S.Table("GSUB", [{
                    name: "version",
                    type: "ULONG",
                    value: 65536
                  }, {
                    name: "scripts",
                    type: "TABLE",
                    value: new S.ScriptList(e4.scripts)
                  }, {
                    name: "features",
                    type: "TABLE",
                    value: new S.FeatureList(e4.features)
                  }, {
                    name: "lookups",
                    type: "TABLE",
                    value: new S.LookupList(e4.lookups, mt)
                  }]);
                }
              };
              var gt = {
                parse: function(e4, t4) {
                  for (var r4 = new R.Parser(e4, t4), o3 = r4.parseULong(), n2 = (L.argument(1 === o3, "Unsupported META table version."), r4.parseULong(), r4.parseULong(), r4.parseULong()), s3 = {}, i2 = 0; i2 < n2; i2++) {
                    var a2 = r4.parseTag(), l2 = r4.parseULong(), u3 = r4.parseULong(), l2 = m.UTF8(e4, t4 + l2, u3);
                    s3[a2] = l2;
                  }
                  return s3;
                },
                make: function(e4) {
                  var t4, r4 = Object.keys(e4).length, o3 = "", n2 = 16 + 12 * r4, s3 = new S.Table("meta", [{
                    name: "version",
                    type: "ULONG",
                    value: 1
                  }, {
                    name: "flags",
                    type: "ULONG",
                    value: 0
                  }, {
                    name: "offset",
                    type: "ULONG",
                    value: n2
                  }, {
                    name: "numTags",
                    type: "ULONG",
                    value: r4
                  }]);
                  for (t4 in e4) {
                    var i2 = o3.length;
                    o3 += e4[t4], s3.fields.push({
                      name: "tag " + t4,
                      type: "TAG",
                      value: t4
                    }), s3.fields.push({
                      name: "offset " + t4,
                      type: "ULONG",
                      value: n2 + i2
                    }), s3.fields.push({
                      name: "length " + t4,
                      type: "ULONG",
                      value: e4[t4].length
                    });
                  }
                  return s3.fields.push({
                    name: "stringPool",
                    type: "CHARARRAY",
                    value: o3
                  }), s3;
                }
              };
              function vt(e4) {
                return Math.log(e4) / Math.log(2) | 0;
              }
              function bt(e4) {
                for (; e4.length % 4 != 0; ) e4.push(0);
                for (var t4 = 0, r4 = 0; r4 < e4.length; r4 += 4) t4 += (e4[r4] << 24) + (e4[r4 + 1] << 16) + (e4[r4 + 2] << 8) + e4[r4 + 3];
                return t4 %= Math.pow(2, 32);
              }
              function _t(e4, t4, r4, o3) {
                return new S.Record("Table Record", [{
                  name: "tag",
                  type: "TAG",
                  value: void 0 !== e4 ? e4 : ""
                }, {
                  name: "checkSum",
                  type: "ULONG",
                  value: void 0 !== t4 ? t4 : 0
                }, {
                  name: "offset",
                  type: "ULONG",
                  value: void 0 !== r4 ? r4 : 0
                }, {
                  name: "length",
                  type: "ULONG",
                  value: void 0 !== o3 ? o3 : 0
                }]);
              }
              function jt(e4) {
                for (var t4 = new S.Table("sfnt", [{
                  name: "version",
                  type: "TAG",
                  value: "OTTO"
                }, {
                  name: "numTables",
                  type: "USHORT",
                  value: 0
                }, {
                  name: "searchRange",
                  type: "USHORT",
                  value: 0
                }, {
                  name: "entrySelector",
                  type: "USHORT",
                  value: 0
                }, {
                  name: "rangeShift",
                  type: "USHORT",
                  value: 0
                }]), r4 = (t4.tables = e4, t4.numTables = e4.length, Math.pow(2, vt(t4.numTables))), o3 = (t4.searchRange = 16 * r4, t4.entrySelector = vt(r4), t4.rangeShift = 16 * t4.numTables - t4.searchRange, []), n2 = [], s3 = t4.sizeOf() + _t().sizeOf() * t4.numTables; s3 % 4 != 0; ) s3 += 1, n2.push({
                  name: "padding",
                  type: "BYTE",
                  value: 0
                });
                for (var i2 = 0; i2 < e4.length; i2 += 1) {
                  var a2 = e4[i2], l2 = (L.argument(4 === a2.tableName.length, "Table name" + a2.tableName + " is invalid."), a2.sizeOf()), u3 = _t(a2.tableName, bt(a2.encode()), s3, l2);
                  for (o3.push({
                    name: u3.tag + " Table Record",
                    type: "RECORD",
                    value: u3
                  }), n2.push({
                    name: a2.tableName + " table",
                    type: "RECORD",
                    value: a2
                  }), s3 += l2, L.argument(!isNaN(s3), "Something went wrong calculating the offset."); s3 % 4 != 0; ) s3 += 1, n2.push({
                    name: "padding",
                    type: "BYTE",
                    value: 0
                  });
                }
                return o3.sort(function(e5, t5) {
                  return e5.value.tag > t5.value.tag ? 1 : -1;
                }), t4.fields = t4.fields.concat(o3), t4.fields = t4.fields.concat(n2), t4;
              }
              function xt(e4, t4, r4) {
                for (var o3 = 0; o3 < t4.length; o3 += 1) {
                  var n2 = e4.charToGlyphIndex(t4[o3]);
                  if (0 < n2) return e4.glyphs.get(n2).getMetrics();
                }
                return r4;
              }
              var wt = {
                make: jt,
                fontToTable: function(e4) {
                  for (var t4, r4 = [], o3 = [], n2 = [], s3 = [], i2 = [], a2 = [], l2 = [], u3 = 0, c2 = 0, d2 = 0, h2 = 0, f2 = 0, p2 = 0; p2 < e4.glyphs.length; p2 += 1) {
                    var m2 = e4.glyphs.get(p2), y2 = 0 | m2.unicode;
                    if (isNaN(m2.advanceWidth)) throw new Error("Glyph " + m2.name + " (" + p2 + "): advanceWidth is not a number.");
                    (y2 < t4 || void 0 === t4) && 0 < y2 && (t4 = y2), u3 < y2 && (u3 = y2);
                    var y2 = ft.getUnicodeRange(y2);
                    if (y2 < 32) c2 |= 1 << y2;
                    else if (y2 < 64) d2 |= 1 << y2 - 32;
                    else if (y2 < 96) h2 |= 1 << y2 - 64;
                    else {
                      if (!(y2 < 123)) throw new Error("Unicode ranges bits > 123 are reserved for internal usage");
                      f2 |= 1 << y2 - 96;
                    }
                    ".notdef" !== m2.name && (y2 = m2.getMetrics(), r4.push(y2.xMin), o3.push(y2.yMin), n2.push(y2.xMax), s3.push(y2.yMax), a2.push(y2.leftSideBearing), l2.push(y2.rightSideBearing), i2.push(m2.advanceWidth));
                  }
                  var g2, v2 = {
                    xMin: Math.min.apply(null, r4),
                    yMin: Math.min.apply(null, o3),
                    xMax: Math.max.apply(null, n2),
                    yMax: Math.max.apply(null, s3),
                    advanceWidthMax: Math.max.apply(null, i2),
                    advanceWidthAvg: function(e5) {
                      for (var t5 = 0, r5 = 0; r5 < e5.length; r5 += 1) t5 += e5[r5];
                      return t5 / e5.length;
                    }(i2),
                    minLeftSideBearing: Math.min.apply(null, a2),
                    maxLeftSideBearing: Math.max.apply(null, a2),
                    minRightSideBearing: Math.min.apply(null, l2)
                  }, b2 = (v2.ascender = e4.ascender, v2.descender = e4.descender, Ze.make({
                    flags: 3,
                    unitsPerEm: e4.unitsPerEm,
                    xMin: v2.xMin,
                    yMin: v2.yMin,
                    xMax: v2.xMax,
                    yMax: v2.yMax,
                    lowestRecPPEM: 3,
                    createdTimestamp: e4.createdTimestamp
                  })), _2 = Ke.make({
                    ascender: v2.ascender,
                    descender: v2.descender,
                    advanceWidthMax: v2.advanceWidthMax,
                    minLeftSideBearing: v2.minLeftSideBearing,
                    minRightSideBearing: v2.minRightSideBearing,
                    xMaxExtent: v2.maxLeftSideBearing + (v2.xMax - v2.xMin),
                    numberOfHMetrics: e4.glyphs.length
                  }), j2 = $e.make(e4.glyphs.length), x2 = ft.make({
                    xAvgCharWidth: Math.round(v2.advanceWidthAvg),
                    usWeightClass: e4.tables.os2.usWeightClass,
                    usWidthClass: e4.tables.os2.usWidthClass,
                    usFirstCharIndex: t4,
                    usLastCharIndex: u3,
                    ulUnicodeRange1: c2,
                    ulUnicodeRange2: d2,
                    ulUnicodeRange3: h2,
                    ulUnicodeRange4: f2,
                    fsSelection: e4.tables.os2.fsSelection,
                    sTypoAscender: v2.ascender,
                    sTypoDescender: v2.descender,
                    sTypoLineGap: 0,
                    usWinAscent: v2.yMax,
                    usWinDescent: Math.abs(v2.yMin),
                    ulCodePageRange1: 1,
                    sxHeight: xt(e4, "xyvw", {
                      yMax: Math.round(v2.ascender / 2)
                    }).yMax,
                    sCapHeight: xt(e4, "HIKLEFJMNTZBDPRAGOQSUVWXY", v2).yMax,
                    usDefaultChar: e4.hasChar(" ") ? 32 : 0,
                    usBreakChar: e4.hasChar(" ") ? 32 : 0
                  }), w2 = Qe.make(e4.glyphs), S2 = we.make(e4.glyphs), T2 = e4.getEnglishName("fontFamily"), E2 = e4.getEnglishName("fontSubfamily"), M2 = T2 + " " + E2, k2 = (k2 = e4.getEnglishName("postScriptName")) || T2.replace(/\s/g, "") + "-" + E2, O2 = {};
                  for (g2 in e4.names) O2[g2] = e4.names[g2];
                  O2.uniqueID || (O2.uniqueID = {
                    en: e4.getEnglishName("manufacturer") + ":" + M2
                  }), O2.postScriptName || (O2.postScriptName = {
                    en: k2
                  }), O2.preferredFamily || (O2.preferredFamily = e4.names.fontFamily), O2.preferredSubfamily || (O2.preferredSubfamily = e4.names.fontSubfamily);
                  var C2 = [], A2 = dt.make(O2, C2), C2 = 0 < C2.length ? Je.make(C2) : void 0, P2 = pt.make(), M2 = Ye.make(e4.glyphs, {
                    version: e4.getEnglishName("version"),
                    fullName: M2,
                    familyName: T2,
                    weightName: E2,
                    postScriptName: k2,
                    unitsPerEm: e4.unitsPerEm,
                    fontBBox: [0, v2.yMin, v2.ascender, v2.advanceWidthMax]
                  }), T2 = e4.metas && 0 < Object.keys(e4.metas).length ? gt.make(e4.metas) : void 0, E2 = [b2, _2, j2, x2, A2, S2, P2, M2, w2];
                  C2 && E2.push(C2), e4.tables.gsub && E2.push(yt.make(e4.tables.gsub)), T2 && E2.push(T2);
                  for (var D2 = bt((k2 = jt(E2)).encode()), L2 = k2.fields, R2 = false, I2 = 0; I2 < L2.length; I2 += 1) if ("head table" === L2[I2].name) {
                    L2[I2].value.checkSumAdjustment = 2981146554 - D2, R2 = true;
                    break;
                  }
                  if (R2) return k2;
                  throw new Error("Could not find head table with checkSum to adjust.");
                },
                computeCheckSum: bt
              };
              function St(e4, t4) {
                for (var r4 = 0, o3 = e4.length - 1; r4 <= o3; ) {
                  var n2 = r4 + o3 >>> 1, s3 = e4[n2].tag;
                  if (s3 === t4) return n2;
                  s3 < t4 ? r4 = 1 + n2 : o3 = n2 - 1;
                }
                return -r4 - 1;
              }
              function Tt(e4, t4) {
                for (var r4 = 0, o3 = e4.length - 1; r4 <= o3; ) {
                  var n2 = r4 + o3 >>> 1, s3 = e4[n2];
                  if (s3 === t4) return n2;
                  s3 < t4 ? r4 = 1 + n2 : o3 = n2 - 1;
                }
                return -r4 - 1;
              }
              function Et(e4, t4) {
                for (var r4 = 0, o3 = e4.length - 1; r4 <= o3; ) {
                  var n2, s3 = r4 + o3 >>> 1, i2 = (n2 = e4[s3]).start;
                  if (i2 === t4) return n2;
                  i2 < t4 ? r4 = 1 + s3 : o3 = s3 - 1;
                }
                if (0 < r4) return t4 > (n2 = e4[r4 - 1]).end ? 0 : n2;
              }
              function Mt(e4, t4) {
                this.font = e4, this.tableName = t4;
              }
              function kt(e4) {
                Mt.call(this, e4, "gpos");
              }
              function i(e4) {
                Mt.call(this, e4, "gsub");
              }
              function Ot(e4, t4, r4) {
                for (var o3 = e4.subtables, n2 = 0; n2 < o3.length; n2++) {
                  var s3 = o3[n2];
                  if (s3.substFormat === t4) return s3;
                }
                if (r4) return o3.push(r4), r4;
              }
              function Ct(e4) {
                for (var t4 = new ArrayBuffer(e4.length), r4 = new Uint8Array(t4), o3 = 0; o3 < e4.length; ++o3) r4[o3] = e4[o3];
                return t4;
              }
              function j(e4, t4) {
                if (!e4) throw t4;
              }
              function At(e4, t4, r4, o3, n2) {
                var s3 = 0 < (t4 & o3) ? (s3 = e4.parseByte(), r4 + (s3 = 0 == (t4 & n2) ? -s3 : s3)) : 0 < (t4 & n2) ? r4 : r4 + e4.parseShort();
                return s3;
              }
              function Pt(e4, t4, r4) {
                var o3, n2 = new R.Parser(t4, r4);
                if (e4.numberOfContours = n2.parseShort(), e4._xMin = n2.parseShort(), e4._yMin = n2.parseShort(), e4._xMax = n2.parseShort(), e4._yMax = n2.parseShort(), 0 < e4.numberOfContours) {
                  for (var s3 = e4.endPointIndices = [], i2 = 0; i2 < e4.numberOfContours; i2 += 1) s3.push(n2.parseUShort());
                  e4.instructionLength = n2.parseUShort(), e4.instructions = [];
                  for (var a2 = 0; a2 < e4.instructionLength; a2 += 1) e4.instructions.push(n2.parseByte());
                  for (var l2 = s3[s3.length - 1] + 1, u3 = [], c2 = 0; c2 < l2; c2 += 1) if (o3 = n2.parseByte(), u3.push(o3), 0 < (8 & o3)) for (var d2 = n2.parseByte(), h2 = 0; h2 < d2; h2 += 1) u3.push(o3), c2 += 1;
                  if (L.argument(u3.length === l2, "Bad flags."), 0 < s3.length) {
                    var f2, p2 = [];
                    if (0 < l2) {
                      for (var m2 = 0; m2 < l2; m2 += 1) o3 = u3[m2], (f2 = {}).onCurve = !!(1 & o3), f2.lastPointOfContour = 0 <= s3.indexOf(m2), p2.push(f2);
                      for (var y2 = 0, g2 = 0; g2 < l2; g2 += 1) o3 = u3[g2], (f2 = p2[g2]).x = At(n2, o3, y2, 2, 16), y2 = f2.x;
                      for (var v2 = 0, b2 = 0; b2 < l2; b2 += 1) o3 = u3[b2], (f2 = p2[b2]).y = At(n2, o3, v2, 4, 32), v2 = f2.y;
                    }
                    e4.points = p2;
                  } else e4.points = [];
                } else if (0 === e4.numberOfContours) e4.points = [];
                else {
                  e4.isComposite = true, e4.points = [], e4.components = [];
                  for (var _2 = true; _2; ) {
                    u3 = n2.parseUShort();
                    var j2 = {
                      glyphIndex: n2.parseUShort(),
                      xScale: 1,
                      scale01: 0,
                      scale10: 0,
                      yScale: 1,
                      dx: 0,
                      dy: 0
                    };
                    0 < (1 & u3) ? 0 < (2 & u3) ? (j2.dx = n2.parseShort(), j2.dy = n2.parseShort()) : j2.matchedPoints = [n2.parseUShort(), n2.parseUShort()] : 0 < (2 & u3) ? (j2.dx = n2.parseChar(), j2.dy = n2.parseChar()) : j2.matchedPoints = [n2.parseByte(), n2.parseByte()], 0 < (8 & u3) ? j2.xScale = j2.yScale = n2.parseF2Dot14() : 0 < (64 & u3) ? (j2.xScale = n2.parseF2Dot14(), j2.yScale = n2.parseF2Dot14()) : 0 < (128 & u3) && (j2.xScale = n2.parseF2Dot14(), j2.scale01 = n2.parseF2Dot14(), j2.scale10 = n2.parseF2Dot14(), j2.yScale = n2.parseF2Dot14()), e4.components.push(j2), _2 = !!(32 & u3);
                  }
                  if (256 & u3) {
                    e4.instructionLength = n2.parseUShort(), e4.instructions = [];
                    for (var x2 = 0; x2 < e4.instructionLength; x2 += 1) e4.instructions.push(n2.parseByte());
                  }
                }
              }
              function Lt(e4, t4) {
                for (var r4 = [], o3 = 0; o3 < e4.length; o3 += 1) {
                  var n2 = e4[o3], n2 = {
                    x: t4.xScale * n2.x + t4.scale01 * n2.y + t4.dx,
                    y: t4.scale10 * n2.x + t4.yScale * n2.y + t4.dy,
                    onCurve: n2.onCurve,
                    lastPointOfContour: n2.lastPointOfContour
                  };
                  r4.push(n2);
                }
                return r4;
              }
              function Rt(e4) {
                var t4 = new h();
                if (e4) for (var r4 = function(e5) {
                  for (var t5 = [], r5 = [], o4 = 0; o4 < e5.length; o4 += 1) {
                    var n3 = e5[o4];
                    r5.push(n3), n3.lastPointOfContour && (t5.push(r5), r5 = []);
                  }
                  return L.argument(0 === r5.length, "There are still points left in the current contour."), t5;
                }(e4), o3 = 0; o3 < r4.length; ++o3) {
                  var n2, s3 = r4[o3], i2 = s3[s3.length - 1], a2 = s3[0];
                  i2.onCurve ? t4.moveTo(i2.x, i2.y) : a2.onCurve ? t4.moveTo(a2.x, a2.y) : (n2 = {
                    x: 0.5 * (i2.x + a2.x),
                    y: 0.5 * (i2.y + a2.y)
                  }, t4.moveTo(n2.x, n2.y));
                  for (var l2 = 0; l2 < s3.length; ++l2) {
                    var u3, c2 = i2, i2 = a2, a2 = s3[(l2 + 1) % s3.length];
                    i2.onCurve ? t4.lineTo(i2.x, i2.y) : (u3 = a2, c2.onCurve || (i2.x, c2.x, i2.y, c2.y), a2.onCurve || (u3 = {
                      x: 0.5 * (i2.x + a2.x),
                      y: 0.5 * (i2.y + a2.y)
                    }), t4.quadraticCurveTo(i2.x, i2.y, u3.x, u3.y));
                  }
                  t4.closePath();
                }
                return t4;
              }
              function It(e4, t4) {
                if (t4.isComposite) for (var r4 = 0; r4 < t4.components.length; r4 += 1) {
                  var o3 = t4.components[r4], n2 = e4.get(o3.glyphIndex);
                  if (n2.getPath(), n2.points) {
                    var s3 = void 0;
                    if (void 0 === o3.matchedPoints) s3 = Lt(n2.points, o3);
                    else {
                      if (o3.matchedPoints[0] > t4.points.length - 1 || o3.matchedPoints[1] > n2.points.length - 1) throw Error("Matched points out of range in " + t4.name);
                      var i2 = t4.points[o3.matchedPoints[0]], a2 = n2.points[o3.matchedPoints[1]], o3 = {
                        xScale: o3.xScale,
                        scale01: o3.scale01,
                        scale10: o3.scale10,
                        yScale: o3.yScale,
                        dx: 0,
                        dy: 0
                      }, a2 = Lt([a2], o3)[0];
                      o3.dx = i2.x - a2.x, o3.dy = i2.y - a2.y, s3 = Lt(n2.points, o3);
                    }
                    t4.points = t4.points.concat(s3);
                  }
                }
                return Rt(t4.points);
              }
              (kt.prototype = Mt.prototype = {
                searchTag: St,
                binSearch: Tt,
                getTable: function(e4) {
                  var t4 = this.font.tables[this.tableName];
                  return t4 = !t4 && e4 ? this.font.tables[this.tableName] = this.createDefaultTable() : t4;
                },
                getScriptNames: function() {
                  var e4 = this.getTable();
                  return e4 ? e4.scripts.map(function(e5) {
                    return e5.tag;
                  }) : [];
                },
                getDefaultScriptName: function() {
                  var e4 = this.getTable();
                  if (e4) {
                    for (var t4 = false, r4 = 0; r4 < e4.scripts.length; r4++) {
                      var o3 = e4.scripts[r4].tag;
                      if ("DFLT" === o3) return o3;
                      "latn" === o3 && (t4 = true);
                    }
                    return t4 ? "latn" : void 0;
                  }
                },
                getScriptTable: function(e4, t4) {
                  var r4, o3 = this.getTable(t4);
                  if (o3) return r4 = o3.scripts, 0 <= (o3 = St(o3.scripts, e4 = e4 || "DFLT")) ? r4[o3].script : t4 ? (r4.splice(-1 - o3, 0, t4 = {
                    tag: e4,
                    script: {
                      defaultLangSys: {
                        reserved: 0,
                        reqFeatureIndex: 65535,
                        featureIndexes: []
                      },
                      langSysRecords: []
                    }
                  }), t4.script) : void 0;
                },
                getLangSysTable: function(e4, t4, r4) {
                  var o3, e4 = this.getScriptTable(e4, r4);
                  if (e4) return t4 && "dflt" !== t4 && "DFLT" !== t4 ? 0 <= (o3 = St(e4.langSysRecords, t4)) ? e4.langSysRecords[o3].langSys : r4 ? (e4.langSysRecords.splice(-1 - o3, 0, r4 = {
                    tag: t4,
                    langSys: {
                      reserved: 0,
                      reqFeatureIndex: 65535,
                      featureIndexes: []
                    }
                  }), r4.langSys) : void 0 : e4.defaultLangSys;
                },
                getFeatureTable: function(e4, t4, r4, o3) {
                  e4 = this.getLangSysTable(e4, t4, o3);
                  if (e4) {
                    for (var n2, s3 = e4.featureIndexes, i2 = this.font.tables[this.tableName].features, a2 = 0; a2 < s3.length; a2++) if ((n2 = i2[s3[a2]]).tag === r4) return n2.feature;
                    if (o3) return t4 = i2.length, L.assert(0 === t4 || r4 >= i2[t4 - 1].tag, "Features must be added in alphabetical order."), i2.push(n2 = {
                      tag: r4,
                      feature: {
                        params: 0,
                        lookupListIndexes: []
                      }
                    }), s3.push(t4), n2.feature;
                  }
                },
                getLookupTables: function(e4, t4, r4, o3, n2) {
                  var e4 = this.getFeatureTable(e4, t4, r4, n2), s3 = [];
                  if (e4) {
                    for (var i2, a2 = e4.lookupListIndexes, l2 = this.font.tables[this.tableName].lookups, u3 = 0; u3 < a2.length; u3++) (i2 = l2[a2[u3]]).lookupType === o3 && s3.push(i2);
                    if (0 === s3.length && n2) return t4 = l2.length, l2.push(i2 = {
                      lookupType: o3,
                      lookupFlag: 0,
                      subtables: [],
                      markFilteringSet: void 0
                    }), a2.push(t4), [i2];
                  }
                  return s3;
                },
                getGlyphClass: function(e4, t4) {
                  switch (e4.format) {
                    case 1:
                      return e4.startGlyph <= t4 && t4 < e4.startGlyph + e4.classes.length ? e4.classes[t4 - e4.startGlyph] : 0;
                    case 2:
                      var r4 = Et(e4.ranges, t4);
                      return r4 ? r4.classId : 0;
                  }
                },
                getCoverageIndex: function(e4, t4) {
                  switch (e4.format) {
                    case 1:
                      var r4 = Tt(e4.glyphs, t4);
                      return 0 <= r4 ? r4 : -1;
                    case 2:
                      r4 = Et(e4.ranges, t4);
                      return r4 ? r4.index + t4 - r4.start : -1;
                  }
                },
                expandCoverage: function(e4) {
                  if (1 === e4.format) return e4.glyphs;
                  for (var t4 = [], r4 = e4.ranges, o3 = 0; o3 < r4.length; o3++) for (var n2 = r4[o3], s3 = n2.start, i2 = n2.end, a2 = s3; a2 <= i2; a2++) t4.push(a2);
                  return t4;
                }
              }).init = function() {
                var e4 = this.getDefaultScriptName();
                this.defaultKerningTables = this.getKerningTables(e4);
              }, kt.prototype.getKerningValue = function(e4, t4, r4) {
                for (var o3 = 0; o3 < e4.length; o3++) for (var n2 = e4[o3].subtables, s3 = 0; s3 < n2.length; s3++) {
                  var i2 = n2[s3], a2 = this.getCoverageIndex(i2.coverage, t4);
                  if (!(a2 < 0)) switch (i2.posFormat) {
                    case 1:
                      for (var l2 = i2.pairSets[a2], u3 = 0; u3 < l2.length; u3++) {
                        var c2 = l2[u3];
                        if (c2.secondGlyph === r4) return c2.value1 && c2.value1.xAdvance || 0;
                      }
                      break;
                    case 2:
                      var d2 = this.getGlyphClass(i2.classDef1, t4), h2 = this.getGlyphClass(i2.classDef2, r4), d2 = i2.classRecords[d2][h2];
                      return d2.value1 && d2.value1.xAdvance || 0;
                  }
                }
                return 0;
              }, kt.prototype.getKerningTables = function(e4, t4) {
                if (this.font.tables.gpos) return this.getLookupTables(e4, t4, "kern", 2);
              }, (i.prototype = Mt.prototype).createDefaultTable = function() {
                return {
                  version: 1,
                  scripts: [{
                    tag: "DFLT",
                    script: {
                      defaultLangSys: {
                        reserved: 0,
                        reqFeatureIndex: 65535,
                        featureIndexes: []
                      },
                      langSysRecords: []
                    }
                  }],
                  features: [],
                  lookups: []
                };
              }, i.prototype.getSingle = function(e4, t4, r4) {
                for (var o3 = [], n2 = this.getLookupTables(t4, r4, e4, 1), s3 = 0; s3 < n2.length; s3++) for (var i2 = n2[s3].subtables, a2 = 0; a2 < i2.length; a2++) {
                  var l2 = i2[a2], u3 = this.expandCoverage(l2.coverage), c2 = void 0;
                  if (1 === l2.substFormat) for (var d2 = l2.deltaGlyphId, c2 = 0; c2 < u3.length; c2++) {
                    var h2 = u3[c2];
                    o3.push({
                      sub: h2,
                      by: h2 + d2
                    });
                  }
                  else {
                    var f2 = l2.substitute;
                    for (c2 = 0; c2 < u3.length; c2++) o3.push({
                      sub: u3[c2],
                      by: f2[c2]
                    });
                  }
                }
                return o3;
              }, i.prototype.getAlternates = function(e4, t4, r4) {
                for (var o3 = [], n2 = this.getLookupTables(t4, r4, e4, 3), s3 = 0; s3 < n2.length; s3++) for (var i2 = n2[s3].subtables, a2 = 0; a2 < i2.length; a2++) for (var l2 = i2[a2], u3 = this.expandCoverage(l2.coverage), c2 = l2.alternateSets, d2 = 0; d2 < u3.length; d2++) o3.push({
                  sub: u3[d2],
                  by: c2[d2]
                });
                return o3;
              }, i.prototype.getLigatures = function(e4, t4, r4) {
                for (var o3 = [], n2 = this.getLookupTables(t4, r4, e4, 4), s3 = 0; s3 < n2.length; s3++) for (var i2 = n2[s3].subtables, a2 = 0; a2 < i2.length; a2++) for (var l2 = i2[a2], u3 = this.expandCoverage(l2.coverage), c2 = l2.ligatureSets, d2 = 0; d2 < u3.length; d2++) for (var h2 = u3[d2], f2 = c2[d2], p2 = 0; p2 < f2.length; p2++) {
                  var m2 = f2[p2];
                  o3.push({
                    sub: [h2].concat(m2.components),
                    by: m2.ligGlyph
                  });
                }
                return o3;
              }, i.prototype.addSingle = function(e4, t4, r4, o3) {
                r4 = Ot(this.getLookupTables(r4, o3, e4, 1, true)[0], 2, {
                  substFormat: 2,
                  coverage: {
                    format: 1,
                    glyphs: []
                  },
                  substitute: []
                }), L.assert(1 === r4.coverage.format, "Ligature: unable to modify coverage table format " + r4.coverage.format), o3 = t4.sub, e4 = this.binSearch(r4.coverage.glyphs, o3);
                e4 < 0 && (r4.coverage.glyphs.splice(e4 = -1 - e4, 0, o3), r4.substitute.splice(e4, 0, 0)), r4.substitute[e4] = t4.by;
              }, i.prototype.addAlternate = function(e4, t4, r4, o3) {
                r4 = Ot(this.getLookupTables(r4, o3, e4, 3, true)[0], 1, {
                  substFormat: 1,
                  coverage: {
                    format: 1,
                    glyphs: []
                  },
                  alternateSets: []
                }), L.assert(1 === r4.coverage.format, "Ligature: unable to modify coverage table format " + r4.coverage.format), o3 = t4.sub, e4 = this.binSearch(r4.coverage.glyphs, o3);
                e4 < 0 && (r4.coverage.glyphs.splice(e4 = -1 - e4, 0, o3), r4.alternateSets.splice(e4, 0, 0)), r4.alternateSets[e4] = t4.by;
              }, i.prototype.addLigature = function(e4, t4, r4, o3) {
                var r4 = this.getLookupTables(r4, o3, e4, 4, true)[0], o3 = r4.subtables[0], e4 = (o3 || (r4.subtables[0] = o3 = {
                  substFormat: 1,
                  coverage: {
                    format: 1,
                    glyphs: []
                  },
                  ligatureSets: []
                }), L.assert(1 === o3.coverage.format, "Ligature: unable to modify coverage table format " + o3.coverage.format), t4.sub[0]), n2 = t4.sub.slice(1), r4 = {
                  ligGlyph: t4.by,
                  components: n2
                }, t4 = this.binSearch(o3.coverage.glyphs, e4);
                if (0 <= t4) {
                  for (var s3 = o3.ligatureSets[t4], i2 = 0; i2 < s3.length; i2++) if (function(e5, t5) {
                    var r5 = e5.length;
                    if (r5 === t5.length) {
                      for (var o4 = 0; o4 < r5; o4++) if (e5[o4] !== t5[o4]) return;
                      return 1;
                    }
                  }(s3[i2].components, n2)) return;
                  s3.push(r4);
                } else o3.coverage.glyphs.splice(t4 = -1 - t4, 0, e4), o3.ligatureSets.splice(t4, 0, [r4]);
              }, i.prototype.getFeature = function(e4, t4, r4) {
                if (/ss\d\d/.test(e4)) return this.getSingle(e4, t4, r4);
                switch (e4) {
                  case "aalt":
                  case "salt":
                    return this.getSingle(e4, t4, r4).concat(this.getAlternates(e4, t4, r4));
                  case "dlig":
                  case "liga":
                  case "rlig":
                    return this.getLigatures(e4, t4, r4);
                }
              }, i.prototype.add = function(e4, t4, r4, o3) {
                if (/ss\d\d/.test(e4)) return this.addSingle(e4, t4, r4, o3);
                switch (e4) {
                  case "aalt":
                  case "salt":
                    return "number" == typeof t4.by ? this.addSingle(e4, t4, r4, o3) : this.addAlternate(e4, t4, r4, o3);
                  case "dlig":
                  case "liga":
                  case "rlig":
                    return this.addLigature(e4, t4, r4, o3);
                }
              };
              var Dt = {
                getPath: Rt,
                parse: function(e4, t4, r4, o3) {
                  for (var n2 = new p.GlyphSet(o3), s3 = 0; s3 < r4.length - 1; s3 += 1) {
                    var i2 = r4[s3];
                    i2 !== r4[s3 + 1] ? n2.push(s3, p.ttfGlyphLoader(o3, s3, Pt, e4, t4 + i2, It)) : n2.push(s3, p.glyphLoader(o3, s3));
                  }
                  return n2;
                }
              };
              function Ft(e4) {
                this.font = e4, this.getCommands = function(e5) {
                  return Dt.getPath(e5).commands;
                }, this._fpgmState = this._prepState = void 0, this._errorState = 0;
              }
              function Ut(e4) {
                return e4;
              }
              function Nt(e4) {
                return Math.sign(e4) * Math.round(Math.abs(e4));
              }
              function Bt(e4) {
                return Math.sign(e4) * Math.round(Math.abs(2 * e4)) / 2;
              }
              function Gt(e4) {
                return Math.sign(e4) * (Math.round(Math.abs(e4) + 0.5) - 0.5);
              }
              function Vt(e4) {
                return Math.sign(e4) * Math.ceil(Math.abs(e4));
              }
              function zt(e4) {
                return Math.sign(e4) * Math.floor(Math.abs(e4));
              }
              function Ht(e4) {
                var t4 = this.srPeriod, r4 = this.srPhase, o3 = 1;
                return e4 < 0 && (e4 = -e4, o3 = -1), e4 += this.srThreshold - r4, e4 = Math.trunc(e4 / t4) * t4, (e4 += r4) < 0 ? r4 * o3 : e4 * o3;
              }
              var x = {
                x: 1,
                y: 0,
                axis: "x",
                distance: function(e4, t4, r4, o3) {
                  return (r4 ? e4.xo : e4.x) - (o3 ? t4.xo : t4.x);
                },
                interpolate: function(e4, t4, r4, o3) {
                  var n2, s3, i2, a2, l2, u3, c2;
                  if (!o3 || o3 === this) return n2 = e4.xo - t4.xo, s3 = e4.xo - r4.xo, l2 = t4.x - t4.xo, u3 = r4.x - r4.xo, 0 === (c2 = (i2 = Math.abs(n2)) + (a2 = Math.abs(s3))) ? void (e4.x = e4.xo + (l2 + u3) / 2) : void (e4.x = e4.xo + (l2 * a2 + u3 * i2) / c2);
                  n2 = o3.distance(e4, t4, true, true), s3 = o3.distance(e4, r4, true, true), l2 = o3.distance(t4, t4, false, true), u3 = o3.distance(r4, r4, false, true), 0 === (c2 = (i2 = Math.abs(n2)) + (a2 = Math.abs(s3))) ? x.setRelative(e4, e4, (l2 + u3) / 2, o3, true) : x.setRelative(e4, e4, (l2 * a2 + u3 * i2) / c2, o3, true);
                },
                normalSlope: Number.NEGATIVE_INFINITY,
                setRelative: function(e4, t4, r4, o3, n2) {
                  var s3, i2;
                  o3 && o3 !== this ? (s3 = n2 ? t4.xo : t4.x, i2 = n2 ? t4.yo : t4.y, s3 += r4 * o3.x, i2 += r4 * o3.y, e4.x = s3 + (e4.y - i2) / o3.normalSlope) : e4.x = (n2 ? t4.xo : t4.x) + r4;
                },
                slope: 0,
                touch: function(e4) {
                  e4.xTouched = true;
                },
                touched: function(e4) {
                  return e4.xTouched;
                },
                untouch: function(e4) {
                  e4.xTouched = false;
                }
              }, T = {
                x: 0,
                y: 1,
                axis: "y",
                distance: function(e4, t4, r4, o3) {
                  return (r4 ? e4.yo : e4.y) - (o3 ? t4.yo : t4.y);
                },
                interpolate: function(e4, t4, r4, o3) {
                  var n2, s3, i2, a2, l2, u3, c2;
                  if (!o3 || o3 === this) return n2 = e4.yo - t4.yo, s3 = e4.yo - r4.yo, l2 = t4.y - t4.yo, u3 = r4.y - r4.yo, 0 === (c2 = (i2 = Math.abs(n2)) + (a2 = Math.abs(s3))) ? void (e4.y = e4.yo + (l2 + u3) / 2) : void (e4.y = e4.yo + (l2 * a2 + u3 * i2) / c2);
                  n2 = o3.distance(e4, t4, true, true), s3 = o3.distance(e4, r4, true, true), l2 = o3.distance(t4, t4, false, true), u3 = o3.distance(r4, r4, false, true), 0 === (c2 = (i2 = Math.abs(n2)) + (a2 = Math.abs(s3))) ? T.setRelative(e4, e4, (l2 + u3) / 2, o3, true) : T.setRelative(e4, e4, (l2 * a2 + u3 * i2) / c2, o3, true);
                },
                normalSlope: 0,
                setRelative: function(e4, t4, r4, o3, n2) {
                  var s3, i2;
                  o3 && o3 !== this ? (s3 = n2 ? t4.xo : t4.x, i2 = n2 ? t4.yo : t4.y, s3 += r4 * o3.x, i2 += r4 * o3.y, e4.y = i2 + o3.normalSlope * (e4.x - s3)) : e4.y = (n2 ? t4.yo : t4.y) + r4;
                },
                slope: Number.POSITIVE_INFINITY,
                touch: function(e4) {
                  e4.yTouched = true;
                },
                touched: function(e4) {
                  return e4.yTouched;
                },
                untouch: function(e4) {
                  e4.yTouched = false;
                }
              };
              function Wt(e4, t4) {
                this.x = e4, this.y = t4, this.axis = void 0, this.slope = t4 / e4, this.normalSlope = -e4 / t4, Object.freeze(this);
              }
              function qt(e4, t4) {
                var r4 = Math.sqrt(e4 * e4 + t4 * t4);
                return t4 /= r4, 1 === (e4 /= r4) && 0 === t4 ? x : 0 === e4 && 1 === t4 ? T : new Wt(e4, t4);
              }
              function E(e4, t4, r4, o3) {
                this.x = this.xo = Math.round(64 * e4) / 64, this.y = this.yo = Math.round(64 * t4) / 64, this.lastPointOfContour = r4, this.onCurve = o3, this.prevPointOnContour = void 0, this.nextPointOnContour = void 0, this.xTouched = false, this.yTouched = false, Object.preventExtensions(this);
              }
              Object.freeze(x), Object.freeze(T), Wt.prototype.distance = function(e4, t4, r4, o3) {
                return this.x * x.distance(e4, t4, r4, o3) + this.y * T.distance(e4, t4, r4, o3);
              }, Wt.prototype.interpolate = function(e4, t4, r4, o3) {
                var n2 = o3.distance(e4, t4, true, true), s3 = o3.distance(e4, r4, true, true), t4 = o3.distance(t4, t4, false, true), r4 = o3.distance(r4, r4, false, true), n2 = Math.abs(n2), s3 = Math.abs(s3), i2 = n2 + s3;
                0 === i2 ? this.setRelative(e4, e4, (t4 + r4) / 2, o3, true) : this.setRelative(e4, e4, (t4 * s3 + r4 * n2) / i2, o3, true);
              }, Wt.prototype.setRelative = function(e4, t4, r4, o3, n2) {
                var s3 = n2 ? t4.xo : t4.x, n2 = n2 ? t4.yo : t4.y, t4 = s3 + r4 * (o3 = o3 || this).x, s3 = n2 + r4 * o3.y, n2 = o3.normalSlope, r4 = this.slope, o3 = e4.x, i2 = e4.y;
                e4.x = (r4 * o3 - n2 * t4 + s3 - i2) / (r4 - n2), e4.y = r4 * (e4.x - o3) + i2;
              }, Wt.prototype.touch = function(e4) {
                e4.xTouched = true, e4.yTouched = true;
              }, E.prototype.nextTouched = function(e4) {
                for (var t4 = this.nextPointOnContour; !e4.touched(t4) && t4 !== this; ) t4 = t4.nextPointOnContour;
                return t4;
              }, E.prototype.prevTouched = function(e4) {
                for (var t4 = this.prevPointOnContour; !e4.touched(t4) && t4 !== this; ) t4 = t4.prevPointOnContour;
                return t4;
              };
              var Xt = Object.freeze(new E(0, 0)), Yt = {
                cvCutIn: 17 / 16,
                deltaBase: 9,
                deltaShift: 0.125,
                loop: 1,
                minDis: 1,
                autoFlip: true
              };
              function M(e4, t4) {
                switch (this.env = e4, this.stack = [], this.prog = t4, e4) {
                  case "glyf":
                    this.zp0 = this.zp1 = this.zp2 = 1, this.rp0 = this.rp1 = this.rp2 = 0;
                  case "prep":
                    this.fv = this.pv = this.dpv = x, this.round = Nt;
                }
              }
              function Zt(e4) {
                for (var t4 = e4.tZone = new Array(e4.gZone.length), r4 = 0; r4 < t4.length; r4++) t4[r4] = new E(0, 0);
              }
              function Kt(e4, t4) {
                var r4, o3 = e4.prog, n2 = e4.ip, s3 = 1;
                do {
                  if (88 === (r4 = o3[++n2])) s3++;
                  else if (89 === r4) s3--;
                  else if (64 === r4) n2 += o3[n2 + 1] + 1;
                  else if (65 === r4) n2 += 2 * o3[n2 + 1] + 1;
                  else if (176 <= r4 && r4 <= 183) n2 += r4 - 176 + 1;
                  else if (184 <= r4 && r4 <= 191) n2 += 2 * (r4 - 184 + 1);
                  else if (t4 && 1 === s3 && 27 === r4) break;
                } while (0 < s3);
                e4.ip = n2;
              }
              function Qt(e4, t4) {
                _.DEBUG && console.log(t4.step, "SVTCA[" + e4.axis + "]"), t4.fv = t4.pv = t4.dpv = e4;
              }
              function Jt(e4, t4) {
                _.DEBUG && console.log(t4.step, "SPVTCA[" + e4.axis + "]"), t4.pv = t4.dpv = e4;
              }
              function $t(e4, t4) {
                _.DEBUG && console.log(t4.step, "SFVTCA[" + e4.axis + "]"), t4.fv = e4;
              }
              function er(e4, t4) {
                var r4, o3 = t4.stack, n2 = o3.pop(), o3 = o3.pop(), s3 = t4.z2[n2], i2 = t4.z1[o3];
                _.DEBUG && console.log("SPVTL[" + e4 + "]", n2, o3), n2 = e4 ? (r4 = s3.y - i2.y, i2.x - s3.x) : (r4 = i2.x - s3.x, i2.y - s3.y), t4.pv = t4.dpv = qt(r4, n2);
              }
              function tr(e4, t4) {
                var r4, o3 = t4.stack, n2 = o3.pop(), o3 = o3.pop(), s3 = t4.z2[n2], i2 = t4.z1[o3];
                _.DEBUG && console.log("SFVTL[" + e4 + "]", n2, o3), n2 = e4 ? (r4 = s3.y - i2.y, i2.x - s3.x) : (r4 = i2.x - s3.x, i2.y - s3.y), t4.fv = qt(r4, n2);
              }
              function rr(e4) {
                _.DEBUG && console.log(e4.step, "POP[]"), e4.stack.pop();
              }
              function or(e4, t4) {
                var r4 = t4.stack.pop(), o3 = t4.z0[r4], n2 = t4.fv, s3 = t4.pv, i2 = (_.DEBUG && console.log(t4.step, "MDAP[" + e4 + "]", r4), s3.distance(o3, Xt));
                e4 && (i2 = t4.round(i2)), n2.setRelative(o3, Xt, i2, s3), n2.touch(o3), t4.rp0 = t4.rp1 = r4;
              }
              function nr(e4, t4) {
                var r4, o3, n2, s3 = t4.z2, i2 = s3.length - 2;
                _.DEBUG && console.log(t4.step, "IUP[" + e4.axis + "]");
                for (var a2 = 0; a2 < i2; a2++) r4 = s3[a2], e4.touched(r4) || (o3 = r4.prevTouched(e4)) !== r4 && (o3 === (n2 = r4.nextTouched(e4)) && e4.setRelative(r4, r4, e4.distance(o3, o3, false, true), e4, true), e4.interpolate(r4, o3, n2, e4));
              }
              function sr(e4, t4) {
                for (var r4 = t4.stack, o3 = e4 ? t4.rp1 : t4.rp2, n2 = (e4 ? t4.z0 : t4.z1)[o3], s3 = t4.fv, i2 = t4.pv, a2 = t4.loop, l2 = t4.z2; a2--; ) {
                  var u3 = r4.pop(), c2 = l2[u3], d2 = i2.distance(n2, n2, false, true);
                  s3.setRelative(c2, c2, d2, i2), s3.touch(c2), _.DEBUG && console.log(t4.step, (1 < t4.loop ? "loop " + (t4.loop - a2) + ": " : "") + "SHP[" + (e4 ? "rp1" : "rp2") + "]", u3);
                }
                t4.loop = 1;
              }
              function ir(e4, t4) {
                for (var r4 = t4.stack, o3 = e4 ? t4.rp1 : t4.rp2, n2 = (e4 ? t4.z0 : t4.z1)[o3], s3 = t4.fv, i2 = t4.pv, o3 = r4.pop(), a2 = t4.z2[t4.contours[o3]], l2 = a2, u3 = (_.DEBUG && console.log(t4.step, "SHC[" + e4 + "]", o3), i2.distance(n2, n2, false, true)); l2 !== n2 && s3.setRelative(l2, l2, u3, i2), (l2 = l2.nextPointOnContour) !== a2; ) ;
              }
              function ar(e4, t4) {
                var r4, o3, n2 = t4.stack, s3 = e4 ? t4.rp1 : t4.rp2, s3 = (e4 ? t4.z0 : t4.z1)[s3], i2 = t4.fv, a2 = t4.pv, n2 = n2.pop();
                switch (_.DEBUG && console.log(t4.step, "SHZ[" + e4 + "]", n2), n2) {
                  case 0:
                    r4 = t4.tZone;
                    break;
                  case 1:
                    r4 = t4.gZone;
                    break;
                  default:
                    throw new Error("Invalid zone");
                }
                for (var l2 = a2.distance(s3, s3, false, true), u3 = r4.length - 2, c2 = 0; c2 < u3; c2++) o3 = r4[c2], i2.setRelative(o3, o3, l2, a2);
              }
              function lr(e4, t4) {
                var r4 = t4.stack, o3 = r4.pop() / 64, r4 = r4.pop(), n2 = t4.z1[r4], s3 = t4.z0[t4.rp0], i2 = t4.fv, a2 = t4.pv;
                i2.setRelative(n2, s3, o3, a2), i2.touch(n2), _.DEBUG && console.log(t4.step, "MSIRP[" + e4 + "]", o3, r4), t4.rp1 = t4.rp0, t4.rp2 = r4, e4 && (t4.rp0 = r4);
              }
              function ur(e4, t4) {
                var r4 = t4.stack, o3 = r4.pop(), r4 = r4.pop(), n2 = t4.z0[r4], s3 = t4.fv, i2 = t4.pv, a2 = t4.cvt[o3], o3 = (_.DEBUG && console.log(t4.step, "MIAP[" + e4 + "]", o3, "(", a2, ")", r4), i2.distance(n2, Xt));
                e4 && (Math.abs(o3 - a2) < t4.cvCutIn && (o3 = a2), o3 = t4.round(o3)), s3.setRelative(n2, Xt, o3, i2), 0 === t4.zp0 && (n2.xo = n2.x, n2.yo = n2.y), s3.touch(n2), t4.rp0 = t4.rp1 = r4;
              }
              function cr(e4, t4) {
                var r4 = t4.stack, o3 = r4.pop(), n2 = t4.z2[o3];
                _.DEBUG && console.log(t4.step, "GC[" + e4 + "]", o3), r4.push(64 * t4.dpv.distance(n2, Xt, e4, false));
              }
              function dr(e4, t4) {
                var r4 = t4.stack, o3 = r4.pop(), r4 = r4.pop(), n2 = t4.z1[o3], s3 = t4.z0[r4], s3 = t4.dpv.distance(s3, n2, e4, e4);
                _.DEBUG && console.log(t4.step, "MD[" + e4 + "]", o3, r4, "->", s3), t4.stack.push(Math.round(64 * s3));
              }
              function hr(e4, t4) {
                var r4 = t4.stack, o3 = r4.pop(), n2 = t4.fv, s3 = t4.pv, i2 = t4.ppem, a2 = t4.deltaBase + 16 * (e4 - 1), l2 = t4.deltaShift, u3 = t4.z0;
                _.DEBUG && console.log(t4.step, "DELTAP[" + e4 + "]", o3, r4);
                for (var c2 = 0; c2 < o3; c2++) {
                  var d2 = r4.pop(), h2 = r4.pop();
                  a2 + ((240 & h2) >> 4) === i2 && (0 <= (h2 = (15 & h2) - 8) && h2++, _.DEBUG && console.log(t4.step, "DELTAPFIX", d2, "by", h2 * l2), d2 = u3[d2], n2.setRelative(d2, d2, h2 * l2, s3));
                }
              }
              function fr(e4, t4) {
                var r4 = t4.stack, o3 = r4.pop();
                _.DEBUG && console.log(t4.step, "ROUND[]"), r4.push(64 * t4.round(o3 / 64));
              }
              function pr(e4, t4) {
                var r4 = t4.stack, o3 = r4.pop(), n2 = t4.ppem, s3 = t4.deltaBase + 16 * (e4 - 1), i2 = t4.deltaShift;
                _.DEBUG && console.log(t4.step, "DELTAC[" + e4 + "]", o3, r4);
                for (var a2 = 0; a2 < o3; a2++) {
                  var l2 = r4.pop(), u3 = r4.pop();
                  s3 + ((240 & u3) >> 4) === n2 && (0 <= (u3 = (15 & u3) - 8) && u3++, u3 = u3 * i2, _.DEBUG && console.log(t4.step, "DELTACFIX", l2, "by", u3), t4.cvt[l2] += u3);
                }
              }
              function mr(e4, t4) {
                var r4, o3 = t4.stack, n2 = o3.pop(), o3 = o3.pop(), s3 = t4.z2[n2], i2 = t4.z1[o3];
                _.DEBUG && console.log(t4.step, "SDPVTL[" + e4 + "]", n2, o3), n2 = e4 ? (r4 = s3.y - i2.y, i2.x - s3.x) : (r4 = i2.x - s3.x, i2.y - s3.y), t4.dpv = qt(r4, n2);
              }
              function k(e4, t4) {
                var r4 = t4.stack, o3 = t4.prog, n2 = t4.ip;
                _.DEBUG && console.log(t4.step, "PUSHB[" + e4 + "]");
                for (var s3 = 0; s3 < e4; s3++) r4.push(o3[++n2]);
                t4.ip = n2;
              }
              function O(e4, t4) {
                var r4 = t4.ip, o3 = t4.prog, n2 = t4.stack;
                _.DEBUG && console.log(t4.ip, "PUSHW[" + e4 + "]");
                for (var s3 = 0; s3 < e4; s3++) {
                  var i2 = o3[++r4] << 8 | o3[++r4];
                  32768 & i2 && (i2 = -(1 + (65535 ^ i2))), n2.push(i2);
                }
                t4.ip = r4;
              }
              function C(e4, t4, r4, o3, n2, s3) {
                var i2, a2, l2 = s3.stack, u3 = e4 && l2.pop(), l2 = l2.pop(), c2 = s3.rp0, c2 = s3.z0[c2], d2 = s3.z1[l2], h2 = s3.minDis, f2 = s3.fv, p2 = s3.dpv, m2 = i2 = p2.distance(d2, c2, true, true), y2 = 0 <= m2 ? 1 : -1;
                m2 = Math.abs(m2), e4 && (a2 = s3.cvt[u3], o3 && Math.abs(m2 - a2) < s3.cvCutIn && (m2 = a2)), r4 && m2 < h2 && (m2 = h2), o3 && (m2 = s3.round(m2)), f2.setRelative(d2, c2, y2 * m2, p2), f2.touch(d2), _.DEBUG && console.log(s3.step, (e4 ? "MIRP[" : "MDRP[") + (t4 ? "M" : "m") + (r4 ? ">" : "_") + (o3 ? "R" : "_") + (0 === n2 ? "Gr" : 1 === n2 ? "Bl" : 2 === n2 ? "Wh" : "") + "]", e4 ? u3 + "(" + s3.cvt[u3] + "," + a2 + ")" : "", l2, "(d =", i2, "->", y2 * m2, ")"), s3.rp1 = s3.rp0, s3.rp2 = l2, t4 && (s3.rp0 = l2);
              }
              Ft.prototype.exec = function(e4, t4) {
                if ("number" != typeof t4) throw new Error("Point size is not a number!");
                if (!(2 < this._errorState)) {
                  var r4 = this.font, o3 = this._prepState;
                  if (!o3 || o3.ppem !== t4) {
                    var n2 = this._fpgmState;
                    if (!n2) {
                      M.prototype = Yt, (n2 = this._fpgmState = new M("fpgm", r4.tables.fpgm)).funcs = [], n2.font = r4, _.DEBUG && (console.log("---EXEC FPGM---"), n2.step = -1);
                      try {
                        vr(n2);
                      } catch (e5) {
                        return console.log("Hinting error in FPGM:" + e5), void (this._errorState = 3);
                      }
                    }
                    M.prototype = n2, (o3 = this._prepState = new M("prep", r4.tables.prep)).ppem = t4;
                    var s3 = r4.tables.cvt;
                    if (s3) for (var i2 = o3.cvt = new Array(s3.length), a2 = t4 / r4.unitsPerEm, l2 = 0; l2 < s3.length; l2++) i2[l2] = s3[l2] * a2;
                    else o3.cvt = [];
                    _.DEBUG && (console.log("---EXEC PREP---"), o3.step = -1);
                    try {
                      vr(o3);
                    } catch (e5) {
                      this._errorState < 2 && console.log("Hinting error in PREP:" + e5), this._errorState = 2;
                    }
                  }
                  if (!(1 < this._errorState)) try {
                    return yr(e4, o3);
                  } catch (e5) {
                    this._errorState < 1 && (console.log("Hinting error:" + e5), console.log("Note: further hinting errors are silenced")), this._errorState = 1;
                  }
                }
              };
              var yr = function(e4, t4) {
                var r4 = t4.ppem / t4.font.unitsPerEm, o3 = r4, n2 = e4.components;
                if (M.prototype = t4, n2) {
                  for (var s3 = t4.font, i2 = [], a2 = [], l2 = 0; l2 < n2.length; l2++) {
                    var u3 = n2[l2], c2 = s3.glyphs.get(u3.glyphIndex), d2 = new M("glyf", c2.instructions);
                    _.DEBUG && (console.log("---EXEC COMP " + l2 + "---"), d2.step = -1), gr(c2, d2, r4, o3);
                    for (var h2 = Math.round(u3.dx * r4), f2 = Math.round(u3.dy * o3), p2 = d2.gZone, m2 = d2.contours, y2 = 0; y2 < p2.length; y2++) {
                      var g2 = p2[y2];
                      g2.xTouched = g2.yTouched = false, g2.xo = g2.x = g2.x + h2, g2.yo = g2.y = g2.y + f2;
                    }
                    var v2 = i2.length;
                    i2.push.apply(i2, p2);
                    for (var b2 = 0; b2 < m2.length; b2++) a2.push(m2[b2] + v2);
                  }
                  e4.instructions && !d2.inhibitGridFit && ((d2 = new M("glyf", e4.instructions)).gZone = d2.z0 = d2.z1 = d2.z2 = i2, d2.contours = a2, i2.push(new E(0, 0), new E(Math.round(e4.advanceWidth * r4), 0)), _.DEBUG && (console.log("---EXEC COMPOSITE---"), d2.step = -1), vr(d2), i2.length -= 2);
                } else d2 = new M("glyf", e4.instructions), _.DEBUG && (console.log("---EXEC GLYPH---"), d2.step = -1), gr(e4, d2, r4, o3), i2 = d2.gZone;
                return i2;
              }, gr = function(e4, t4, r4, o3) {
                for (var n2, s3, i2, a2 = e4.points || [], l2 = a2.length, u3 = t4.gZone = t4.z0 = t4.z1 = t4.z2 = [], c2 = t4.contours = [], d2 = 0; d2 < l2; d2++) n2 = a2[d2], u3[d2] = new E(n2.x * r4, n2.y * o3, n2.lastPointOfContour, n2.onCurve);
                for (var h2 = 0; h2 < l2; h2++) n2 = u3[h2], s3 || (s3 = n2, c2.push(h2)), n2.lastPointOfContour ? ((n2.nextPointOnContour = s3).prevPointOnContour = n2, s3 = void 0) : (i2 = u3[h2 + 1], (n2.nextPointOnContour = i2).prevPointOnContour = n2);
                if (!t4.inhibitGridFit) {
                  if (_.DEBUG) {
                    console.log("PROCESSING GLYPH", t4.stack);
                    for (var f2 = 0; f2 < l2; f2++) console.log(f2, u3[f2].x, u3[f2].y);
                  }
                  if (u3.push(new E(0, 0), new E(Math.round(e4.advanceWidth * r4), 0)), vr(t4), u3.length -= 2, _.DEBUG) {
                    console.log("FINISHED GLYPH", t4.stack);
                    for (var p2 = 0; p2 < l2; p2++) console.log(p2, u3[p2].x, u3[p2].y);
                  }
                }
              }, vr = function(e4) {
                var t4 = e4.prog;
                if (t4) {
                  var r4, o3 = t4.length;
                  for (e4.ip = 0; e4.ip < o3; e4.ip++) {
                    if (_.DEBUG && e4.step++, !(r4 = br[t4[e4.ip]])) throw new Error("unknown instruction: 0x" + Number(t4[e4.ip]).toString(16));
                    r4(e4);
                  }
                }
              }, br = [Qt.bind(void 0, T), Qt.bind(void 0, x), Jt.bind(void 0, T), Jt.bind(void 0, x), $t.bind(void 0, T), $t.bind(void 0, x), er.bind(void 0, 0), er.bind(void 0, 1), tr.bind(void 0, 0), tr.bind(void 0, 1), function(e4) {
                var t4 = (r4 = e4.stack).pop(), r4 = r4.pop();
                _.DEBUG && console.log(e4.step, "SPVFS[]", t4, r4), e4.pv = e4.dpv = qt(r4, t4);
              }, function(e4) {
                var t4 = (r4 = e4.stack).pop(), r4 = r4.pop();
                _.DEBUG && console.log(e4.step, "SPVFS[]", t4, r4), e4.fv = qt(r4, t4);
              }, function(e4) {
                var t4 = e4.stack, r4 = e4.pv;
                _.DEBUG && console.log(e4.step, "GPV[]"), t4.push(16384 * r4.x), t4.push(16384 * r4.y);
              }, function(e4) {
                var t4 = e4.stack, r4 = e4.fv;
                _.DEBUG && console.log(e4.step, "GFV[]"), t4.push(16384 * r4.x), t4.push(16384 * r4.y);
              }, function(e4) {
                e4.fv = e4.pv, _.DEBUG && console.log(e4.step, "SFVTPV[]");
              }, function(e4) {
                var t4 = (s3 = e4.stack).pop(), r4 = s3.pop(), o3 = s3.pop(), n2 = s3.pop(), s3 = s3.pop(), i2 = e4.z0, a2 = e4.z1, l2 = i2[t4], i2 = i2[r4], u3 = a2[o3], a2 = a2[n2], e4 = e4.z2[s3], t4 = (_.DEBUG && console.log("ISECT[], ", t4, r4, o3, n2, s3), l2.x), r4 = l2.y, o3 = i2.x, n2 = i2.y, s3 = u3.x, l2 = u3.y, i2 = a2.x, u3 = a2.y, a2 = (t4 - o3) * (l2 - u3) - (r4 - n2) * (s3 - i2), c2 = t4 * n2 - r4 * o3, d2 = s3 * u3 - l2 * i2;
                e4.x = (c2 * (s3 - i2) - d2 * (t4 - o3)) / a2, e4.y = (c2 * (l2 - u3) - d2 * (r4 - n2)) / a2;
              }, function(e4) {
                e4.rp0 = e4.stack.pop(), _.DEBUG && console.log(e4.step, "SRP0[]", e4.rp0);
              }, function(e4) {
                e4.rp1 = e4.stack.pop(), _.DEBUG && console.log(e4.step, "SRP1[]", e4.rp1);
              }, function(e4) {
                e4.rp2 = e4.stack.pop(), _.DEBUG && console.log(e4.step, "SRP2[]", e4.rp2);
              }, function(e4) {
                var t4 = e4.stack.pop();
                switch (_.DEBUG && console.log(e4.step, "SZP0[]", t4), e4.zp0 = t4) {
                  case 0:
                    e4.tZone || Zt(e4), e4.z0 = e4.tZone;
                    break;
                  case 1:
                    e4.z0 = e4.gZone;
                    break;
                  default:
                    throw new Error("Invalid zone pointer");
                }
              }, function(e4) {
                var t4 = e4.stack.pop();
                switch (_.DEBUG && console.log(e4.step, "SZP1[]", t4), e4.zp1 = t4) {
                  case 0:
                    e4.tZone || Zt(e4), e4.z1 = e4.tZone;
                    break;
                  case 1:
                    e4.z1 = e4.gZone;
                    break;
                  default:
                    throw new Error("Invalid zone pointer");
                }
              }, function(e4) {
                var t4 = e4.stack.pop();
                switch (_.DEBUG && console.log(e4.step, "SZP2[]", t4), e4.zp2 = t4) {
                  case 0:
                    e4.tZone || Zt(e4), e4.z2 = e4.tZone;
                    break;
                  case 1:
                    e4.z2 = e4.gZone;
                    break;
                  default:
                    throw new Error("Invalid zone pointer");
                }
              }, function(e4) {
                var t4 = e4.stack.pop();
                switch (_.DEBUG && console.log(e4.step, "SZPS[]", t4), e4.zp0 = e4.zp1 = e4.zp2 = t4) {
                  case 0:
                    e4.tZone || Zt(e4), e4.z0 = e4.z1 = e4.z2 = e4.tZone;
                    break;
                  case 1:
                    e4.z0 = e4.z1 = e4.z2 = e4.gZone;
                    break;
                  default:
                    throw new Error("Invalid zone pointer");
                }
              }, function(e4) {
                e4.loop = e4.stack.pop(), _.DEBUG && console.log(e4.step, "SLOOP[]", e4.loop);
              }, function(e4) {
                _.DEBUG && console.log(e4.step, "RTG[]"), e4.round = Nt;
              }, function(e4) {
                _.DEBUG && console.log(e4.step, "RTHG[]"), e4.round = Gt;
              }, function(e4) {
                var t4 = e4.stack.pop();
                _.DEBUG && console.log(e4.step, "SMD[]", t4), e4.minDis = t4 / 64;
              }, function(e4) {
                _.DEBUG && console.log(e4.step, "ELSE[]"), Kt(e4, false);
              }, function(e4) {
                var t4 = e4.stack.pop();
                _.DEBUG && console.log(e4.step, "JMPR[]", t4), e4.ip += t4 - 1;
              }, function(e4) {
                var t4 = e4.stack.pop();
                _.DEBUG && console.log(e4.step, "SCVTCI[]", t4), e4.cvCutIn = t4 / 64;
              }, void 0, void 0, function(e4) {
                var t4 = e4.stack;
                _.DEBUG && console.log(e4.step, "DUP[]"), t4.push(t4[t4.length - 1]);
              }, rr, function(e4) {
                _.DEBUG && console.log(e4.step, "CLEAR[]"), e4.stack.length = 0;
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "SWAP[]"), t4.push(r4), t4.push(o3);
              }, function(e4) {
                var t4 = e4.stack;
                _.DEBUG && console.log(e4.step, "DEPTH[]"), t4.push(t4.length);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop();
                _.DEBUG && console.log(e4.step, "CINDEX[]", r4), t4.push(t4[t4.length - r4]);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop();
                _.DEBUG && console.log(e4.step, "MINDEX[]", r4), t4.push(t4.splice(t4.length - r4, 1)[0]);
              }, void 0, void 0, void 0, function(e4) {
                var t4 = (o3 = e4.stack).pop(), r4 = o3.pop(), o3 = (_.DEBUG && console.log(e4.step, "LOOPCALL[]", t4, r4), e4.ip), n2 = e4.prog;
                e4.prog = e4.funcs[t4];
                for (var s3 = 0; s3 < r4; s3++) vr(e4), _.DEBUG && console.log(++e4.step, s3 + 1 < r4 ? "next loopcall" : "done loopcall", s3);
                e4.ip = o3, e4.prog = n2;
              }, function(e4) {
                var t4 = e4.stack.pop(), r4 = (_.DEBUG && console.log(e4.step, "CALL[]", t4), e4.ip), o3 = e4.prog;
                e4.prog = e4.funcs[t4], vr(e4), e4.ip = r4, e4.prog = o3, _.DEBUG && console.log(++e4.step, "returning from", t4);
              }, function(e4) {
                if ("fpgm" !== e4.env) throw new Error("FDEF not allowed here");
                var t4 = e4.stack, r4 = e4.prog, o3 = e4.ip, t4 = t4.pop(), n2 = o3;
                for (_.DEBUG && console.log(e4.step, "FDEF[]", t4); 45 !== r4[++o3]; ) ;
                e4.ip = o3, e4.funcs[t4] = r4.slice(n2 + 1, o3);
              }, void 0, or.bind(void 0, 0), or.bind(void 0, 1), nr.bind(void 0, T), nr.bind(void 0, x), sr.bind(void 0, 0), sr.bind(void 0, 1), ir.bind(void 0, 0), ir.bind(void 0, 1), ar.bind(void 0, 0), ar.bind(void 0, 1), function(e4) {
                for (var t4 = e4.stack, r4 = e4.loop, o3 = e4.fv, n2 = t4.pop() / 64, s3 = e4.z2; r4--; ) {
                  var i2 = t4.pop(), a2 = s3[i2];
                  _.DEBUG && console.log(e4.step, (1 < e4.loop ? "loop " + (e4.loop - r4) + ": " : "") + "SHPIX[]", i2, n2), o3.setRelative(a2, a2, n2), o3.touch(a2);
                }
                e4.loop = 1;
              }, function(e4) {
                for (var t4 = e4.stack, r4 = e4.rp1, o3 = e4.rp2, n2 = e4.loop, s3 = e4.z0[r4], i2 = e4.z1[o3], a2 = e4.fv, l2 = e4.dpv, u3 = e4.z2; n2--; ) {
                  var c2 = t4.pop(), d2 = u3[c2];
                  _.DEBUG && console.log(e4.step, (1 < e4.loop ? "loop " + (e4.loop - n2) + ": " : "") + "IP[]", c2, r4, "<->", o3), a2.interpolate(d2, s3, i2, l2), a2.touch(d2);
                }
                e4.loop = 1;
              }, lr.bind(void 0, 0), lr.bind(void 0, 1), function(e4) {
                for (var t4 = e4.stack, r4 = e4.rp0, o3 = e4.z0[r4], n2 = e4.loop, s3 = e4.fv, i2 = e4.pv, a2 = e4.z1; n2--; ) {
                  var l2 = t4.pop(), u3 = a2[l2];
                  _.DEBUG && console.log(e4.step, (1 < e4.loop ? "loop " + (e4.loop - n2) + ": " : "") + "ALIGNRP[]", l2), s3.setRelative(u3, o3, 0, i2), s3.touch(u3);
                }
                e4.loop = 1;
              }, function(e4) {
                _.DEBUG && console.log(e4.step, "RTDG[]"), e4.round = Bt;
              }, ur.bind(void 0, 0), ur.bind(void 0, 1), function(e4) {
                var t4 = e4.prog, r4 = e4.ip, o3 = e4.stack, n2 = t4[++r4];
                _.DEBUG && console.log(e4.step, "NPUSHB[]", n2);
                for (var s3 = 0; s3 < n2; s3++) o3.push(t4[++r4]);
                e4.ip = r4;
              }, function(e4) {
                var t4 = e4.ip, r4 = e4.prog, o3 = e4.stack, n2 = r4[++t4];
                _.DEBUG && console.log(e4.step, "NPUSHW[]", n2);
                for (var s3 = 0; s3 < n2; s3++) {
                  var i2 = r4[++t4] << 8 | r4[++t4];
                  32768 & i2 && (i2 = -(1 + (65535 ^ i2))), o3.push(i2);
                }
                e4.ip = t4;
              }, function(e4) {
                var t4 = e4.stack, r4 = (r4 = e4.store) || (e4.store = []), o3 = t4.pop(), t4 = t4.pop();
                _.DEBUG && console.log(e4.step, "WS", o3, t4), r4[t4] = o3;
              }, function(e4) {
                var t4 = e4.stack, r4 = e4.store, o3 = t4.pop(), e4 = (_.DEBUG && console.log(e4.step, "RS", o3), r4 && r4[o3] || 0);
                t4.push(e4);
              }, function(e4) {
                var t4 = (r4 = e4.stack).pop(), r4 = r4.pop();
                _.DEBUG && console.log(e4.step, "WCVTP", t4, r4), e4.cvt[r4] = t4 / 64;
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop();
                _.DEBUG && console.log(e4.step, "RCVT", r4), t4.push(64 * e4.cvt[r4]);
              }, cr.bind(void 0, 0), cr.bind(void 0, 1), void 0, dr.bind(void 0, 0), dr.bind(void 0, 1), function(e4) {
                _.DEBUG && console.log(e4.step, "MPPEM[]"), e4.stack.push(e4.ppem);
              }, void 0, function(e4) {
                _.DEBUG && console.log(e4.step, "FLIPON[]"), e4.autoFlip = true;
              }, void 0, void 0, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "LT[]", r4, o3), t4.push(o3 < r4 ? 1 : 0);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "LTEQ[]", r4, o3), t4.push(o3 <= r4 ? 1 : 0);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "GT[]", r4, o3), t4.push(r4 < o3 ? 1 : 0);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "GTEQ[]", r4, o3), t4.push(r4 <= o3 ? 1 : 0);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "EQ[]", r4, o3), t4.push(r4 === o3 ? 1 : 0);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "NEQ[]", r4, o3), t4.push(r4 !== o3 ? 1 : 0);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop();
                _.DEBUG && console.log(e4.step, "ODD[]", r4), t4.push(Math.trunc(r4) % 2 ? 1 : 0);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop();
                _.DEBUG && console.log(e4.step, "EVEN[]", r4), t4.push(Math.trunc(r4) % 2 ? 0 : 1);
              }, function(e4) {
                var t4 = e4.stack.pop();
                _.DEBUG && console.log(e4.step, "IF[]", t4), t4 || (Kt(e4, true), _.DEBUG && console.log(e4.step, "EIF[]"));
              }, function(e4) {
                _.DEBUG && console.log(e4.step, "EIF[]");
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "AND[]", r4, o3), t4.push(r4 && o3 ? 1 : 0);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "OR[]", r4, o3), t4.push(r4 || o3 ? 1 : 0);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop();
                _.DEBUG && console.log(e4.step, "NOT[]", r4), t4.push(r4 ? 0 : 1);
              }, hr.bind(void 0, 1), function(e4) {
                var t4 = e4.stack.pop();
                _.DEBUG && console.log(e4.step, "SDB[]", t4), e4.deltaBase = t4;
              }, function(e4) {
                var t4 = e4.stack.pop();
                _.DEBUG && console.log(e4.step, "SDS[]", t4), e4.deltaShift = Math.pow(0.5, t4);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "ADD[]", r4, o3), t4.push(o3 + r4);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "SUB[]", r4, o3), t4.push(o3 - r4);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "DIV[]", r4, o3), t4.push(64 * o3 / r4);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "MUL[]", r4, o3), t4.push(o3 * r4 / 64);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop();
                _.DEBUG && console.log(e4.step, "ABS[]", r4), t4.push(Math.abs(r4));
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop();
                _.DEBUG && console.log(e4.step, "NEG[]", r4), t4.push(-r4);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop();
                _.DEBUG && console.log(e4.step, "FLOOR[]", r4), t4.push(64 * Math.floor(r4 / 64));
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop();
                _.DEBUG && console.log(e4.step, "CEILING[]", r4), t4.push(64 * Math.ceil(r4 / 64));
              }, fr.bind(void 0, 0), fr.bind(void 0, 1), fr.bind(void 0, 2), fr.bind(void 0, 3), void 0, void 0, void 0, void 0, function(e4) {
                var t4 = (r4 = e4.stack).pop(), r4 = r4.pop();
                _.DEBUG && console.log(e4.step, "WCVTF[]", t4, r4), e4.cvt[r4] = t4 * e4.ppem / e4.font.unitsPerEm;
              }, hr.bind(void 0, 2), hr.bind(void 0, 3), pr.bind(void 0, 1), pr.bind(void 0, 2), pr.bind(void 0, 3), function(e4) {
                var t4, r4 = e4.stack.pop();
                switch (_.DEBUG && console.log(e4.step, "SROUND[]", r4), e4.round = Ht, 192 & r4) {
                  case 0:
                    t4 = 0.5;
                    break;
                  case 64:
                    t4 = 1;
                    break;
                  case 128:
                    t4 = 2;
                    break;
                  default:
                    throw new Error("invalid SROUND value");
                }
                switch (e4.srPeriod = t4, 48 & r4) {
                  case 0:
                    e4.srPhase = 0;
                    break;
                  case 16:
                    e4.srPhase = 0.25 * t4;
                    break;
                  case 32:
                    e4.srPhase = 0.5 * t4;
                    break;
                  case 48:
                    e4.srPhase = 0.75 * t4;
                    break;
                  default:
                    throw new Error("invalid SROUND value");
                }
                e4.srThreshold = 0 === (r4 &= 15) ? 0 : (r4 / 8 - 0.5) * t4;
              }, function(e4) {
                var t4, r4 = e4.stack.pop();
                switch (_.DEBUG && console.log(e4.step, "S45ROUND[]", r4), e4.round = Ht, 192 & r4) {
                  case 0:
                    t4 = Math.sqrt(2) / 2;
                    break;
                  case 64:
                    t4 = Math.sqrt(2);
                    break;
                  case 128:
                    t4 = 2 * Math.sqrt(2);
                    break;
                  default:
                    throw new Error("invalid S45ROUND value");
                }
                switch (e4.srPeriod = t4, 48 & r4) {
                  case 0:
                    e4.srPhase = 0;
                    break;
                  case 16:
                    e4.srPhase = 0.25 * t4;
                    break;
                  case 32:
                    e4.srPhase = 0.5 * t4;
                    break;
                  case 48:
                    e4.srPhase = 0.75 * t4;
                    break;
                  default:
                    throw new Error("invalid S45ROUND value");
                }
                e4.srThreshold = 0 === (r4 &= 15) ? 0 : (r4 / 8 - 0.5) * t4;
              }, void 0, void 0, function(e4) {
                _.DEBUG && console.log(e4.step, "ROFF[]"), e4.round = Ut;
              }, void 0, function(e4) {
                _.DEBUG && console.log(e4.step, "RUTG[]"), e4.round = Vt;
              }, function(e4) {
                _.DEBUG && console.log(e4.step, "RDTG[]"), e4.round = zt;
              }, rr, rr, void 0, void 0, void 0, void 0, void 0, function(e4) {
                var t4 = e4.stack.pop();
                _.DEBUG && console.log(e4.step, "SCANCTRL[]", t4);
              }, mr.bind(void 0, 0), mr.bind(void 0, 1), function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = 0;
                _.DEBUG && console.log(e4.step, "GETINFO[]", r4), 1 & r4 && (o3 = 35), 32 & r4 && (o3 |= 4096), t4.push(o3);
              }, void 0, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop(), n2 = t4.pop();
                _.DEBUG && console.log(e4.step, "ROLL[]"), t4.push(o3), t4.push(r4), t4.push(n2);
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "MAX[]", r4, o3), t4.push(Math.max(o3, r4));
              }, function(e4) {
                var t4 = e4.stack, r4 = t4.pop(), o3 = t4.pop();
                _.DEBUG && console.log(e4.step, "MIN[]", r4, o3), t4.push(Math.min(o3, r4));
              }, function(e4) {
                var t4 = e4.stack.pop();
                _.DEBUG && console.log(e4.step, "SCANTYPE[]", t4);
              }, function(e4) {
                var t4 = e4.stack.pop(), r4 = e4.stack.pop();
                switch (_.DEBUG && console.log(e4.step, "INSTCTRL[]", t4, r4), t4) {
                  case 1:
                    return void (e4.inhibitGridFit = !!r4);
                  case 2:
                    return void (e4.ignoreCvt = !!r4);
                  default:
                    throw new Error("invalid INSTCTRL[] selector");
                }
              }, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, k.bind(void 0, 1), k.bind(void 0, 2), k.bind(void 0, 3), k.bind(void 0, 4), k.bind(void 0, 5), k.bind(void 0, 6), k.bind(void 0, 7), k.bind(void 0, 8), O.bind(void 0, 1), O.bind(void 0, 2), O.bind(void 0, 3), O.bind(void 0, 4), O.bind(void 0, 5), O.bind(void 0, 6), O.bind(void 0, 7), O.bind(void 0, 8), C.bind(void 0, 0, 0, 0, 0, 0), C.bind(void 0, 0, 0, 0, 0, 1), C.bind(void 0, 0, 0, 0, 0, 2), C.bind(void 0, 0, 0, 0, 0, 3), C.bind(void 0, 0, 0, 0, 1, 0), C.bind(void 0, 0, 0, 0, 1, 1), C.bind(void 0, 0, 0, 0, 1, 2), C.bind(void 0, 0, 0, 0, 1, 3), C.bind(void 0, 0, 0, 1, 0, 0), C.bind(void 0, 0, 0, 1, 0, 1), C.bind(void 0, 0, 0, 1, 0, 2), C.bind(void 0, 0, 0, 1, 0, 3), C.bind(void 0, 0, 0, 1, 1, 0), C.bind(void 0, 0, 0, 1, 1, 1), C.bind(void 0, 0, 0, 1, 1, 2), C.bind(void 0, 0, 0, 1, 1, 3), C.bind(void 0, 0, 1, 0, 0, 0), C.bind(void 0, 0, 1, 0, 0, 1), C.bind(void 0, 0, 1, 0, 0, 2), C.bind(void 0, 0, 1, 0, 0, 3), C.bind(void 0, 0, 1, 0, 1, 0), C.bind(void 0, 0, 1, 0, 1, 1), C.bind(void 0, 0, 1, 0, 1, 2), C.bind(void 0, 0, 1, 0, 1, 3), C.bind(void 0, 0, 1, 1, 0, 0), C.bind(void 0, 0, 1, 1, 0, 1), C.bind(void 0, 0, 1, 1, 0, 2), C.bind(void 0, 0, 1, 1, 0, 3), C.bind(void 0, 0, 1, 1, 1, 0), C.bind(void 0, 0, 1, 1, 1, 1), C.bind(void 0, 0, 1, 1, 1, 2), C.bind(void 0, 0, 1, 1, 1, 3), C.bind(void 0, 1, 0, 0, 0, 0), C.bind(void 0, 1, 0, 0, 0, 1), C.bind(void 0, 1, 0, 0, 0, 2), C.bind(void 0, 1, 0, 0, 0, 3), C.bind(void 0, 1, 0, 0, 1, 0), C.bind(void 0, 1, 0, 0, 1, 1), C.bind(void 0, 1, 0, 0, 1, 2), C.bind(void 0, 1, 0, 0, 1, 3), C.bind(void 0, 1, 0, 1, 0, 0), C.bind(void 0, 1, 0, 1, 0, 1), C.bind(void 0, 1, 0, 1, 0, 2), C.bind(void 0, 1, 0, 1, 0, 3), C.bind(void 0, 1, 0, 1, 1, 0), C.bind(void 0, 1, 0, 1, 1, 1), C.bind(void 0, 1, 0, 1, 1, 2), C.bind(void 0, 1, 0, 1, 1, 3), C.bind(void 0, 1, 1, 0, 0, 0), C.bind(void 0, 1, 1, 0, 0, 1), C.bind(void 0, 1, 1, 0, 0, 2), C.bind(void 0, 1, 1, 0, 0, 3), C.bind(void 0, 1, 1, 0, 1, 0), C.bind(void 0, 1, 1, 0, 1, 1), C.bind(void 0, 1, 1, 0, 1, 2), C.bind(void 0, 1, 1, 0, 1, 3), C.bind(void 0, 1, 1, 1, 0, 0), C.bind(void 0, 1, 1, 1, 0, 1), C.bind(void 0, 1, 1, 1, 0, 2), C.bind(void 0, 1, 1, 1, 0, 3), C.bind(void 0, 1, 1, 1, 1, 0), C.bind(void 0, 1, 1, 1, 1, 1), C.bind(void 0, 1, 1, 1, 1, 2), C.bind(void 0, 1, 1, 1, 1, 3)], _r = Array.from || function(e4) {
                return e4.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]?|[^\uD800-\uDFFF]|./g) || [];
              };
              function A(e4) {
                (e4 = e4 || {}).empty || (j(e4.familyName, "When creating a new Font object, familyName is required."), j(e4.styleName, "When creating a new Font object, styleName is required."), j(e4.unitsPerEm, "When creating a new Font object, unitsPerEm is required."), j(e4.ascender, "When creating a new Font object, ascender is required."), j(e4.descender, "When creating a new Font object, descender is required."), j(e4.descender < 0, "Descender should be negative (e.g. -512)."), this.names = {
                  fontFamily: {
                    en: e4.familyName || " "
                  },
                  fontSubfamily: {
                    en: e4.styleName || " "
                  },
                  fullName: {
                    en: e4.fullName || e4.familyName + " " + e4.styleName
                  },
                  postScriptName: {
                    en: e4.postScriptName || (e4.familyName + e4.styleName).replace(/\s/g, "")
                  },
                  designer: {
                    en: e4.designer || " "
                  },
                  designerURL: {
                    en: e4.designerURL || " "
                  },
                  manufacturer: {
                    en: e4.manufacturer || " "
                  },
                  manufacturerURL: {
                    en: e4.manufacturerURL || " "
                  },
                  license: {
                    en: e4.license || " "
                  },
                  licenseURL: {
                    en: e4.licenseURL || " "
                  },
                  version: {
                    en: e4.version || "Version 0.1"
                  },
                  description: {
                    en: e4.description || " "
                  },
                  copyright: {
                    en: e4.copyright || " "
                  },
                  trademark: {
                    en: e4.trademark || " "
                  }
                }, this.unitsPerEm = e4.unitsPerEm || 1e3, this.ascender = e4.ascender, this.descender = e4.descender, this.createdTimestamp = e4.createdTimestamp, this.tables = {
                  os2: {
                    usWeightClass: e4.weightClass || this.usWeightClasses.MEDIUM,
                    usWidthClass: e4.widthClass || this.usWidthClasses.MEDIUM,
                    fsSelection: e4.fsSelection || this.fsSelectionValues.REGULAR
                  }
                }), this.supported = true, this.glyphs = new p.GlyphSet(this, e4.glyphs || []), this.encoding = new Me(this), this.position = new kt(this), this.substitution = new i(this), this.tables = this.tables || {}, Object.defineProperty(this, "hinting", {
                  get: function() {
                    return this._hinting || ("truetype" === this.outlinesFormat ? this._hinting = new Ft(this) : void 0);
                  }
                });
              }
              function jr(e4, t4) {
                var r4, o3 = JSON.stringify(e4), n2 = 256;
                for (r4 in t4) {
                  var s3 = parseInt(r4);
                  if (s3 && !(s3 < 256)) {
                    if (JSON.stringify(t4[r4]) === o3) return s3;
                    n2 <= s3 && (n2 = s3 + 1);
                  }
                }
                return t4[n2] = e4, n2;
              }
              A.prototype.hasChar = function(e4) {
                return null !== this.encoding.charToGlyphIndex(e4);
              }, A.prototype.charToGlyphIndex = function(e4) {
                return this.encoding.charToGlyphIndex(e4);
              }, A.prototype.charToGlyph = function(e4) {
                e4 = this.charToGlyphIndex(e4);
                return this.glyphs.get(e4) || this.glyphs.get(0);
              }, A.prototype.stringToGlyphs = function(e4, t4) {
                t4 = t4 || this.defaultRenderOptions;
                for (var r4 = _r(e4), o3 = [], n2 = 0; n2 < r4.length; n2 += 1) {
                  var s3 = r4[n2];
                  o3.push(this.charToGlyphIndex(s3));
                }
                var i2 = o3.length;
                if (t4.features) {
                  var e4 = t4.script || this.substitution.getDefaultScriptName(), a2 = [];
                  t4.features.liga && (a2 = a2.concat(this.substitution.getFeature("liga", e4, t4.language))), t4.features.rlig && (a2 = a2.concat(this.substitution.getFeature("rlig", e4, t4.language)));
                  for (var l2 = 0; l2 < i2; l2 += 1) for (var u3 = 0; u3 < a2.length; u3++) {
                    for (var c2 = a2[u3], d2 = c2.sub, h2 = d2.length, f2 = 0; f2 < h2 && d2[f2] === o3[l2 + f2]; ) f2++;
                    f2 === h2 && (o3.splice(l2, h2, c2.by), i2 = i2 - h2 + 1);
                  }
                }
                for (var p2 = new Array(i2), m2 = this.glyphs.get(0), y2 = 0; y2 < i2; y2 += 1) p2[y2] = this.glyphs.get(o3[y2]) || m2;
                return p2;
              }, A.prototype.nameToGlyphIndex = function(e4) {
                return this.glyphNames.nameToGlyphIndex(e4);
              }, A.prototype.nameToGlyph = function(e4) {
                e4 = this.nameToGlyphIndex(e4);
                return this.glyphs.get(e4) || this.glyphs.get(0);
              }, A.prototype.glyphIndexToName = function(e4) {
                return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(e4) : "";
              }, A.prototype.getKerningValue = function(e4, t4) {
                e4 = e4.index || e4, t4 = t4.index || t4;
                var r4 = this.position.defaultKerningTables;
                return r4 ? this.position.getKerningValue(r4, e4, t4) : this.kerningPairs[e4 + "," + t4] || 0;
              }, A.prototype.defaultRenderOptions = {
                kerning: true,
                features: {
                  liga: true,
                  rlig: true
                }
              }, A.prototype.forEachGlyph = function(e4, t4, r4, o3, n2, s3) {
                t4 = void 0 !== t4 ? t4 : 0, r4 = void 0 !== r4 ? r4 : 0, n2 = n2 || this.defaultRenderOptions;
                var i2, a2 = 1 / this.unitsPerEm * (o3 = void 0 !== o3 ? o3 : 72), l2 = this.stringToGlyphs(e4, n2);
                n2.kerning && (e4 = n2.script || this.position.getDefaultScriptName(), i2 = this.position.getKerningTables(e4, n2.language));
                for (var u3 = 0; u3 < l2.length; u3 += 1) {
                  var c2 = l2[u3];
                  s3.call(this, c2, t4, r4, o3, n2), c2.advanceWidth && (t4 += c2.advanceWidth * a2), n2.kerning && u3 < l2.length - 1 && (t4 += (i2 ? this.position.getKerningValue(i2, c2.index, l2[u3 + 1].index) : this.getKerningValue(c2, l2[u3 + 1])) * a2), n2.letterSpacing ? t4 += n2.letterSpacing * o3 : n2.tracking && (t4 += n2.tracking / 1e3 * o3);
                }
                return t4;
              }, A.prototype.getPath = function(e4, t4, r4, o3, n2) {
                var s3 = new h();
                return this.forEachGlyph(e4, t4, r4, o3, n2, function(e5, t5, r5, o4) {
                  e5 = e5.getPath(t5, r5, o4, n2, this);
                  s3.extend(e5);
                }), s3;
              }, A.prototype.getPaths = function(e4, t4, r4, o3, n2) {
                var s3 = [];
                return this.forEachGlyph(e4, t4, r4, o3, n2, function(e5, t5, r5, o4) {
                  e5 = e5.getPath(t5, r5, o4, n2, this);
                  s3.push(e5);
                }), s3;
              }, A.prototype.getAdvanceWidth = function(e4, t4, r4) {
                return this.forEachGlyph(e4, 0, 0, t4, r4, function() {
                });
              }, A.prototype.draw = function(e4, t4, r4, o3, n2, s3) {
                this.getPath(t4, r4, o3, n2, s3).draw(e4);
              }, A.prototype.drawPoints = function(n2, e4, t4, r4, o3, s3) {
                this.forEachGlyph(e4, t4, r4, o3, s3, function(e5, t5, r5, o4) {
                  e5.drawPoints(n2, t5, r5, o4);
                });
              }, A.prototype.drawMetrics = function(n2, e4, t4, r4, o3, s3) {
                this.forEachGlyph(e4, t4, r4, o3, s3, function(e5, t5, r5, o4) {
                  e5.drawMetrics(n2, t5, r5, o4);
                });
              }, A.prototype.getEnglishName = function(e4) {
                e4 = this.names[e4];
                if (e4) return e4.en;
              }, A.prototype.validate = function() {
                var t4 = this;
                function e4(e5) {
                  e5 = t4.getEnglishName(e5);
                  e5 && e5.trim().length;
                }
                e4("fontFamily"), e4("weightName"), e4("manufacturer"), e4("copyright"), e4("version"), this.unitsPerEm;
              }, A.prototype.toTables = function() {
                return wt.fontToTable(this);
              }, A.prototype.toBuffer = function() {
                return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."), this.toArrayBuffer();
              }, A.prototype.toArrayBuffer = function() {
                for (var e4 = this.toTables().encode(), t4 = new ArrayBuffer(e4.length), r4 = new Uint8Array(t4), o3 = 0; o3 < e4.length; o3++) r4[o3] = e4[o3];
                return t4;
              }, A.prototype.download = function(t4) {
                var e4 = this.getEnglishName("fontFamily"), r4 = this.getEnglishName("fontSubfamily"), o3 = (t4 = t4 || e4.replace(/\s/g, "") + "-" + r4 + ".otf", this.toArrayBuffer());
                "undefined" != typeof window ? (window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestFileSystem(window.TEMPORARY, o3.byteLength, function(e5) {
                  e5.root.getFile(t4, {
                    create: true
                  }, function(r5) {
                    r5.createWriter(function(e6) {
                      var t5 = new DataView(o3), t5 = new Blob([t5], {
                        type: "font/opentype"
                      });
                      e6.write(t5), e6.addEventListener("writeend", function() {
                        location.href = r5.toURL();
                      }, false);
                    });
                  });
                }, function(e5) {
                  throw new Error(e5.name + ": " + e5.message);
                })) : (e4 = Pr("fs"), r4 = function(e5) {
                  for (var t5 = new Ar(e5.byteLength), r5 = new Uint8Array(e5), o4 = 0; o4 < t5.length; ++o4) t5[o4] = r5[o4];
                  return t5;
                }(o3), e4.writeFileSync(t4, r4));
              }, A.prototype.fsSelectionValues = {
                ITALIC: 1,
                UNDERSCORE: 2,
                NEGATIVE: 4,
                OUTLINED: 8,
                STRIKEOUT: 16,
                BOLD: 32,
                REGULAR: 64,
                USER_TYPO_METRICS: 128,
                WWS: 256,
                OBLIQUE: 512
              }, A.prototype.usWidthClasses = {
                ULTRA_CONDENSED: 1,
                EXTRA_CONDENSED: 2,
                CONDENSED: 3,
                SEMI_CONDENSED: 4,
                MEDIUM: 5,
                SEMI_EXPANDED: 6,
                EXPANDED: 7,
                EXTRA_EXPANDED: 8,
                ULTRA_EXPANDED: 9
              }, A.prototype.usWeightClasses = {
                THIN: 100,
                EXTRA_LIGHT: 200,
                LIGHT: 300,
                NORMAL: 400,
                MEDIUM: 500,
                SEMI_BOLD: 600,
                BOLD: 700,
                EXTRA_BOLD: 800,
                BLACK: 900
              };
              var xr = {
                make: function(e4, t4) {
                  var r4 = new S.Table("fvar", [{
                    name: "version",
                    type: "ULONG",
                    value: 65536
                  }, {
                    name: "offsetToData",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "countSizePairs",
                    type: "USHORT",
                    value: 2
                  }, {
                    name: "axisCount",
                    type: "USHORT",
                    value: e4.axes.length
                  }, {
                    name: "axisSize",
                    type: "USHORT",
                    value: 20
                  }, {
                    name: "instanceCount",
                    type: "USHORT",
                    value: e4.instances.length
                  }, {
                    name: "instanceSize",
                    type: "USHORT",
                    value: 4 + 4 * e4.axes.length
                  }]);
                  r4.offsetToData = r4.sizeOf();
                  for (var o3, n2, s3, i2 = 0; i2 < e4.axes.length; i2++) r4.fields = r4.fields.concat((o3 = i2, n2 = e4.axes[i2], s3 = t4, s3 = jr(n2.name, t4), [{
                    name: "tag_" + o3,
                    type: "TAG",
                    value: n2.tag
                  }, {
                    name: "minValue_" + o3,
                    type: "FIXED",
                    value: n2.minValue << 16
                  }, {
                    name: "defaultValue_" + o3,
                    type: "FIXED",
                    value: n2.defaultValue << 16
                  }, {
                    name: "maxValue_" + o3,
                    type: "FIXED",
                    value: n2.maxValue << 16
                  }, {
                    name: "flags_" + o3,
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "nameID_" + o3,
                    type: "USHORT",
                    value: s3
                  }]));
                  for (var a2 = 0; a2 < e4.instances.length; a2++) r4.fields = r4.fields.concat(function(e5, t5, r5, o4) {
                    for (var n3 = [{
                      name: "nameID_" + e5,
                      type: "USHORT",
                      value: jr(t5.name, o4)
                    }, {
                      name: "flags_" + e5,
                      type: "USHORT",
                      value: 0
                    }], s4 = 0; s4 < r5.length; ++s4) {
                      var i3 = r5[s4].tag;
                      n3.push({
                        name: "axis_" + e5 + " " + i3,
                        type: "FIXED",
                        value: t5.coordinates[i3] << 16
                      });
                    }
                    return n3;
                  }(a2, e4.instances[a2], e4.axes, t4));
                  return r4;
                },
                parse: function(e4, t4, r4) {
                  for (var o3, n2, s3, i2, a2 = new R.Parser(e4, t4), l2 = a2.parseULong(), u3 = (L.argument(65536 === l2, "Unsupported fvar table version."), a2.parseOffset16()), c2 = (a2.skip("uShort", 1), a2.parseUShort()), d2 = a2.parseUShort(), h2 = a2.parseUShort(), f2 = a2.parseUShort(), p2 = [], m2 = 0; m2 < c2; m2++) p2.push((o3 = e4, n2 = t4 + u3 + m2 * d2, s3 = r4, void 0, i2 = {}, o3 = new R.Parser(o3, n2), i2.tag = o3.parseTag(), i2.minValue = o3.parseFixed(), i2.defaultValue = o3.parseFixed(), i2.maxValue = o3.parseFixed(), o3.skip("uShort", 1), i2.name = s3[o3.parseUShort()] || {}, i2));
                  for (var y2 = [], g2 = t4 + u3 + c2 * d2, v2 = 0; v2 < h2; v2++) y2.push(function(e5, t5, r5, o4) {
                    var n3 = {}, s4 = new R.Parser(e5, t5);
                    n3.name = o4[s4.parseUShort()] || {}, s4.skip("uShort", 1), n3.coordinates = {};
                    for (var i3 = 0; i3 < r5.length; ++i3) n3.coordinates[r5[i3].tag] = s4.parseFixed();
                    return n3;
                  }(e4, g2 + v2 * f2, p2, r4));
                  return {
                    axes: p2,
                    instances: y2
                  };
                }
              }, P = new Array(10);
              P[1] = function() {
                var e4 = this.offset + this.relativeOffset, t4 = this.parseUShort();
                return 1 === t4 ? {
                  posFormat: 1,
                  coverage: this.parsePointer(u2.coverage),
                  value: this.parseValueRecord()
                } : 2 === t4 ? {
                  posFormat: 2,
                  coverage: this.parsePointer(u2.coverage),
                  values: this.parseValueRecordList()
                } : void L.assert(false, "0x" + e4.toString(16) + ": GPOS lookup type 1 format must be 1 or 2.");
              }, P[2] = function() {
                var e4, t4, r4, o3, n2 = this.offset + this.relativeOffset, s3 = this.parseUShort(), n2 = (L.assert(1 === s3 || 2 === s3, "0x" + n2.toString(16) + ": GPOS lookup type 2 format must be 1 or 2."), this.parsePointer(u2.coverage)), i2 = this.parseUShort(), a2 = this.parseUShort();
                return 1 === s3 ? {
                  posFormat: s3,
                  coverage: n2,
                  valueFormat1: i2,
                  valueFormat2: a2,
                  pairSets: this.parseList(u2.pointer(u2.list(function() {
                    return {
                      secondGlyph: this.parseUShort(),
                      value1: this.parseValueRecord(i2),
                      value2: this.parseValueRecord(a2)
                    };
                  })))
                } : 2 === s3 ? (e4 = this.parsePointer(u2.classDef), t4 = this.parsePointer(u2.classDef), r4 = this.parseUShort(), o3 = this.parseUShort(), {
                  posFormat: s3,
                  coverage: n2,
                  valueFormat1: i2,
                  valueFormat2: a2,
                  classDef1: e4,
                  classDef2: t4,
                  class1Count: r4,
                  class2Count: o3,
                  classRecords: this.parseList(r4, u2.list(o3, function() {
                    return {
                      value1: this.parseValueRecord(i2),
                      value2: this.parseValueRecord(a2)
                    };
                  }))
                }) : void 0;
              }, P[3] = function() {
                return {
                  error: "GPOS Lookup 3 not supported"
                };
              }, P[4] = function() {
                return {
                  error: "GPOS Lookup 4 not supported"
                };
              }, P[5] = function() {
                return {
                  error: "GPOS Lookup 5 not supported"
                };
              }, P[6] = function() {
                return {
                  error: "GPOS Lookup 6 not supported"
                };
              }, P[7] = function() {
                return {
                  error: "GPOS Lookup 7 not supported"
                };
              }, P[8] = function() {
                return {
                  error: "GPOS Lookup 8 not supported"
                };
              }, P[9] = function() {
                return {
                  error: "GPOS Lookup 9 not supported"
                };
              };
              var wr = new Array(10);
              var Sr = {
                parse: function(e4, t4) {
                  return t4 = (e4 = new u2(e4, t4 = t4 || 0)).parseVersion(1), L.argument(1 === t4 || 1.1 === t4, "Unsupported GPOS table version " + t4), 1 === t4 ? {
                    version: t4,
                    scripts: e4.parseScriptList(),
                    features: e4.parseFeatureList(),
                    lookups: e4.parseLookupList(P)
                  } : {
                    version: t4,
                    scripts: e4.parseScriptList(),
                    features: e4.parseFeatureList(),
                    lookups: e4.parseLookupList(P),
                    variations: e4.parseFeatureVariationsList()
                  };
                },
                make: function(e4) {
                  return new S.Table("GPOS", [{
                    name: "version",
                    type: "ULONG",
                    value: 65536
                  }, {
                    name: "scripts",
                    type: "TABLE",
                    value: new S.ScriptList(e4.scripts)
                  }, {
                    name: "features",
                    type: "TABLE",
                    value: new S.FeatureList(e4.features)
                  }, {
                    name: "lookups",
                    type: "TABLE",
                    value: new S.LookupList(e4.lookups, wr)
                  }]);
                }
              };
              var Tr = {
                parse: function(e4, t4) {
                  if (e4 = new R.Parser(e4, t4), 0 === (t4 = e4.parseUShort())) {
                    var r4 = e4, o3 = {}, n2 = (r4.skip("uShort"), r4.parseUShort()), s3 = (L.argument(0 === n2, "Unsupported kern sub-table version."), r4.skip("uShort", 2), r4.parseUShort());
                    r4.skip("uShort", 3);
                    for (var i2 = 0; i2 < s3; i2 += 1) {
                      var a2 = r4.parseUShort(), l2 = r4.parseUShort(), u3 = r4.parseShort();
                      o3[a2 + "," + l2] = u3;
                    }
                    return o3;
                  }
                  if (1 !== t4) throw new Error("Unsupported kern table version (" + t4 + ").");
                  var c2 = e4, d2 = {}, n2 = (c2.skip("uShort"), 1 < c2.parseULong() && console.warn("Only the first kern subtable is supported."), c2.skip("uLong"), 255 & c2.parseUShort());
                  if (c2.skip("uShort"), 0 == n2) {
                    var h2 = c2.parseUShort();
                    c2.skip("uShort", 3);
                    for (var f2 = 0; f2 < h2; f2 += 1) {
                      var p2 = c2.parseUShort(), m2 = c2.parseUShort(), y2 = c2.parseShort();
                      d2[p2 + "," + m2] = y2;
                    }
                  }
                  return d2;
                }
              };
              var Er = {
                parse: function(e4, t4, r4, o3) {
                  for (var n2 = new R.Parser(e4, t4), s3 = o3 ? n2.parseUShort : n2.parseULong, i2 = [], a2 = 0; a2 < r4 + 1; a2 += 1) {
                    var l2 = s3.call(n2);
                    o3 && (l2 *= 2), i2.push(l2);
                  }
                  return i2;
                }
              };
              function Mr(e4, r4) {
                Pr("fs").readFile(e4, function(e5, t4) {
                  if (e5) return r4(e5.message);
                  r4(null, Ct(t4));
                });
              }
              function kr(e4, t4) {
                var r4 = new XMLHttpRequest();
                r4.open("get", e4, true), r4.responseType = "arraybuffer", r4.onload = function() {
                  return r4.response ? t4(null, r4.response) : t4("Font could not be loaded: " + r4.statusText);
                }, r4.onerror = function() {
                  t4("Font could not be loaded");
                }, r4.send();
              }
              function Or(e4, t4) {
                for (var r4 = [], o3 = 12, n2 = 0; n2 < t4; n2 += 1) {
                  var s3 = R.getTag(e4, o3), i2 = R.getULong(e4, o3 + 4), a2 = R.getULong(e4, o3 + 8), l2 = R.getULong(e4, o3 + 12);
                  r4.push({
                    tag: s3,
                    checksum: i2,
                    offset: a2,
                    length: l2,
                    compression: false
                  }), o3 += 16;
                }
                return r4;
              }
              function I(e4, t4) {
                if ("WOFF" !== t4.compression) return {
                  data: e4,
                  offset: t4.offset
                };
                var e4 = new Uint8Array(e4.buffer, t4.offset + 2, t4.compressedLength - 2), r4 = new Uint8Array(t4.length);
                if (re(e4, r4), r4.byteLength !== t4.length) throw new Error("Decompression error: " + t4.tag + " decompressed length doesn't match recorded length");
                return {
                  data: new DataView(r4.buffer, 0),
                  offset: 0
                };
              }
              function Cr(e4) {
                var t4, r4, o3, n2, s3, i2, a2, l2, u3, c2, d2, h2, f2, p2, m2 = new A({
                  empty: true
                }), y2 = new DataView(e4, 0), g2 = [], e4 = R.getTag(y2, 0);
                if (e4 === String.fromCharCode(0, 1, 0, 0) || "true" === e4 || "typ1" === e4) m2.outlinesFormat = "truetype", g2 = Or(y2, o3 = R.getUShort(y2, 4));
                else if ("OTTO" === e4) m2.outlinesFormat = "cff", g2 = Or(y2, o3 = R.getUShort(y2, 4));
                else {
                  if ("wOFF" !== e4) throw new Error("Unsupported OpenType signature " + e4);
                  var v2 = R.getTag(y2, 4);
                  if (v2 === String.fromCharCode(0, 1, 0, 0)) m2.outlinesFormat = "truetype";
                  else {
                    if ("OTTO" !== v2) throw new Error("Unsupported OpenType flavor " + e4);
                    m2.outlinesFormat = "cff";
                  }
                  g2 = function(e5, t5) {
                    for (var r5 = [], o4 = 44, n3 = 0; n3 < t5; n3 += 1) {
                      var s4 = R.getTag(e5, o4), i3 = R.getULong(e5, o4 + 4), a3 = R.getULong(e5, o4 + 8), l3 = R.getULong(e5, o4 + 12), u4 = void 0, u4 = a3 < l3 && "WOFF";
                      r5.push({
                        tag: s4,
                        offset: i3,
                        compression: u4,
                        compressedLength: a3,
                        length: l3
                      }), o4 += 20;
                    }
                    return r5;
                  }(y2, o3 = R.getUShort(y2, 12));
                }
                for (var b2 = 0; b2 < o3; b2 += 1) {
                  var _2 = g2[b2], j2 = void 0;
                  switch (_2.tag) {
                    case "cmap":
                      j2 = I(y2, _2), m2.tables.cmap = we.parse(j2.data, j2.offset), m2.encoding = new ke(m2.tables.cmap);
                      break;
                    case "cvt ":
                      j2 = I(y2, _2), p2 = new R.Parser(j2.data, j2.offset), m2.tables.cvt = p2.parseShortList(_2.length / 2);
                      break;
                    case "fvar":
                      s3 = _2;
                      break;
                    case "fpgm":
                      j2 = I(y2, _2), p2 = new R.Parser(j2.data, j2.offset), m2.tables.fpgm = p2.parseByteList(_2.length);
                      break;
                    case "head":
                      j2 = I(y2, _2), m2.tables.head = Ze.parse(j2.data, j2.offset), m2.unitsPerEm = m2.tables.head.unitsPerEm, t4 = m2.tables.head.indexToLocFormat;
                      break;
                    case "hhea":
                      j2 = I(y2, _2), m2.tables.hhea = Ke.parse(j2.data, j2.offset), m2.ascender = m2.tables.hhea.ascender, m2.descender = m2.tables.hhea.descender, m2.numberOfHMetrics = m2.tables.hhea.numberOfHMetrics;
                      break;
                    case "hmtx":
                      u3 = _2;
                      break;
                    case "ltag":
                      j2 = I(y2, _2), r4 = Je.parse(j2.data, j2.offset);
                      break;
                    case "maxp":
                      j2 = I(y2, _2), m2.tables.maxp = $e.parse(j2.data, j2.offset), m2.numGlyphs = m2.tables.maxp.numGlyphs;
                      break;
                    case "name":
                      h2 = _2;
                      break;
                    case "OS/2":
                      j2 = I(y2, _2), m2.tables.os2 = ft.parse(j2.data, j2.offset);
                      break;
                    case "post":
                      j2 = I(y2, _2), m2.tables.post = pt.parse(j2.data, j2.offset), m2.glyphNames = new Ce(m2.tables.post);
                      break;
                    case "prep":
                      j2 = I(y2, _2), p2 = new R.Parser(j2.data, j2.offset), m2.tables.prep = p2.parseByteList(_2.length);
                      break;
                    case "glyf":
                      i2 = _2;
                      break;
                    case "loca":
                      d2 = _2;
                      break;
                    case "CFF ":
                      n2 = _2;
                      break;
                    case "kern":
                      c2 = _2;
                      break;
                    case "GPOS":
                      a2 = _2;
                      break;
                    case "GSUB":
                      l2 = _2;
                      break;
                    case "meta":
                      f2 = _2;
                  }
                }
                v2 = I(y2, h2);
                if (m2.tables.name = dt.parse(v2.data, v2.offset, r4), m2.names = m2.tables.name, i2 && d2) {
                  e4 = 0 === t4, v2 = I(y2, d2), v2 = Er.parse(v2.data, v2.offset, m2.numGlyphs, e4), e4 = I(y2, i2);
                  m2.glyphs = Dt.parse(e4.data, e4.offset, v2, m2);
                } else {
                  if (!n2) throw new Error("Font doesn't contain TrueType or CFF outlines.");
                  e4 = I(y2, n2);
                  Ye.parse(e4.data, e4.offset, m2);
                }
                for (var v2 = I(y2, u3), x2 = (Qe.parse(v2.data, v2.offset, m2.numberOfHMetrics, m2.numGlyphs, m2.glyphs), m2), w2 = x2.tables.cmap.glyphIndexMap, S2 = Object.keys(w2), T2 = 0; T2 < S2.length; T2 += 1) {
                  var E2, M2 = S2[T2], k2 = w2[M2];
                  (E2 = x2.glyphs.get(k2)).addUnicode(parseInt(M2));
                }
                for (var O2 = 0; O2 < x2.glyphs.length; O2 += 1) E2 = x2.glyphs.get(O2), x2.cffEncoding ? x2.isCIDFont ? E2.name = "gid" + O2 : E2.name = x2.cffEncoding.charset[O2] : x2.glyphNames.names && (E2.name = x2.glyphNames.glyphIndexToName(O2));
                return c2 ? (e4 = I(y2, c2), m2.kerningPairs = Tr.parse(e4.data, e4.offset)) : m2.kerningPairs = {}, a2 && (v2 = I(y2, a2), m2.tables.gpos = Sr.parse(v2.data, v2.offset), m2.position.init()), l2 && (e4 = I(y2, l2), m2.tables.gsub = yt.parse(e4.data, e4.offset)), s3 && (v2 = I(y2, s3), m2.tables.fvar = xr.parse(v2.data, v2.offset, m2.names)), f2 && (e4 = I(y2, f2), m2.tables.meta = gt.parse(e4.data, e4.offset), m2.metas = m2.tables.meta), m2;
              }
              _.Font = A, _.Glyph = f, _.Path = h, _.BoundingBox = a, _._parse = R, _.parse = Cr, _.load = function(e4, o3) {
                ("undefined" == typeof window ? Mr : kr)(e4, function(e5, t4) {
                  if (e5) return o3(e5);
                  var r4;
                  try {
                    r4 = Cr(t4);
                  } catch (e6) {
                    return o3(e6, null);
                  }
                  return o3(null, r4);
                });
              }, _.loadSync = function(e4) {
                return Cr(Ct(Pr("fs").readFileSync(e4)));
              }, Object.defineProperty(_, "__esModule", {
                value: true
              });
            }, "object" == typeof o && void 0 !== r2 ? t2(o) : "function" == typeof s && s.amd ? s(["exports"], t2) : t2(e2.opentype = {});
          }.call(this, Pr("buffer").Buffer);
        }, {
          buffer: 4,
          fs: 2
        }],
        258: [function(e2, t2, u2) {
          !function(n) {
            function s2(e3, t3) {
              for (var r2 = 0, o2 = e3.length - 1; 0 <= o2; o2--) {
                var n2 = e3[o2];
                "." === n2 ? e3.splice(o2, 1) : ".." === n2 ? (e3.splice(o2, 1), r2++) : r2 && (e3.splice(o2, 1), r2--);
              }
              if (t3) for (; r2--; ) e3.unshift("..");
              return e3;
            }
            function i(e3, t3) {
              if (e3.filter) return e3.filter(t3);
              for (var r2 = [], o2 = 0; o2 < e3.length; o2++) t3(e3[o2], o2, e3) && r2.push(e3[o2]);
              return r2;
            }
            u2.resolve = function() {
              for (var e3 = "", t3 = false, r2 = arguments.length - 1; -1 <= r2 && !t3; r2--) {
                var o2 = 0 <= r2 ? arguments[r2] : n.cwd();
                if ("string" != typeof o2) throw new TypeError("Arguments to path.resolve must be strings");
                o2 && (e3 = o2 + "/" + e3, t3 = "/" === o2.charAt(0));
              }
              return (t3 ? "/" : "") + (e3 = s2(i(e3.split("/"), function(e4) {
                return !!e4;
              }), !t3).join("/")) || ".";
            }, u2.normalize = function(e3) {
              var t3 = u2.isAbsolute(e3), r2 = "/" === o(e3, -1);
              return (e3 = (e3 = s2(i(e3.split("/"), function(e4) {
                return !!e4;
              }), !t3).join("/")) || t3 ? e3 : ".") && r2 && (e3 += "/"), (t3 ? "/" : "") + e3;
            }, u2.isAbsolute = function(e3) {
              return "/" === e3.charAt(0);
            }, u2.join = function() {
              var e3 = Array.prototype.slice.call(arguments, 0);
              return u2.normalize(i(e3, function(e4, t3) {
                if ("string" != typeof e4) throw new TypeError("Arguments to path.join must be strings");
                return e4;
              }).join("/"));
            }, u2.relative = function(e3, t3) {
              function r2(e4) {
                for (var t4 = 0; t4 < e4.length && "" === e4[t4]; t4++) ;
                for (var r3 = e4.length - 1; 0 <= r3 && "" === e4[r3]; r3--) ;
                return r3 < t4 ? [] : e4.slice(t4, r3 - t4 + 1);
              }
              e3 = u2.resolve(e3).substr(1), t3 = u2.resolve(t3).substr(1);
              for (var o2 = r2(e3.split("/")), n2 = r2(t3.split("/")), s3 = Math.min(o2.length, n2.length), i2 = s3, a = 0; a < s3; a++) if (o2[a] !== n2[a]) {
                i2 = a;
                break;
              }
              for (var l = [], a = i2; a < o2.length; a++) l.push("..");
              return (l = l.concat(n2.slice(i2))).join("/");
            }, u2.sep = "/", u2.delimiter = ":", u2.dirname = function(e3) {
              if ("string" != typeof e3 && (e3 += ""), 0 === e3.length) return ".";
              for (var t3 = 47 === e3.charCodeAt(0), r2 = -1, o2 = true, n2 = e3.length - 1; 1 <= n2; --n2) if (47 === e3.charCodeAt(n2)) {
                if (!o2) {
                  r2 = n2;
                  break;
                }
              } else o2 = false;
              return -1 === r2 ? t3 ? "/" : "." : t3 && 1 === r2 ? "/" : e3.slice(0, r2);
            }, u2.basename = function(e3, t3) {
              e3 = function(e4) {
                "string" != typeof e4 && (e4 += "");
                for (var t4 = 0, r2 = -1, o2 = true, n2 = e4.length - 1; 0 <= n2; --n2) if (47 === e4.charCodeAt(n2)) {
                  if (!o2) {
                    t4 = n2 + 1;
                    break;
                  }
                } else -1 === r2 && (o2 = false, r2 = n2 + 1);
                return -1 === r2 ? "" : e4.slice(t4, r2);
              }(e3);
              return e3 = t3 && e3.substr(-1 * t3.length) === t3 ? e3.substr(0, e3.length - t3.length) : e3;
            }, u2.extname = function(e3) {
              "string" != typeof e3 && (e3 += "");
              for (var t3 = -1, r2 = 0, o2 = -1, n2 = true, s3 = 0, i2 = e3.length - 1; 0 <= i2; --i2) {
                var a = e3.charCodeAt(i2);
                if (47 === a) {
                  if (n2) continue;
                  r2 = i2 + 1;
                  break;
                }
                -1 === o2 && (n2 = false, o2 = i2 + 1), 46 === a ? -1 === t3 ? t3 = i2 : 1 !== s3 && (s3 = 1) : -1 !== t3 && (s3 = -1);
              }
              return -1 === t3 || -1 === o2 || 0 === s3 || 1 === s3 && t3 === o2 - 1 && t3 === r2 + 1 ? "" : e3.slice(t3, o2);
            };
            var o = "b" === "ab".substr(-1) ? function(e3, t3, r2) {
              return e3.substr(t3, r2);
            } : function(e3, t3, r2) {
              return t3 < 0 && (t3 = e3.length + t3), e3.substr(t3, r2);
            };
          }.call(this, e2("_process"));
        }, {
          _process: 259
        }],
        259: [function(e2, t2, r2) {
          var o, n, t2 = t2.exports = {};
          function s2() {
            throw new Error("setTimeout has not been defined");
          }
          function i() {
            throw new Error("clearTimeout has not been defined");
          }
          try {
            o = "function" == typeof setTimeout ? setTimeout : s2;
          } catch (e3) {
            o = s2;
          }
          try {
            n = "function" == typeof clearTimeout ? clearTimeout : i;
          } catch (e3) {
            n = i;
          }
          function a(t3) {
            if (o === setTimeout) return setTimeout(t3, 0);
            if ((o === s2 || !o) && setTimeout) return (o = setTimeout)(t3, 0);
            try {
              return o(t3, 0);
            } catch (e3) {
              try {
                return o.call(null, t3, 0);
              } catch (e4) {
                return o.call(this, t3, 0);
              }
            }
          }
          var l, u2 = [], c = false, d = -1;
          function h() {
            c && l && (c = false, l.length ? u2 = l.concat(u2) : d = -1, u2.length && f());
          }
          function f() {
            if (!c) {
              for (var e3 = a(h), t3 = (c = true, u2.length); t3; ) {
                for (l = u2, u2 = []; ++d < t3; ) l && l[d].run();
                d = -1, t3 = u2.length;
              }
              l = null, c = false, !function(t4) {
                if (n === clearTimeout) return clearTimeout(t4);
                if ((n === i || !n) && clearTimeout) return (n = clearTimeout)(t4);
                try {
                  n(t4);
                } catch (e4) {
                  try {
                    return n.call(null, t4);
                  } catch (e5) {
                    return n.call(this, t4);
                  }
                }
              }(e3);
            }
          }
          function p(e3, t3) {
            this.fun = e3, this.array = t3;
          }
          function m() {
          }
          t2.nextTick = function(e3) {
            var t3 = new Array(arguments.length - 1);
            if (1 < arguments.length) for (var r3 = 1; r3 < arguments.length; r3++) t3[r3 - 1] = arguments[r3];
            u2.push(new p(e3, t3)), 1 !== u2.length || c || a(f);
          }, p.prototype.run = function() {
            this.fun.apply(null, this.array);
          }, t2.title = "browser", t2.browser = true, t2.env = {}, t2.argv = [], t2.version = "", t2.versions = {}, t2.on = m, t2.addListener = m, t2.once = m, t2.off = m, t2.removeListener = m, t2.removeAllListeners = m, t2.emit = m, t2.prependListener = m, t2.prependOnceListener = m, t2.listeners = function(e3) {
            return [];
          }, t2.binding = function(e3) {
            throw new Error("process.binding is not supported");
          }, t2.cwd = function() {
            return "/";
          }, t2.chdir = function(e3) {
            throw new Error("process.chdir is not supported");
          }, t2.umask = function() {
            return 0;
          };
        }, {}],
        260: [function(e2, t2, r2) {
          t2 = function(s2) {
            "use strict";
            var l, e3 = Object.prototype, u2 = e3.hasOwnProperty, t3 = "function" == typeof Symbol ? Symbol : {}, o = t3.iterator || "@@iterator", r3 = t3.asyncIterator || "@@asyncIterator", n = t3.toStringTag || "@@toStringTag";
            function i(e4, t4, r4, o2) {
              var n2, s3, i2, a2, t4 = t4 && t4.prototype instanceof y ? t4 : y, t4 = Object.create(t4.prototype), o2 = new S(o2 || []);
              return t4._invoke = (n2 = e4, s3 = r4, i2 = o2, a2 = d, function(e5, t5) {
                if (a2 === f) throw new Error("Generator is already running");
                if (a2 === p) {
                  if ("throw" === e5) throw t5;
                  return E();
                }
                for (i2.method = e5, i2.arg = t5; ; ) {
                  var r5 = i2.delegate;
                  if (r5) {
                    r5 = function e6(t6, r6) {
                      var o3 = t6.iterator[r6.method];
                      if (o3 === l) {
                        if (r6.delegate = null, "throw" === r6.method) {
                          if (t6.iterator.return && (r6.method = "return", r6.arg = l, e6(t6, r6), "throw" === r6.method)) return m;
                          r6.method = "throw", r6.arg = new TypeError("The iterator does not provide a 'throw' method");
                        }
                        return m;
                      }
                      o3 = c(o3, t6.iterator, r6.arg);
                      if ("throw" === o3.type) return r6.method = "throw", r6.arg = o3.arg, r6.delegate = null, m;
                      o3 = o3.arg;
                      if (!o3) return r6.method = "throw", r6.arg = new TypeError("iterator result is not an object"), r6.delegate = null, m;
                      {
                        if (!o3.done) return o3;
                        r6[t6.resultName] = o3.value, r6.next = t6.nextLoc, "return" !== r6.method && (r6.method = "next", r6.arg = l);
                      }
                      r6.delegate = null;
                      return m;
                    }(r5, i2);
                    if (r5) {
                      if (r5 === m) continue;
                      return r5;
                    }
                  }
                  if ("next" === i2.method) i2.sent = i2._sent = i2.arg;
                  else if ("throw" === i2.method) {
                    if (a2 === d) throw a2 = p, i2.arg;
                    i2.dispatchException(i2.arg);
                  } else "return" === i2.method && i2.abrupt("return", i2.arg);
                  a2 = f;
                  r5 = c(n2, s3, i2);
                  if ("normal" === r5.type) {
                    if (a2 = i2.done ? p : h, r5.arg !== m) return {
                      value: r5.arg,
                      done: i2.done
                    };
                  } else "throw" === r5.type && (a2 = p, i2.method = "throw", i2.arg = r5.arg);
                }
              }), t4;
            }
            function c(e4, t4, r4) {
              try {
                return {
                  type: "normal",
                  arg: e4.call(t4, r4)
                };
              } catch (e5) {
                return {
                  type: "throw",
                  arg: e5
                };
              }
            }
            s2.wrap = i;
            var d = "suspendedStart", h = "suspendedYield", f = "executing", p = "completed", m = {};
            function y() {
            }
            function a() {
            }
            function g() {
            }
            var t3 = {}, v = (t3[o] = function() {
              return this;
            }, Object.getPrototypeOf), v = v && v(v(T([]))), b = (v && v !== e3 && u2.call(v, o) && (t3 = v), g.prototype = y.prototype = Object.create(t3));
            function _(e4) {
              ["next", "throw", "return"].forEach(function(t4) {
                e4[t4] = function(e5) {
                  return this._invoke(t4, e5);
                };
              });
            }
            function j(i2) {
              var t4;
              this._invoke = function(r4, o2) {
                function e4() {
                  return new Promise(function(e5, t5) {
                    !function t6(e6, r5, o3, n2) {
                      var s3, e6 = c(i2[e6], i2, r5);
                      if ("throw" !== e6.type) return (r5 = (s3 = e6.arg).value) && "object" == typeof r5 && u2.call(r5, "__await") ? Promise.resolve(r5.__await).then(function(e7) {
                        t6("next", e7, o3, n2);
                      }, function(e7) {
                        t6("throw", e7, o3, n2);
                      }) : Promise.resolve(r5).then(function(e7) {
                        s3.value = e7, o3(s3);
                      }, function(e7) {
                        return t6("throw", e7, o3, n2);
                      });
                      n2(e6.arg);
                    }(r4, o2, e5, t5);
                  });
                }
                return t4 = t4 ? t4.then(e4, e4) : e4();
              };
            }
            function x(e4) {
              var t4 = {
                tryLoc: e4[0]
              };
              1 in e4 && (t4.catchLoc = e4[1]), 2 in e4 && (t4.finallyLoc = e4[2], t4.afterLoc = e4[3]), this.tryEntries.push(t4);
            }
            function w(e4) {
              var t4 = e4.completion || {};
              t4.type = "normal", delete t4.arg, e4.completion = t4;
            }
            function S(e4) {
              this.tryEntries = [{
                tryLoc: "root"
              }], e4.forEach(x, this), this.reset(true);
            }
            function T(t4) {
              if (t4) {
                var r4, e4 = t4[o];
                if (e4) return e4.call(t4);
                if ("function" == typeof t4.next) return t4;
                if (!isNaN(t4.length)) return r4 = -1, (e4 = function e5() {
                  for (; ++r4 < t4.length; ) if (u2.call(t4, r4)) return e5.value = t4[r4], e5.done = false, e5;
                  return e5.value = l, e5.done = true, e5;
                }).next = e4;
              }
              return {
                next: E
              };
            }
            function E() {
              return {
                value: l,
                done: true
              };
            }
            return (a.prototype = b.constructor = g).constructor = a, g[n] = a.displayName = "GeneratorFunction", s2.isGeneratorFunction = function(e4) {
              e4 = "function" == typeof e4 && e4.constructor;
              return !!e4 && (e4 === a || "GeneratorFunction" === (e4.displayName || e4.name));
            }, s2.mark = function(e4) {
              return Object.setPrototypeOf ? Object.setPrototypeOf(e4, g) : (e4.__proto__ = g, n in e4 || (e4[n] = "GeneratorFunction")), e4.prototype = Object.create(b), e4;
            }, s2.awrap = function(e4) {
              return {
                __await: e4
              };
            }, _(j.prototype), j.prototype[r3] = function() {
              return this;
            }, s2.AsyncIterator = j, s2.async = function(e4, t4, r4, o2) {
              var n2 = new j(i(e4, t4, r4, o2));
              return s2.isGeneratorFunction(t4) ? n2 : n2.next().then(function(e5) {
                return e5.done ? e5.value : n2.next();
              });
            }, _(b), b[n] = "Generator", b[o] = function() {
              return this;
            }, b.toString = function() {
              return "[object Generator]";
            }, s2.keys = function(r4) {
              var e4, o2 = [];
              for (e4 in r4) o2.push(e4);
              return o2.reverse(), function e5() {
                for (; o2.length; ) {
                  var t4 = o2.pop();
                  if (t4 in r4) return e5.value = t4, e5.done = false, e5;
                }
                return e5.done = true, e5;
              };
            }, s2.values = T, S.prototype = {
              constructor: S,
              reset: function(e4) {
                if (this.prev = 0, this.next = 0, this.sent = this._sent = l, this.done = false, this.delegate = null, this.method = "next", this.arg = l, this.tryEntries.forEach(w), !e4) for (var t4 in this) "t" === t4.charAt(0) && u2.call(this, t4) && !isNaN(+t4.slice(1)) && (this[t4] = l);
              },
              stop: function() {
                this.done = true;
                var e4 = this.tryEntries[0].completion;
                if ("throw" === e4.type) throw e4.arg;
                return this.rval;
              },
              dispatchException: function(r4) {
                if (this.done) throw r4;
                var o2 = this;
                function e4(e5, t5) {
                  return s3.type = "throw", s3.arg = r4, o2.next = e5, t5 && (o2.method = "next", o2.arg = l), !!t5;
                }
                for (var t4 = this.tryEntries.length - 1; 0 <= t4; --t4) {
                  var n2 = this.tryEntries[t4], s3 = n2.completion;
                  if ("root" === n2.tryLoc) return e4("end");
                  if (n2.tryLoc <= this.prev) {
                    var i2 = u2.call(n2, "catchLoc"), a2 = u2.call(n2, "finallyLoc");
                    if (i2 && a2) {
                      if (this.prev < n2.catchLoc) return e4(n2.catchLoc, true);
                      if (this.prev < n2.finallyLoc) return e4(n2.finallyLoc);
                    } else if (i2) {
                      if (this.prev < n2.catchLoc) return e4(n2.catchLoc, true);
                    } else {
                      if (!a2) throw new Error("try statement without catch or finally");
                      if (this.prev < n2.finallyLoc) return e4(n2.finallyLoc);
                    }
                  }
                }
              },
              abrupt: function(e4, t4) {
                for (var r4 = this.tryEntries.length - 1; 0 <= r4; --r4) {
                  var o2 = this.tryEntries[r4];
                  if (o2.tryLoc <= this.prev && u2.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
                    var n2 = o2;
                    break;
                  }
                }
                var s3 = (n2 = n2 && ("break" === e4 || "continue" === e4) && n2.tryLoc <= t4 && t4 <= n2.finallyLoc ? null : n2) ? n2.completion : {};
                return s3.type = e4, s3.arg = t4, n2 ? (this.method = "next", this.next = n2.finallyLoc, m) : this.complete(s3);
              },
              complete: function(e4, t4) {
                if ("throw" === e4.type) throw e4.arg;
                return "break" === e4.type || "continue" === e4.type ? this.next = e4.arg : "return" === e4.type ? (this.rval = this.arg = e4.arg, this.method = "return", this.next = "end") : "normal" === e4.type && t4 && (this.next = t4), m;
              },
              finish: function(e4) {
                for (var t4 = this.tryEntries.length - 1; 0 <= t4; --t4) {
                  var r4 = this.tryEntries[t4];
                  if (r4.finallyLoc === e4) return this.complete(r4.completion, r4.afterLoc), w(r4), m;
                }
              },
              catch: function(e4) {
                for (var t4 = this.tryEntries.length - 1; 0 <= t4; --t4) {
                  var r4, o2, n2 = this.tryEntries[t4];
                  if (n2.tryLoc === e4) return "throw" === (r4 = n2.completion).type && (o2 = r4.arg, w(n2)), o2;
                }
                throw new Error("illegal catch attempt");
              },
              delegateYield: function(e4, t4, r4) {
                return this.delegate = {
                  iterator: T(e4),
                  resultName: t4,
                  nextLoc: r4
                }, "next" === this.method && (this.arg = l), m;
              }
            }, s2;
          }("object" == typeof t2 ? t2.exports : {});
          try {
            regeneratorRuntime = t2;
          } catch (e3) {
            Function("r", "regeneratorRuntime = r")(t2);
          }
        }, {}],
        261: [function(e2, t2, r2) {
          !function(e3) {
            "use strict";
            var t3, r3, i, o, n, s2, a, l, u2, c;
            function d(e4) {
              if ("string" != typeof e4 && (e4 = String(e4)), /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e4)) throw new TypeError("Invalid character in header field name");
              return e4.toLowerCase();
            }
            function h(e4) {
              return e4 = "string" != typeof e4 ? String(e4) : e4;
            }
            function f(t4) {
              var e4 = {
                next: function() {
                  var e5 = t4.shift();
                  return {
                    done: void 0 === e5,
                    value: e5
                  };
                }
              };
              return r3 && (e4[Symbol.iterator] = function() {
                return e4;
              }), e4;
            }
            function p(t4) {
              this.map = {}, t4 instanceof p ? t4.forEach(function(e4, t5) {
                this.append(t5, e4);
              }, this) : Array.isArray(t4) ? t4.forEach(function(e4) {
                this.append(e4[0], e4[1]);
              }, this) : t4 && Object.getOwnPropertyNames(t4).forEach(function(e4) {
                this.append(e4, t4[e4]);
              }, this);
            }
            function m(e4) {
              if (e4.bodyUsed) return Promise.reject(new TypeError("Already read"));
              e4.bodyUsed = true;
            }
            function y(r4) {
              return new Promise(function(e4, t4) {
                r4.onload = function() {
                  e4(r4.result);
                }, r4.onerror = function() {
                  t4(r4.error);
                };
              });
            }
            function g(e4) {
              var t4 = new FileReader(), r4 = y(t4);
              return t4.readAsArrayBuffer(e4), r4;
            }
            function v(e4) {
              var t4;
              return e4.slice ? e4.slice(0) : ((t4 = new Uint8Array(e4.byteLength)).set(new Uint8Array(e4)), t4.buffer);
            }
            function b() {
              return this.bodyUsed = false, this._initBody = function(e4) {
                if (this._bodyInit = e4) {
                  if ("string" == typeof e4) this._bodyText = e4;
                  else if (i && Blob.prototype.isPrototypeOf(e4)) this._bodyBlob = e4;
                  else if (o && FormData.prototype.isPrototypeOf(e4)) this._bodyFormData = e4;
                  else if (t3 && URLSearchParams.prototype.isPrototypeOf(e4)) this._bodyText = e4.toString();
                  else if (n && i && a(e4)) this._bodyArrayBuffer = v(e4.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer]);
                  else {
                    if (!n || !ArrayBuffer.prototype.isPrototypeOf(e4) && !l(e4)) throw new Error("unsupported BodyInit type");
                    this._bodyArrayBuffer = v(e4);
                  }
                } else this._bodyText = "";
                this.headers.get("content-type") || ("string" == typeof e4 ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : t3 && URLSearchParams.prototype.isPrototypeOf(e4) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
              }, i && (this.blob = function() {
                var e4 = m(this);
                if (e4) return e4;
                if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                if (this._bodyFormData) throw new Error("could not read FormData body as blob");
                return Promise.resolve(new Blob([this._bodyText]));
              }, this.arrayBuffer = function() {
                return this._bodyArrayBuffer ? m(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(g);
              }), this.text = function() {
                var e4, t4, r4 = m(this);
                if (r4) return r4;
                if (this._bodyBlob) return r4 = this._bodyBlob, e4 = new FileReader(), t4 = y(e4), e4.readAsText(r4), t4;
                if (this._bodyArrayBuffer) return Promise.resolve(function(e5) {
                  for (var t5 = new Uint8Array(e5), r5 = new Array(t5.length), o2 = 0; o2 < t5.length; o2++) r5[o2] = String.fromCharCode(t5[o2]);
                  return r5.join("");
                }(this._bodyArrayBuffer));
                if (this._bodyFormData) throw new Error("could not read FormData body as text");
                return Promise.resolve(this._bodyText);
              }, o && (this.formData = function() {
                return this.text().then(j);
              }), this.json = function() {
                return this.text().then(JSON.parse);
              }, this;
            }
            function _(e4, t4) {
              var r4, o2 = (t4 = t4 || {}).body;
              if (e4 instanceof _) {
                if (e4.bodyUsed) throw new TypeError("Already read");
                this.url = e4.url, this.credentials = e4.credentials, t4.headers || (this.headers = new p(e4.headers)), this.method = e4.method, this.mode = e4.mode, o2 || null == e4._bodyInit || (o2 = e4._bodyInit, e4.bodyUsed = true);
              } else this.url = String(e4);
              if (this.credentials = t4.credentials || this.credentials || "omit", !t4.headers && this.headers || (this.headers = new p(t4.headers)), this.method = (e4 = t4.method || this.method || "GET", r4 = e4.toUpperCase(), -1 < u2.indexOf(r4) ? r4 : e4), this.mode = t4.mode || this.mode || null, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && o2) throw new TypeError("Body not allowed for GET or HEAD requests");
              this._initBody(o2);
            }
            function j(e4) {
              var r4 = new FormData();
              return e4.trim().split("&").forEach(function(e5) {
                var t4;
                e5 && (t4 = (e5 = e5.split("=")).shift().replace(/\+/g, " "), e5 = e5.join("=").replace(/\+/g, " "), r4.append(decodeURIComponent(t4), decodeURIComponent(e5)));
              }), r4;
            }
            function x(e4, t4) {
              t4 = t4 || {}, this.type = "default", this.status = void 0 === t4.status ? 200 : t4.status, this.ok = 200 <= this.status && this.status < 300, this.statusText = "statusText" in t4 ? t4.statusText : "OK", this.headers = new p(t4.headers), this.url = t4.url || "", this._initBody(e4);
            }
            e3.fetch || (t3 = "URLSearchParams" in e3, r3 = "Symbol" in e3 && "iterator" in Symbol, i = "FileReader" in e3 && "Blob" in e3 && function() {
              try {
                return new Blob(), true;
              } catch (e4) {
                return false;
              }
            }(), o = "FormData" in e3, (n = "ArrayBuffer" in e3) && (s2 = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"], a = function(e4) {
              return e4 && DataView.prototype.isPrototypeOf(e4);
            }, l = ArrayBuffer.isView || function(e4) {
              return e4 && -1 < s2.indexOf(Object.prototype.toString.call(e4));
            }), p.prototype.append = function(e4, t4) {
              e4 = d(e4), t4 = h(t4);
              var r4 = this.map[e4];
              this.map[e4] = r4 ? r4 + "," + t4 : t4;
            }, p.prototype.delete = function(e4) {
              delete this.map[d(e4)];
            }, p.prototype.get = function(e4) {
              return e4 = d(e4), this.has(e4) ? this.map[e4] : null;
            }, p.prototype.has = function(e4) {
              return this.map.hasOwnProperty(d(e4));
            }, p.prototype.set = function(e4, t4) {
              this.map[d(e4)] = h(t4);
            }, p.prototype.forEach = function(e4, t4) {
              for (var r4 in this.map) this.map.hasOwnProperty(r4) && e4.call(t4, this.map[r4], r4, this);
            }, p.prototype.keys = function() {
              var r4 = [];
              return this.forEach(function(e4, t4) {
                r4.push(t4);
              }), f(r4);
            }, p.prototype.values = function() {
              var t4 = [];
              return this.forEach(function(e4) {
                t4.push(e4);
              }), f(t4);
            }, p.prototype.entries = function() {
              var r4 = [];
              return this.forEach(function(e4, t4) {
                r4.push([t4, e4]);
              }), f(r4);
            }, r3 && (p.prototype[Symbol.iterator] = p.prototype.entries), u2 = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"], _.prototype.clone = function() {
              return new _(this, {
                body: this._bodyInit
              });
            }, b.call(_.prototype), b.call(x.prototype), x.prototype.clone = function() {
              return new x(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new p(this.headers),
                url: this.url
              });
            }, x.error = function() {
              var e4 = new x(null, {
                status: 0,
                statusText: ""
              });
              return e4.type = "error", e4;
            }, c = [301, 302, 303, 307, 308], x.redirect = function(e4, t4) {
              if (-1 === c.indexOf(t4)) throw new RangeError("Invalid status code");
              return new x(null, {
                status: t4,
                headers: {
                  location: e4
                }
              });
            }, e3.Headers = p, e3.Request = _, e3.Response = x, e3.fetch = function(r4, s3) {
              return new Promise(function(o2, e4) {
                var t4 = new _(r4, s3), n2 = new XMLHttpRequest();
                n2.onload = function() {
                  var r5, e5 = {
                    status: n2.status,
                    statusText: n2.statusText,
                    headers: (e5 = n2.getAllResponseHeaders() || "", r5 = new p(), e5.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function(e6) {
                      var e6 = e6.split(":"), t6 = e6.shift().trim();
                      t6 && (e6 = e6.join(":").trim(), r5.append(t6, e6));
                    }), r5)
                  }, t5 = (e5.url = "responseURL" in n2 ? n2.responseURL : e5.headers.get("X-Request-URL"), "response" in n2 ? n2.response : n2.responseText);
                  o2(new x(t5, e5));
                }, n2.onerror = function() {
                  e4(new TypeError("Network request failed"));
                }, n2.ontimeout = function() {
                  e4(new TypeError("Network request failed"));
                }, n2.open(t4.method, t4.url, true), "include" === t4.credentials ? n2.withCredentials = true : "omit" === t4.credentials && (n2.withCredentials = false), "responseType" in n2 && i && (n2.responseType = "blob"), t4.headers.forEach(function(e5, t5) {
                  n2.setRequestHeader(t5, e5);
                }), n2.send(void 0 === t4._bodyInit ? null : t4._bodyInit);
              });
            }, e3.fetch.polyfill = true);
          }("undefined" != typeof self ? self : this);
        }, {}],
        262: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.function.name"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.split"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var l, o = n(e2("../core/main")), u2 = n(e2("../color/color_conversion"));
          function n(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          var c = [{
            h: 0,
            s: 0,
            b: 0.8275,
            name: "gray"
          }, {
            h: 0,
            s: 0,
            b: 0.8627,
            name: "gray"
          }, {
            h: 0,
            s: 0,
            b: 0.7529,
            name: "gray"
          }, {
            h: 0.0167,
            s: 0.1176,
            b: 1,
            name: "light pink"
          }], d = [{
            h: 0,
            s: 0,
            b: 0,
            name: "black"
          }, {
            h: 0,
            s: 0,
            b: 0.5,
            name: "gray"
          }, {
            h: 0,
            s: 0,
            b: 1,
            name: "white"
          }, {
            h: 0,
            s: 0.5,
            b: 0.5,
            name: "dark maroon"
          }, {
            h: 0,
            s: 0.5,
            b: 1,
            name: "salmon pink"
          }, {
            h: 0,
            s: 1,
            b: 0,
            name: "black"
          }, {
            h: 0,
            s: 1,
            b: 0.5,
            name: "dark red"
          }, {
            h: 0,
            s: 1,
            b: 1,
            name: "red"
          }, {
            h: 5,
            s: 0,
            b: 1,
            name: "very light peach"
          }, {
            h: 5,
            s: 0.5,
            b: 0.5,
            name: "brown"
          }, {
            h: 5,
            s: 0.5,
            b: 1,
            name: "peach"
          }, {
            h: 5,
            s: 1,
            b: 0.5,
            name: "brick red"
          }, {
            h: 5,
            s: 1,
            b: 1,
            name: "crimson"
          }, {
            h: 10,
            s: 0,
            b: 1,
            name: "light peach"
          }, {
            h: 10,
            s: 0.5,
            b: 0.5,
            name: "brown"
          }, {
            h: 10,
            s: 0.5,
            b: 1,
            name: "light orange"
          }, {
            h: 10,
            s: 1,
            b: 0.5,
            name: "brown"
          }, {
            h: 10,
            s: 1,
            b: 1,
            name: "orange"
          }, {
            h: 15,
            s: 0,
            b: 1,
            name: "very light yellow"
          }, {
            h: 15,
            s: 0.5,
            b: 0.5,
            name: "olive green"
          }, {
            h: 15,
            s: 0.5,
            b: 1,
            name: "light yellow"
          }, {
            h: 15,
            s: 1,
            b: 0,
            name: "dark olive green"
          }, {
            h: 15,
            s: 1,
            b: 0.5,
            name: "olive green"
          }, {
            h: 15,
            s: 1,
            b: 1,
            name: "yellow"
          }, {
            h: 20,
            s: 0,
            b: 1,
            name: "very light yellow"
          }, {
            h: 20,
            s: 0.5,
            b: 0.5,
            name: "olive green"
          }, {
            h: 20,
            s: 0.5,
            b: 1,
            name: "light yellow green"
          }, {
            h: 20,
            s: 1,
            b: 0,
            name: "dark olive green"
          }, {
            h: 20,
            s: 1,
            b: 0.5,
            name: "dark yellow green"
          }, {
            h: 20,
            s: 1,
            b: 1,
            name: "yellow green"
          }, {
            h: 25,
            s: 0.5,
            b: 0.5,
            name: "dark yellow green"
          }, {
            h: 25,
            s: 0.5,
            b: 1,
            name: "light green"
          }, {
            h: 25,
            s: 1,
            b: 0.5,
            name: "dark green"
          }, {
            h: 25,
            s: 1,
            b: 1,
            name: "green"
          }, {
            h: 30,
            s: 0.5,
            b: 1,
            name: "light green"
          }, {
            h: 30,
            s: 1,
            b: 0.5,
            name: "dark green"
          }, {
            h: 30,
            s: 1,
            b: 1,
            name: "green"
          }, {
            h: 35,
            s: 0,
            b: 0.5,
            name: "light green"
          }, {
            h: 35,
            s: 0,
            b: 1,
            name: "very light green"
          }, {
            h: 35,
            s: 0.5,
            b: 0.5,
            name: "dark green"
          }, {
            h: 35,
            s: 0.5,
            b: 1,
            name: "light green"
          }, {
            h: 35,
            s: 1,
            b: 0,
            name: "very dark green"
          }, {
            h: 35,
            s: 1,
            b: 0.5,
            name: "dark green"
          }, {
            h: 35,
            s: 1,
            b: 1,
            name: "green"
          }, {
            h: 40,
            s: 0,
            b: 1,
            name: "very light green"
          }, {
            h: 40,
            s: 0.5,
            b: 0.5,
            name: "dark green"
          }, {
            h: 40,
            s: 0.5,
            b: 1,
            name: "light green"
          }, {
            h: 40,
            s: 1,
            b: 0.5,
            name: "dark green"
          }, {
            h: 40,
            s: 1,
            b: 1,
            name: "green"
          }, {
            h: 45,
            s: 0.5,
            b: 1,
            name: "light turquoise"
          }, {
            h: 45,
            s: 1,
            b: 0.5,
            name: "dark turquoise"
          }, {
            h: 45,
            s: 1,
            b: 1,
            name: "turquoise"
          }, {
            h: 50,
            s: 0,
            b: 1,
            name: "light sky blue"
          }, {
            h: 50,
            s: 0.5,
            b: 0.5,
            name: "dark cyan"
          }, {
            h: 50,
            s: 0.5,
            b: 1,
            name: "light cyan"
          }, {
            h: 50,
            s: 1,
            b: 0.5,
            name: "dark cyan"
          }, {
            h: 50,
            s: 1,
            b: 1,
            name: "cyan"
          }, {
            h: 55,
            s: 0,
            b: 1,
            name: "light sky blue"
          }, {
            h: 55,
            s: 0.5,
            b: 1,
            name: "light sky blue"
          }, {
            h: 55,
            s: 1,
            b: 0.5,
            name: "dark blue"
          }, {
            h: 55,
            s: 1,
            b: 1,
            name: "sky blue"
          }, {
            h: 60,
            s: 0,
            b: 0.5,
            name: "gray"
          }, {
            h: 60,
            s: 0,
            b: 1,
            name: "very light blue"
          }, {
            h: 60,
            s: 0.5,
            b: 0.5,
            name: "blue"
          }, {
            h: 60,
            s: 0.5,
            b: 1,
            name: "light blue"
          }, {
            h: 60,
            s: 1,
            b: 0.5,
            name: "navy blue"
          }, {
            h: 60,
            s: 1,
            b: 1,
            name: "blue"
          }, {
            h: 65,
            s: 0,
            b: 1,
            name: "lavender"
          }, {
            h: 65,
            s: 0.5,
            b: 0.5,
            name: "navy blue"
          }, {
            h: 65,
            s: 0.5,
            b: 1,
            name: "light purple"
          }, {
            h: 65,
            s: 1,
            b: 0.5,
            name: "dark navy blue"
          }, {
            h: 65,
            s: 1,
            b: 1,
            name: "blue"
          }, {
            h: 70,
            s: 0,
            b: 1,
            name: "lavender"
          }, {
            h: 70,
            s: 0.5,
            b: 0.5,
            name: "navy blue"
          }, {
            h: 70,
            s: 0.5,
            b: 1,
            name: "lavender blue"
          }, {
            h: 70,
            s: 1,
            b: 0.5,
            name: "dark navy blue"
          }, {
            h: 70,
            s: 1,
            b: 1,
            name: "blue"
          }, {
            h: 75,
            s: 0.5,
            b: 1,
            name: "lavender"
          }, {
            h: 75,
            s: 1,
            b: 0.5,
            name: "dark purple"
          }, {
            h: 75,
            s: 1,
            b: 1,
            name: "purple"
          }, {
            h: 80,
            s: 0.5,
            b: 1,
            name: "pinkish purple"
          }, {
            h: 80,
            s: 1,
            b: 0.5,
            name: "dark purple"
          }, {
            h: 80,
            s: 1,
            b: 1,
            name: "purple"
          }, {
            h: 85,
            s: 0,
            b: 1,
            name: "light pink"
          }, {
            h: 85,
            s: 0.5,
            b: 0.5,
            name: "purple"
          }, {
            h: 85,
            s: 0.5,
            b: 1,
            name: "light fuchsia"
          }, {
            h: 85,
            s: 1,
            b: 0.5,
            name: "dark fuchsia"
          }, {
            h: 85,
            s: 1,
            b: 1,
            name: "fuchsia"
          }, {
            h: 90,
            s: 0.5,
            b: 0.5,
            name: "dark fuchsia"
          }, {
            h: 90,
            s: 0.5,
            b: 1,
            name: "hot pink"
          }, {
            h: 90,
            s: 1,
            b: 0.5,
            name: "dark fuchsia"
          }, {
            h: 90,
            s: 1,
            b: 1,
            name: "fuchsia"
          }, {
            h: 95,
            s: 0,
            b: 1,
            name: "pink"
          }, {
            h: 95,
            s: 0.5,
            b: 1,
            name: "light pink"
          }, {
            h: 95,
            s: 1,
            b: 0.5,
            name: "dark magenta"
          }, {
            h: 95,
            s: 1,
            b: 1,
            name: "magenta"
          }];
          o.default.prototype._rgbColorName = function(e3) {
            var t3, r3, e3 = u2.default._rgbaToHSBA(e3), o2 = [(l = e3)[0], e3[1], e3[2]];
            0 !== o2[0] && (o2[0] = Math.round(100 * o2[0]), (e3 = o2[0].toString().split(""))[r3 = e3.length - 1] = parseInt(e3[r3]), e3[r3] < 2.5 ? e3[r3] = 0 : 2.5 <= e3[r3] && e3[r3] < 7.5 && (e3[r3] = 5), 2 === e3.length ? (e3[0] = parseInt(e3[0]), 7.5 <= e3[r3] && (e3[r3] = 0, e3[0] = e3[0] + 1), o2[0] = 10 * e3[0] + e3[1]) : 7.5 <= e3[r3] ? o2[0] = 10 : o2[0] = e3[r3]), o2[2] = o2[2] / 255;
            for (var n2 = o2.length - 1; 1 <= n2; n2--) o2[n2] <= 0.25 ? o2[n2] = 0 : 0.25 < o2[n2] && o2[n2] < 0.75 ? o2[n2] = 0.5 : o2[n2] = 1;
            if (0 === o2[0] && 0 === o2[1] && 1 === o2[2]) {
              for (var s2 = 2; 0 <= s2; s2--) l[s2] = Math.round(1e4 * l[s2]) / 1e4;
              for (var i = 0; i < c.length; i++) {
                if (c[i].h === l[0] && c[i].s === l[1] && c[i].b === l[2]) {
                  t3 = c[i].name;
                  break;
                }
                t3 = "white";
              }
            } else for (var a = 0; a < d.length; a++) if (d[a].h === o2[0] && d[a].s === o2[1] && d[a].b === o2[2]) {
              t3 = d[a].name;
              break;
            }
            return t3;
          };
          e2 = o.default;
          r2.default = e2;
        }, {
          "../color/color_conversion": 268,
          "../core/main": 283,
          "core-js/modules/es.function.name": 174,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.split": 206
        }],
        263: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.ends-with"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.ends-with"), e2("core-js/modules/es.string.replace"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var s2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          var i = "_Description", a = "_fallbackDesc", l = "_fallbackTable", u2 = "_Label", c = "_labelDesc", d = "_labelTable";
          function h(e3) {
            if ("label" === e3 || "fallback" === e3) throw new Error("description should not be LABEL or FALLBACK");
            return e3.endsWith(".") || e3.endsWith(";") || e3.endsWith(",") || e3.endsWith("?") || e3.endsWith("!") || (e3 += "."), e3;
          }
          s2.default.prototype.describe = function(e3, t3) {
            var r3;
            s2.default._validateParameters("describe", arguments), "string" == typeof e3 && (r3 = this.canvas.id, e3 = h(e3), this.dummyDOM || (this.dummyDOM = document.getElementById(r3).parentNode), this.descriptions || (this.descriptions = {}), this.descriptions.fallback ? this.descriptions.fallback.innerHTML !== e3 && (this.descriptions.fallback.innerHTML = e3) : this._describeHTML("fallback", e3), t3 === this.LABEL && (this.descriptions.label ? this.descriptions.label.innerHTML !== e3 && (this.descriptions.label.innerHTML = e3) : this._describeHTML("label", e3)));
          }, s2.default.prototype.describeElement = function(e3, t3, r3) {
            var o, n;
            s2.default._validateParameters("describeElement", arguments), "string" == typeof t3 && "string" == typeof e3 && (o = this.canvas.id, t3 = h(t3), n = function(e4) {
              if ("label" === e4 || "fallback" === e4) throw new Error("element name should not be LABEL or FALLBACK");
              e4.endsWith(".") || e4.endsWith(";") || e4.endsWith(",") ? e4 = e4.replace(/.$/, ":") : e4.endsWith(":") || (e4 += ":");
              return e4;
            }(e3), e3 = e3.replace(/[^a-zA-Z0-9]/g, ""), n = '<th scope="row">'.concat(n, "</th><td>").concat(t3, "</td>"), this.dummyDOM || (this.dummyDOM = document.getElementById(o).parentNode), this.descriptions ? this.descriptions.fallbackElements || (this.descriptions.fallbackElements = {}) : this.descriptions = {
              fallbackElements: {}
            }, this.descriptions.fallbackElements[e3] ? this.descriptions.fallbackElements[e3].innerHTML !== n && (this.descriptions.fallbackElements[e3].innerHTML = n) : this._describeElementHTML("fallback", e3, n), r3 === this.LABEL && (this.descriptions.labelElements || (this.descriptions.labelElements = {}), this.descriptions.labelElements[e3] ? this.descriptions.labelElements[e3].innerHTML !== n && (this.descriptions.labelElements[e3].innerHTML = n) : this._describeElementHTML("label", e3, n)));
          }, s2.default.prototype._describeHTML = function(e3, t3) {
            var r3, o = this.canvas.id;
            "fallback" === e3 ? (this.dummyDOM.querySelector("#".concat(o + i)) ? this.dummyDOM.querySelector("#" + o + l).insertAdjacentHTML("beforebegin", '<p id="'.concat(o + a, '"></p>')) : (r3 = '<div id="'.concat(o).concat(i, '" role="region" aria-label="Canvas Description"><p id="').concat(o).concat(a, '"></p></div>'), this.dummyDOM.querySelector("#".concat(o, "accessibleOutput")) ? this.dummyDOM.querySelector("#".concat(o, "accessibleOutput")).insertAdjacentHTML("beforebegin", r3) : this.dummyDOM.querySelector("#".concat(o)).innerHTML = r3), this.descriptions.fallback = this.dummyDOM.querySelector("#".concat(o).concat(a)), this.descriptions.fallback.innerHTML = t3) : "label" === e3 && (this.dummyDOM.querySelector("#".concat(o + u2)) ? this.dummyDOM.querySelector("#".concat(o + d)) && this.dummyDOM.querySelector("#".concat(o + d)).insertAdjacentHTML("beforebegin", '<p id="'.concat(o).concat(c, '"></p>')) : (r3 = '<div id="'.concat(o).concat(u2, '" class="p5Label"><p id="').concat(o).concat(c, '"></p></div>'), this.dummyDOM.querySelector("#".concat(o, "accessibleOutputLabel")) ? this.dummyDOM.querySelector("#".concat(o, "accessibleOutputLabel")).insertAdjacentHTML("beforebegin", r3) : this.dummyDOM.querySelector("#" + o).insertAdjacentHTML("afterend", r3)), this.descriptions.label = this.dummyDOM.querySelector("#" + o + c), this.descriptions.label.innerHTML = t3);
          }, s2.default.prototype._describeElementHTML = function(e3, t3, r3) {
            var o, n = this.canvas.id;
            "fallback" === e3 ? (this.dummyDOM.querySelector("#".concat(n + i)) ? this.dummyDOM.querySelector("#" + n + l) || this.dummyDOM.querySelector("#" + n + a).insertAdjacentHTML("afterend", '<table id="'.concat(n).concat(l, '"><caption>Canvas elements and their descriptions</caption></table>')) : (o = '<div id="'.concat(n).concat(i, '" role="region" aria-label="Canvas Description"><table id="').concat(n).concat(l, '"><caption>Canvas elements and their descriptions</caption></table></div>'), this.dummyDOM.querySelector("#".concat(n, "accessibleOutput")) ? this.dummyDOM.querySelector("#".concat(n, "accessibleOutput")).insertAdjacentHTML("beforebegin", o) : this.dummyDOM.querySelector("#" + n).innerHTML = o), (o = document.createElement("tr")).id = n + "_fte_" + t3, this.dummyDOM.querySelector("#" + n + l).appendChild(o), this.descriptions.fallbackElements[t3] = this.dummyDOM.querySelector("#".concat(n).concat("_fte_").concat(t3)), this.descriptions.fallbackElements[t3].innerHTML = r3) : "label" === e3 && (this.dummyDOM.querySelector("#".concat(n + u2)) ? this.dummyDOM.querySelector("#".concat(n + d)) || this.dummyDOM.querySelector("#" + n + c).insertAdjacentHTML("afterend", '<table id="'.concat(n + d, '"></table>')) : (o = '<div id="'.concat(n).concat(u2, '" class="p5Label"><table id="').concat(n).concat(d, '"></table></div>'), this.dummyDOM.querySelector("#".concat(n, "accessibleOutputLabel")) ? this.dummyDOM.querySelector("#".concat(n, "accessibleOutputLabel")).insertAdjacentHTML("beforebegin", o) : this.dummyDOM.querySelector("#" + n).insertAdjacentHTML("afterend", o)), (e3 = document.createElement("tr")).id = n + "_lte_" + t3, this.dummyDOM.querySelector("#" + n + d).appendChild(e3), this.descriptions.labelElements[t3] = this.dummyDOM.querySelector("#".concat(n).concat("_lte_").concat(t3)), this.descriptions.labelElements[t3].innerHTML = r3);
          };
          e2 = s2.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.string.ends-with": 198,
          "core-js/modules/es.string.replace": 204
        }],
        264: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.string.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          e2.default.prototype._updateGridOutput = function(e3) {
            var t3, r3, o, n;
            this.dummyDOM.querySelector("#".concat(e3, "_summary")) && (t3 = this._accessibleOutputs[e3], o = function(e4, t4, r4, o2) {
              t4 = "".concat(t4, " canvas, ").concat(r4, " by ").concat(o2, " pixels, contains ").concat(e4[0]);
              t4 = (1 === e4[0] ? "".concat(t4, " shape: ") : "".concat(t4, " shapes: ")).concat(e4[1]);
              return t4;
            }((r3 = function(e4, t4) {
              var r4, o2 = "", n2 = "", s2 = 0;
              for (r4 in t4) {
                var i, a = 0;
                for (i in t4[r4]) {
                  var l = '<li id="'.concat(e4, "shape").concat(s2, '">').concat(t4[r4][i].color, " ").concat(r4, ",");
                  "line" === r4 ? l += " location = ".concat(t4[r4][i].pos, ", length = ").concat(t4[r4][i].length, " pixels") : (l += " location = ".concat(t4[r4][i].pos), "point" !== r4 && (l += ", area = ".concat(t4[r4][i].area, " %")), l += "</li>"), o2 += l, a++, s2++;
                }
                n2 = 1 < a ? "".concat(n2, " ").concat(a, " ").concat(r4, "s") : "".concat(n2, " ").concat(a, " ").concat(r4);
              }
              return {
                numShapes: [s2, n2],
                details: o2
              };
            }(e3, this.ingredients.shapes)).numShapes, this.ingredients.colors.background, this.width, this.height), n = function(e4, t4) {
              var r4, o2, n2 = 0, s2 = "", i = Array.from(Array(10), function() {
                return Array(10);
              });
              for (r4 in t4) for (var a in t4[r4]) {
                var l = void 0;
                l = "line" !== r4 ? '<a href="#'.concat(e4, "shape").concat(n2, '">').concat(t4[r4][a].color, " ").concat(r4, "</a>") : '<a href="#'.concat(e4, "shape").concat(n2, '">').concat(t4[r4][a].color, " ").concat(r4, " midpoint</a>"), t4[r4][a].loc.locY < i.length && t4[r4][a].loc.locX < i[t4[r4][a].loc.locY].length && (i[t4[r4][a].loc.locY][t4[r4][a].loc.locX] ? i[t4[r4][a].loc.locY][t4[r4][a].loc.locX] = i[t4[r4][a].loc.locY][t4[r4][a].loc.locX] + "  " + l : i[t4[r4][a].loc.locY][t4[r4][a].loc.locX] = l, n2++);
              }
              for (o2 in i) {
                var u2, c = "<tr>";
                for (u2 in i[o2]) c += "<td>", void 0 !== i[o2][u2] && (c += i[o2][u2]), c += "</td>";
                s2 = s2 + c + "</tr>";
              }
              return s2;
            }(e3, this.ingredients.shapes), o !== t3.summary.innerHTML && (t3.summary.innerHTML = o), n !== t3.map.innerHTML && (t3.map.innerHTML = n), r3.details !== t3.shapeDetails.innerHTML && (t3.shapeDetails.innerHTML = r3.details), this._accessibleOutputs[e3] = t3);
          };
          e2 = e2.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.string.iterator": 200
        }],
        265: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.number.to-fixed"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.number.to-fixed"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var o = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function l(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          function u2(e3, t3, r3) {
            t3 = Math.floor(e3[0] / t3 * 10), e3 = Math.floor(e3[1] / r3 * 10);
            return 10 === t3 && (t3 -= 1), 10 === e3 && (e3 -= 1), {
              locX: t3,
              locY: e3
            };
          }
          o.default.prototype.textOutput = function(e3) {
            o.default._validateParameters("textOutput", arguments), this._accessibleOutputs.text || (this._accessibleOutputs.text = true, this._createOutput("textOutput", "Fallback"), e3 === this.LABEL && (this._accessibleOutputs.textLabel = true, this._createOutput("textOutput", "Label")));
          }, o.default.prototype.gridOutput = function(e3) {
            o.default._validateParameters("gridOutput", arguments), this._accessibleOutputs.grid || (this._accessibleOutputs.grid = true, this._createOutput("gridOutput", "Fallback"), e3 === this.LABEL && (this._accessibleOutputs.gridLabel = true, this._createOutput("gridOutput", "Label")));
          }, o.default.prototype._addAccsOutput = function() {
            return this._accessibleOutputs || (this._accessibleOutputs = {
              text: false,
              grid: false,
              textLabel: false,
              gridLabel: false
            }), this._accessibleOutputs.grid || this._accessibleOutputs.text;
          }, o.default.prototype._createOutput = function(e3, t3) {
            var r3, o2, n, s2 = this.canvas.id, i = (this.ingredients || (this.ingredients = {
              shapes: {},
              colors: {
                background: "white",
                fill: "white",
                stroke: "black"
              },
              pShapes: "",
              pBackground: ""
            }), this.dummyDOM || (this.dummyDOM = document.getElementById(s2).parentNode), "");
            "Fallback" === t3 ? (r3 = s2 + e3, this.dummyDOM.querySelector("#".concat(o2 = s2 + "accessibleOutput")) || (this.dummyDOM.querySelector("#".concat(s2, "_Description")) ? this.dummyDOM.querySelector("#".concat(s2, "_Description")).insertAdjacentHTML("afterend", '<div id="'.concat(o2, '" role="region" aria-label="Canvas Outputs"></div>')) : this.dummyDOM.querySelector("#".concat(s2)).innerHTML = '<div id="'.concat(o2, '" role="region" aria-label="Canvas Outputs"></div>'))) : "Label" === t3 && (r3 = s2 + e3 + (i = t3), this.dummyDOM.querySelector("#".concat(o2 = s2 + "accessibleOutput" + t3)) || (this.dummyDOM.querySelector("#".concat(s2, "_Label")) ? this.dummyDOM.querySelector("#".concat(s2, "_Label")) : this.dummyDOM.querySelector("#".concat(s2))).insertAdjacentHTML("afterend", '<div id="'.concat(o2, '"></div>'))), this._accessibleOutputs[r3] = {}, "textOutput" === e3 ? (i = "#".concat(s2, "gridOutput").concat(i), n = '<div id="'.concat(r3, '">Text Output<div id="').concat(r3, 'Summary" aria-label="text output summary"><p id="').concat(r3, '_summary"></p><ul id="').concat(r3, '_list"></ul></div><table id="').concat(r3, '_shapeDetails" summary="text output shape details"></table></div>'), this.dummyDOM.querySelector(i) ? this.dummyDOM.querySelector(i).insertAdjacentHTML("beforebegin", n) : this.dummyDOM.querySelector("#".concat(o2)).innerHTML = n, this._accessibleOutputs[r3].list = this.dummyDOM.querySelector("#".concat(r3, "_list"))) : "gridOutput" === e3 && (i = "#".concat(s2, "textOutput").concat(i), n = '<div id="'.concat(r3, '">Grid Output<p id="').concat(r3, '_summary" aria-label="grid output summary"><table id="').concat(r3, '_map" summary="grid output content"></table><ul id="').concat(r3, '_shapeDetails" aria-label="grid output shape details"></ul></div>'), this.dummyDOM.querySelector(i) ? this.dummyDOM.querySelector(i).insertAdjacentHTML("afterend", n) : this.dummyDOM.querySelector("#".concat(o2)).innerHTML = n, this._accessibleOutputs[r3].map = this.dummyDOM.querySelector("#".concat(r3, "_map"))), this._accessibleOutputs[r3].shapeDetails = this.dummyDOM.querySelector("#".concat(r3, "_shapeDetails")), this._accessibleOutputs[r3].summary = this.dummyDOM.querySelector("#".concat(r3, "_summary"));
          }, o.default.prototype._updateAccsOutput = function() {
            var e3 = this.canvas.id;
            JSON.stringify(this.ingredients.shapes) === this.ingredients.pShapes && this.ingredients.colors.background === this.ingredients.pBackground || (this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes), this._accessibleOutputs.text && this._updateTextOutput(e3 + "textOutput"), this._accessibleOutputs.grid && this._updateGridOutput(e3 + "gridOutput"), this._accessibleOutputs.textLabel && this._updateTextOutput(e3 + "textOutputLabel"), this._accessibleOutputs.gridLabel && this._updateGridOutput(e3 + "gridOutputLabel"));
          }, o.default.prototype._accsBackground = function(e3) {
            this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes), this.ingredients.pBackground = this.ingredients.colors.background, this.ingredients.shapes = {}, this.ingredients.colors.backgroundRGBA !== e3 && (this.ingredients.colors.backgroundRGBA = e3, this.ingredients.colors.background = this._rgbColorName(e3));
          }, o.default.prototype._accsCanvasColors = function(e3, t3) {
            "fill" === e3 ? this.ingredients.colors.fillRGBA !== t3 && (this.ingredients.colors.fillRGBA = t3, this.ingredients.colors.fill = this._rgbColorName(t3)) : "stroke" === e3 && this.ingredients.colors.strokeRGBA !== t3 && (this.ingredients.colors.strokeRGBA = t3, this.ingredients.colors.stroke = this._rgbColorName(t3));
          }, o.default.prototype._accsOutput = function(e3, t3) {
            "ellipse" === e3 && t3[2] === t3[3] ? e3 = "circle" : "rectangle" === e3 && t3[2] === t3[3] && (e3 = "square");
            var r3, o2, n = {}, s2 = true, i = function(e4, t4) {
              var r4;
              e4 = "rectangle" === e4 || "ellipse" === e4 || "arc" === e4 || "circle" === e4 || "square" === e4 ? (r4 = Math.round(t4[0] + t4[2] / 2), Math.round(t4[1] + t4[3] / 2)) : "triangle" === e4 ? (r4 = (t4[0] + t4[2] + t4[4]) / 3, (t4[1] + t4[3] + t4[5]) / 3) : "quadrilateral" === e4 ? (r4 = (t4[0] + t4[2] + t4[4] + t4[6]) / 4, (t4[1] + t4[3] + t4[5] + t4[7]) / 4) : "line" === e4 ? (r4 = (t4[0] + t4[2]) / 2, (t4[1] + t4[3]) / 2) : (r4 = t4[0], t4[1]);
              return [r4, e4];
            }(e3, t3);
            if ("line" === e3 ? (n.color = this.ingredients.colors.stroke, n.length = Math.round(this.dist(t3[0], t3[1], t3[2], t3[3])), r3 = this._getPos(t3[0], [1]), o2 = this._getPos(t3[2], [3]), n.loc = u2(i, this.width, this.height), n.pos = r3 === o2 ? "at ".concat(r3) : "from ".concat(r3, " to ").concat(o2)) : ("point" === e3 ? n.color = this.ingredients.colors.stroke : (n.color = this.ingredients.colors.fill, n.area = this._getArea(e3, t3)), n.pos = this._getPos.apply(this, l(i)), n.loc = u2(i, this.width, this.height)), this.ingredients.shapes[e3]) {
              if (this.ingredients.shapes[e3] !== [n]) {
                for (var a in this.ingredients.shapes[e3]) JSON.stringify(this.ingredients.shapes[e3][a]) === JSON.stringify(n) && (s2 = false);
                true === s2 && this.ingredients.shapes[e3].push(n);
              }
            } else this.ingredients.shapes[e3] = [n];
          }, o.default.prototype._getPos = function(e3, t3) {
            var e3 = new DOMPointReadOnly(e3, t3), t3 = this._renderer.isP3D ? new DOMMatrix(this._renderer.uMVMatrix.mat4) : this.drawingContext.getTransform(), e3 = e3.matrixTransform(t3), t3 = e3.x, e3 = e3.y, r3 = this.width * this._pixelDensity, o2 = this.height * this._pixelDensity;
            return t3 < 0.4 * r3 ? e3 < 0.4 * o2 ? "top left" : 0.6 * o2 < e3 ? "bottom left" : "mid left" : 0.6 * r3 < t3 ? e3 < 0.4 * o2 ? "top right" : 0.6 * o2 < e3 ? "bottom right" : "mid right" : e3 < 0.4 * o2 ? "top middle" : 0.6 * o2 < e3 ? "bottom middle" : "middle";
          }, o.default.prototype._getArea = function(e3, t3) {
            var r3, o2, n = 0, s2 = ("arc" === e3 ? (n = (r3 = ((t3[5] - t3[4]) % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI)) * t3[2] * t3[3] / 8, "open" !== t3[6] && "chord" !== t3[6] || (o2 = t3[0], u3 = t3[1], s2 = t3[0] + t3[2] / 2 * Math.cos(t3[4]).toFixed(2), c = t3[1] + t3[3] / 2 * Math.sin(t3[4]).toFixed(2), a = t3[0] + t3[2] / 2 * Math.cos(t3[5]).toFixed(2), i = t3[1] + t3[3] / 2 * Math.sin(t3[5]).toFixed(2), o2 = Math.abs(o2 * (c - i) + s2 * (i - u3) + a * (u3 - c)) / 2, r3 > Math.PI ? n += o2 : n -= o2)) : "ellipse" === e3 || "circle" === e3 ? n = 3.14 * t3[2] / 2 * t3[3] / 2 : "line" === e3 || "point" === e3 ? n = 0 : "quadrilateral" === e3 ? n = Math.abs((t3[6] + t3[0]) * (t3[7] - t3[1]) + (t3[0] + t3[2]) * (t3[1] - t3[3]) + (t3[2] + t3[4]) * (t3[3] - t3[5]) + (t3[4] + t3[6]) * (t3[5] - t3[7])) / 2 : "rectangle" === e3 || "square" === e3 ? n = t3[2] * t3[3] : "triangle" === e3 && (n = Math.abs(t3[0] * (t3[3] - t3[5]) + t3[2] * (t3[5] - t3[1]) + t3[4] * (t3[1] - t3[3])) / 2), this.width * this._pixelDensity), i = this.height * this._pixelDensity, a = [new DOMPoint(0, 0), new DOMPoint(s2, 0), new DOMPoint(s2, i), new DOMPoint(0, i)], l2 = (this._renderer.isP3D ? new DOMMatrix(this._renderer.uMVMatrix.mat4) : this.drawingContext.getTransform()).inverse(), u3 = a.map(function(e4) {
              return e4.matrixTransform(l2);
            }), c = Math.abs((u3[3].x + u3[0].x) * (u3[3].y - u3[0].y) + (u3[0].x + u3[1].x) * (u3[0].y - u3[1].y) + (u3[1].x + u3[2].x) * (u3[1].y - u3[2].y) + (u3[2].x + u3[3].x) * (u3[2].y - u3[3].y)) / 2;
            return Math.round(100 * n / c);
          };
          e2 = o.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.fill": 156,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.number.to-fixed": 182,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        266: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.concat"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          e2.default.prototype._updateTextOutput = function(e3) {
            var t3, r3, o, n;
            this.dummyDOM.querySelector("#".concat(e3, "_summary")) && (t3 = this._accessibleOutputs[e3], o = function(e4, t4, r4, o2) {
              r4 = "Your output is a, ".concat(r4, " by ").concat(o2, " pixels, ").concat(t4, " canvas containing the following");
              r4 = 1 === e4 ? "".concat(r4, " shape:") : "".concat(r4, " ").concat(e4, " shapes:");
              return r4;
            }((r3 = function(e4, t4) {
              var r4, o2 = "", n2 = 0;
              for (r4 in t4) for (var s2 in t4[r4]) {
                var i = '<li><a href="#'.concat(e4, "shape").concat(n2, '">').concat(t4[r4][s2].color, " ").concat(r4, "</a>");
                "line" === r4 ? i += ", ".concat(t4[r4][s2].pos, ", ").concat(t4[r4][s2].length, " pixels long.</li>") : (i += ", at ".concat(t4[r4][s2].pos), "point" !== r4 && (i += ", covering ".concat(t4[r4][s2].area, "% of the canvas")), i += ".</li>"), o2 += i, n2++;
              }
              return {
                numShapes: n2,
                listShapes: o2
              };
            }(e3, this.ingredients.shapes)).numShapes, this.ingredients.colors.background, this.width, this.height), n = function(e4, t4) {
              var r4, o2 = "", n2 = 0;
              for (r4 in t4) for (var s2 in t4[r4]) {
                var i = '<tr id="'.concat(e4, "shape").concat(n2, '"><th>').concat(t4[r4][s2].color, " ").concat(r4, "</th>");
                "line" === r4 ? i += "<td>location = ".concat(t4[r4][s2].pos, "</td><td>length = ").concat(t4[r4][s2].length, " pixels</td></tr>") : (i += "<td>location = ".concat(t4[r4][s2].pos, "</td>"), "point" !== r4 && (i += "<td> area = ".concat(t4[r4][s2].area, "%</td>")), i += "</tr>"), o2 += i, n2++;
              }
              return o2;
            }(e3, this.ingredients.shapes), o !== t3.summary.innerHTML && (t3.summary.innerHTML = o), r3.listShapes !== t3.list.innerHTML && (t3.list.innerHTML = r3.listShapes), n !== t3.shapeDetails.innerHTML && (t3.shapeDetails.innerHTML = n), this._accessibleOutputs[e3] = t3);
          };
          e2 = e2.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153
        }],
        267: [function(e2, t2, r2) {
          "use strict";
          var o = (o = e2("./core/main")) && o.__esModule ? o : {
            default: o
          };
          e2("./core/constants"), e2("./core/environment"), e2("./core/friendly_errors/stacktrace"), e2("./core/friendly_errors/validate_params"), e2("./core/friendly_errors/file_errors"), e2("./core/friendly_errors/fes_core"), e2("./core/friendly_errors/sketch_reader"), e2("./core/helpers"), e2("./core/legacy"), e2("./core/preload"), e2("./core/p5.Element"), e2("./core/p5.Graphics"), e2("./core/p5.Renderer"), e2("./core/p5.Renderer2D"), e2("./core/rendering"), e2("./core/shim"), e2("./core/structure"), e2("./core/transform"), e2("./core/shape/2d_primitives"), e2("./core/shape/attributes"), e2("./core/shape/curves"), e2("./core/shape/vertex"), e2("./accessibility/outputs"), e2("./accessibility/textOutput"), e2("./accessibility/gridOutput"), e2("./accessibility/color_namer"), e2("./color/color_conversion"), e2("./color/creating_reading"), e2("./color/p5.Color"), e2("./color/setting"), e2("./data/p5.TypedDict"), e2("./data/local_storage.js"), e2("./dom/dom"), e2("./accessibility/describe"), e2("./events/acceleration"), e2("./events/keyboard"), e2("./events/mouse"), e2("./events/touch"), e2("./image/filters"), e2("./image/image"), e2("./image/loading_displaying"), e2("./image/p5.Image"), e2("./image/pixels"), e2("./io/files"), e2("./io/p5.Table"), e2("./io/p5.TableRow"), e2("./io/p5.XML"), e2("./math/calculation"), e2("./math/math"), e2("./math/noise"), e2("./math/p5.Vector"), e2("./math/random"), e2("./math/trigonometry"), e2("./typography/attributes"), e2("./typography/loading_displaying"), e2("./typography/p5.Font"), e2("./utilities/array_functions"), e2("./utilities/conversion"), e2("./utilities/string_functions"), e2("./utilities/time_date"), e2("./webgl/3d_primitives"), e2("./webgl/interaction"), e2("./webgl/light"), e2("./webgl/loading"), e2("./webgl/material"), e2("./webgl/p5.Camera"), e2("./webgl/p5.DataArray"), e2("./webgl/p5.Geometry"), e2("./webgl/p5.Matrix"), e2("./webgl/p5.Quat"), e2("./webgl/p5.RendererGL.Immediate"), e2("./webgl/p5.RendererGL"), e2("./webgl/p5.RendererGL.Retained"), e2("./webgl/p5.Framebuffer"), e2("./webgl/p5.Shader"), e2("./webgl/p5.RenderBuffer"), e2("./webgl/p5.Texture"), e2("./webgl/text"), e2("./core/init"), t2.exports = o.default;
        }, {
          "./accessibility/color_namer": 262,
          "./accessibility/describe": 263,
          "./accessibility/gridOutput": 264,
          "./accessibility/outputs": 265,
          "./accessibility/textOutput": 266,
          "./color/color_conversion": 268,
          "./color/creating_reading": 269,
          "./color/p5.Color": 270,
          "./color/setting": 271,
          "./core/constants": 272,
          "./core/environment": 273,
          "./core/friendly_errors/fes_core": 274,
          "./core/friendly_errors/file_errors": 275,
          "./core/friendly_errors/sketch_reader": 276,
          "./core/friendly_errors/stacktrace": 277,
          "./core/friendly_errors/validate_params": 278,
          "./core/helpers": 279,
          "./core/init": 280,
          "./core/legacy": 282,
          "./core/main": 283,
          "./core/p5.Element": 284,
          "./core/p5.Graphics": 285,
          "./core/p5.Renderer": 286,
          "./core/p5.Renderer2D": 287,
          "./core/preload": 288,
          "./core/rendering": 289,
          "./core/shape/2d_primitives": 290,
          "./core/shape/attributes": 291,
          "./core/shape/curves": 292,
          "./core/shape/vertex": 293,
          "./core/shim": 294,
          "./core/structure": 295,
          "./core/transform": 296,
          "./data/local_storage.js": 297,
          "./data/p5.TypedDict": 298,
          "./dom/dom": 299,
          "./events/acceleration": 300,
          "./events/keyboard": 301,
          "./events/mouse": 302,
          "./events/touch": 303,
          "./image/filters": 304,
          "./image/image": 305,
          "./image/loading_displaying": 306,
          "./image/p5.Image": 307,
          "./image/pixels": 308,
          "./io/files": 309,
          "./io/p5.Table": 310,
          "./io/p5.TableRow": 311,
          "./io/p5.XML": 312,
          "./math/calculation": 313,
          "./math/math": 314,
          "./math/noise": 315,
          "./math/p5.Vector": 316,
          "./math/random": 317,
          "./math/trigonometry": 318,
          "./typography/attributes": 319,
          "./typography/loading_displaying": 320,
          "./typography/p5.Font": 321,
          "./utilities/array_functions": 322,
          "./utilities/conversion": 323,
          "./utilities/string_functions": 324,
          "./utilities/time_date": 325,
          "./webgl/3d_primitives": 326,
          "./webgl/interaction": 328,
          "./webgl/light": 329,
          "./webgl/loading": 330,
          "./webgl/material": 331,
          "./webgl/p5.Camera": 332,
          "./webgl/p5.DataArray": 333,
          "./webgl/p5.Framebuffer": 334,
          "./webgl/p5.Geometry": 335,
          "./webgl/p5.Matrix": 336,
          "./webgl/p5.Quat": 337,
          "./webgl/p5.RenderBuffer": 338,
          "./webgl/p5.RendererGL": 341,
          "./webgl/p5.RendererGL.Immediate": 339,
          "./webgl/p5.RendererGL.Retained": 340,
          "./webgl/p5.Shader": 342,
          "./webgl/p5.Texture": 343,
          "./webgl/text": 344
        }],
        268: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          e2.default.ColorConversion = {
            _hsbaToHSLA: function(e3) {
              var t3 = e3[0], r3 = e3[1], o = e3[2], n = (2 - r3) * o / 2;
              return 0 != n && (1 == n ? r3 = 0 : n < 0.5 ? r3 /= 2 - r3 : r3 = r3 * o / (2 - 2 * n)), [t3, r3, n, e3[3]];
            },
            _hsbaToRGBA: function(e3) {
              var t3, r3, o, n, s2, i = 6 * e3[0], a = e3[1], l = e3[2];
              return 0 === a ? [l, l, l, e3[3]] : (r3 = l * (1 - a), o = l * (1 - a * (i - (t3 = Math.floor(i)))), a = l * (1 - a * (1 + t3 - i)), i = 1 === t3 ? (n = o, s2 = l, r3) : 2 === t3 ? (n = r3, s2 = l, a) : 3 === t3 ? (n = r3, s2 = o, l) : 4 === t3 ? (n = a, s2 = r3, l) : 5 === t3 ? (n = l, s2 = r3, o) : (n = l, s2 = a, r3), [n, s2, i, e3[3]]);
            },
            _hslaToHSBA: function(e3) {
              var t3 = e3[0], r3 = e3[1], o = e3[2], n = o < 0.5 ? (1 + r3) * o : o + r3 - o * r3;
              return [t3, r3 = 2 * (n - o) / n, n, e3[3]];
            },
            _hslaToRGBA: function(e3) {
              var t3, r3 = 6 * e3[0], o = e3[1], n = e3[2];
              return 0 === o ? [n, n, n, e3[3]] : [(t3 = function(e4, t4, r4) {
                return e4 < 0 ? e4 += 6 : 6 <= e4 && (e4 -= 6), e4 < 1 ? t4 + (r4 - t4) * e4 : e4 < 3 ? r4 : e4 < 4 ? t4 + (r4 - t4) * (4 - e4) : t4;
              })(2 + r3, o = 2 * n - (n = n < 0.5 ? (1 + o) * n : n + o - n * o), n), t3(r3, o, n), t3(r3 - 2, o, n), e3[3]];
            },
            _rgbaToHSBA: function(e3) {
              var t3, r3, o = e3[0], n = e3[1], s2 = e3[2], i = Math.max(o, n, s2), a = i - Math.min(o, n, s2);
              return 0 == a ? r3 = t3 = 0 : (r3 = a / i, o === i ? t3 = (n - s2) / a : n === i ? t3 = 2 + (s2 - o) / a : s2 === i && (t3 = 4 + (o - n) / a), t3 < 0 ? t3 += 6 : 6 <= t3 && (t3 -= 6)), [t3 / 6, r3, i, e3[3]];
            },
            _rgbaToHSLA: function(e3) {
              var t3, r3, o = e3[0], n = e3[1], s2 = e3[2], i = Math.max(o, n, s2), a = Math.min(o, n, s2), l = i + a, a = i - a;
              return 0 == a ? r3 = t3 = 0 : (r3 = l < 1 ? a / l : a / (2 - l), o === i ? t3 = (n - s2) / a : n === i ? t3 = 2 + (s2 - o) / a : s2 === i && (t3 = 4 + (o - n) / a), t3 < 0 ? t3 += 6 : 6 <= t3 && (t3 -= 6)), [t3 / 6, r3, l / 2, e3[3]];
            }
          };
          e2 = e2.default.ColorConversion;
          r2.default = e2;
        }, {
          "../core/main": 283
        }],
        269: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.map"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var l = (n = e2("../core/main")) && n.__esModule ? n : {
            default: n
          }, u2 = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s2;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r3, s2) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          e2("./p5.Color"), e2("../core/friendly_errors/validate_params"), e2("../core/friendly_errors/file_errors"), e2("../core/friendly_errors/fes_core"), l.default.prototype.alpha = function(e3) {
            return l.default._validateParameters("alpha", arguments), this.color(e3)._getAlpha();
          }, l.default.prototype.blue = function(e3) {
            return l.default._validateParameters("blue", arguments), this.color(e3)._getBlue();
          }, l.default.prototype.brightness = function(e3) {
            return l.default._validateParameters("brightness", arguments), this.color(e3)._getBrightness();
          }, l.default.prototype.color = function() {
            for (var e3, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            return l.default._validateParameters("color", r3), r3[0] instanceof l.default.Color ? r3[0] : (e3 = Array.isArray(r3[0]) ? r3[0] : r3, new l.default.Color(this, e3));
          }, l.default.prototype.green = function(e3) {
            return l.default._validateParameters("green", arguments), this.color(e3)._getGreen();
          }, l.default.prototype.hue = function(e3) {
            return l.default._validateParameters("hue", arguments), this.color(e3)._getHue();
          }, l.default.prototype.lerpColor = function(e3, t3, r3) {
            l.default._validateParameters("lerpColor", arguments), e3 instanceof l.default.Color || (e3 = color(e3)), t3 instanceof l.default.Color || (t3 = color(t3));
            var o2, n2, s2, i2 = this._colorMode, a2 = this._colorMaxes;
            if (i2 === u2.RGB) n2 = e3.levels.map(function(e4) {
              return e4 / 255;
            }), s2 = t3.levels.map(function(e4) {
              return e4 / 255;
            });
            else if (i2 === u2.HSB) e3._getBrightness(), t3._getBrightness(), n2 = e3.hsba, s2 = t3.hsba;
            else {
              if (i2 !== u2.HSL) throw new Error("".concat(i2, " cannot be used for interpolation."));
              e3._getLightness(), t3._getLightness(), n2 = e3.hsla, s2 = t3.hsla;
            }
            return r3 = Math.max(Math.min(r3, 1), 0), void 0 === this.lerp && (this.lerp = function(e4, t4, r4) {
              return r4 * (t4 - e4) + e4;
            }), i2 === u2.RGB ? o2 = this.lerp(n2[0], s2[0], r3) : (0.5 < Math.abs(n2[0] - s2[0]) && (n2[0] > s2[0] ? s2[0] += 1 : n2[0] += 1), 1 <= (o2 = this.lerp(n2[0], s2[0], r3)) && --o2), e3 = this.lerp(n2[1], s2[1], r3), t3 = this.lerp(n2[2], s2[2], r3), n2 = this.lerp(n2[3], s2[3], r3), o2 *= a2[i2][0], e3 *= a2[i2][1], t3 *= a2[i2][2], n2 *= a2[i2][3], this.color(o2, e3, t3, n2);
          }, l.default.prototype.paletteLerp = function(e3, t3) {
            var r3 = e3[0];
            if (t3 < r3[1]) return this.color(r3[0]);
            for (var o2 = 1; o2 < e3.length; o2++) {
              var n2, s2 = e3[o2];
              if (t3 < s2[1]) return n2 = e3[o2 - 1], this.lerpColor(this.color(n2[0]), this.color(s2[0]), (t3 - n2[1]) / (s2[1] - n2[1]));
            }
            return this.color(e3[e3.length - 1][0]);
          }, l.default.prototype.lightness = function(e3) {
            return l.default._validateParameters("lightness", arguments), this.color(e3)._getLightness();
          }, l.default.prototype.red = function(e3) {
            return l.default._validateParameters("red", arguments), this.color(e3)._getRed();
          }, l.default.prototype.saturation = function(e3) {
            return l.default._validateParameters("saturation", arguments), this.color(e3)._getSaturation();
          };
          var n = l.default;
          r2.default = n;
        }, {
          "../core/constants": 272,
          "../core/friendly_errors/fes_core": 274,
          "../core/friendly_errors/file_errors": 275,
          "../core/friendly_errors/validate_params": 278,
          "../core/main": 283,
          "./p5.Color": 270,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        270: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.constructor"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.trim"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.constructor"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.trim"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = s2(e2("../core/main")), d = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants")), h = s2(e2("./color_conversion"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          function s2(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          function l(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          var f = {
            aliceblue: "#f0f8ff",
            antiquewhite: "#faebd7",
            aqua: "#00ffff",
            aquamarine: "#7fffd4",
            azure: "#f0ffff",
            beige: "#f5f5dc",
            bisque: "#ffe4c4",
            black: "#000000",
            blanchedalmond: "#ffebcd",
            blue: "#0000ff",
            blueviolet: "#8a2be2",
            brown: "#a52a2a",
            burlywood: "#deb887",
            cadetblue: "#5f9ea0",
            chartreuse: "#7fff00",
            chocolate: "#d2691e",
            coral: "#ff7f50",
            cornflowerblue: "#6495ed",
            cornsilk: "#fff8dc",
            crimson: "#dc143c",
            cyan: "#00ffff",
            darkblue: "#00008b",
            darkcyan: "#008b8b",
            darkgoldenrod: "#b8860b",
            darkgray: "#a9a9a9",
            darkgreen: "#006400",
            darkgrey: "#a9a9a9",
            darkkhaki: "#bdb76b",
            darkmagenta: "#8b008b",
            darkolivegreen: "#556b2f",
            darkorange: "#ff8c00",
            darkorchid: "#9932cc",
            darkred: "#8b0000",
            darksalmon: "#e9967a",
            darkseagreen: "#8fbc8f",
            darkslateblue: "#483d8b",
            darkslategray: "#2f4f4f",
            darkslategrey: "#2f4f4f",
            darkturquoise: "#00ced1",
            darkviolet: "#9400d3",
            deeppink: "#ff1493",
            deepskyblue: "#00bfff",
            dimgray: "#696969",
            dimgrey: "#696969",
            dodgerblue: "#1e90ff",
            firebrick: "#b22222",
            floralwhite: "#fffaf0",
            forestgreen: "#228b22",
            fuchsia: "#ff00ff",
            gainsboro: "#dcdcdc",
            ghostwhite: "#f8f8ff",
            gold: "#ffd700",
            goldenrod: "#daa520",
            gray: "#808080",
            green: "#008000",
            greenyellow: "#adff2f",
            grey: "#808080",
            honeydew: "#f0fff0",
            hotpink: "#ff69b4",
            indianred: "#cd5c5c",
            indigo: "#4b0082",
            ivory: "#fffff0",
            khaki: "#f0e68c",
            lavender: "#e6e6fa",
            lavenderblush: "#fff0f5",
            lawngreen: "#7cfc00",
            lemonchiffon: "#fffacd",
            lightblue: "#add8e6",
            lightcoral: "#f08080",
            lightcyan: "#e0ffff",
            lightgoldenrodyellow: "#fafad2",
            lightgray: "#d3d3d3",
            lightgreen: "#90ee90",
            lightgrey: "#d3d3d3",
            lightpink: "#ffb6c1",
            lightsalmon: "#ffa07a",
            lightseagreen: "#20b2aa",
            lightskyblue: "#87cefa",
            lightslategray: "#778899",
            lightslategrey: "#778899",
            lightsteelblue: "#b0c4de",
            lightyellow: "#ffffe0",
            lime: "#00ff00",
            limegreen: "#32cd32",
            linen: "#faf0e6",
            magenta: "#ff00ff",
            maroon: "#800000",
            mediumaquamarine: "#66cdaa",
            mediumblue: "#0000cd",
            mediumorchid: "#ba55d3",
            mediumpurple: "#9370db",
            mediumseagreen: "#3cb371",
            mediumslateblue: "#7b68ee",
            mediumspringgreen: "#00fa9a",
            mediumturquoise: "#48d1cc",
            mediumvioletred: "#c71585",
            midnightblue: "#191970",
            mintcream: "#f5fffa",
            mistyrose: "#ffe4e1",
            moccasin: "#ffe4b5",
            navajowhite: "#ffdead",
            navy: "#000080",
            oldlace: "#fdf5e6",
            olive: "#808000",
            olivedrab: "#6b8e23",
            orange: "#ffa500",
            orangered: "#ff4500",
            orchid: "#da70d6",
            palegoldenrod: "#eee8aa",
            palegreen: "#98fb98",
            paleturquoise: "#afeeee",
            palevioletred: "#db7093",
            papayawhip: "#ffefd5",
            peachpuff: "#ffdab9",
            peru: "#cd853f",
            pink: "#ffc0cb",
            plum: "#dda0dd",
            powderblue: "#b0e0e6",
            purple: "#800080",
            rebeccapurple: "#663399",
            red: "#ff0000",
            rosybrown: "#bc8f8f",
            royalblue: "#4169e1",
            saddlebrown: "#8b4513",
            salmon: "#fa8072",
            sandybrown: "#f4a460",
            seagreen: "#2e8b57",
            seashell: "#fff5ee",
            sienna: "#a0522d",
            silver: "#c0c0c0",
            skyblue: "#87ceeb",
            slateblue: "#6a5acd",
            slategray: "#708090",
            slategrey: "#708090",
            snow: "#fffafa",
            springgreen: "#00ff7f",
            steelblue: "#4682b4",
            tan: "#d2b48c",
            teal: "#008080",
            thistle: "#d8bfd8",
            tomato: "#ff6347",
            turquoise: "#40e0d0",
            violet: "#ee82ee",
            wheat: "#f5deb3",
            white: "#ffffff",
            whitesmoke: "#f5f5f5",
            yellow: "#ffff00",
            yellowgreen: "#9acd32"
          }, e2 = /\s*/, u2 = /(\d{1,3})/, c = /((?:\d+(?:\.\d+)?)|(?:\.\d+))/, p = new RegExp("".concat(c.source, "%")), m = {
            HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,
            HEX4: /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i,
            HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
            HEX8: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
            RGB: new RegExp(["^rgb\\(", u2.source, ",", u2.source, ",", u2.source, "\\)$"].join(e2.source), "i"),
            RGB_PERCENT: new RegExp(["^rgb\\(", p.source, ",", p.source, ",", p.source, "\\)$"].join(e2.source), "i"),
            RGBA: new RegExp(["^rgba\\(", u2.source, ",", u2.source, ",", u2.source, ",", c.source, "\\)$"].join(e2.source), "i"),
            RGBA_PERCENT: new RegExp(["^rgba\\(", p.source, ",", p.source, ",", p.source, ",", c.source, "\\)$"].join(e2.source), "i"),
            HSL: new RegExp(["^hsl\\(", u2.source, ",", p.source, ",", p.source, "\\)$"].join(e2.source), "i"),
            HSLA: new RegExp(["^hsla\\(", u2.source, ",", p.source, ",", p.source, ",", c.source, "\\)$"].join(e2.source), "i"),
            HSB: new RegExp(["^hsb\\(", u2.source, ",", p.source, ",", p.source, "\\)$"].join(e2.source), "i"),
            HSBA: new RegExp(["^hsba\\(", u2.source, ",", p.source, ",", p.source, ",", c.source, "\\)$"].join(e2.source), "i")
          }, u2 = (n.default.Color = function() {
            function c2(e4, t4) {
              if (!(this instanceof c2)) throw new TypeError("Cannot call a class as a function");
              if (this._storeModeAndMaxes(e4._colorMode, e4._colorMaxes), ![d.RGB, d.HSL, d.HSB].includes(this.mode)) throw new Error("".concat(this.mode, " is an invalid colorMode."));
              this._array = c2._parseInputs.apply(this, t4), this._calculateLevels();
            }
            var e3, t3, r3;
            return e3 = c2, r3 = [{
              key: "_parseInputs",
              value: function(e4, t4, r4, o2) {
                var n2, s3 = arguments.length, i2 = this.mode, a2 = this.maxes[i2], l2 = [];
                if (3 <= s3) {
                  for (l2[0] = e4 / a2[0], l2[1] = t4 / a2[1], l2[2] = r4 / a2[2], l2[3] = "number" == typeof o2 ? o2 / a2[3] : 1, n2 = l2.length - 1; 0 <= n2; --n2) {
                    var u3 = l2[n2];
                    u3 < 0 ? l2[n2] = 0 : 1 < u3 && (l2[n2] = 1);
                  }
                  return i2 === d.HSL ? h.default._hslaToRGBA(l2) : i2 === d.HSB ? h.default._hsbaToRGBA(l2) : l2;
                }
                if (1 === s3 && "string" == typeof e4) {
                  r4 = e4.trim().toLowerCase();
                  if (f[r4]) return c2._parseInputs.call(this, f[r4]);
                  if (m.HEX3.test(r4)) return (l2 = m.HEX3.exec(r4).slice(1).map(function(e5) {
                    return parseInt(e5 + e5, 16) / 255;
                  }))[3] = 1, l2;
                  if (m.HEX6.test(r4)) return (l2 = m.HEX6.exec(r4).slice(1).map(function(e5) {
                    return parseInt(e5, 16) / 255;
                  }))[3] = 1, l2;
                  if (m.HEX4.test(r4)) return l2 = m.HEX4.exec(r4).slice(1).map(function(e5) {
                    return parseInt(e5 + e5, 16) / 255;
                  });
                  if (m.HEX8.test(r4)) return l2 = m.HEX8.exec(r4).slice(1).map(function(e5) {
                    return parseInt(e5, 16) / 255;
                  });
                  if (m.RGB.test(r4)) return (l2 = m.RGB.exec(r4).slice(1).map(function(e5) {
                    return e5 / 255;
                  }))[3] = 1, l2;
                  if (m.RGB_PERCENT.test(r4)) return (l2 = m.RGB_PERCENT.exec(r4).slice(1).map(function(e5) {
                    return parseFloat(e5) / 100;
                  }))[3] = 1, l2;
                  if (m.RGBA.test(r4)) return l2 = m.RGBA.exec(r4).slice(1).map(function(e5, t5) {
                    return 3 === t5 ? parseFloat(e5) : e5 / 255;
                  });
                  if (m.RGBA_PERCENT.test(r4)) return l2 = m.RGBA_PERCENT.exec(r4).slice(1).map(function(e5, t5) {
                    return 3 === t5 ? parseFloat(e5) : parseFloat(e5) / 100;
                  });
                  if (m.HSL.test(r4) ? (l2 = m.HSL.exec(r4).slice(1).map(function(e5, t5) {
                    return 0 === t5 ? parseInt(e5, 10) / 360 : parseInt(e5, 10) / 100;
                  }))[3] = 1 : m.HSLA.test(r4) && (l2 = m.HSLA.exec(r4).slice(1).map(function(e5, t5) {
                    return 0 === t5 ? parseInt(e5, 10) / 360 : 3 === t5 ? parseFloat(e5) : parseInt(e5, 10) / 100;
                  })), (l2 = l2.map(function(e5) {
                    return Math.max(Math.min(e5, 1), 0);
                  })).length) return h.default._hslaToRGBA(l2);
                  if (m.HSB.test(r4) ? (l2 = m.HSB.exec(r4).slice(1).map(function(e5, t5) {
                    return 0 === t5 ? parseInt(e5, 10) / 360 : parseInt(e5, 10) / 100;
                  }))[3] = 1 : m.HSBA.test(r4) && (l2 = m.HSBA.exec(r4).slice(1).map(function(e5, t5) {
                    return 0 === t5 ? parseInt(e5, 10) / 360 : 3 === t5 ? parseFloat(e5) : parseInt(e5, 10) / 100;
                  })), l2.length) {
                    for (n2 = l2.length - 1; 0 <= n2; --n2) l2[n2] = Math.max(Math.min(l2[n2], 1), 0);
                    return h.default._hsbaToRGBA(l2);
                  }
                  l2 = [1, 1, 1, 1];
                } else {
                  if (1 !== s3 && 2 !== s3 || "number" != typeof e4) throw new Error("".concat(arguments, "is not a valid color representation."));
                  l2[0] = e4 / a2[2], l2[1] = e4 / a2[2], l2[2] = e4 / a2[2], l2[3] = "number" == typeof t4 ? t4 / a2[3] : 1, l2 = l2.map(function(e5) {
                    return Math.max(Math.min(e5, 1), 0);
                  });
                }
                return l2;
              }
            }], (t3 = [{
              key: "toString",
              value: function(e4) {
                var t4 = this.levels, r4 = this._array, o2 = r4[3];
                switch (e4) {
                  case "#rrggbb":
                    return "#".concat(t4[0] < 16 ? "0".concat(t4[0].toString(16)) : t4[0].toString(16), t4[1] < 16 ? "0".concat(t4[1].toString(16)) : t4[1].toString(16), t4[2] < 16 ? "0".concat(t4[2].toString(16)) : t4[2].toString(16));
                  case "#rrggbbaa":
                    return "#".concat(t4[0] < 16 ? "0".concat(t4[0].toString(16)) : t4[0].toString(16), t4[1] < 16 ? "0".concat(t4[1].toString(16)) : t4[1].toString(16), t4[2] < 16 ? "0".concat(t4[2].toString(16)) : t4[2].toString(16), t4[3] < 16 ? "0".concat(t4[3].toString(16)) : t4[3].toString(16));
                  case "#rgb":
                    return "#".concat(Math.round(15 * r4[0]).toString(16), Math.round(15 * r4[1]).toString(16), Math.round(15 * r4[2]).toString(16));
                  case "#rgba":
                    return "#".concat(Math.round(15 * r4[0]).toString(16), Math.round(15 * r4[1]).toString(16), Math.round(15 * r4[2]).toString(16), Math.round(15 * r4[3]).toString(16));
                  case "rgb":
                    return "rgb(".concat(t4[0], ", ", t4[1], ", ", t4[2], ")");
                  case "rgb%":
                    return "rgb(".concat((100 * r4[0]).toPrecision(3), "%, ", (100 * r4[1]).toPrecision(3), "%, ", (100 * r4[2]).toPrecision(3), "%)");
                  case "rgba%":
                    return "rgba(".concat((100 * r4[0]).toPrecision(3), "%, ", (100 * r4[1]).toPrecision(3), "%, ", (100 * r4[2]).toPrecision(3), "%, ", (100 * r4[3]).toPrecision(3), "%)");
                  case "hsb":
                  case "hsv":
                    return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsb(".concat(this.hsba[0] * this.maxes[d.HSB][0], ", ", this.hsba[1] * this.maxes[d.HSB][1], ", ", this.hsba[2] * this.maxes[d.HSB][2], ")");
                  case "hsb%":
                  case "hsv%":
                    return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsb(".concat((100 * this.hsba[0]).toPrecision(3), "%, ", (100 * this.hsba[1]).toPrecision(3), "%, ", (100 * this.hsba[2]).toPrecision(3), "%)");
                  case "hsba":
                  case "hsva":
                    return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsba(".concat(this.hsba[0] * this.maxes[d.HSB][0], ", ", this.hsba[1] * this.maxes[d.HSB][1], ", ", this.hsba[2] * this.maxes[d.HSB][2], ", ", o2, ")");
                  case "hsba%":
                  case "hsva%":
                    return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsba(".concat((100 * this.hsba[0]).toPrecision(3), "%, ", (100 * this.hsba[1]).toPrecision(3), "%, ", (100 * this.hsba[2]).toPrecision(3), "%, ", (100 * o2).toPrecision(3), "%)");
                  case "hsl":
                    return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsl(".concat(this.hsla[0] * this.maxes[d.HSL][0], ", ", this.hsla[1] * this.maxes[d.HSL][1], ", ", this.hsla[2] * this.maxes[d.HSL][2], ")");
                  case "hsl%":
                    return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsl(".concat((100 * this.hsla[0]).toPrecision(3), "%, ", (100 * this.hsla[1]).toPrecision(3), "%, ", (100 * this.hsla[2]).toPrecision(3), "%)");
                  case "hsla":
                    return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsla(".concat(this.hsla[0] * this.maxes[d.HSL][0], ", ", this.hsla[1] * this.maxes[d.HSL][1], ", ", this.hsla[2] * this.maxes[d.HSL][2], ", ", o2, ")");
                  case "hsla%":
                    return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsl(".concat((100 * this.hsla[0]).toPrecision(3), "%, ", (100 * this.hsla[1]).toPrecision(3), "%, ", (100 * this.hsla[2]).toPrecision(3), "%, ", (100 * o2).toPrecision(3), "%)");
                  default:
                    return "rgba(".concat(t4[0], ",", t4[1], ",", t4[2], ",", o2, ")");
                }
              }
            }, {
              key: "setRed",
              value: function(e4) {
                this._array[0] = e4 / this.maxes[d.RGB][0], this._calculateLevels();
              }
            }, {
              key: "setGreen",
              value: function(e4) {
                this._array[1] = e4 / this.maxes[d.RGB][1], this._calculateLevels();
              }
            }, {
              key: "setBlue",
              value: function(e4) {
                this._array[2] = e4 / this.maxes[d.RGB][2], this._calculateLevels();
              }
            }, {
              key: "setAlpha",
              value: function(e4) {
                this._array[3] = e4 / this.maxes[this.mode][3], this._calculateLevels();
              }
            }, {
              key: "_calculateLevels",
              value: function() {
                for (var e4 = this._array, t4 = this.levels = new Array(e4.length), r4 = e4.length - 1; 0 <= r4; --r4) t4[r4] = Math.round(255 * e4[r4]);
                this.hsla = null, this.hsba = null;
              }
            }, {
              key: "_getAlpha",
              value: function() {
                return this._array[3] * this.maxes[this.mode][3];
              }
            }, {
              key: "_storeModeAndMaxes",
              value: function(e4, t4) {
                this.mode = e4, this.maxes = t4;
              }
            }, {
              key: "_getMode",
              value: function() {
                return this.mode;
              }
            }, {
              key: "_getMaxes",
              value: function() {
                return this.maxes;
              }
            }, {
              key: "_getBlue",
              value: function() {
                return this._array[2] * this.maxes[d.RGB][2];
              }
            }, {
              key: "_getBrightness",
              value: function() {
                return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), this.hsba[2] * this.maxes[d.HSB][2];
              }
            }, {
              key: "_getGreen",
              value: function() {
                return this._array[1] * this.maxes[d.RGB][1];
              }
            }, {
              key: "_getHue",
              value: function() {
                return this.mode === d.HSB ? (this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), this.hsba[0] * this.maxes[d.HSB][0]) : (this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), this.hsla[0] * this.maxes[d.HSL][0]);
              }
            }, {
              key: "_getLightness",
              value: function() {
                return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), this.hsla[2] * this.maxes[d.HSL][2];
              }
            }, {
              key: "_getRed",
              value: function() {
                return this._array[0] * this.maxes[d.RGB][0];
              }
            }, {
              key: "_getSaturation",
              value: function() {
                return this.mode === d.HSB ? (this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), this.hsba[1] * this.maxes[d.HSB][1]) : (this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), this.hsla[1] * this.maxes[d.HSL][1]);
              }
            }]) && l(e3.prototype, t3), r3 && l(e3, r3), c2;
          }(), n.default.Color);
          r2.default = u2;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "./color_conversion": 268,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.constructor": 194,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.trim": 209,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        271: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.fill"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var s2 = (n = e2("../core/main")) && n.__esModule ? n : {
            default: n
          }, a = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = l();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function l() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), l = function() {
              return e3;
            }, e3);
          }
          e2("./p5.Color"), s2.default.prototype.beginClip = function() {
            this._renderer.beginClip(0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {});
          }, s2.default.prototype.endClip = function() {
            this._renderer.endClip();
          }, s2.default.prototype.clip = function(e3, t3) {
            this._renderer.beginClip(t3), e3(), this._renderer.endClip(t3);
          }, s2.default.prototype.background = function() {
            var e3;
            return (e3 = this._renderer).background.apply(e3, arguments), this;
          }, s2.default.prototype.clear = function() {
            return this._renderer.clear((arguments.length <= 0 ? void 0 : arguments[0]) || 0, (arguments.length <= 1 ? void 0 : arguments[1]) || 0, (arguments.length <= 2 ? void 0 : arguments[2]) || 0, (arguments.length <= 3 ? void 0 : arguments[3]) || 0), this;
          }, s2.default.prototype.colorMode = function(e3, t3, r3, o2, n2) {
            return s2.default._validateParameters("colorMode", arguments), e3 !== a.RGB && e3 !== a.HSB && e3 !== a.HSL || (this._colorMode = e3, e3 = this._colorMaxes[e3], 2 === arguments.length ? (e3[0] = t3, e3[1] = t3, e3[2] = t3, e3[3] = t3) : 4 === arguments.length ? (e3[0] = t3, e3[1] = r3, e3[2] = o2) : 5 === arguments.length && (e3[0] = t3, e3[1] = r3, e3[2] = o2, e3[3] = n2)), this;
          }, s2.default.prototype.fill = function() {
            var e3;
            return this._renderer._setProperty("_fillSet", true), this._renderer._setProperty("_doFill", true), (e3 = this._renderer).fill.apply(e3, arguments), this;
          }, s2.default.prototype.noFill = function() {
            return this._renderer._setProperty("_doFill", false), this;
          }, s2.default.prototype.noStroke = function() {
            return this._renderer._setProperty("_doStroke", false), this;
          }, s2.default.prototype.stroke = function() {
            var e3;
            return this._renderer._setProperty("_strokeSet", true), this._renderer._setProperty("_doStroke", true), (e3 = this._renderer).stroke.apply(e3, arguments), this;
          }, s2.default.prototype.erase = function() {
            return this._renderer.erase(0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 255, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 255), this;
          }, s2.default.prototype.noErase = function() {
            return this._renderer.noErase(), this;
          };
          var n = s2.default;
          r2.default = n;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "./p5.Color": 270,
          "core-js/modules/es.array.fill": 156,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        272: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.QUADRATIC = r2.LINEAR = r2._CTX_MIDDLE = r2._DEFAULT_LEADMULT = r2._DEFAULT_TEXT_FILL = r2.WORD = r2.CHAR = r2.BOLDITALIC = r2.BOLD = r2.ITALIC = r2.NORMAL = r2.BLUR = r2.ERODE = r2.DILATE = r2.POSTERIZE = r2.INVERT = r2.OPAQUE = r2.GRAY = r2.THRESHOLD = r2.BURN = r2.DODGE = r2.SOFT_LIGHT = r2.HARD_LIGHT = r2.OVERLAY = r2.REPLACE = r2.SCREEN = r2.MULTIPLY = r2.EXCLUSION = r2.SUBTRACT = r2.DIFFERENCE = r2.LIGHTEST = r2.DARKEST = r2.ADD = r2.REMOVE = r2.BLEND = r2.UP_ARROW = r2.TAB = r2.SHIFT = r2.RIGHT_ARROW = r2.RETURN = r2.OPTION = r2.LEFT_ARROW = r2.ESCAPE = r2.ENTER = r2.DOWN_ARROW = r2.DELETE = r2.CONTROL = r2.BACKSPACE = r2.ALT = r2.AUTO = r2.HSL = r2.HSB = r2.RGB = r2.MITER = r2.BEVEL = r2.ROUND = r2.SQUARE = r2.PROJECT = r2.PIE = r2.CHORD = r2.OPEN = r2.CLOSE = r2.TESS = r2.QUAD_STRIP = r2.QUADS = r2.TRIANGLE_STRIP = r2.TRIANGLE_FAN = r2.TRIANGLES = r2.LINE_LOOP = r2.LINE_STRIP = r2.LINES = r2.POINTS = r2.BASELINE = r2.BOTTOM = r2.TOP = r2.CENTER = r2.LEFT = r2.RIGHT = r2.RADIUS = r2.CORNERS = r2.CORNER = r2.RAD_TO_DEG = r2.DEG_TO_RAD = r2.RADIANS = r2.DEGREES = r2.TWO_PI = r2.TAU = r2.QUARTER_PI = r2.PI = r2.HALF_PI = r2.WAIT = r2.TEXT = r2.MOVE = r2.HAND = r2.CROSS = r2.ARROW = r2.WEBGL2 = r2.WEBGL = r2.P2D = r2.VERSION = void 0, r2.RGBA = r2.HALF_FLOAT = r2.FLOAT = r2.UNSIGNED_INT = r2.UNSIGNED_BYTE = r2.COVER = r2.CONTAIN = r2.FALLBACK = r2.LABEL = r2.AXES = r2.GRID = r2._DEFAULT_FILL = r2._DEFAULT_STROKE = r2.PORTRAIT = r2.LANDSCAPE = r2.SMOOTH = r2.FLAT = r2.MIRROR = r2.CLAMP = r2.REPEAT = r2.NEAREST = r2.IMAGE = r2.IMMEDIATE = r2.TEXTURE = r2.FILL = r2.STROKE = r2.CURVE = r2.BEZIER = void 0;
          var o = Math.PI, n = (r2.VERSION = "1.11.3", r2.P2D = "p2d", r2.WEBGL = "webgl", r2.WEBGL2 = "webgl2", r2.ARROW = "default", r2.CROSS = "crosshair", r2.HAND = "pointer", r2.MOVE = "move", r2.TEXT = "text", r2.WAIT = "wait", o / 2), n = (r2.HALF_PI = n, o), n = (r2.PI = n, o / 4), n = (r2.QUARTER_PI = n, 2 * o), n = (r2.TAU = n, 2 * o), n = (r2.TWO_PI = n, r2.DEGREES = "degrees", r2.RADIANS = "radians", o / 180), n = (r2.DEG_TO_RAD = n, 180 / o);
          r2.RAD_TO_DEG = n, r2.CORNER = "corner", r2.CORNERS = "corners", r2.RADIUS = "radius", r2.RIGHT = "right", r2.LEFT = "left", r2.CENTER = "center", r2.TOP = "top", r2.BOTTOM = "bottom", r2.BASELINE = "alphabetic", r2.POINTS = 0, r2.LINES = 1, r2.LINE_STRIP = 3, r2.LINE_LOOP = 2, r2.TRIANGLES = 4, r2.TRIANGLE_FAN = 6, r2.TRIANGLE_STRIP = 5, r2.QUADS = "quads", r2.QUAD_STRIP = "quad_strip", r2.TESS = "tess", r2.CLOSE = "close", r2.OPEN = "open", r2.CHORD = "chord", r2.PIE = "pie", r2.PROJECT = "square", r2.SQUARE = "butt", r2.ROUND = "round", r2.BEVEL = "bevel", r2.MITER = "miter", r2.RGB = "rgb", r2.HSB = "hsb", r2.HSL = "hsl", r2.AUTO = "auto", r2.ALT = 18, r2.BACKSPACE = 8, r2.CONTROL = 17, r2.DELETE = 46, r2.DOWN_ARROW = 40, r2.ENTER = 13, r2.ESCAPE = 27, r2.LEFT_ARROW = 37, r2.OPTION = 18, r2.RETURN = 13, r2.RIGHT_ARROW = 39, r2.SHIFT = 16, r2.TAB = 9, r2.UP_ARROW = 38, r2.BLEND = "source-over", r2.REMOVE = "destination-out", r2.ADD = "lighter", r2.DARKEST = "darken", r2.LIGHTEST = "lighten", r2.DIFFERENCE = "difference", r2.SUBTRACT = "subtract", r2.EXCLUSION = "exclusion", r2.MULTIPLY = "multiply", r2.SCREEN = "screen", r2.REPLACE = "copy", r2.OVERLAY = "overlay", r2.HARD_LIGHT = "hard-light", r2.SOFT_LIGHT = "soft-light", r2.DODGE = "color-dodge", r2.BURN = "color-burn", r2.THRESHOLD = "threshold", r2.GRAY = "gray", r2.OPAQUE = "opaque", r2.INVERT = "invert", r2.POSTERIZE = "posterize", r2.DILATE = "dilate", r2.ERODE = "erode", r2.BLUR = "blur", r2.NORMAL = "normal", r2.ITALIC = "italic", r2.BOLD = "bold", r2.BOLDITALIC = "bold italic", r2.CHAR = "CHAR", r2.WORD = "WORD", r2._DEFAULT_TEXT_FILL = "#000000", r2._DEFAULT_LEADMULT = 1.25, r2._CTX_MIDDLE = "middle", r2.LINEAR = "linear", r2.QUADRATIC = "quadratic", r2.BEZIER = "bezier", r2.CURVE = "curve", r2.STROKE = "stroke", r2.FILL = "fill", r2.TEXTURE = "texture", r2.IMMEDIATE = "immediate", r2.IMAGE = "image", r2.NEAREST = "nearest", r2.REPEAT = "repeat", r2.CLAMP = "clamp", r2.MIRROR = "mirror", r2.FLAT = "flat", r2.SMOOTH = "smooth", r2.LANDSCAPE = "landscape", r2.PORTRAIT = "portrait", r2._DEFAULT_STROKE = "#000000", r2._DEFAULT_FILL = "#FFFFFF", r2.GRID = "grid", r2.AXES = "axes", r2.LABEL = "label", r2.FALLBACK = "fallback", r2.CONTAIN = "contain", r2.COVER = "cover", r2.UNSIGNED_BYTE = "unsigned-byte", r2.UNSIGNED_INT = "unsigned-int", r2.FLOAT = "float", r2.HALF_FLOAT = "half-float";
          r2.RGBA = "rgba";
        }, {}],
        273: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.search"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.search"), e2("core-js/modules/es.string.split"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (s2 = e2("./main")) && s2.__esModule ? s2 : {
            default: s2
          }, s2 = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("./constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          var l = [s2.ARROW, s2.CROSS, s2.HAND, s2.MOVE, s2.TEXT, s2.WAIT], u2 = (n.default.prototype._frameRate = 0, n.default.prototype._lastFrameTime = window.performance.now(), n.default.prototype._targetFrameRate = 60, window.print), c = false;
          function d() {
            return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth || 0;
          }
          function h() {
            return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight || 0;
          }
          n.default.prototype.print = function() {
            var e3;
            arguments.length ? (e3 = console).log.apply(e3, arguments) : c || (u2(), window.confirm("You just tried to print the webpage. Do you want to prevent this from running again?") && (c = true));
          }, n.default.prototype.frameCount = 0, n.default.prototype.deltaTime = 0, n.default.prototype.focused = document.hasFocus(), n.default.prototype.cursor = function(e3, t3, r3) {
            var o2, n2 = "auto", s3 = this._curElement.elt;
            l.includes(e3) ? n2 = e3 : "string" == typeof e3 && (o2 = "", t3 && r3 && "number" == typeof t3 && "number" == typeof r3 && (o2 = "".concat(t3, " ").concat(r3)), n2 = "http://" === e3.substring(0, 7) || "https://" === e3.substring(0, 8) || /\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(e3) ? "url(".concat(e3, ") ").concat(o2, ", auto") : e3), s3.style.cursor = n2;
          }, n.default.prototype.frameRate = function(e3) {
            return n.default._validateParameters("frameRate", arguments), "number" != typeof e3 || e3 < 0 ? this._frameRate : (this._setProperty("_targetFrameRate", e3), 0 === e3 && this._setProperty("_frameRate", e3), this);
          }, n.default.prototype.getFrameRate = function() {
            return this.frameRate();
          }, n.default.prototype.setFrameRate = function(e3) {
            return this.frameRate(e3);
          }, n.default.prototype.getTargetFrameRate = function() {
            return this._targetFrameRate;
          }, n.default.prototype.noCursor = function() {
            this._curElement.elt.style.cursor = "none";
          }, n.default.prototype.webglVersion = s2.P2D, n.default.prototype.displayWidth = screen.width, n.default.prototype.displayHeight = screen.height, n.default.prototype.windowWidth = 0, n.default.prototype.windowHeight = 0, n.default.prototype._onresize = function(e3) {
            this._setProperty("windowWidth", d()), this._setProperty("windowHeight", h());
            var t3 = this._isGlobal ? window : this;
            "function" != typeof t3.windowResized || void 0 === (t3 = t3.windowResized(e3)) || t3 || e3.preventDefault();
          }, n.default.prototype._updateWindowSize = function() {
            this._setProperty("windowWidth", d()), this._setProperty("windowHeight", h());
          }, n.default.prototype.width = 0, n.default.prototype.height = 0, n.default.prototype.fullscreen = function(e3) {
            if (n.default._validateParameters("fullscreen", arguments), void 0 === e3) return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
            if (e3) {
              e3 = document.documentElement;
              if (!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled)) throw new Error("Fullscreen not enabled in this browser.");
              e3.requestFullscreen ? e3.requestFullscreen() : e3.mozRequestFullScreen ? e3.mozRequestFullScreen() : e3.webkitRequestFullscreen ? e3.webkitRequestFullscreen() : e3.msRequestFullscreen && e3.msRequestFullscreen();
            } else document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen();
          }, n.default.prototype.pixelDensity = function(e3) {
            var t3;
            return n.default._validateParameters("pixelDensity", arguments), "number" == typeof e3 ? (e3 !== this._pixelDensity && (this._pixelDensity = this._maxAllowedPixelDimensions = e3), (t3 = this).resizeCanvas(this.width, this.height, true)) : t3 = this._pixelDensity, t3;
          }, n.default.prototype.displayDensity = function() {
            return window.devicePixelRatio;
          }, n.default.prototype.getURL = function() {
            return location.href;
          }, n.default.prototype.getURLPath = function() {
            return location.pathname.split("/").filter(function(e3) {
              return "" !== e3;
            });
          }, n.default.prototype.getURLParams = function() {
            for (var e3, t3 = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim, r3 = {}; null != (e3 = t3.exec(location.search)); ) e3.index === t3.lastIndex && t3.lastIndex++, r3[e3[1]] = e3[2];
            return r3;
          };
          e2 = n.default;
          r2.default = e2;
        }, {
          "./constants": 272,
          "./main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.filter": 157,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.search": 205,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        274: [function(r2, e2, t2) {
          "use strict";
          r2("core-js/modules/es.symbol"), r2("core-js/modules/es.symbol.description"), r2("core-js/modules/es.symbol.iterator"), r2("core-js/modules/es.array.concat"), r2("core-js/modules/es.array.filter"), r2("core-js/modules/es.array.for-each"), r2("core-js/modules/es.array.includes"), r2("core-js/modules/es.array.iterator"), r2("core-js/modules/es.array.join"), r2("core-js/modules/es.array.map"), r2("core-js/modules/es.array.slice"), r2("core-js/modules/es.array.some"), r2("core-js/modules/es.function.name"), r2("core-js/modules/es.object.assign"), r2("core-js/modules/es.object.get-own-property-names"), r2("core-js/modules/es.object.keys"), r2("core-js/modules/es.object.to-string"), r2("core-js/modules/es.regexp.constructor"), r2("core-js/modules/es.regexp.exec"), r2("core-js/modules/es.regexp.to-string"), r2("core-js/modules/es.string.iterator"), r2("core-js/modules/es.string.match"), r2("core-js/modules/es.string.replace"), r2("core-js/modules/es.string.split"), r2("core-js/modules/es.string.starts-with"), r2("core-js/modules/web.dom-collections.for-each"), r2("core-js/modules/web.dom-collections.iterator"), r2("core-js/modules/es.symbol"), r2("core-js/modules/es.symbol.description"), r2("core-js/modules/es.symbol.iterator"), r2("core-js/modules/es.array.concat"), r2("core-js/modules/es.array.filter"), r2("core-js/modules/es.array.for-each"), r2("core-js/modules/es.array.includes"), r2("core-js/modules/es.array.iterator"), r2("core-js/modules/es.array.join"), r2("core-js/modules/es.array.map"), r2("core-js/modules/es.array.slice"), r2("core-js/modules/es.array.some"), r2("core-js/modules/es.function.name"), r2("core-js/modules/es.object.assign"), r2("core-js/modules/es.object.get-own-property-names"), r2("core-js/modules/es.object.keys"), r2("core-js/modules/es.object.to-string"), r2("core-js/modules/es.regexp.constructor"), r2("core-js/modules/es.regexp.exec"), r2("core-js/modules/es.regexp.to-string"), r2("core-js/modules/es.string.iterator"), r2("core-js/modules/es.string.match"), r2("core-js/modules/es.string.replace"), r2("core-js/modules/es.string.split"), r2("core-js/modules/es.string.starts-with"), r2("core-js/modules/web.dom-collections.for-each"), r2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.default = void 0;
          var o = (l = r2("../main")) && l.__esModule ? l : {
            default: l
          };
          r2("../internationalization");
          function n(r3, o2) {
            o2 = o2 || console.log.bind(console), s2 || i(), s2.some(function(e3) {
              var t3;
              if (r3.message && null !== r3.message.match("\\W?".concat(e3.name, "\\W"))) return t3 = "function" === e3.type ? "".concat(e3.name, "()") : e3.name, o2("Did you just try to use p5.js's ".concat(t3, " ").concat(e3.type, "? If so, you may want to move it into your sketch's setup() function.\n\nFor more details, see: ").concat(a)), true;
            });
          }
          var s2 = null, i = null, a = (o.default._friendlyError = o.default._checkForUserDefinedFunctions = o.default._fesErrorMonitor = function() {
          }, s2 = null, "https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup"), i = function() {
            function e3(r3) {
              return Object.getOwnPropertyNames(r3).filter(function(e4) {
                return "_" !== e4[0] && !(e4 in t3) && (t3[e4] = true);
              }).map(function(e4) {
                var t4 = "function" == typeof r3[e4] ? "function" : e4 === e4.toUpperCase() ? "constant" : "variable";
                return {
                  name: e4,
                  type: t4
                };
              });
            }
            var t3 = {};
            (s2 = [].concat(e3(o.default.prototype), e3(r2("../constants")))).sort(function(e4, t4) {
              return t4.name.length - e4.name.length;
            });
          }, l = (o.default.prototype._helpForMisusedAtTopLevelCode = n, "complete" !== document.readyState && (window.addEventListener("error", n, false), window.addEventListener("load", function() {
            window.removeEventListener("error", n, false);
          })), o.default);
          t2.default = l;
        }, {
          "../constants": 272,
          "../internationalization": 281,
          "../main": 283,
          "./browser_errors": void 0,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.filter": 157,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.array.some": 170,
          "core-js/modules/es.function.name": 174,
          "core-js/modules/es.object.assign": 183,
          "core-js/modules/es.object.get-own-property-names": 187,
          "core-js/modules/es.object.keys": 189,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.constructor": 194,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.match": 201,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.string.starts-with": 207,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.for-each": 245,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        275: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var o = (o = e2("../main")) && o.__esModule ? o : {
            default: o
          };
          e2("../internationalization");
          o.default._friendlyFileLoadError = function() {
          };
          e2 = o.default;
          r2.default = e2;
        }, {
          "../internationalization": 281,
          "../main": 283
        }],
        276: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.constructor"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.match"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.string.trim"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.regexp.constructor"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.match"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.string.trim"), e2("core-js/modules/web.dom-collections.for-each"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = C(e2("../main")), s2 = e2("../internationalization"), a = O(e2("../constants")), l, u2, c, d, h, f, p, m, y, g, v, b, _, j, x, w, S, T, E, M, I;
          function k() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), k = function() {
              return e3;
            }, e3);
          }
          function O(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = k();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2, n2 = {}, s3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) Object.prototype.hasOwnProperty.call(e3, r3) && ((o2 = s3 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (o2.get || o2.set) ? Object.defineProperty(n2, r3, o2) : n2[r3] = e3[r3]);
            return n2.default = e3, t3 && t3.set(e3, n2), n2;
          }
          function C(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          function D(e3) {
            return L(e3) || P(e3) || A();
          }
          function A() {
            throw new TypeError("Invalid attempt to spread non-iterable instance");
          }
          function P(e3) {
            if (Symbol.iterator in Object(e3) || "[object Arguments]" === Object.prototype.toString.call(e3)) return Array.from(e3);
          }
          function L(e3) {
            if (Array.isArray(e3)) {
              for (var t3 = 0, r3 = new Array(e3.length); t3 < e3.length; t3++) r3[t3] = e3[t3];
              return r3;
            }
          }
          n.default._fesCodeReader = function() {
          };
          var R = n.default;
          r2.default = R;
        }, {
          "../constants": 272,
          "../internationalization": 281,
          "../main": 283,
          "core-js/modules/es.array.filter": 157,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.keys": 189,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.constructor": 194,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.match": 201,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.string.trim": 209,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.for-each": 245,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        277: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.match"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.match"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function o() {
            var t3 = /(^|@)\S+:\d+/, r3 = /^\s*at .*(\S+:\d+|\(native\))/m, o2 = /^(eval@)?(\[native code])?$/;
            return {
              parse: function(e3) {
                return void 0 !== e3.stacktrace || void 0 !== e3["opera#sourceloc"] ? this.parseOpera(e3) : e3.stack && e3.stack.match(r3) ? this.parseV8OrIE(e3) : e3.stack ? this.parseFFOrSafari(e3) : void 0;
              },
              extractLocation: function(e3) {
                return -1 === e3.indexOf(":") ? [e3] : [(e3 = /(.+?)(?::(\d+))?(?::(\d+))?$/.exec(e3.replace(/[()]/g, "")))[1], e3[2] || void 0, e3[3] || void 0];
              },
              parseV8OrIE: function(e3) {
                return e3.stack.split("\n").filter(function(e4) {
                  return !!e4.match(r3);
                }, this).map(function(e4) {
                  var t4 = (e4 = -1 < e4.indexOf("(eval ") ? e4.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, "") : e4).replace(/^\s+/, "").replace(/\(eval code/g, "("), r4 = t4.match(/ (\((.+):(\d+):(\d+)\)$)/), t4 = (t4 = r4 ? t4.replace(r4[0], "") : t4).split(/\s+/).slice(1), r4 = this.extractLocation(r4 ? r4[1] : t4.pop());
                  return {
                    functionName: t4.join(" ") || void 0,
                    fileName: -1 < ["eval", "<anonymous>"].indexOf(r4[0]) ? void 0 : r4[0],
                    lineNumber: r4[1],
                    columnNumber: r4[2],
                    source: e4
                  };
                }, this);
              },
              parseFFOrSafari: function(e3) {
                return e3.stack.split("\n").filter(function(e4) {
                  return !e4.match(o2);
                }, this).map(function(e4) {
                  var t4, r4;
                  return -1 === (e4 = -1 < e4.indexOf(" > eval") ? e4.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1") : e4).indexOf("@") && -1 === e4.indexOf(":") ? {
                    functionName: e4
                  } : {
                    functionName: (r4 = e4.match(t4 = /((.*".+"[^@]*)?[^@]*)(?:@)/)) && r4[1] ? r4[1] : void 0,
                    fileName: (r4 = this.extractLocation(e4.replace(t4, "")))[0],
                    lineNumber: r4[1],
                    columnNumber: r4[2],
                    source: e4
                  };
                }, this);
              },
              parseOpera: function(e3) {
                return !e3.stacktrace || -1 < e3.message.indexOf("\n") && e3.message.split("\n").length > e3.stacktrace.split("\n").length ? this.parseOpera9(e3) : e3.stack ? this.parseOpera11(e3) : this.parseOpera10(e3);
              },
              parseOpera9: function(e3) {
                for (var t4 = /Line (\d+).*script (?:in )?(\S+)/i, r4 = e3.message.split("\n"), o3 = [], n = 2, s2 = r4.length; n < s2; n += 2) {
                  var i = t4.exec(r4[n]);
                  i && o3.push({
                    fileName: i[2],
                    lineNumber: i[1],
                    source: r4[n]
                  });
                }
                return o3;
              },
              parseOpera10: function(e3) {
                for (var t4 = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i, r4 = e3.stacktrace.split("\n"), o3 = [], n = 0, s2 = r4.length; n < s2; n += 2) {
                  var i = t4.exec(r4[n]);
                  i && o3.push({
                    functionName: i[3] || void 0,
                    fileName: i[2],
                    lineNumber: i[1],
                    source: r4[n]
                  });
                }
                return o3;
              },
              parseOpera11: function(e3) {
                return e3.stack.split("\n").filter(function(e4) {
                  return !!e4.match(t3) && !e4.match(/^Error created at/);
                }, this).map(function(e4) {
                  var t4, r4 = e4.split("@"), o3 = this.extractLocation(r4.pop()), r4 = r4.shift() || "";
                  return {
                    functionName: r4.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0,
                    args: void 0 === (t4 = r4.match(/\(([^)]*)\)/) ? r4.replace(/^[^(]+\(([^)]*)\)$/, "$1") : t4) || "[arguments not available]" === t4 ? void 0 : t4.split(","),
                    fileName: o3[0],
                    lineNumber: o3[1],
                    columnNumber: o3[2],
                    source: e4
                  };
                }, this);
              }
            };
          }
          e2.default._getErrorStackParser = function() {
            return new o();
          };
          e2 = e2.default;
          r2.default = e2;
        }, {
          "../main": 283,
          "core-js/modules/es.array.filter": 157,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.string.match": 201,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.string.split": 206
        }],
        278: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.last-index-of"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.map"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.reflect.construct"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.set"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.last-index-of"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.set"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.split"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (n = e2("../main")) && n.__esModule ? n : {
            default: n
          };
          (function(e3) {
            if (e3 && e3.__esModule) return;
            if (null === e3 || "object" !== a(e3) && "function" != typeof e3) return;
            var t3 = i();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s2;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r3, s2) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
          })(e2("../constants")), e2("../internationalization");
          function i() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), i = function() {
              return e3;
            }, e3);
          }
          function a(e3) {
            return (a = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          n.default._validateParameters = n.default._clearValidateParamsCache = function() {
          };
          e2 = n.default;
          r2.default = e2;
        }, {
          "../../../docs/parameterData.json": void 0,
          "../constants": 272,
          "../internationalization": 281,
          "../main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.last-index-of": 167,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.function.name": 174,
          "core-js/modules/es.map": 175,
          "core-js/modules/es.number.constructor": 179,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.get-prototype-of": 188,
          "core-js/modules/es.object.keys": 189,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.reflect.construct": 192,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.set": 197,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.for-each": 245,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        279: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var a = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = l();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s2;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s2 = n ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r3, s2) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("./constants"));
          function l() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), l = function() {
              return e3;
            }, e3);
          }
          r2.default = {
            modeAdjust: function(e3, t3, r3, o2, n) {
              var s2;
              return n === a.CORNER ? s2 = {
                x: e3,
                y: t3,
                w: Math.abs(r3),
                h: Math.abs(o2)
              } : n === a.CORNERS ? s2 = {
                x: Math.min(e3, r3),
                y: Math.min(t3, o2),
                w: Math.abs(r3 - e3),
                h: Math.abs(o2 - t3)
              } : n === a.RADIUS ? s2 = {
                x: e3 - (r3 = Math.abs(r3)),
                y: t3 - (o2 = Math.abs(o2)),
                w: 2 * r3,
                h: 2 * o2
              } : n === a.CENTER && (s2 = {
                x: e3 - 0.5 * (r3 = Math.abs(r3)),
                y: t3 - 0.5 * (o2 = Math.abs(o2)),
                w: r3,
                h: o2
              }), s2;
            }
          };
        }, {
          "./constants": 272,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        280: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator");
          var o = (n = e2("../core/main")) && n.__esModule ? n : {
            default: n
          };
          e2("./internationalization");
          var n = Promise.resolve();
          Promise.all([new Promise(function(e3, t3) {
            "complete" === document.readyState ? e3() : window.addEventListener("load", e3, false);
          }), n]).then(function() {
            var e3;
            void 0 !== window._setupDone ? console.warn("p5.js seems to have been imported multiple times. Please remove the duplicate import") : window.mocha || (e3 = new Event("p5Ready"), window.dispatchEvent(e3), (window.setup && "function" == typeof window.setup || window.draw && "function" == typeof window.draw) && !o.default.instance && new o.default());
          });
        }, {
          "../core/main": 283,
          "./internationalization": 281,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.promise": 191,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        281: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.split"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.split"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.setTranslatorLanguage = r2.currentTranslatorLanguage = r2.availableTranslatorLanguages = r2.initialize = r2.translator = void 0;
          var n, s2, o = a(e2("i18next")), i = a(e2("i18next-browser-languagedetector"));
          function a(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          function l(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          var u2 = function() {
            function r3(e4, t4) {
              if (!(this instanceof r3)) throw new TypeError("Cannot call a class as a function");
              this.init(e4, t4);
            }
            var e3, t3, o2;
            return e3 = r3, (t3 = [{
              key: "fetchWithTimeout",
              value: function(e4, t4) {
                var r4 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 2e3;
                return Promise.race([fetch(e4, t4), new Promise(function(e5, t5) {
                  return setTimeout(function() {
                    return t5(new Error("timeout"));
                  }, r4);
                })]);
              }
            }, {
              key: "init",
              value: function(e4) {
                var t4 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
                this.services = e4, this.options = t4;
              }
            }, {
              key: "read",
              value: function(e4, t4, r4) {
                var o3 = this.options.loadPath;
                e4 === this.options.fallback ? r4(null, n[e4][t4]) : s2.includes(e4) ? (o3 = this.services.interpolator.interpolate(o3, {
                  lng: e4,
                  ns: t4
                }), this.loadUrl(o3, r4)) : r4("Not found", false);
              }
            }, {
              key: "loadUrl",
              value: function(t4, r4) {
                this.fetchWithTimeout(t4).then(function(e4) {
                  if (e4.ok) return e4.json();
                  throw new Error("failed loading ".concat(t4));
                }, function() {
                  throw new Error("failed loading ".concat(t4));
                }).then(function(e4) {
                  return r4(null, e4);
                }).catch(r4);
              }
            }]) && l(e3.prototype, t3), o2 && l(e3, o2), r3;
          }();
          u2.type = "backend", r2.translator = function(e3, t3) {
            console.debug("p5.js translator called before translations were loaded"), o.default.t(e3, t3);
          }, r2.initialize = function() {
            return o.default.use(i.default).use(u2).init({
              fallbackLng: "en",
              nestingPrefix: "$tr(",
              nestingSuffix: ")",
              defaultNS: "translation",
              returnEmptyString: false,
              interpolation: {
                escapeValue: false
              },
              detection: {
                checkWhitelist: false,
                order: ["querystring", "navigator", "htmlTag", "path", "subdomain"],
                caches: []
              },
              backend: {
                fallback: "en",
                loadPath: "https://cdn.jsdelivr.net/npm/p5/translations/{{lng}}/{{ns}}.json"
              },
              partialBundledLanguages: true,
              resources: n
            }).then(function(e3) {
              r2.translator = e3;
            }, function(e3) {
              return console.debug("Translations failed to load (".concat(e3, ")"));
            });
          }, r2.availableTranslatorLanguages = function() {
            return o.default.languages;
          }, r2.currentTranslatorLanguage = function(e3) {
            return o.default.language;
          };
          r2.setTranslatorLanguage = function(e3) {
            return o.default.changeLanguage(e3 || void 0, function(e4) {
              return console.debug("Translations failed to load (".concat(e4, ")"));
            });
          };
        }, {
          "../../translations": void 0,
          "../../translations/dev": void 0,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.object.keys": 189,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.promise": 191,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/web.dom-collections.iterator": 246,
          i18next: 3,
          "i18next-browser-languagedetector": 3
        }],
        282: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("./main")) && e2.__esModule ? e2 : {
            default: e2
          };
          e2.default.prototype.pushStyle = function() {
            throw new Error("pushStyle() not used, see push()");
          }, e2.default.prototype.popStyle = function() {
            throw new Error("popStyle() not used, see pop()");
          }, e2.default.prototype.popMatrix = function() {
            throw new Error("popMatrix() not used, see pop()");
          }, e2.default.prototype.pushMatrix = function() {
            throw new Error("pushMatrix() not used, see push()");
          };
          e2 = e2.default;
          r2.default = e2;
        }, {
          "./main": 283
        }],
        283: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.get-own-property-names"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.object.get-own-property-names"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0, e2("./shim");
          var n = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("./constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          function s2(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          var l, u2 = function() {
            function g(e4, t4) {
              var d = this;
              if (!(this instanceof g)) throw new TypeError("Cannot call a class as a function");
              this._setupDone = false, this._preloadDone = false, this._pixelDensity = Math.ceil(window.devicePixelRatio) || 1, this._maxAllowedPixelDimensions = 0, this._userNode = t4, this._curElement = null, this._elements = [], this._glAttributes = null, this._requestAnimId = 0, this._preloadCount = 0, this._isGlobal = false, this._loop = true, this._startListener = null, this._initializeInstanceVariables(), this._defaultCanvasSize = {
                width: 100,
                height: 100
              }, this._events = {
                mousemove: null,
                mousedown: null,
                mouseup: null,
                dragend: null,
                dragover: null,
                click: null,
                dblclick: null,
                mouseover: null,
                mouseout: null,
                keydown: null,
                keyup: null,
                keypress: null,
                touchstart: null,
                touchmove: null,
                touchend: null,
                resize: null,
                blur: null
              }, this._millisStart = -1, this._recording = false, this.touchstart = false, this.touchend = false, this._lcg_random_state = null, this._gaussian_previous = false, this._events.wheel = null, this._loadingScreenId = "p5_loading", this._registeredMethods = {};
              var t4 = Object.getOwnPropertyNames(g.prototype._registeredMethods), r4 = true, o2 = false, n2 = void 0;
              try {
                for (var s3, i2 = t4[Symbol.iterator](); !(r4 = (s3 = i2.next()).done); r4 = true) {
                  var a2 = s3.value;
                  this._registeredMethods[a2] = g.prototype._registeredMethods[a2].slice();
                }
              } catch (e5) {
                o2 = true, n2 = e5;
              } finally {
                try {
                  r4 || null == i2.return || i2.return();
                } finally {
                  if (o2) throw n2;
                }
              }
              window.DeviceOrientationEvent && (this._events.deviceorientation = null), window.DeviceMotionEvent && !window._isNodeWebkit && (this._events.devicemotion = null), g.prototype.callRegisteredHooksFor = function(t5) {
                var e5 = this || g.prototype, r5 = this._isGlobal ? window : this;
                if (e5._registeredMethods.hasOwnProperty(t5)) {
                  var e5 = e5._registeredMethods[t5], o3 = true, t5 = false, n3 = void 0;
                  try {
                    for (var s4, i3 = e5[Symbol.iterator](); !(o3 = (s4 = i3.next()).done); o3 = true) {
                      var a3 = s4.value;
                      "function" == typeof a3 && a3.call(r5);
                    }
                  } catch (e6) {
                    t5 = true, n3 = e6;
                  } finally {
                    try {
                      o3 || null == i3.return || i3.return();
                    } finally {
                      if (t5) throw n3;
                    }
                  }
                }
              }, this._start = function() {
                d._userNode && "string" == typeof d._userNode && (d._userNode = document.getElementById(d._userNode));
                var e5 = d._isGlobal ? window : d;
                if (e5.preload) {
                  d.callRegisteredHooksFor("beforePreload");
                  var t5, r5 = document.getElementById(d._loadingScreenId), o3 = (r5 || ((r5 = document.createElement("div")).innerHTML = "Loading...", r5.style.position = "absolute", r5.id = d._loadingScreenId, (d._userNode || document.body).appendChild(r5)), d._preloadMethods);
                  for (t5 in o3) {
                    o3[t5] = o3[t5] || g;
                    var n3 = o3[t5];
                    n3 !== g.prototype && n3 !== g || (d._isGlobal && (window[t5] = d._wrapPreload(d, t5)), n3 = d), d._registeredPreloadMethods[t5] = n3[t5], n3[t5] = d._wrapPreload(n3, t5);
                  }
                  e5.preload(), d._runIfPreloadsAreDone();
                } else d._setup(), d._recording || d._draw();
              }, this._runIfPreloadsAreDone = function() {
                var e5, t5 = this._isGlobal ? window : this;
                0 === t5._preloadCount && ((e5 = document.getElementById(t5._loadingScreenId)) && e5.parentNode.removeChild(e5), this.callRegisteredHooksFor("afterPreload"), this._setupDone || (this._lastTargetFrameTime = window.performance.now(), this._lastRealFrameTime = window.performance.now(), t5._setup(), this._recording || t5._draw()));
              }, this._decrementPreload = function() {
                var e5 = this._isGlobal ? window : this;
                e5._preloadDone || "function" != typeof e5.preload || (e5._setProperty("_preloadCount", e5._preloadCount - 1), e5._runIfPreloadsAreDone());
              }, this._wrapPreload = function(o3, n3) {
                var s4 = this;
                return function() {
                  s4._incrementPreload();
                  for (var e5 = arguments.length, t5 = new Array(e5), r5 = 0; r5 < e5; r5++) t5[r5] = arguments[r5];
                  return s4._registeredPreloadMethods[n3].apply(o3, t5);
                };
              }, this._incrementPreload = function() {
                var e5 = this._isGlobal ? window : this;
                e5._preloadDone || e5._setProperty("_preloadCount", e5._preloadCount + 1);
              }, this._setup = function() {
                d.callRegisteredHooksFor("beforeSetup"), d.createCanvas(d._defaultCanvasSize.width, d._defaultCanvasSize.height, "p2d");
                var e5 = d._isGlobal ? window : d;
                if ("function" == typeof e5.preload) for (var t5 in d._preloadMethods) e5[t5] = d._preloadMethods[t5][t5], e5[t5] && d && (e5[t5] = e5[t5].bind(d));
                d._millisStart = window.performance.now(), e5._preloadDone = true, "function" == typeof e5.setup && e5.setup();
                var r5 = document.getElementsByTagName("canvas"), o3 = true, n3 = false, s4 = void 0;
                try {
                  for (var i3, a3 = r5[Symbol.iterator](); !(o3 = (i3 = a3.next()).done); o3 = true) {
                    var l3 = i3.value;
                    "true" === l3.dataset.hidden && (l3.style.visibility = "", delete l3.dataset.hidden);
                  }
                } catch (e6) {
                  n3 = true, s4 = e6;
                } finally {
                  try {
                    o3 || null == a3.return || a3.return();
                  } finally {
                    if (n3) throw s4;
                  }
                }
                d._lastTargetFrameTime = window.performance.now(), d._lastRealFrameTime = window.performance.now(), d._setupDone = true, (d._accessibleOutputs.grid || d._accessibleOutputs.text) && d._updateAccsOutput(), d.callRegisteredHooksFor("afterSetup");
              }, this._draw = function(e5) {
                var e5 = e5 || window.performance.now(), t5 = e5 - d._lastTargetFrameTime, r5 = 1e3 / d._targetFrameRate;
                (!d._loop || r5 - 5 <= t5) && (d.deltaTime = e5 - d._lastRealFrameTime, d._setProperty("deltaTime", d.deltaTime), d._frameRate = 1e3 / d.deltaTime, d.redraw(), d._lastTargetFrameTime = Math.max(d._lastTargetFrameTime + r5, e5), d._lastRealFrameTime = e5, void 0 !== d._updateMouseCoords && (d._updateMouseCoords(), d._setProperty("movedX", 0), d._setProperty("movedY", 0))), d._loop && (d._requestAnimId = window.requestAnimationFrame(d._draw));
              }, this._setProperty = function(e5, t5) {
                d[e5] = t5, d._isGlobal && (window[e5] = t5);
              }, this.remove = function() {
                d._startListener && window.removeEventListener("load", d._startListener, false);
                var t5 = document.getElementById(d._loadingScreenId);
                if (t5 && (t5.parentNode.removeChild(t5), d._incrementPreload()), d._curElement) {
                  for (var e5 in d._loop = false, d._requestAnimId && window.cancelAnimationFrame(d._requestAnimId), d._events) window.removeEventListener(e5, d._events[e5]);
                  var r5 = true, t5 = false, o3 = void 0;
                  try {
                    for (var n3, s4 = d._elements[Symbol.iterator](); !(r5 = (n3 = s4.next()).done); r5 = true) {
                      var i3, a3 = n3.value;
                      for (i3 in a3.elt && a3.elt.parentNode && a3.elt.parentNode.removeChild(a3.elt), a3._events) a3.elt.removeEventListener(i3, a3._events[i3]);
                    }
                  } catch (e6) {
                    t5 = true, o3 = e6;
                  } finally {
                    try {
                      r5 || null == s4.return || s4.return();
                    } finally {
                      if (t5) throw o3;
                    }
                  }
                  var l3 = d;
                  d._registeredMethods.remove.forEach(function(e6) {
                    void 0 !== e6 && e6.call(l3);
                  });
                }
                if (d._isGlobal) {
                  for (var u4 in g.prototype) try {
                    delete window[u4];
                  } catch (e6) {
                    window[u4] = void 0;
                  }
                  for (var c2 in d) if (d.hasOwnProperty(c2)) try {
                    delete window[c2];
                  } catch (e6) {
                    window[c2] = void 0;
                  }
                  g.instance = null;
                }
              }, this._updateWindowSize(), this._registeredMethods.init.forEach(function(e5) {
                void 0 !== e5 && e5.call(this);
              }, this), this._setupPromisePreloads();
              var l2, u3, c = this._createFriendlyGlobalFunctionBinder();
              if (e4) e4(this), g._checkForUserDefinedFunctions(this);
              else {
                for (var h in this._isGlobal = true, g.instance = this, g.prototype) "function" == typeof g.prototype[h] ? (l2 = h.substring(2), this._events.hasOwnProperty(l2) || (Math.hasOwnProperty(h) && Math[h] === g.prototype[h] ? c(h, g.prototype[h]) : c(h, g.prototype[h].bind(this)))) : c(h, g.prototype[h]);
                for (var f in this) this.hasOwnProperty(f) && c(f, this[f]);
              }
              for (u3 in this._events) {
                var p = this["_on".concat(u3)];
                p && (p = p.bind(this), window.addEventListener(u3, p, {
                  passive: false
                }), this._events[u3] = p);
              }
              function m() {
                d._setProperty("focused", true);
              }
              function y() {
                d._setProperty("focused", false);
              }
              window.addEventListener("focus", m), window.addEventListener("blur", y), this.registerMethod("remove", function() {
                window.removeEventListener("focus", m), window.removeEventListener("blur", y);
              }), "complete" === document.readyState ? this._start() : (this._startListener = this._start.bind(this), window.addEventListener("load", this._startListener, false));
            }
            var e3, t3, r3;
            return e3 = g, (t3 = [{
              key: "_initializeInstanceVariables",
              value: function() {
                this._accessibleOutputs = {
                  text: false,
                  grid: false,
                  textLabel: false,
                  gridLabel: false
                }, this._styles = [], this._bezierDetail = 20, this._curveDetail = 20, this._colorMode = n.RGB, this._colorMaxes = {
                  rgb: [255, 255, 255, 255],
                  hsb: [360, 100, 100, 1],
                  hsl: [360, 100, 100, 1]
                }, this._downKeys = {};
              }
            }, {
              key: "registerPreloadMethod",
              value: function(e4, t4) {
                g.prototype._preloadMethods.hasOwnProperty(e4) || (g.prototype._preloadMethods[e4] = t4);
              }
            }, {
              key: "registerMethod",
              value: function(e4, t4) {
                var r4 = this || g.prototype;
                r4._registeredMethods.hasOwnProperty(e4) || (r4._registeredMethods[e4] = []), r4._registeredMethods[e4].push(t4);
              }
            }, {
              key: "unregisterMethod",
              value: function(e4, t4) {
                var r4 = this || g.prototype;
                if (r4._registeredMethods.hasOwnProperty(e4)) {
                  for (var o2 = r4._registeredMethods[e4], n2 = [], s3 = 0; s3 < o2.length; s3++) o2[s3] === t4 && n2.push(s3);
                  for (var i2 = n2.length - 1; 0 <= i2; i2--) o2.splice(n2[i2], 1);
                }
              }
            }, {
              key: "_createFriendlyGlobalFunctionBinder",
              value: function() {
                var e4 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, r4 = e4.globalObject || window;
                e4.log || console.log.bind(console);
                return function(e5, t4) {
                  g.disableFriendlyErrors, r4[e5] = t4;
                };
              }
            }]) && s2(e3.prototype, t3), r3 && s2(e3, r3), g;
          }();
          for (l in u2.instance = null, u2.disableFriendlyErrors = false, n) u2.prototype[l] = n[l];
          u2.VERSION = n.VERSION, u2.prototype._preloadMethods = {
            loadJSON: u2.prototype,
            loadImage: u2.prototype,
            loadStrings: u2.prototype,
            loadXML: u2.prototype,
            loadBytes: u2.prototype,
            loadTable: u2.prototype,
            loadFont: u2.prototype,
            loadModel: u2.prototype,
            loadShader: u2.prototype
          }, u2.prototype._registeredMethods = {
            init: [],
            pre: [],
            post: [],
            remove: []
          }, u2.prototype._registeredPreloadMethods = {}, r2.default = u2;
        }, {
          "./constants": 272,
          "./shim": 294,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.array.splice": 171,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.get-own-property-names": 187,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.for-each": 245,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        284: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (e2 = e2("./main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function s2(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o = t3[r3];
              o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e3, o.key, o);
            }
          }
          n.default.Element = function() {
            function r3(e4, t4) {
              if (!(this instanceof r3)) throw new TypeError("Cannot call a class as a function");
              this.elt = e4, this._pInst = this._pixelsState = t4, this._events = {}, this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight;
            }
            var e3, t3, o;
            return e3 = r3, o = [{
              key: "_adjustListener",
              value: function(e4, t4, r4) {
                return false === t4 ? n.default.Element._detachListener(e4, r4) : n.default.Element._attachListener(e4, t4, r4), this;
              }
            }, {
              key: "_attachListener",
              value: function(e4, t4, r4) {
                r4._events[e4] && n.default.Element._detachListener(e4, r4);
                t4 = t4.bind(r4);
                r4.elt.addEventListener(e4, t4, false), r4._events[e4] = t4;
              }
            }, {
              key: "_detachListener",
              value: function(e4, t4) {
                var r4 = t4._events[e4];
                t4.elt.removeEventListener(e4, r4, false), t4._events[e4] = null;
              }
            }], (t3 = [{
              key: "parent",
              value: function(e4) {
                return void 0 === e4 ? this.elt.parentNode : ("string" == typeof e4 ? ("#" === e4[0] && (e4 = e4.substring(1)), e4 = document.getElementById(e4)) : e4 instanceof n.default.Element && (e4 = e4.elt), e4.appendChild(this.elt), this);
              }
            }, {
              key: "id",
              value: function(e4) {
                return void 0 === e4 ? this.elt.id : (this.elt.id = e4, this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight, this);
              }
            }, {
              key: "class",
              value: function(e4) {
                return void 0 === e4 ? this.elt.className : (this.elt.className = e4, this);
              }
            }, {
              key: "mousePressed",
              value: function(t4) {
                return n.default.Element._adjustListener("mousedown", function(e4) {
                  return this._pInst._setProperty("mouseIsPressed", true), this._pInst._setMouseButton(e4), t4.call(this, e4);
                }, this), this;
              }
            }, {
              key: "doubleClicked",
              value: function(e4) {
                return n.default.Element._adjustListener("dblclick", e4, this), this;
              }
            }, {
              key: "mouseWheel",
              value: function(e4) {
                return n.default.Element._adjustListener("wheel", e4, this), this;
              }
            }, {
              key: "mouseReleased",
              value: function(e4) {
                return n.default.Element._adjustListener("mouseup", e4, this), this;
              }
            }, {
              key: "mouseClicked",
              value: function(e4) {
                return n.default.Element._adjustListener("click", e4, this), this;
              }
            }, {
              key: "mouseMoved",
              value: function(e4) {
                return n.default.Element._adjustListener("mousemove", e4, this), this;
              }
            }, {
              key: "mouseOver",
              value: function(e4) {
                return n.default.Element._adjustListener("mouseover", e4, this), this;
              }
            }, {
              key: "mouseOut",
              value: function(e4) {
                return n.default.Element._adjustListener("mouseout", e4, this), this;
              }
            }, {
              key: "touchStarted",
              value: function(e4) {
                return n.default.Element._adjustListener("touchstart", e4, this), this;
              }
            }, {
              key: "touchMoved",
              value: function(e4) {
                return n.default.Element._adjustListener("touchmove", e4, this), this;
              }
            }, {
              key: "touchEnded",
              value: function(e4) {
                return n.default.Element._adjustListener("touchend", e4, this), this;
              }
            }, {
              key: "dragOver",
              value: function(e4) {
                return n.default.Element._adjustListener("dragover", e4, this), this;
              }
            }, {
              key: "dragLeave",
              value: function(e4) {
                return n.default.Element._adjustListener("dragleave", e4, this), this;
              }
            }, {
              key: "_setProperty",
              value: function(e4, t4) {
                this[e4] = t4;
              }
            }]) && s2(e3.prototype, t3), o && s2(e3, o), r3;
          }();
          e2 = n.default.Element;
          r2.default = e2;
        }, {
          "./main": 283
        }],
        285: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.reflect.construct"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.object.get-prototype-of"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var c = (u2 = e2("./main")) && u2.__esModule ? u2 : {
            default: u2
          }, d = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("./constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          function n(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          function s2(e3, t3) {
            return (s2 = Object.setPrototypeOf || function(e4, t4) {
              return e4.__proto__ = t4, e4;
            })(e3, t3);
          }
          function h(r3) {
            return function() {
              var e3, t3 = l(r3);
              return f(this, function() {
                if ("undefined" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {
                  if ("function" == typeof Proxy) return 1;
                  try {
                    return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                    })), 1;
                  } catch (e4) {
                  }
                }
              }() ? (e3 = l(this).constructor, Reflect.construct(t3, arguments, e3)) : t3.apply(this, arguments));
            };
          }
          function f(e3, t3) {
            return !t3 || "object" !== i(t3) && "function" != typeof t3 ? p(e3) : t3;
          }
          function p(e3) {
            if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e3;
          }
          function l(e3) {
            return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            })(e3);
          }
          c.default.Graphics = function(e3) {
            var t3 = u3;
            if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
            t3.prototype = Object.create(e3 && e3.prototype, {
              constructor: {
                value: t3,
                writable: true,
                configurable: true
              }
            }), e3 && s2(t3, e3);
            var r3, l2 = h(u3);
            function u3(e4, t4, r4, o2, n2) {
              var s3;
              if (!(this instanceof u3)) throw new TypeError("Cannot call a class as a function");
              a2 = n2 || document.createElement("canvas"), (s3 = l2.call(this, a2, o2)).canvas = a2;
              var i2, a2 = r4 || d.P2D, r4 = o2._userNode || document.body;
              for (i2 in n2 || r4.appendChild(s3.canvas), c.default.prototype) s3[i2] || ("function" == typeof c.default.prototype[i2] ? s3[i2] = c.default.prototype[i2].bind(p(s3)) : s3[i2] = c.default.prototype[i2]);
              return c.default.prototype._initializeInstanceVariables.apply(p(s3)), s3.width = e4, s3.height = t4, s3._pixelDensity = o2._pixelDensity, a2 === d.WEBGL ? (s3._renderer = new c.default.RendererGL(s3.canvas, p(s3), false), e4 = (n2 = s3._renderer._adjustDimensions(e4, t4)).adjustedWidth, t4 = n2.adjustedHeight) : s3._renderer = new c.default.Renderer2D(s3.canvas, p(s3), false), o2._elements.push(p(s3)), Object.defineProperty(p(s3), "deltaTime", {
                get: function() {
                  return this._pInst.deltaTime;
                }
              }), s3._renderer.resize(e4, t4), s3._renderer._applyDefaults(), f(s3, p(s3));
            }
            return t3 = u3, (e3 = [{
              key: "reset",
              value: function() {
                this._renderer.resetMatrix(), this._renderer.isP3D && this._renderer._update();
              }
            }, {
              key: "remove",
              value: function() {
                this.elt.parentNode && this.elt.parentNode.removeChild(this.elt);
                var e4, t4 = this._pInst._elements.indexOf(this);
                for (e4 in -1 !== t4 && this._pInst._elements.splice(t4, 1), this._events) this.elt.removeEventListener(e4, this._events[e4]);
                this._renderer = void 0, this.canvas = void 0, this.elt = void 0;
              }
            }, {
              key: "createFramebuffer",
              value: function(e4) {
                return new c.default.Framebuffer(this, e4);
              }
            }]) && n(t3.prototype, e3), r3 && n(t3, r3), u3;
          }(c.default.Element);
          var u2 = c.default.Graphics;
          r2.default = u2;
        }, {
          "./constants": 272,
          "./main": 283,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.splice": 171,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.get-prototype-of": 188,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.reflect.construct": 192,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        286: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.reflect.construct"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.string.trim"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.string.trim"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var a = (s2 = e2("./main")) && s2.__esModule ? s2 : {
            default: s2
          }, A = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== l(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = i();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function i() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), i = function() {
              return e3;
            }, e3);
          }
          function l(e3) {
            return (l = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          function u2(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          function c(e3, t3) {
            return (c = Object.setPrototypeOf || function(e4, t4) {
              return e4.__proto__ = t4, e4;
            })(e3, t3);
          }
          function d(o2) {
            return function() {
              var e3, t3, r3 = n(o2);
              return e3 = function() {
                if ("undefined" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {
                  if ("function" == typeof Proxy) return 1;
                  try {
                    return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                    })), 1;
                  } catch (e4) {
                  }
                }
              }() ? (e3 = n(this).constructor, Reflect.construct(r3, arguments, e3)) : r3.apply(this, arguments), r3 = this, !(t3 = e3) || "object" !== l(t3) && "function" != typeof t3 ? h(r3) : t3;
            };
          }
          function h(e3) {
            if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e3;
          }
          function n(e3) {
            return (n = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            })(e3);
          }
          var s2 = function(e3) {
            var t3 = s3;
            if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
            t3.prototype = Object.create(e3 && e3.prototype, {
              constructor: {
                value: t3,
                writable: true,
                configurable: true
              }
            }), e3 && c(t3, e3);
            var r3, n2 = d(s3);
            function s3(e4, t4, r4) {
              var o2;
              if (this instanceof s3) return (o2 = n2.call(this, e4, t4)).canvas = e4, o2._pixelsState = t4, r4 ? (o2._isMainCanvas = true, o2._pInst._setProperty("_curElement", h(o2)), o2._pInst._setProperty("canvas", o2.canvas), o2._pInst._setProperty("width", o2.width), o2._pInst._setProperty("height", o2.height)) : (o2.canvas.style.display = "none", o2._styles = []), o2._clipping = false, o2._clipInvert = false, o2._textSize = 12, o2._textLeading = 15, o2._textFont = "sans-serif", o2._textStyle = A.NORMAL, o2._textAscent = null, o2._textDescent = null, o2._textAlign = A.LEFT, o2._textBaseline = A.BASELINE, o2._textWrap = A.WORD, o2._rectMode = A.CORNER, o2._ellipseMode = A.CENTER, o2._curveTightness = 0, o2._imageMode = A.CORNER, o2._tint = null, o2._doStroke = true, o2._doFill = true, o2._strokeSet = false, o2._fillSet = false, o2._leadingSet = false, o2._pushPopDepth = 0, o2;
              throw new TypeError("Cannot call a class as a function");
            }
            return t3 = s3, (e3 = [{
              key: "push",
              value: function() {
                return this._pushPopDepth++, {
                  properties: {
                    _doStroke: this._doStroke,
                    _strokeSet: this._strokeSet,
                    _doFill: this._doFill,
                    _fillSet: this._fillSet,
                    _tint: this._tint,
                    _imageMode: this._imageMode,
                    _rectMode: this._rectMode,
                    _ellipseMode: this._ellipseMode,
                    _textFont: this._textFont,
                    _textLeading: this._textLeading,
                    _leadingSet: this._leadingSet,
                    _textSize: this._textSize,
                    _textAlign: this._textAlign,
                    _textBaseline: this._textBaseline,
                    _textStyle: this._textStyle,
                    _textWrap: this._textWrap
                  }
                };
              }
            }, {
              key: "pop",
              value: function(e4) {
                this._pushPopDepth--, e4.properties && Object.assign(this, e4.properties);
              }
            }, {
              key: "beginClip",
              value: function() {
                var e4 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
                if (this._clipping) throw new Error("It looks like you're trying to clip while already in the middle of clipping. Did you forget to endClip()?");
                this._clipping = true, this._clipInvert = e4.invert;
              }
            }, {
              key: "endClip",
              value: function() {
                if (!this._clipping) throw new Error("It looks like you've called endClip() without beginClip(). Did you forget to call beginClip() first?");
                this._clipping = false;
              }
            }, {
              key: "resize",
              value: function(e4, t4) {
                this.width = e4, this.height = t4, this.elt.width = e4 * this._pInst._pixelDensity, this.elt.height = t4 * this._pInst._pixelDensity, this.elt.style.width = "".concat(e4, "px"), this.elt.style.height = "".concat(t4, "px"), this._isMainCanvas && (this._pInst._setProperty("width", this.width), this._pInst._setProperty("height", this.height));
              }
            }, {
              key: "get",
              value: function(e4, t4, r4, o2) {
                var n3 = this._pixelsState, s4 = n3._pixelDensity, i2 = this.canvas;
                if (void 0 === e4 && void 0 === t4) e4 = t4 = 0, r4 = n3.width, o2 = n3.height;
                else if (e4 *= s4, t4 *= s4, void 0 === r4 && void 0 === o2) return e4 < 0 || t4 < 0 || e4 >= i2.width || t4 >= i2.height ? [0, 0, 0, 0] : this._getPixel(e4, t4);
                n3 = new a.default.Image(r4 * s4, o2 * s4);
                return n3.pixelDensity(s4), n3.canvas.getContext("2d").drawImage(i2, e4, t4, r4 * s4, o2 * s4, 0, 0, r4 * s4, o2 * s4), n3;
              }
            }, {
              key: "textLeading",
              value: function(e4) {
                return "number" == typeof e4 ? (this._setProperty("_leadingSet", true), this._setProperty("_textLeading", e4), this._pInst) : this._textLeading;
              }
            }, {
              key: "textStyle",
              value: function(e4) {
                return e4 ? (e4 !== A.NORMAL && e4 !== A.ITALIC && e4 !== A.BOLD && e4 !== A.BOLDITALIC || this._setProperty("_textStyle", e4), this._applyTextProperties()) : this._textStyle;
              }
            }, {
              key: "textAscent",
              value: function() {
                return null === this._textAscent && this._updateTextMetrics(), this._textAscent;
              }
            }, {
              key: "textDescent",
              value: function() {
                return null === this._textDescent && this._updateTextMetrics(), this._textDescent;
              }
            }, {
              key: "textAlign",
              value: function(e4, t4) {
                return void 0 !== e4 ? (this._setProperty("_textAlign", e4), void 0 !== t4 && this._setProperty("_textBaseline", t4), this._applyTextProperties()) : {
                  horizontal: this._textAlign,
                  vertical: this._textBaseline
                };
              }
            }, {
              key: "textWrap",
              value: function(e4) {
                return this._setProperty("_textWrap", e4), this._textWrap;
              }
            }, {
              key: "text",
              value: function(e4, t4, r4, o2, n3) {
                var s4, i2, a2, l2, u3 = this._pInst, c2 = this._textWrap, d2 = Number.MAX_VALUE, h2 = r4;
                if ((this._doFill || this._doStroke) && void 0 !== e4) {
                  if (s4 = (e4 = (e4 = "string" != typeof e4 ? e4.toString() : e4).replace(/(\t)/g, "  ")).split("\n"), void 0 !== o2) {
                    switch (this._rectMode === A.CENTER && (t4 -= o2 / 2), this._textAlign) {
                      case A.CENTER:
                        t4 += o2 / 2;
                        break;
                      case A.RIGHT:
                        t4 += o2;
                    }
                    if (void 0 !== n3) {
                      this._rectMode === A.CENTER && (r4 -= n3 / 2, h2 -= n3 / 2);
                      var e4 = r4, f2 = u3.textAscent();
                      switch (this._textBaseline) {
                        case A.BOTTOM:
                          l2 = r4 + n3, r4 = Math.max(l2, r4), h2 += f2;
                          break;
                        case A.CENTER:
                          l2 = r4 + n3 / 2, r4 = Math.max(l2, r4), h2 += f2 / 2;
                      }
                      d2 = r4 + n3 - f2, this._textBaseline === A.CENTER && (d2 = e4 + n3 - f2 / 2);
                    } else this._textBaseline !== A.BOTTOM && this._textBaseline !== A.CENTER || (h2 = r4 - (e4 = u3.textSize() * this._textLeading) / 2, d2 = r4 + e4 / 2);
                    if (c2 === A.WORD) {
                      for (var p = [], m = 0; m < s4.length; m++) {
                        for (var y = "", g = s4[m].split(" "), v = 0; v < g.length; v++) i2 = "".concat(y + g[v]) + " ", y = o2 < (a2 = this.textWidth(i2)) && 0 < y.length ? (p.push(y), "".concat(g[v]) + " ") : i2;
                        p.push(y);
                      }
                      var b = 0;
                      this._textBaseline === A.CENTER ? b = (p.length - 1) * u3.textLeading() / 2 : this._textBaseline === A.BOTTOM && (b = (p.length - 1) * u3.textLeading());
                      for (var _ = 0; _ < s4.length; _++) {
                        y = "", g = s4[_].split(" ");
                        for (var j = 0; j < g.length; j++) i2 = "".concat(y + g[j]) + " ", o2 < (a2 = this.textWidth(i2)) && 0 < y.length ? (this._renderText(u3, y.trim(), t4, r4 - b, d2, h2), y = "".concat(g[j]) + " ", r4 += u3.textLeading()) : y = i2;
                        this._renderText(u3, y.trim(), t4, r4 - b, d2, h2), r4 += u3.textLeading();
                      }
                    } else {
                      for (var x = [], w = 0; w < s4.length; w++) for (var S = s4[w].split(y = ""), T = 0; T < S.length; T++) i2 = "".concat(y + S[T]), (a2 = this.textWidth(i2)) <= o2 ? y += S[T] : o2 < a2 && 0 < y.length && (x.push(y), y = "".concat(S[T]));
                      x.push(y);
                      var E = 0;
                      this._textBaseline === A.CENTER ? E = (x.length - 1) * u3.textLeading() / 2 : this._textBaseline === A.BOTTOM && (E = (x.length - 1) * u3.textLeading());
                      for (var M = 0; M < s4.length; M++) {
                        S = s4[M].split(y = "");
                        for (var k = 0; k < S.length; k++) i2 = "".concat(y + S[k]), (a2 = this.textWidth(i2)) <= o2 ? y += S[k] : o2 < a2 && 0 < y.length && (this._renderText(u3, y.trim(), t4, r4 - E, d2, h2), r4 += u3.textLeading(), y = "".concat(S[k]));
                      }
                      this._renderText(u3, y.trim(), t4, r4 - E, d2, h2), r4 += u3.textLeading();
                    }
                  } else {
                    var O = 0;
                    this._textBaseline === A.CENTER ? O = (s4.length - 1) * u3.textLeading() / 2 : this._textBaseline === A.BOTTOM && (O = (s4.length - 1) * u3.textLeading());
                    for (var C = 0; C < s4.length; C++) this._renderText(u3, s4[C], t4, r4 - O, d2, h2 - O), r4 += u3.textLeading();
                  }
                  return u3;
                }
              }
            }, {
              key: "_applyDefaults",
              value: function() {
                return this;
              }
            }, {
              key: "_isOpenType",
              value: function() {
                var e4 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : this._textFont;
                return "object" === l(e4) && e4.font && e4.font.supported;
              }
            }, {
              key: "_updateTextMetrics",
              value: function() {
                var e4, t4, r4, o2, n3, s4;
                return this._isOpenType() ? (this._setProperty("_textAscent", this._textFont._textAscent()), this._setProperty("_textDescent", this._textFont._textDescent())) : ((e4 = document.createElement("span")).style.fontFamily = this._textFont, e4.style.fontSize = "".concat(this._textSize, "px"), e4.innerHTML = "ABCjgq|", (s4 = document.createElement("div")).style.display = "inline-block", s4.style.width = "1px", s4.style.height = "0px", o2 = ((t4 = document.createElement("div")).appendChild(e4), t4.appendChild(s4), t4.style.height = "0px", t4.style.overflow = "hidden", document.body.appendChild(t4), s4.style.verticalAlign = "baseline", f(s4)), n3 = f(e4), r4 = o2[1] - n3[1], o2 = (s4.style.verticalAlign = "bottom", f(s4)), n3 = f(e4), s4 = o2[1] - n3[1] - r4, document.body.removeChild(t4), this._setProperty("_textAscent", r4), this._setProperty("_textDescent", s4)), this;
              }
            }]) && u2(t3.prototype, e3), r3 && u2(t3, r3), s3;
          }(a.default.Element);
          function f(e3) {
            var t3 = 0, r3 = 0;
            if (e3.offsetParent) for (; t3 += e3.offsetLeft, r3 += e3.offsetTop, e3 = e3.offsetParent; ) ;
            else t3 += e3.offsetLeft, r3 += e3.offsetTop;
            return [t3, r3];
          }
          s2.prototype.textSize = function(e3) {
            return "number" == typeof e3 ? (this._setProperty("_textSize", e3), this._leadingSet || this._setProperty("_textLeading", e3 * A._DEFAULT_LEADMULT), this._applyTextProperties()) : this._textSize;
          }, a.default.Renderer = s2;
          e2 = a.default.Renderer;
          r2.default = e2;
        }, {
          "../core/constants": 272,
          "./main": 283,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.number.constructor": 179,
          "core-js/modules/es.object.assign": 183,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.get-prototype-of": 188,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.reflect.construct": 192,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.string.trim": 209,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        287: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.reflect.construct"), e2("core-js/modules/es.reflect.get"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var d = (n = e2("./main")) && n.__esModule ? n : {
            default: n
          }, p = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("./constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          function s2(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          function l(e3, t3, r3) {
            return (l = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(e4, t4, r4) {
              var e4 = function(e5, t5) {
                for (; !Object.prototype.hasOwnProperty.call(e5, t5) && null !== (e5 = h(e5)); ) ;
                return e5;
              }(e4, t4);
              if (e4) return (e4 = Object.getOwnPropertyDescriptor(e4, t4)).get ? e4.get.call(r4) : e4.value;
            })(e3, t3, r3 || e3);
          }
          function u2(e3, t3) {
            return (u2 = Object.setPrototypeOf || function(e4, t4) {
              return e4.__proto__ = t4, e4;
            })(e3, t3);
          }
          function c(r3) {
            return function() {
              var e3, t3 = h(r3), t3 = (e3 = function() {
                if ("undefined" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {
                  if ("function" == typeof Proxy) return 1;
                  try {
                    return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                    })), 1;
                  } catch (e4) {
                  }
                }
              }() ? (e3 = h(this).constructor, Reflect.construct(t3, arguments, e3)) : t3.apply(this, arguments), this);
              if (!e3 || "object" !== i(e3) && "function" != typeof e3) {
                if (void 0 !== t3) return t3;
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return e3;
            };
          }
          function h(e3) {
            return (h = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            })(e3);
          }
          e2("./p5.Renderer");
          var f = "rgba(0,0,0,0)", n = function(e3) {
            var t3 = n2;
            if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
            t3.prototype = Object.create(e3 && e3.prototype, {
              constructor: {
                value: t3,
                writable: true,
                configurable: true
              }
            }), e3 && u2(t3, e3);
            var r3, o2 = c(n2);
            function n2(e4, t4, r4) {
              if (this instanceof n2) return (e4 = o2.call(this, e4, t4, r4)).drawingContext = e4.canvas.getContext("2d"), e4._pInst._setProperty("drawingContext", e4.drawingContext), e4;
              throw new TypeError("Cannot call a class as a function");
            }
            return t3 = n2, (e3 = [{
              key: "getFilterGraphicsLayer",
              value: function() {
                var e4;
                return this.filterGraphicsLayer || (e4 = (this._pInst instanceof d.default.Graphics ? this._pInst : this)._pInst, this.filterGraphicsLayer = new d.default.Graphics(this.width, this.height, p.WEBGL, e4)), this.filterGraphicsLayer.width === this.width && this.filterGraphicsLayer.height === this.height || this.filterGraphicsLayer.resizeCanvas(this.width, this.height), this.filterGraphicsLayer.pixelDensity() !== this._pInst.pixelDensity() && this.filterGraphicsLayer.pixelDensity(this._pInst.pixelDensity()), this.filterGraphicsLayer;
              }
            }, {
              key: "_applyDefaults",
              value: function() {
                this._cachedFillStyle = this._cachedStrokeStyle = void 0, this._cachedBlendMode = p.BLEND, this._setFill(p._DEFAULT_FILL), this._setStroke(p._DEFAULT_STROKE), this.drawingContext.lineCap = p.ROUND, this.drawingContext.font = "normal 12px sans-serif";
              }
            }, {
              key: "resize",
              value: function(e4, t4) {
                l(h(n2.prototype), "resize", this).call(this, e4, t4), this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);
              }
            }, {
              key: "background",
              value: function() {
                var e4, t4;
                this.drawingContext.save(), this.resetMatrix(), (arguments.length <= 0 ? void 0 : arguments[0]) instanceof d.default.Image ? 0 <= (arguments.length <= 1 ? void 0 : arguments[1]) ? (e4 = arguments.length <= 0 ? void 0 : arguments[0], this.drawingContext.globalAlpha = (arguments.length <= 1 ? void 0 : arguments[1]) / 255, this._pInst.image(e4, 0, 0, this.width, this.height)) : this._pInst.image(arguments.length <= 0 ? void 0 : arguments[0], 0, 0, this.width, this.height) : (e4 = this._getFill(), t4 = (t4 = this._pInst).color.apply(t4, arguments), this._pInst._addAccsOutput() && this._pInst._accsBackground(t4.levels), t4 = t4.toString(), this._setFill(t4), this._isErasing && this.blendMode(this._cachedBlendMode), this.drawingContext.fillRect(0, 0, this.width, this.height), this._setFill(e4), this._isErasing && this._pInst.erase()), this.drawingContext.restore();
              }
            }, {
              key: "clear",
              value: function() {
                this.drawingContext.save(), this.resetMatrix(), this.drawingContext.clearRect(0, 0, this.width, this.height), this.drawingContext.restore();
              }
            }, {
              key: "fill",
              value: function() {
                var e4 = (e4 = this._pInst).color.apply(e4, arguments);
                this._setFill(e4.toString()), this._pInst._addAccsOutput() && this._pInst._accsCanvasColors("fill", e4.levels);
              }
            }, {
              key: "stroke",
              value: function() {
                var e4 = (e4 = this._pInst).color.apply(e4, arguments);
                this._setStroke(e4.toString()), this._pInst._addAccsOutput() && this._pInst._accsCanvasColors("stroke", e4.levels);
              }
            }, {
              key: "erase",
              value: function(e4, t4) {
                this._isErasing || (this._cachedFillStyle = this.drawingContext.fillStyle, e4 = this._pInst.color(255, e4).toString(), this.drawingContext.fillStyle = e4, this._cachedStrokeStyle = this.drawingContext.strokeStyle, e4 = this._pInst.color(255, t4).toString(), this.drawingContext.strokeStyle = e4, t4 = this._cachedBlendMode, this.blendMode(p.REMOVE), this._cachedBlendMode = t4, this._isErasing = true);
              }
            }, {
              key: "noErase",
              value: function() {
                this._isErasing && (this.drawingContext.fillStyle = this._cachedFillStyle, this.drawingContext.strokeStyle = this._cachedStrokeStyle, this.blendMode(this._cachedBlendMode), this._isErasing = false);
              }
            }, {
              key: "beginClip",
              value: function() {
                var e4 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, e4 = (l(h(n2.prototype), "beginClip", this).call(this, e4), this._cachedFillStyle = this.drawingContext.fillStyle, this._pInst.color(255, 0).toString()), e4 = (this.drawingContext.fillStyle = e4, this._cachedStrokeStyle = this.drawingContext.strokeStyle, this._pInst.color(255, 0).toString()), e4 = (this.drawingContext.strokeStyle = e4, this._cachedBlendMode);
                this.blendMode(p.BLEND), this._cachedBlendMode = e4, this.drawingContext.beginPath(), this._clipInvert && (this.drawingContext.moveTo(-2 * this.width, -2 * this.height), this.drawingContext.lineTo(-2 * this.width, 2 * this.height), this.drawingContext.lineTo(2 * this.width, 2 * this.height), this.drawingContext.lineTo(2 * this.width, -2 * this.height), this.drawingContext.closePath());
              }
            }, {
              key: "endClip",
              value: function() {
                this._doFillStrokeClose(), this.drawingContext.clip(), l(h(n2.prototype), "endClip", this).call(this), this.drawingContext.fillStyle = this._cachedFillStyle, this.drawingContext.strokeStyle = this._cachedStrokeStyle, this.blendMode(this._cachedBlendMode);
              }
            }, {
              key: "image",
              value: function(e4, t4, r4, o3, n3, s3, i2, a2, l2) {
                e4.gifProperties && e4._animateGif(this._pInst);
                try {
                  d.default.MediaElement && e4 instanceof d.default.MediaElement && e4._ensureCanvas();
                  var u3 = (u3 = this._tint && e4.canvas ? this._getTintedImageCanvas(e4) : u3) || e4.canvas || e4.elt, c2 = 1;
                  e4.width && 0 < e4.width && (c2 = u3.width / e4.width), this._isErasing && this.blendMode(this._cachedBlendMode), this.drawingContext.drawImage(u3, c2 * t4, c2 * r4, c2 * o3, c2 * n3, s3, i2, a2, l2), this._isErasing && this._pInst.erase();
                } catch (e5) {
                  if ("NS_ERROR_NOT_AVAILABLE" !== e5.name) throw e5;
                }
              }
            }, {
              key: "_getTintedImageCanvas",
              value: function(e4) {
                if (!e4.canvas) return e4;
                e4.tintCanvas || (e4.tintCanvas = document.createElement("canvas")), e4.tintCanvas.width !== e4.canvas.width && (e4.tintCanvas.width = e4.canvas.width), e4.tintCanvas.height !== e4.canvas.height && (e4.tintCanvas.height = e4.canvas.height);
                var t4 = e4.tintCanvas.getContext("2d");
                return t4.save(), t4.clearRect(0, 0, e4.canvas.width, e4.canvas.height), (this._tint[0] < 255 || this._tint[1] < 255 || this._tint[2] < 255) && (t4.drawImage(e4.canvas, 0, 0), t4.globalCompositeOperation = "luminosity", t4.drawImage(e4.canvas, 0, 0), t4.globalCompositeOperation = "color", t4.drawImage(e4.canvas, 0, 0), t4.globalCompositeOperation = "multiply", t4.fillStyle = "rgb(".concat(this._tint.slice(0, 3).join(", "), ")"), t4.fillRect(0, 0, e4.canvas.width, e4.canvas.height), t4.globalCompositeOperation = "destination-in"), t4.globalAlpha = this._tint[3] / 255, t4.drawImage(e4.canvas, 0, 0), t4.restore(), e4.tintCanvas;
              }
            }, {
              key: "blendMode",
              value: function(e4) {
                if (e4 === p.SUBTRACT) console.warn("blendMode(SUBTRACT) only works in WEBGL mode.");
                else {
                  if (e4 !== p.BLEND && e4 !== p.REMOVE && e4 !== p.DARKEST && e4 !== p.LIGHTEST && e4 !== p.DIFFERENCE && e4 !== p.MULTIPLY && e4 !== p.EXCLUSION && e4 !== p.SCREEN && e4 !== p.REPLACE && e4 !== p.OVERLAY && e4 !== p.HARD_LIGHT && e4 !== p.SOFT_LIGHT && e4 !== p.DODGE && e4 !== p.BURN && e4 !== p.ADD) throw new Error("Mode ".concat(e4, " not recognized."));
                  this._cachedBlendMode = e4, this.drawingContext.globalCompositeOperation = e4;
                }
              }
            }, {
              key: "blend",
              value: function() {
                for (var e4 = this.drawingContext.globalCompositeOperation, t4 = arguments.length, r4 = new Array(t4), o3 = 0; o3 < t4; o3++) r4[o3] = arguments[o3];
                var n3 = r4[r4.length - 1], s3 = Array.prototype.slice.call(r4, 0, r4.length - 1);
                this.drawingContext.globalCompositeOperation = n3, d.default.prototype.copy.apply(this, s3), this.drawingContext.globalCompositeOperation = e4;
              }
            }, {
              key: "_getPixel",
              value: function(e4, t4) {
                e4 = this.drawingContext.getImageData(e4, t4, 1, 1).data;
                return [e4[0], e4[1], e4[2], e4[3]];
              }
            }, {
              key: "loadPixels",
              value: function() {
                var e4 = this._pixelsState, t4 = e4._pixelDensity, r4 = this.width * t4, t4 = this.height * t4, r4 = this.drawingContext.getImageData(0, 0, r4, t4);
                e4._setProperty("imageData", r4), e4._setProperty("pixels", r4.data);
              }
            }, {
              key: "set",
              value: function(e4, t4, r4) {
                e4 = Math.floor(e4), t4 = Math.floor(t4);
                var o3 = this._pixelsState;
                if (r4 instanceof d.default.Image) this.drawingContext.save(), this.drawingContext.setTransform(1, 0, 0, 1, 0, 0), this.drawingContext.scale(o3._pixelDensity, o3._pixelDensity), this.drawingContext.clearRect(e4, t4, r4.width, r4.height), this.drawingContext.drawImage(r4.canvas, e4, t4), this.drawingContext.restore();
                else {
                  var n3 = 0, s3 = 0, i2 = 0, a2 = 0, l2 = 4 * (t4 * o3._pixelDensity * (this.width * o3._pixelDensity) + e4 * o3._pixelDensity);
                  if (o3.imageData || o3.loadPixels(), "number" == typeof r4) l2 < o3.pixels.length && (i2 = s3 = n3 = r4, a2 = 255);
                  else if (Array.isArray(r4)) {
                    if (r4.length < 4) throw new Error("pixel array must be of the form [R, G, B, A]");
                    l2 < o3.pixels.length && (n3 = r4[0], s3 = r4[1], i2 = r4[2], a2 = r4[3]);
                  } else r4 instanceof d.default.Color && l2 < o3.pixels.length && (n3 = r4.levels[0], s3 = r4.levels[1], i2 = r4.levels[2], a2 = r4.levels[3]);
                  for (var u3 = 0; u3 < o3._pixelDensity; u3++) for (var c2 = 0; c2 < o3._pixelDensity; c2++) l2 = 4 * ((t4 * o3._pixelDensity + c2) * this.width * o3._pixelDensity + (e4 * o3._pixelDensity + u3)), o3.pixels[l2] = n3, o3.pixels[l2 + 1] = s3, o3.pixels[l2 + 2] = i2, o3.pixels[l2 + 3] = a2;
                }
              }
            }, {
              key: "updatePixels",
              value: function(e4, t4, r4, o3) {
                var n3 = this._pixelsState, s3 = n3._pixelDensity;
                void 0 === e4 && void 0 === t4 && void 0 === r4 && void 0 === o3 && (t4 = e4 = 0, r4 = this.width, o3 = this.height), e4 *= s3, t4 *= s3, r4 *= s3, o3 *= s3, this.gifProperties && (this.gifProperties.frames[this.gifProperties.displayIndex].image = n3.imageData), this.drawingContext.putImageData(n3.imageData, 0, 0, e4, t4, r4, o3);
              }
            }, {
              key: "arc",
              value: function(e4, t4, r4, o3, n3, s3, i2) {
                var a2 = this.drawingContext, e4 = e4 + r4 / 2, t4 = t4 + o3 / 2, r4 = r4 / 2, o3 = o3 / 2, l2 = !(i2 === p.CHORD || i2 === p.OPEN || (s3 - n3) % p.TWO_PI == 0);
                return this._doFill && (this._clipping || a2.beginPath(), a2.ellipse(e4, t4, r4, o3, 0, n3, s3), l2 && a2.lineTo(e4, t4), a2.closePath(), this._clipping || a2.fill()), this._doStroke && (this._clipping || a2.beginPath(), a2.ellipse(e4, t4, r4, o3, 0, n3, s3), i2 === p.PIE && l2 && a2.lineTo(e4, t4), i2 !== p.PIE && i2 !== p.CHORD || a2.closePath(), this._clipping || a2.stroke()), this;
              }
            }, {
              key: "ellipse",
              value: function(e4) {
                var t4 = this.drawingContext, r4 = this._doFill, o3 = this._doStroke, n3 = parseFloat(e4[0]), s3 = parseFloat(e4[1]), i2 = parseFloat(e4[2]), e4 = parseFloat(e4[3]);
                if (r4 && !o3) {
                  if (this._getFill() === f) return this;
                } else if (!r4 && o3 && this._getStroke() === f) return this;
                n3 += i2 / 2, s3 += e4 / 2, i2 /= 2, e4 /= 2;
                this._clipping || t4.beginPath(), t4.ellipse(n3, s3, i2, e4, 0, 0, 2 * Math.PI), t4.closePath(), !this._clipping && r4 && t4.fill(), !this._clipping && o3 && t4.stroke();
              }
            }, {
              key: "line",
              value: function(e4, t4, r4, o3) {
                var n3 = this.drawingContext;
                return this._doStroke && this._getStroke() !== f && (this._clipping || n3.beginPath(), n3.moveTo(e4, t4), n3.lineTo(r4, o3), n3.stroke()), this;
              }
            }, {
              key: "point",
              value: function(e4, t4) {
                var r4, o3, n3 = this.drawingContext;
                return !this._doStroke || this._getStroke() === f ? this : (r4 = this._getStroke(), o3 = this._getFill(), this._clipping || this._setFill(r4), this._clipping || n3.beginPath(), n3.arc(e4, t4, n3.lineWidth / 2, 0, p.TWO_PI, false), void (this._clipping || (n3.fill(), this._setFill(o3))));
              }
            }, {
              key: "quad",
              value: function(e4, t4, r4, o3, n3, s3, i2, a2) {
                var l2 = this.drawingContext, u3 = this._doFill, c2 = this._doStroke;
                if (u3 && !c2) {
                  if (this._getFill() === f) return this;
                } else if (!u3 && c2 && this._getStroke() === f) return this;
                return this._clipping || l2.beginPath(), l2.moveTo(e4, t4), l2.lineTo(r4, o3), l2.lineTo(n3, s3), l2.lineTo(i2, a2), l2.closePath(), !this._clipping && u3 && l2.fill(), !this._clipping && c2 && l2.stroke(), this;
              }
            }, {
              key: "rect",
              value: function(e4) {
                var t4, r4, o3 = e4[0], n3 = e4[1], s3 = e4[2], i2 = e4[3], a2 = e4[4], l2 = e4[5], u3 = e4[6], e4 = e4[7], c2 = this.drawingContext, d2 = this._doFill, h2 = this._doStroke;
                if (d2 && !h2) {
                  if (this._getFill() === f) return this;
                } else if (!d2 && h2 && this._getStroke() === f) return this;
                return this._clipping || c2.beginPath(), void 0 === a2 ? c2.rect(o3, n3, s3, i2) : (void 0 === l2 && (l2 = a2), void 0 === u3 && (u3 = l2), void 0 === e4 && (e4 = u3), h2 = (d2 = Math.abs(s3)) / 2, r4 = (t4 = Math.abs(i2)) / 2, c2.roundRect(o3, n3, s3, i2, [a2 = t4 < 2 * (a2 = d2 < 2 * a2 ? h2 : a2) ? r4 : a2, l2 = t4 < 2 * (l2 = d2 < 2 * l2 ? h2 : l2) ? r4 : l2, u3 = t4 < 2 * (u3 = d2 < 2 * u3 ? h2 : u3) ? r4 : u3, e4 = t4 < 2 * (e4 = d2 < 2 * e4 ? h2 : e4) ? r4 : e4])), !this._clipping && this._doFill && c2.fill(), !this._clipping && this._doStroke && c2.stroke(), this;
              }
            }, {
              key: "triangle",
              value: function(e4) {
                var t4 = this.drawingContext, r4 = this._doFill, o3 = this._doStroke, n3 = e4[0], s3 = e4[1], i2 = e4[2], a2 = e4[3], l2 = e4[4], e4 = e4[5];
                if (r4 && !o3) {
                  if (this._getFill() === f) return this;
                } else if (!r4 && o3 && this._getStroke() === f) return this;
                this._clipping || t4.beginPath(), t4.moveTo(n3, s3), t4.lineTo(i2, a2), t4.lineTo(l2, e4), t4.closePath(), !this._clipping && r4 && t4.fill(), !this._clipping && o3 && t4.stroke();
              }
            }, {
              key: "endShape",
              value: function(e4, t4, r4, o3, n3, s3, i2) {
                if (0 !== t4.length && (this._doStroke || this._doFill)) {
                  var a2, l2, u3, c2 = e4 === p.CLOSE, d2 = (c2 && !s3 && t4.push(t4[0]), t4.length);
                  if (r4 && null === i2) {
                    if (3 < d2) {
                      var h2 = [], f2 = 1 - this._curveTightness;
                      for (this._clipping || this.drawingContext.beginPath(), this.drawingContext.moveTo(t4[1][0], t4[1][1]), l2 = 1; l2 + 2 < d2; l2++) a2 = t4[l2], h2[0] = [a2[0], a2[1]], h2[1] = [a2[0] + (f2 * t4[l2 + 1][0] - f2 * t4[l2 - 1][0]) / 6, a2[1] + (f2 * t4[l2 + 1][1] - f2 * t4[l2 - 1][1]) / 6], h2[2] = [t4[l2 + 1][0] + (f2 * t4[l2][0] - f2 * t4[l2 + 2][0]) / 6, t4[l2 + 1][1] + (f2 * t4[l2][1] - f2 * t4[l2 + 2][1]) / 6], h2[3] = [t4[l2 + 1][0], t4[l2 + 1][1]], this.drawingContext.bezierCurveTo(h2[1][0], h2[1][1], h2[2][0], h2[2][1], h2[3][0], h2[3][1]);
                      c2 && this.drawingContext.lineTo(t4[l2 + 1][0], t4[l2 + 1][1]), this._doFillStrokeClose(c2);
                    }
                  } else if (o3 && null === i2) {
                    for (this._clipping || this.drawingContext.beginPath(), l2 = 0; l2 < d2; l2++) t4[l2].isVert ? t4[l2].moveTo ? this.drawingContext.moveTo(t4[l2][0], t4[l2][1]) : this.drawingContext.lineTo(t4[l2][0], t4[l2][1]) : this.drawingContext.bezierCurveTo(t4[l2][0], t4[l2][1], t4[l2][2], t4[l2][3], t4[l2][4], t4[l2][5]);
                    this._doFillStrokeClose(c2);
                  } else if (n3 && null === i2) {
                    for (this._clipping || this.drawingContext.beginPath(), l2 = 0; l2 < d2; l2++) t4[l2].isVert ? t4[l2].moveTo ? this.drawingContext.moveTo(t4[l2][0], t4[l2][1]) : this.drawingContext.lineTo(t4[l2][0], t4[l2][1]) : this.drawingContext.quadraticCurveTo(t4[l2][0], t4[l2][1], t4[l2][2], t4[l2][3]);
                    this._doFillStrokeClose(c2);
                  } else if (i2 === p.POINTS) for (l2 = 0; l2 < d2; l2++) a2 = t4[l2], this._doStroke && this._pInst.stroke(a2[6]), this._pInst.point(a2[0], a2[1]);
                  else if (i2 === p.LINES) for (l2 = 0; l2 + 1 < d2; l2 += 2) a2 = t4[l2], this._doStroke && this._pInst.stroke(t4[l2 + 1][6]), this._pInst.line(a2[0], a2[1], t4[l2 + 1][0], t4[l2 + 1][1]);
                  else if (i2 === p.TRIANGLES) for (l2 = 0; l2 + 2 < d2; l2 += 3) a2 = t4[l2], this._clipping || this.drawingContext.beginPath(), this.drawingContext.moveTo(a2[0], a2[1]), this.drawingContext.lineTo(t4[l2 + 1][0], t4[l2 + 1][1]), this.drawingContext.lineTo(t4[l2 + 2][0], t4[l2 + 2][1]), this.drawingContext.closePath(), !this._clipping && this._doFill && (this._pInst.fill(t4[l2 + 2][5]), this.drawingContext.fill()), !this._clipping && this._doStroke && (this._pInst.stroke(t4[l2 + 2][6]), this.drawingContext.stroke());
                  else if (i2 === p.TRIANGLE_STRIP) for (l2 = 0; l2 + 1 < d2; l2++) a2 = t4[l2], this._clipping || this.drawingContext.beginPath(), this.drawingContext.moveTo(t4[l2 + 1][0], t4[l2 + 1][1]), this.drawingContext.lineTo(a2[0], a2[1]), !this._clipping && this._doStroke && this._pInst.stroke(t4[l2 + 1][6]), !this._clipping && this._doFill && this._pInst.fill(t4[l2 + 1][5]), l2 + 2 < d2 && (this.drawingContext.lineTo(t4[l2 + 2][0], t4[l2 + 2][1]), !this._clipping && this._doStroke && this._pInst.stroke(t4[l2 + 2][6]), !this._clipping && this._doFill && this._pInst.fill(t4[l2 + 2][5])), this._doFillStrokeClose(c2);
                  else if (i2 === p.TRIANGLE_FAN) {
                    if (2 < d2) {
                      for (this._clipping || this.drawingContext.beginPath(), l2 = 2; l2 < d2; l2++) a2 = t4[l2], this.drawingContext.moveTo(t4[0][0], t4[0][1]), this.drawingContext.lineTo(t4[l2 - 1][0], t4[l2 - 1][1]), this.drawingContext.lineTo(a2[0], a2[1]), this.drawingContext.lineTo(t4[0][0], t4[0][1]), l2 < d2 - 1 && (this._doFill && a2[5] !== t4[l2 + 1][5] || this._doStroke && a2[6] !== t4[l2 + 1][6]) && (!this._clipping && this._doFill && (this._pInst.fill(a2[5]), this.drawingContext.fill(), this._pInst.fill(t4[l2 + 1][5])), !this._clipping && this._doStroke && (this._pInst.stroke(a2[6]), this.drawingContext.stroke(), this._pInst.stroke(t4[l2 + 1][6])), this.drawingContext.closePath(), this._clipping || this.drawingContext.beginPath());
                      this._doFillStrokeClose(c2);
                    }
                  } else if (i2 === p.QUADS) for (l2 = 0; l2 + 3 < d2; l2 += 4) {
                    for (a2 = t4[l2], this._clipping || this.drawingContext.beginPath(), this.drawingContext.moveTo(a2[0], a2[1]), u3 = 1; u3 < 4; u3++) this.drawingContext.lineTo(t4[l2 + u3][0], t4[l2 + u3][1]);
                    this.drawingContext.lineTo(a2[0], a2[1]), !this._clipping && this._doFill && this._pInst.fill(t4[l2 + 3][5]), !this._clipping && this._doStroke && this._pInst.stroke(t4[l2 + 3][6]), this._doFillStrokeClose(c2);
                  }
                  else if (i2 === p.QUAD_STRIP) {
                    if (3 < d2) for (l2 = 0; l2 + 1 < d2; l2 += 2) a2 = t4[l2], this._clipping || this.drawingContext.beginPath(), l2 + 3 < d2 ? (this.drawingContext.moveTo(t4[l2 + 2][0], t4[l2 + 2][1]), this.drawingContext.lineTo(a2[0], a2[1]), this.drawingContext.lineTo(t4[l2 + 1][0], t4[l2 + 1][1]), this.drawingContext.lineTo(t4[l2 + 3][0], t4[l2 + 3][1]), !this._clipping && this._doFill && this._pInst.fill(t4[l2 + 3][5]), !this._clipping && this._doStroke && this._pInst.stroke(t4[l2 + 3][6])) : (this.drawingContext.moveTo(a2[0], a2[1]), this.drawingContext.lineTo(t4[l2 + 1][0], t4[l2 + 1][1])), this._doFillStrokeClose(c2);
                  } else {
                    for (this._clipping || this.drawingContext.beginPath(), this.drawingContext.moveTo(t4[0][0], t4[0][1]), l2 = 1; l2 < d2; l2++) (a2 = t4[l2]).isVert && (a2.moveTo ? (c2 && this.drawingContext.closePath(), this.drawingContext.moveTo(a2[0], a2[1])) : this.drawingContext.lineTo(a2[0], a2[1]));
                    this._doFillStrokeClose(c2);
                  }
                  s3 = n3 = o3 = r4 = false, c2 && t4.pop();
                }
                return this;
              }
            }, {
              key: "strokeCap",
              value: function(e4) {
                return e4 !== p.ROUND && e4 !== p.SQUARE && e4 !== p.PROJECT || (this.drawingContext.lineCap = e4), this;
              }
            }, {
              key: "strokeJoin",
              value: function(e4) {
                return e4 !== p.ROUND && e4 !== p.BEVEL && e4 !== p.MITER || (this.drawingContext.lineJoin = e4), this;
              }
            }, {
              key: "strokeWeight",
              value: function(e4) {
                return this.drawingContext.lineWidth = void 0 === e4 || 0 === e4 ? 1e-4 : e4, this;
              }
            }, {
              key: "_getFill",
              value: function() {
                return this._cachedFillStyle || (this._cachedFillStyle = this.drawingContext.fillStyle), this._cachedFillStyle;
              }
            }, {
              key: "_setFill",
              value: function(e4) {
                e4 !== this._cachedFillStyle && (this.drawingContext.fillStyle = e4, this._cachedFillStyle = e4);
              }
            }, {
              key: "_getStroke",
              value: function() {
                return this._cachedStrokeStyle || (this._cachedStrokeStyle = this.drawingContext.strokeStyle), this._cachedStrokeStyle;
              }
            }, {
              key: "_setStroke",
              value: function(e4) {
                e4 !== this._cachedStrokeStyle && (this.drawingContext.strokeStyle = e4, this._cachedStrokeStyle = e4);
              }
            }, {
              key: "bezier",
              value: function(e4, t4, r4, o3, n3, s3, i2, a2) {
                return this._pInst.beginShape(), this._pInst.vertex(e4, t4), this._pInst.bezierVertex(r4, o3, n3, s3, i2, a2), this._pInst.endShape(), this;
              }
            }, {
              key: "curve",
              value: function(e4, t4, r4, o3, n3, s3, i2, a2) {
                return this._pInst.beginShape(), this._pInst.curveVertex(e4, t4), this._pInst.curveVertex(r4, o3), this._pInst.curveVertex(n3, s3), this._pInst.curveVertex(i2, a2), this._pInst.endShape(), this;
              }
            }, {
              key: "_doFillStrokeClose",
              value: function(e4) {
                e4 && this.drawingContext.closePath(), !this._clipping && this._doFill && this.drawingContext.fill(), !this._clipping && this._doStroke && this.drawingContext.stroke();
              }
            }, {
              key: "applyMatrix",
              value: function(e4, t4, r4, o3, n3, s3) {
                this.drawingContext.transform(e4, t4, r4, o3, n3, s3);
              }
            }, {
              key: "resetMatrix",
              value: function() {
                return this.drawingContext.setTransform(1, 0, 0, 1, 0, 0), this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), this;
              }
            }, {
              key: "rotate",
              value: function(e4) {
                this.drawingContext.rotate(e4);
              }
            }, {
              key: "scale",
              value: function(e4, t4) {
                return this.drawingContext.scale(e4, t4), this;
              }
            }, {
              key: "translate",
              value: function(e4, t4) {
                return e4 instanceof d.default.Vector && (t4 = e4.y, e4 = e4.x), this.drawingContext.translate(e4, t4), this;
              }
            }, {
              key: "_renderText",
              value: function(e4, t4, r4, o3, n3, s3) {
                if (!(o3 < s3 || n3 <= o3)) return e4.push(), this._isOpenType() ? this._textFont._renderPath(t4, r4, o3, {
                  renderer: this
                }) : (this._doStroke && this._strokeSet && this.drawingContext.strokeText(t4, r4, o3), !this._clipping && this._doFill && (this._fillSet || this._setFill(p._DEFAULT_TEXT_FILL), this.drawingContext.fillText(t4, r4, o3))), e4.pop(), e4;
              }
            }, {
              key: "textWidth",
              value: function(e4) {
                return this._isOpenType() ? this._textFont._textWidth(e4, this._textSize) : this.drawingContext.measureText(e4).width;
              }
            }, {
              key: "_applyTextProperties",
              value: function() {
                var e4 = this._pInst, t4 = (this._setProperty("_textAscent", null), this._setProperty("_textDescent", null), t4 = this._textFont, this._isOpenType() && (t4 = this._textFont.font.familyName, this._setProperty("_textStyle", this._textFont.font.styleName)), t4 || "sans-serif");
                return /\s/.exec(t4) && (t4 = '"'.concat(t4, '"')), this.drawingContext.font = "".concat(this._textStyle || "normal", " ").concat(this._textSize || 12, "px ").concat(t4), this.drawingContext.textAlign = this._textAlign, this._textBaseline === p.CENTER ? this.drawingContext.textBaseline = p._CTX_MIDDLE : this.drawingContext.textBaseline = this._textBaseline, e4;
              }
            }, {
              key: "push",
              value: function() {
                return this.drawingContext.save(), l(h(n2.prototype), "push", this).call(this);
              }
            }, {
              key: "pop",
              value: function(e4) {
                this.drawingContext.restore(), this._cachedFillStyle = this.drawingContext.fillStyle, this._cachedStrokeStyle = this.drawingContext.strokeStyle, l(h(n2.prototype), "pop", this).call(this, e4);
              }
            }]) && s2(t3.prototype, e3), r3 && s2(t3, r3), n2;
          }(d.default.Renderer), e2 = (n.prototype.text = function(e3, t3, r3, o2, n2) {
            void 0 !== o2 && this.drawingContext.textBaseline === p.BASELINE && (s3 = true, this.drawingContext.textBaseline = p.TOP);
            var s3, o2 = d.default.Renderer.prototype.text.apply(this, arguments);
            return s3 && (this.drawingContext.textBaseline = p.BASELINE), o2;
          }, d.default.Renderer2D = n, d.default.Renderer2D);
          r2.default = e2;
        }, {
          "./constants": 272,
          "./main": 283,
          "./p5.Renderer": 286,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.fill": 156,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.function.name": 174,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.get-prototype-of": 188,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.reflect.construct": 192,
          "core-js/modules/es.reflect.get": 193,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        288: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator");
          var h = (e2 = e2("./main")) && e2.__esModule ? e2 : {
            default: e2
          };
          h.default.prototype._promisePreloads = [];
          function o() {
            return {};
          }
          var f = !(h.default.prototype.registerPromisePreload = function(e3) {
            h.default.prototype._promisePreloads.push(e3);
          });
          h.default.prototype._setupPromisePreloads = function() {
            var e3 = true, t3 = false, r3 = void 0;
            try {
              for (var o2, n = this._promisePreloads[Symbol.iterator](); !(e3 = (o2 = n.next()).done); e3 = true) {
                var s2 = o2.value, i = this, a = s2.method, l = s2.addCallbacks, u2 = s2.legacyPreloadSetup, c = s2.target || this, d = c[a].bind(c);
                if (c === h.default.prototype) {
                  if (f) continue;
                  i = null, d = c[a];
                }
                c[a] = this._wrapPromisePreload(i, d, l), u2 && (c[u2.method] = this._legacyPreloadGenerator(i, u2, c[a]));
              }
            } catch (e4) {
              t3 = true, r3 = e4;
            } finally {
              try {
                e3 || null == n.return || n.return();
              } finally {
                if (t3) throw r3;
              }
            }
            f = true;
          }, h.default.prototype._wrapPromisePreload = function(e3, l, u2) {
            var t3 = function() {
              for (var e4 = this, t4 = (this._incrementPreload(), null), r3 = null, o2 = arguments.length, n = new Array(o2), s2 = 0; s2 < o2; s2++) n[s2] = arguments[s2];
              if (u2) for (var i = n.length - 1; 0 <= i && !r3 && "function" == typeof n[i]; i--) r3 = t4, t4 = n.pop();
              var a = Promise.resolve(l.apply(this, n));
              return t4 && a.then(t4), r3 && a.catch(r3), a.then(function() {
                return e4._decrementPreload();
              }), a;
            };
            return t3 = e3 ? t3.bind(e3) : t3;
          };
          h.default.prototype._legacyPreloadGenerator = function(e3, t3, s2) {
            var i = t3.createBaseObject || o, t3 = function() {
              var t4 = this;
              this._incrementPreload();
              for (var e4 = arguments.length, r3 = new Array(e4), o2 = 0; o2 < e4; o2++) r3[o2] = arguments[o2];
              var n = i.apply(this, r3);
              return s2.apply(this, r3).then(function(e5) {
                Object.assign(n, e5), t4._decrementPreload();
              }), n;
            };
            return t3 = e3 ? t3.bind(e3) : t3;
          };
        }, {
          "./main": 283,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.assign": 183,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.promise": 191,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        289: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var l = (n = e2("./main")) && n.__esModule ? n : {
            default: n
          }, u2 = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== c(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = i();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s2;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r3, s2) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("./constants"));
          function i() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), i = function() {
              return e3;
            }, e3);
          }
          function c(e3) {
            return (c = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("./p5.Graphics"), e2("./p5.Renderer2D"), e2("../webgl/p5.RendererGL");
          var d = "defaultCanvas0", n = (l.default.prototype.createCanvas = function(e3, t3, r3, o2) {
            var n2, s2, i2;
            if (l.default._validateParameters("createCanvas", arguments), arguments[2] instanceof HTMLCanvasElement ? (r3 = u2.P2D, o2 = arguments[2]) : n2 = r3 || u2.P2D, o2) (i2 = document.getElementById(d)) && i2.parentNode.removeChild(i2), i2 = o2, this._defaultGraphicsCreated = false;
            else {
              if (n2 === u2.WEBGL) (i2 = document.getElementById(d)) && (i2.parentNode.removeChild(i2), s2 = this._renderer, this._elements = this._elements.filter(function(e4) {
                return e4 !== s2;
              })), (i2 = document.createElement("canvas")).id = d, i2.classList.add("p5Canvas");
              else if (this._defaultGraphicsCreated) i2 = this.canvas;
              else {
                i2 = o2 || document.createElement("canvas");
                for (var a = 0; document.getElementById("defaultCanvas".concat(a)); ) a++;
                d = "defaultCanvas".concat(a), i2.id = d, i2.classList.add("p5Canvas");
              }
              this._setupDone || (i2.dataset.hidden = true, i2.style.visibility = "hidden"), (this._userNode || (0 === document.getElementsByTagName("main").length && (r3 = document.createElement("main"), document.body.appendChild(r3)), document.getElementsByTagName("main")[0])).appendChild(i2);
            }
            return n2 === u2.WEBGL ? (this._setProperty("_renderer", new l.default.RendererGL(i2, this, true)), this._elements.push(this._renderer), e3 = (o2 = this._renderer._adjustDimensions(e3, t3)).adjustedWidth, t3 = o2.adjustedHeight) : this._defaultGraphicsCreated || (this._setProperty("_renderer", new l.default.Renderer2D(i2, this, true)), this._defaultGraphicsCreated = true, this._elements.push(this._renderer)), this._renderer.resize(e3, t3), this._renderer._applyDefaults(), this._renderer;
          }, l.default.prototype.resizeCanvas = function(e3, t3, r3) {
            if (l.default._validateParameters("resizeCanvas", arguments), this._renderer) {
              var o2, n2, s2, i2 = {};
              for (o2 in this.drawingContext) {
                var a = this.drawingContext[o2];
                "object" !== c(a) && "function" != typeof a && (i2[o2] = a);
              }
              for (s2 in this._renderer instanceof l.default.RendererGL && (e3 = (n2 = this._renderer._adjustDimensions(e3, t3)).adjustedWidth, t3 = n2.adjustedHeight), this.width = e3, this.height = t3, this._renderer.resize(e3, t3), i2) try {
                this.drawingContext[s2] = i2[s2];
              } catch (e4) {
              }
              r3 || this.redraw();
            }
            this._addAccsOutput() && this._updateAccsOutput();
          }, l.default.prototype.noCanvas = function() {
            this.canvas && this.canvas.parentNode.removeChild(this.canvas);
          }, l.default.prototype.createGraphics = function(e3, t3) {
            for (var r3 = arguments.length, o2 = new Array(2 < r3 ? r3 - 2 : 0), n2 = 2; n2 < r3; n2++) o2[n2 - 2] = arguments[n2];
            return o2[0] instanceof HTMLCanvasElement && (o2[1] = o2[0], o2[0] = u2.P2D), l.default._validateParameters("createGraphics", arguments), new l.default.Graphics(e3, t3, o2[0], this, o2[1]);
          }, l.default.prototype.createFramebuffer = function(e3) {
            return new l.default.Framebuffer(this, e3);
          }, l.default.prototype.clearDepth = function(e3) {
            this._assert3d("clearDepth"), this._renderer.clearDepth(e3);
          }, l.default.prototype.blendMode = function(e3) {
            l.default._validateParameters("blendMode", arguments), e3 === u2.NORMAL && (console.warn("NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead."), e3 = u2.BLEND), this._renderer.blendMode(e3);
          }, l.default);
          r2.default = n;
        }, {
          "../webgl/p5.RendererGL": 341,
          "./constants": 272,
          "./main": 283,
          "./p5.Graphics": 285,
          "./p5.Renderer2D": 287,
          "core-js/modules/es.array.filter": 157,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        290: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.slice"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var l = n(e2("../main")), a = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = c();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../constants")), u2 = n(e2("../helpers"));
          function c() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), c = function() {
              return e3;
            }, e3);
          }
          function n(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          function s2(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          e2("../friendly_errors/fes_core"), e2("../friendly_errors/file_errors"), e2("../friendly_errors/validate_params"), l.default.prototype._normalizeArcAngles = function(e3, t3, r3, o2, n2) {
            var s3;
            return e3 -= a.TWO_PI * Math.floor(e3 / a.TWO_PI), t3 -= a.TWO_PI * Math.floor(t3 / a.TWO_PI), s3 = Math.min(Math.abs(e3 - t3), a.TWO_PI - Math.abs(e3 - t3)), n2 && (e3 = e3 <= a.HALF_PI ? Math.atan(r3 / o2 * Math.tan(e3)) : e3 > a.HALF_PI && e3 <= 3 * a.HALF_PI ? Math.atan(r3 / o2 * Math.tan(e3)) + a.PI : Math.atan(r3 / o2 * Math.tan(e3)) + a.TWO_PI, t3 = t3 <= a.HALF_PI ? Math.atan(r3 / o2 * Math.tan(t3)) : t3 > a.HALF_PI && t3 <= 3 * a.HALF_PI ? Math.atan(r3 / o2 * Math.tan(t3)) + a.PI : Math.atan(r3 / o2 * Math.tan(t3)) + a.TWO_PI), t3 < e3 && (t3 += a.TWO_PI), {
              start: e3,
              stop: t3,
              correspondToSamePoint: s3 < 1e-5
            };
          }, l.default.prototype.arc = function(e3, t3, r3, o2, n2, s3, i2, a2) {
            return l.default._validateParameters("arc", arguments), (this._renderer._doStroke || this._renderer._doFill) && n2 !== s3 && (n2 = this._toRadians(n2), s3 = this._toRadians(s3), e3 = u2.default.modeAdjust(e3, t3, r3, o2, this._renderer._ellipseMode), (t3 = this._normalizeArcAngles(n2, s3, e3.w, e3.h, true)).correspondToSamePoint ? this._renderer.ellipse([e3.x, e3.y, e3.w, e3.h, a2]) : (this._renderer.arc(e3.x, e3.y, e3.w, e3.h, t3.start, t3.stop, i2, a2), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("arc", [e3.x, e3.y, e3.w, e3.h, t3.start, t3.stop, i2]))), this;
          }, l.default.prototype.ellipse = function(e3, t3, r3, o2, n2) {
            return l.default._validateParameters("ellipse", arguments), this._renderEllipse.apply(this, arguments);
          }, l.default.prototype.circle = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            l.default._validateParameters("circle", t3);
            var o2 = t3.slice(0, 2);
            return o2.push(t3[2], t3[2]), this._renderEllipse.apply(this, s2(o2));
          }, l.default.prototype._renderEllipse = function(e3, t3, r3, o2, n2) {
            return (this._renderer._doStroke || this._renderer._doFill) && (e3 = u2.default.modeAdjust(e3, t3, r3, o2 = void 0 === o2 ? r3 : o2, this._renderer._ellipseMode), this._renderer.ellipse([e3.x, e3.y, e3.w, e3.h, n2]), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("ellipse", [e3.x, e3.y, e3.w, e3.h])), this;
          }, l.default.prototype.line = function() {
            for (var e3, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            return l.default._validateParameters("line", r3), this._renderer._doStroke && (e3 = this._renderer).line.apply(e3, r3), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("line", r3), this;
          }, l.default.prototype.point = function() {
            for (var e3, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            return l.default._validateParameters("point", r3), this._renderer._doStroke && (1 === r3.length && r3[0] instanceof l.default.Vector ? this._renderer.point.call(this._renderer, r3[0].x, r3[0].y, r3[0].z) : ((e3 = this._renderer).point.apply(e3, r3), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("point", r3))), this;
          }, l.default.prototype.quad = function() {
            for (var e3, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            return l.default._validateParameters("quad", r3), (this._renderer._doStroke || this._renderer._doFill) && (this._renderer.isP3D && r3.length < 12 ? this._renderer.quad.call(this._renderer, r3[0], r3[1], 0, r3[2], r3[3], 0, r3[4], r3[5], 0, r3[6], r3[7], 0, r3[8], r3[9]) : ((e3 = this._renderer).quad.apply(e3, r3), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("quadrilateral", r3))), this;
          }, l.default.prototype.rect = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            return l.default._validateParameters("rect", t3), this._renderRect.apply(this, t3);
          }, l.default.prototype.square = function(e3, t3, r3, o2, n2, s3, i2) {
            return l.default._validateParameters("square", arguments), this._renderRect.call(this, e3, t3, r3, r3, o2, n2, s3, i2);
          }, l.default.prototype._renderRect = function() {
            if (this._renderer._doStroke || this._renderer._doFill) {
              3 === arguments.length && (arguments[3] = arguments[2]);
              for (var e3 = u2.default.modeAdjust(arguments[0], arguments[1], arguments[2], arguments[3], this._renderer._rectMode), t3 = (this._renderer._rectMode === a.CORNER && (e3.w = arguments[2], e3.h = arguments[3]), [e3.x, e3.y, e3.w, e3.h]), r3 = 4; r3 < arguments.length; r3++) t3[r3] = arguments[r3];
              this._renderer.rect(t3), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("rectangle", [e3.x, e3.y, e3.w, e3.h]);
            }
            return this;
          }, l.default.prototype.triangle = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            return l.default._validateParameters("triangle", t3), (this._renderer._doStroke || this._renderer._doFill) && this._renderer.triangle(t3), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("triangle", t3), this;
          };
          e2 = l.default;
          r2.default = e2;
        }, {
          "../constants": 272,
          "../friendly_errors/fes_core": 274,
          "../friendly_errors/file_errors": 275,
          "../friendly_errors/validate_params": 278,
          "../helpers": 279,
          "../main": 283,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        291: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (l = e2("../main")) && l.__esModule ? l : {
            default: l
          }, s2 = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          n.default.prototype.ellipseMode = function(e3) {
            return n.default._validateParameters("ellipseMode", arguments), e3 !== s2.CORNER && e3 !== s2.CORNERS && e3 !== s2.RADIUS && e3 !== s2.CENTER || (this._renderer._ellipseMode = e3), this;
          }, n.default.prototype.noSmooth = function() {
            return this._renderer.isP3D ? this.setAttributes("antialias", false) : "imageSmoothingEnabled" in this.drawingContext && (this.drawingContext.imageSmoothingEnabled = false), this;
          }, n.default.prototype.rectMode = function(e3) {
            return n.default._validateParameters("rectMode", arguments), e3 !== s2.CORNER && e3 !== s2.CORNERS && e3 !== s2.RADIUS && e3 !== s2.CENTER || (this._renderer._rectMode = e3), this;
          }, n.default.prototype.smooth = function() {
            return this._renderer.isP3D ? this.setAttributes("antialias", true) : "imageSmoothingEnabled" in this.drawingContext && (this.drawingContext.imageSmoothingEnabled = true), this;
          }, n.default.prototype.strokeCap = function(e3) {
            return n.default._validateParameters("strokeCap", arguments), e3 !== s2.ROUND && e3 !== s2.SQUARE && e3 !== s2.PROJECT || this._renderer.strokeCap(e3), this;
          }, n.default.prototype.strokeJoin = function(e3) {
            return n.default._validateParameters("strokeJoin", arguments), e3 !== s2.ROUND && e3 !== s2.BEVEL && e3 !== s2.MITER || this._renderer.strokeJoin(e3), this;
          }, n.default.prototype.strokeWeight = function(e3) {
            return n.default._validateParameters("strokeWeight", arguments), this._renderer.strokeWeight(e3), this;
          };
          var l = n.default;
          r2.default = l;
        }, {
          "../constants": 272,
          "../main": 283,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        292: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var l = (o = e2("../main")) && o.__esModule ? o : {
            default: o
          };
          e2("../friendly_errors/fes_core"), e2("../friendly_errors/file_errors"), e2("../friendly_errors/validate_params"), l.default.prototype.bezier = function() {
            for (var e3, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            return l.default._validateParameters("bezier", r3), (this._renderer._doStroke || this._renderer._doFill) && (e3 = this._renderer).bezier.apply(e3, r3), this;
          }, l.default.prototype.bezierDetail = function(e3) {
            return l.default._validateParameters("bezierDetail", arguments), this._bezierDetail = e3, this;
          }, l.default.prototype.bezierPoint = function(e3, t3, r3, o2, n) {
            l.default._validateParameters("bezierPoint", arguments);
            var s2 = 1 - n;
            return Math.pow(s2, 3) * e3 + 3 * Math.pow(s2, 2) * n * t3 + 3 * s2 * Math.pow(n, 2) * r3 + Math.pow(n, 3) * o2;
          }, l.default.prototype.bezierTangent = function(e3, t3, r3, o2, n) {
            l.default._validateParameters("bezierTangent", arguments);
            var s2 = 1 - n;
            return 3 * o2 * Math.pow(n, 2) - 3 * r3 * Math.pow(n, 2) + 6 * r3 * s2 * n - 6 * t3 * s2 * n + 3 * t3 * Math.pow(s2, 2) - 3 * e3 * Math.pow(s2, 2);
          }, l.default.prototype.curve = function() {
            for (var e3, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            return l.default._validateParameters("curve", r3), this._renderer._doStroke && (e3 = this._renderer).curve.apply(e3, r3), this;
          }, l.default.prototype.curveDetail = function(e3) {
            return l.default._validateParameters("curveDetail", arguments), this._curveDetail = e3 < 3 ? 3 : e3, this;
          }, l.default.prototype.curveTightness = function(e3) {
            return l.default._validateParameters("curveTightness", arguments), this._renderer._curveTightness = e3, this;
          }, l.default.prototype.curvePoint = function(e3, t3, r3, o2, n) {
            l.default._validateParameters("curvePoint", arguments);
            var s2 = this._renderer._curveTightness, i = n * n * n, a = n * n;
            return e3 * ((s2 - 1) / 2 * i + (1 - s2) * a + (s2 - 1) / 2 * n) + t3 * ((s2 + 3) / 2 * i + (-5 - s2) / 2 * a + 1) + r3 * ((-3 - s2) / 2 * i + (s2 + 2) * a + (1 - s2) / 2 * n) + o2 * ((1 - s2) / 2 * i + (s2 - 1) / 2 * a);
          }, l.default.prototype.curveTangent = function(e3, t3, r3, o2, n) {
            l.default._validateParameters("curveTangent", arguments);
            var s2 = this._renderer._curveTightness, i = n * n * 3, n = 2 * n;
            return e3 * ((s2 - 1) / 2 * i + (1 - s2) * n + (s2 - 1) / 2) + t3 * ((s2 + 3) / 2 * i + (-5 - s2) / 2 * n) + r3 * ((-3 - s2) / 2 * i + (s2 + 2) * n + (1 - s2) / 2) + o2 * ((1 - s2) / 2 * i + (s2 - 1) / 2 * n);
          };
          var o = l.default;
          r2.default = o;
        }, {
          "../friendly_errors/fes_core": 274,
          "../friendly_errors/file_errors": 275,
          "../friendly_errors/validate_params": 278,
          "../main": 283
        }],
        293: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.slice"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var a = (y = e2("../main")) && y.__esModule ? y : {
            default: y
          }, l = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = u2();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../constants"));
          function u2() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), u2 = function() {
              return e3;
            }, e3);
          }
          var n = null, c = [], d = [], h = false, s2 = false, f = false, p = false, m = true, y = (a.default.prototype.beginContour = function() {
            return this._renderer.isP3D ? this._renderer.beginContour() : (d = [], p = true), this;
          }, a.default.prototype.beginShape = function(e3) {
            var t3;
            return a.default._validateParameters("beginShape", arguments), this._renderer.isP3D ? (t3 = this._renderer).beginShape.apply(t3, arguments) : (n = e3 === l.POINTS || e3 === l.LINES || e3 === l.TRIANGLES || e3 === l.TRIANGLE_FAN || e3 === l.TRIANGLE_STRIP || e3 === l.QUADS || e3 === l.QUAD_STRIP ? e3 : null, c = [], d = []), this;
          }, a.default.prototype.bezierVertex = function() {
            for (var e3, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            if (a.default._validateParameters("bezierVertex", r3), this._renderer.isP3D) (e3 = this._renderer).bezierVertex.apply(e3, r3);
            else if (0 === c.length) a.default._friendlyError("vertex() must be used once before calling bezierVertex()", "bezierVertex");
            else {
              h = true;
              for (var n2 = [], s3 = 0; s3 < r3.length; s3++) n2[s3] = r3[s3];
              n2.isVert = false, (p ? d : c).push(n2);
            }
            return this;
          }, a.default.prototype.curveVertex = function() {
            for (var e3, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            return a.default._validateParameters("curveVertex", r3), this._renderer.isP3D ? (e3 = this._renderer).curveVertex.apply(e3, r3) : (s2 = true, this.vertex(r3[0], r3[1])), this;
          }, a.default.prototype.endContour = function() {
            if (!this._renderer.isP3D) {
              var e3 = d[0].slice();
              e3.isVert = d[0].isVert, e3.moveTo = false, d.push(e3), m && (c.push(c[0]), m = false);
              for (var t3 = 0; t3 < d.length; t3++) c.push(d[t3]);
            }
            return this;
          }, a.default.prototype.endShape = function(e3) {
            var t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 1;
            if (a.default._validateParameters("endShape", arguments), t3 < 1 && (console.log("\u{1F338} p5.js says: You can not have less than one instance"), t3 = 1), this._renderer.isP3D) this._renderer.endShape(e3, s2, h, f, p, n, t3);
            else {
              if (1 !== t3 && console.log("\u{1F338} p5.js says: Instancing is only supported in WebGL2 mode"), 0 === c.length) return this;
              if (!this._renderer._doStroke && !this._renderer._doFill) return this;
              t3 = e3 === l.CLOSE;
              t3 && !p && c.push(c[0]), this._renderer.endShape(e3, c, s2, h, f, p, n), m = !(p = f = h = s2 = false), t3 && c.pop();
            }
            return this;
          }, a.default.prototype.quadraticVertex = function() {
            for (var e3, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            if (a.default._validateParameters("quadraticVertex", r3), this._renderer.isP3D) (e3 = this._renderer).quadraticVertex.apply(e3, r3);
            else {
              if (this._contourInited) return (e3 = {}).x = r3[0], e3.y = r3[1], e3.x3 = r3[2], e3.y3 = r3[3], e3.type = l.QUADRATIC, this._contourVertices.push(e3), this;
              if (0 < c.length) {
                f = true;
                for (var n2 = [], s3 = 0; s3 < r3.length; s3++) n2[s3] = r3[s3];
                n2.isVert = false, (p ? d : c).push(n2);
              } else a.default._friendlyError("vertex() must be used once before calling quadraticVertex()", "quadraticVertex");
            }
            return this;
          }, a.default.prototype.vertex = function(e3, t3, r3, o2, n2) {
            var s3;
            return this._renderer.isP3D ? (s3 = this._renderer).vertex.apply(s3, arguments) : ((s3 = []).isVert = true, s3[0] = e3, s3[1] = t3, s3[2] = 0, s3[3] = 0, s3[4] = 0, s3[5] = this._renderer._getFill(), s3[6] = this._renderer._getStroke(), r3 && (s3.moveTo = r3), (p ? (0 === d.length && (s3.moveTo = true), d) : c).push(s3)), this;
          }, a.default.prototype.normal = function(e3, t3, r3) {
            var o2;
            return this._assert3d("normal"), a.default._validateParameters("normal", arguments), (o2 = this._renderer).normal.apply(o2, arguments), this;
          }, a.default);
          r2.default = y;
        }, {
          "../constants": 272,
          "../main": 283,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        294: [function(e2, t2, r2) {
        }, {}],
        295: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.assign"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("./main")) && e2.__esModule ? e2 : {
            default: e2
          };
          e2.default.prototype.noLoop = function() {
            this._loop = false;
          }, e2.default.prototype.loop = function() {
            this._loop || (this._loop = true, this._setupDone && this._draw());
          }, e2.default.prototype.isLooping = function() {
            return this._loop;
          }, e2.default.prototype.push = function() {
            this._styles.push({
              props: {
                _colorMode: this._colorMode
              },
              renderer: this._renderer.push()
            });
          }, e2.default.prototype.pop = function() {
            var e3 = this._styles.pop();
            e3 ? (this._renderer.pop(e3.renderer), Object.assign(this, e3.props)) : console.warn("pop() was called without matching push()");
          }, e2.default.prototype.redraw = function(e3) {
            if (!this._inUserDraw && this._setupDone) {
              var t3 = parseInt(e3), r3 = ((isNaN(t3) || t3 < 1) && (t3 = 1), this._isGlobal ? window : this);
              if ("function" == typeof r3.draw) {
                void 0 === r3.setup && r3.scale(r3._pixelDensity, r3._pixelDensity);
                for (var o = 0; o < t3; o++) {
                  r3.resetMatrix(), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._updateAccsOutput(), r3._renderer.isP3D && r3._renderer._update(), r3._setProperty("frameCount", r3.frameCount + 1), this.callRegisteredHooksFor("pre"), this._inUserDraw = true;
                  try {
                    r3.draw();
                  } finally {
                    this._inUserDraw = false;
                  }
                  this.callRegisteredHooksFor("post");
                }
              }
            }
          };
          e2 = e2.default;
          r2.default = e2;
        }, {
          "./main": 283,
          "core-js/modules/es.object.assign": 183
        }],
        296: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (e2 = e2("./main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function o(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          n.default.prototype.applyMatrix = function() {
            var e3 = (arguments.length <= 0 ? void 0 : arguments[0]) instanceof Object.getPrototypeOf(Uint8Array);
            return Array.isArray(arguments.length <= 0 ? void 0 : arguments[0]) || e3 ? (e3 = this._renderer).applyMatrix.apply(e3, o(arguments.length <= 0 ? void 0 : arguments[0])) : (e3 = this._renderer).applyMatrix.apply(e3, arguments), this;
          }, n.default.prototype.resetMatrix = function() {
            return this._renderer.resetMatrix(), this;
          }, n.default.prototype.rotate = function(e3, t3) {
            return n.default._validateParameters("rotate", arguments), this._renderer.rotate(this._toRadians(e3), t3), this;
          }, n.default.prototype.rotateX = function(e3) {
            return this._assert3d("rotateX"), n.default._validateParameters("rotateX", arguments), this._renderer.rotateX(this._toRadians(e3)), this;
          }, n.default.prototype.rotateY = function(e3) {
            return this._assert3d("rotateY"), n.default._validateParameters("rotateY", arguments), this._renderer.rotateY(this._toRadians(e3)), this;
          }, n.default.prototype.rotateZ = function(e3) {
            return this._assert3d("rotateZ"), n.default._validateParameters("rotateZ", arguments), this._renderer.rotateZ(this._toRadians(e3)), this;
          }, n.default.prototype.scale = function(e3, t3, r3) {
            var o2;
            return n.default._validateParameters("scale", arguments), e3 instanceof n.default.Vector ? (e3 = (o2 = e3).x, t3 = o2.y, r3 = o2.z) : Array.isArray(e3) && (e3 = (o2 = e3)[0], t3 = o2[1], r3 = o2[2] || 1), isNaN(t3) ? t3 = r3 = e3 : isNaN(r3) && (r3 = 1), this._renderer.scale(e3, t3, r3), this;
          }, n.default.prototype.shearX = function(e3) {
            n.default._validateParameters("shearX", arguments);
            e3 = this._toRadians(e3);
            return this._renderer.applyMatrix(1, 0, Math.tan(e3), 1, 0, 0), this;
          }, n.default.prototype.shearY = function(e3) {
            n.default._validateParameters("shearY", arguments);
            e3 = this._toRadians(e3);
            return this._renderer.applyMatrix(1, Math.tan(e3), 0, 1, 0, 0), this;
          }, n.default.prototype.translate = function(e3, t3, r3) {
            return n.default._validateParameters("translate", arguments), this._renderer.isP3D ? this._renderer.translate(e3, t3, r3) : this._renderer.translate(e3, t3), this;
          };
          e2 = n.default;
          r2.default = e2;
        }, {
          "./main": 283,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-prototype-of": 188,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239,
          "core-js/modules/es.typed-array.uint8-array": 242,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        297: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.ends-with"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.ends-with"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator");
          var n = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function s2(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          n.default.prototype.storeItem = function(e3, t3) {
            "string" != typeof e3 && console.log("The argument that you passed to storeItem() - ".concat(e3, " is not a string.")), e3.endsWith("p5TypeID") && console.log("The argument that you passed to storeItem() - ".concat(e3, " must not end with 'p5TypeID'.")), void 0 === t3 && console.log("You cannot store undefined variables using storeItem().");
            var r3 = i(t3);
            switch (r3) {
              case "number":
              case "boolean":
                t3 = t3.toString();
                break;
              case "object":
                t3 instanceof n.default.Color ? r3 = "p5.Color" : t3 instanceof n.default.Vector && (r3 = "p5.Vector", t3 = [t3.x, t3.y, t3.z]), t3 = JSON.stringify(t3);
            }
            localStorage.setItem(e3, t3);
            e3 = "".concat(e3, "p5TypeID");
            localStorage.setItem(e3, r3);
          }, n.default.prototype.getItem = function(e3) {
            var t3 = localStorage.getItem(e3), r3 = localStorage.getItem("".concat(e3, "p5TypeID"));
            if (void 0 === r3) console.log("Unable to determine type of item stored under ".concat(e3, "in local storage. Did you save the item with something other than setItem()?"));
            else if (null !== t3) switch (r3) {
              case "number":
                t3 = parseFloat(t3);
                break;
              case "boolean":
                t3 = "true" === t3;
                break;
              case "object":
                t3 = JSON.parse(t3);
                break;
              case "p5.Color":
                t3 = JSON.parse(t3), t3 = this.color.apply(this, s2(t3.levels));
                break;
              case "p5.Vector":
                t3 = JSON.parse(t3), t3 = this.createVector.apply(this, s2(t3));
            }
            return t3;
          }, n.default.prototype.clearStorage = function() {
            var t3 = this;
            Object.keys(localStorage).forEach(function(e3) {
              e3.endsWith("p5TypeID") && t3.removeItem(e3.replace("p5TypeID", ""));
            });
          }, n.default.prototype.removeItem = function(e3) {
            "string" != typeof e3 && console.log("The argument that you passed to removeItem() - ".concat(e3, " is not a string.")), localStorage.removeItem(e3), localStorage.removeItem("".concat(e3, "p5TypeID"));
          };
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.keys": 189,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.ends-with": 198,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.for-each": 245,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        298: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function n(e3) {
            return (n = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.reflect.construct"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.object.keys"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var s2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function i(e3, t3) {
            if ("function" != typeof t3 && null !== t3) throw new TypeError("Super expression must either be null or a function");
            e3.prototype = Object.create(t3 && t3.prototype, {
              constructor: {
                value: e3,
                writable: true,
                configurable: true
              }
            }), t3 && a(e3, t3);
          }
          function a(e3, t3) {
            return (a = Object.setPrototypeOf || function(e4, t4) {
              return e4.__proto__ = t4, e4;
            })(e3, t3);
          }
          function l(r3) {
            return function() {
              var e3, t3 = u2(r3), t3 = (e3 = function() {
                if ("undefined" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {
                  if ("function" == typeof Proxy) return 1;
                  try {
                    return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                    })), 1;
                  } catch (e4) {
                  }
                }
              }() ? (e3 = u2(this).constructor, Reflect.construct(t3, arguments, e3)) : t3.apply(this, arguments), this);
              if (!e3 || "object" !== n(e3) && "function" != typeof e3) {
                if (void 0 !== t3) return t3;
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return e3;
            };
          }
          function u2(e3) {
            return (u2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            })(e3);
          }
          function c(e3, t3) {
            if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
          }
          function d(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          function h(e3, t3, r3) {
            t3 && d(e3.prototype, t3), r3 && d(e3, r3);
          }
          s2.default.prototype.createStringDict = function(e3, t3) {
            return s2.default._validateParameters("createStringDict", arguments), new s2.default.StringDict(e3, t3);
          }, s2.default.prototype.createNumberDict = function(e3, t3) {
            return s2.default._validateParameters("createNumberDict", arguments), new s2.default.NumberDict(e3, t3);
          }, s2.default.TypedDict = function() {
            function r3(e3, t3) {
              return c(this, r3), e3 instanceof Object ? this.data = e3 : (this.data = {}, this.data[e3] = t3), this;
            }
            return h(r3, [{
              key: "size",
              value: function() {
                return Object.keys(this.data).length;
              }
            }, {
              key: "hasKey",
              value: function(e3) {
                return this.data.hasOwnProperty(e3);
              }
            }, {
              key: "get",
              value: function(e3) {
                if (this.data.hasOwnProperty(e3)) return this.data[e3];
                console.log("".concat(e3, " does not exist in this Dictionary"));
              }
            }, {
              key: "set",
              value: function(e3, t3) {
                this._validate(t3) ? this.data[e3] = t3 : console.log("Those values dont work for this dictionary type.");
              }
            }, {
              key: "_addObj",
              value: function(e3) {
                for (var t3 in e3) this.set(t3, e3[t3]);
              }
            }, {
              key: "create",
              value: function(e3, t3) {
                e3 instanceof Object && void 0 === t3 ? this._addObj(e3) : void 0 !== e3 ? this.set(e3, t3) : console.log("In order to create a new Dictionary entry you must pass an object or a key, value pair");
              }
            }, {
              key: "clear",
              value: function() {
                this.data = {};
              }
            }, {
              key: "remove",
              value: function(e3) {
                if (!this.data.hasOwnProperty(e3)) throw new Error("".concat(e3, " does not exist in this Dictionary"));
                delete this.data[e3];
              }
            }, {
              key: "print",
              value: function() {
                for (var e3 in this.data) console.log("key:".concat(e3, " value:").concat(this.data[e3]));
              }
            }, {
              key: "saveTable",
              value: function(e3) {
                var t3, r4 = "";
                for (t3 in this.data) r4 += "".concat(t3, ",").concat(this.data[t3], "\n");
                var o2 = new Blob([r4], {
                  type: "text/csv"
                });
                s2.default.prototype.downloadFile(o2, e3 || "mycsv", "csv");
              }
            }, {
              key: "saveJSON",
              value: function(e3, t3) {
                s2.default.prototype.saveJSON(this.data, e3, t3);
              }
            }, {
              key: "_validate",
              value: function(e3) {
                return true;
              }
            }]), r3;
          }(), s2.default.StringDict = function() {
            i(n2, s2.default.TypedDict);
            var o2 = l(n2);
            function n2() {
              c(this, n2);
              for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
              return o2.call.apply(o2, [this].concat(t3));
            }
            return h(n2, [{
              key: "_validate",
              value: function(e3) {
                return "string" == typeof e3;
              }
            }]), n2;
          }(), s2.default.NumberDict = function() {
            i(n2, s2.default.TypedDict);
            var o2 = l(n2);
            function n2() {
              c(this, n2);
              for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
              return o2.call.apply(o2, [this].concat(t3));
            }
            return h(n2, [{
              key: "_validate",
              value: function(e3) {
                return "number" == typeof e3;
              }
            }, {
              key: "add",
              value: function(e3, t3) {
                this.data.hasOwnProperty(e3) ? this.data[e3] += t3 : console.log("The key - ".concat(e3, " does not exist in this dictionary."));
              }
            }, {
              key: "sub",
              value: function(e3, t3) {
                this.add(e3, -t3);
              }
            }, {
              key: "mult",
              value: function(e3, t3) {
                this.data.hasOwnProperty(e3) ? this.data[e3] *= t3 : console.log("The key - ".concat(e3, " does not exist in this dictionary."));
              }
            }, {
              key: "div",
              value: function(e3, t3) {
                this.data.hasOwnProperty(e3) ? this.data[e3] /= t3 : console.log("The key - ".concat(e3, " does not exist in this dictionary."));
              }
            }, {
              key: "_valueTest",
              value: function(e3) {
                if (0 === Object.keys(this.data).length) throw new Error("Unable to search for a minimum or maximum value on an empty NumberDict");
                if (1 === Object.keys(this.data).length) return this.data[Object.keys(this.data)[0]];
                var t3, r3 = this.data[Object.keys(this.data)[0]];
                for (t3 in this.data) this.data[t3] * e3 < r3 * e3 && (r3 = this.data[t3]);
                return r3;
              }
            }, {
              key: "minValue",
              value: function() {
                return this._valueTest(1);
              }
            }, {
              key: "maxValue",
              value: function() {
                return this._valueTest(-1);
              }
            }, {
              key: "_keyTest",
              value: function(e3) {
                if (0 === Object.keys(this.data).length) throw new Error("Unable to use minValue on an empty NumberDict");
                if (1 === Object.keys(this.data).length) return Object.keys(this.data)[0];
                for (var t3 = Object.keys(this.data)[0], r3 = 1; r3 < Object.keys(this.data).length; r3++) Object.keys(this.data)[r3] * e3 < t3 * e3 && (t3 = Object.keys(this.data)[r3]);
                return t3;
              }
            }, {
              key: "minKey",
              value: function() {
                return this._keyTest(1);
              }
            }, {
              key: "maxKey",
              value: function() {
                return this._keyTest(-1);
              }
            }]), n2;
          }();
          e2 = s2.default.TypedDict;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-prototype-of": 188,
          "core-js/modules/es.object.keys": 189,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.reflect.construct": 192,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        299: [function(t2, r2, o) {
          "use strict";
          function n(e2) {
            return (n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
              return typeof e3;
            } : function(e3) {
              return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
            })(e2);
          }
          t2("core-js/modules/es.symbol"), t2("core-js/modules/es.symbol.description"), t2("core-js/modules/es.symbol.iterator"), t2("core-js/modules/es.array.every"), t2("core-js/modules/es.array.filter"), t2("core-js/modules/es.array.for-each"), t2("core-js/modules/es.array.from"), t2("core-js/modules/es.array.index-of"), t2("core-js/modules/es.array.iterator"), t2("core-js/modules/es.array.map"), t2("core-js/modules/es.array.slice"), t2("core-js/modules/es.array.splice"), t2("core-js/modules/es.function.name"), t2("core-js/modules/es.object.assign"), t2("core-js/modules/es.object.get-prototype-of"), t2("core-js/modules/es.object.to-string"), t2("core-js/modules/es.promise"), t2("core-js/modules/es.reflect.construct"), t2("core-js/modules/es.regexp.exec"), t2("core-js/modules/es.regexp.to-string"), t2("core-js/modules/es.string.iterator"), t2("core-js/modules/es.string.replace"), t2("core-js/modules/es.string.split"), t2("core-js/modules/es.string.trim"), t2("core-js/modules/web.dom-collections.for-each"), t2("core-js/modules/web.dom-collections.iterator"), t2("core-js/modules/web.url"), t2("core-js/modules/es.symbol"), t2("core-js/modules/es.symbol.description"), t2("core-js/modules/es.symbol.iterator"), t2("core-js/modules/es.array.every"), t2("core-js/modules/es.array.filter"), t2("core-js/modules/es.array.for-each"), t2("core-js/modules/es.array.from"), t2("core-js/modules/es.array.index-of"), t2("core-js/modules/es.array.iterator"), t2("core-js/modules/es.array.map"), t2("core-js/modules/es.array.slice"), t2("core-js/modules/es.array.splice"), t2("core-js/modules/es.function.name"), t2("core-js/modules/es.object.assign"), t2("core-js/modules/es.object.to-string"), t2("core-js/modules/es.promise"), t2("core-js/modules/es.regexp.exec"), t2("core-js/modules/es.regexp.to-string"), t2("core-js/modules/es.string.iterator"), t2("core-js/modules/es.string.replace"), t2("core-js/modules/es.string.split"), t2("core-js/modules/es.string.trim"), t2("core-js/modules/web.dom-collections.for-each"), t2("core-js/modules/web.dom-collections.iterator"), t2("core-js/modules/web.url"), Object.defineProperty(o, "__esModule", {
            value: true
          }), o.default = void 0;
          var f = (t2 = t2("../core/main")) && t2.__esModule ? t2 : {
            default: t2
          };
          function s2(e2, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e2, o2.key, o2);
            }
          }
          function a(e2, t3, r3) {
            t3 && s2(e2.prototype, t3), r3 && s2(e2, r3);
          }
          function l(e2, t3) {
            return (l = Object.setPrototypeOf || function(e3, t4) {
              return e3.__proto__ = t4, e3;
            })(e2, t3);
          }
          function u2(o2) {
            return function() {
              var e2, t3, r3 = i(o2);
              return e2 = function() {
                if ("undefined" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {
                  if ("function" == typeof Proxy) return 1;
                  try {
                    return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                    })), 1;
                  } catch (e3) {
                  }
                }
              }() ? (e2 = i(this).constructor, Reflect.construct(r3, arguments, e2)) : r3.apply(this, arguments), r3 = this, !(t3 = e2) || "object" !== p(t3) && "function" != typeof t3 ? c(r3) : t3;
            };
          }
          function c(e2) {
            if (void 0 === e2) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e2;
          }
          function i(e2) {
            return (i = Object.setPrototypeOf ? Object.getPrototypeOf : function(e3) {
              return e3.__proto__ || Object.getPrototypeOf(e3);
            })(e2);
          }
          function d(e2, t3) {
            if (!(e2 instanceof t3)) throw new TypeError("Cannot call a class as a function");
          }
          function p(e2) {
            return (p = "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? function(e3) {
              return n(e3);
            } : function(e3) {
              return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : n(e3);
            })(e2);
          }
          function m(e2, t3, r3) {
            (t3._userNode || document.body).appendChild(e2);
            r3 = new (r3 ? f.default.MediaElement : f.default.Element)(e2, t3);
            return t3._elements.push(r3), r3;
          }
          f.default.prototype.select = function(e2, t3) {
            f.default._validateParameters("select", arguments);
            t3 = this._getContainer(t3).querySelector(e2);
            return t3 ? this._wrapElement(t3) : null;
          }, f.default.prototype.selectAll = function(e2, t3) {
            f.default._validateParameters("selectAll", arguments);
            var r3 = [], o2 = this._getContainer(t3).querySelectorAll(e2);
            if (o2) for (var n2 = 0; n2 < o2.length; n2++) {
              var s3 = this._wrapElement(o2[n2]);
              r3.push(s3);
            }
            return r3;
          }, f.default.prototype._getContainer = function(e2) {
            var t3 = document;
            return "string" == typeof e2 ? t3 = document.querySelector(e2) || document : e2 instanceof f.default.Element ? t3 = e2.elt : e2 instanceof HTMLElement && (t3 = e2), t3;
          }, f.default.prototype._wrapElement = function(e2) {
            var t3, r3 = Array.prototype.slice.call(e2.children);
            return "INPUT" === e2.tagName && "checkbox" === e2.type ? ((t3 = new f.default.Element(e2, this)).checked = function() {
              return 0 === arguments.length ? this.elt.checked : (this.elt.checked = !(arguments.length <= 0 || !arguments[0]), this);
            }, t3) : "VIDEO" === e2.tagName || "AUDIO" === e2.tagName ? new f.default.MediaElement(e2, this) : "SELECT" === e2.tagName ? this.createSelect(new f.default.Element(e2, this)) : 0 < r3.length && r3.every(function(e3) {
              return "INPUT" === e3.tagName || "LABEL" === e3.tagName;
            }) && ("DIV" === e2.tagName || "SPAN" === e2.tagName) ? this.createRadio(new f.default.Element(e2, this)) : new f.default.Element(e2, this);
          }, f.default.prototype.removeElements = function(e2) {
            f.default._validateParameters("removeElements", arguments);
            this._elements.filter(function(e3) {
              return !(e3.elt instanceof HTMLCanvasElement);
            }).map(function(e3) {
              return e3.remove();
            });
          }, f.default.Element.prototype.changed = function(e2) {
            return f.default.Element._adjustListener("change", e2, this), this;
          }, f.default.Element.prototype.input = function(e2) {
            return f.default.Element._adjustListener("input", e2, this), this;
          }, f.default.prototype.createDiv = function() {
            var e2 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t3 = document.createElement("div");
            return t3.innerHTML = e2, m(t3, this);
          }, f.default.prototype.createP = function() {
            var e2 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t3 = document.createElement("p");
            return t3.innerHTML = e2, m(t3, this);
          }, f.default.prototype.createSpan = function() {
            var e2 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t3 = document.createElement("span");
            return t3.innerHTML = e2, m(t3, this);
          }, f.default.prototype.createImg = function() {
            f.default._validateParameters("createImg", arguments);
            var t3, r3 = document.createElement("img"), o2 = arguments;
            return 1 < o2.length && "string" == typeof o2[1] && (r3.alt = o2[1]), 2 < o2.length && "string" == typeof o2[2] && (r3.crossOrigin = o2[2]), r3.src = o2[0], t3 = m(r3, this), r3.addEventListener("load", function() {
              t3.width = r3.offsetWidth || r3.width, t3.height = r3.offsetHeight || r3.height;
              var e2 = o2[o2.length - 1];
              "function" == typeof e2 && e2(t3);
            }), t3;
          }, f.default.prototype.createA = function(e2, t3, r3) {
            f.default._validateParameters("createA", arguments);
            var o2 = document.createElement("a");
            return o2.href = e2, o2.innerHTML = t3, r3 && (o2.target = r3), m(o2, this);
          }, f.default.prototype.createSlider = function(e2, t3, r3, o2) {
            f.default._validateParameters("createSlider", arguments);
            var n2 = document.createElement("input");
            return n2.type = "range", n2.min = e2, n2.max = t3, 0 === o2 ? n2.step = 1e-18 : o2 && (n2.step = o2), "number" == typeof r3 && (n2.value = r3), m(n2, this);
          }, f.default.prototype.createButton = function(e2, t3) {
            f.default._validateParameters("createButton", arguments);
            var r3 = document.createElement("button");
            return r3.innerHTML = e2, t3 && (r3.value = t3), m(r3, this);
          }, f.default.prototype.createCheckbox = function() {
            for (var e2 = arguments.length, t3 = new Array(e2), r3 = 0; r3 < e2; r3++) t3[r3] = arguments[r3];
            f.default._validateParameters("createCheckbox", t3);
            var o2 = document.createElement("div"), n2 = document.createElement("input"), s3 = (n2.type = "checkbox", document.createElement("label")), i2 = (s3.appendChild(n2), o2.appendChild(s3), m(o2, this));
            return i2.checked = function() {
              var e3 = i2.elt.firstElementChild.getElementsByTagName("input")[0];
              if (e3) {
                if (0 === arguments.length) return e3.checked;
                e3.checked = !(arguments.length <= 0 || !arguments[0]);
              }
              return i2;
            }, this.value = function(e3) {
              return i2.value = e3, this;
            }, t3[0] && (i2.value(t3[0]), (o2 = document.createElement("span")).innerHTML = t3[0], s3.appendChild(o2)), t3[1] && (n2.checked = true), i2;
          }, f.default.prototype.createSelect = function() {
            for (var e2, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            f.default._validateParameters("createSelect", r3);
            var n2, s3 = r3[0];
            return s3 instanceof f.default.Element && s3.elt instanceof HTMLSelectElement ? this.elt = (e2 = s3).elt : s3 instanceof HTMLSelectElement ? (e2 = m(s3, this), this.elt = s3) : (n2 = document.createElement("select"), s3 && "boolean" == typeof s3 && n2.setAttribute("multiple", "true"), e2 = m(n2, this), this.elt = n2), e2.option = function(e3, t4) {
              var r4;
              if (void 0 !== e3) {
                for (var o3, n3 = 0; n3 < this.elt.length; n3 += 1) if (this.elt[n3].textContent === e3) {
                  r4 = n3;
                  break;
                }
                void 0 !== r4 ? false === t4 ? this.elt.remove(r4) : this.elt[r4].value = t4 : ((o3 = document.createElement("option")).textContent = e3, o3.value = void 0 === t4 ? e3 : t4, this.elt.appendChild(o3), this._pInst._elements.push(o3));
              }
            }, e2.selected = function(e3) {
              if (void 0 !== e3) {
                for (var t4 = 0; t4 < this.elt.length; t4 += 1) this.elt[t4].value.toString() === e3.toString() && (this.elt.selectedIndex = t4);
                return this;
              }
              if (this.elt.getAttribute("multiple")) {
                var r4 = [], o3 = true, n3 = false, s4 = void 0;
                try {
                  for (var i2, a2 = this.elt.selectedOptions[Symbol.iterator](); !(o3 = (i2 = a2.next()).done); o3 = true) {
                    var l2 = i2.value;
                    r4.push(l2.value);
                  }
                } catch (e4) {
                  n3 = true, s4 = e4;
                } finally {
                  try {
                    o3 || null == a2.return || a2.return();
                  } finally {
                    if (n3) throw s4;
                  }
                }
                return r4;
              }
              return this.elt.value;
            }, e2.disable = function(e3) {
              if ("string" == typeof e3) for (var t4 = 0; t4 < this.elt.length; t4++) this.elt[t4].value.toString() === e3 && (this.elt[t4].disabled = true, this.elt[t4].selected = false);
              else this.elt.disabled = true;
              return this;
            }, e2.enable = function(e3) {
              if ("string" == typeof e3) for (var t4 = 0; t4 < this.elt.length; t4++) this.elt[t4].value.toString() === e3 && (this.elt[t4].disabled = false, this.elt[t4].selected = false);
              else {
                this.elt.disabled = false;
                for (var r4 = 0; r4 < this.elt.length; r4++) this.elt[r4].disabled = false, this.elt[r4].selected = false;
              }
              return this;
            }, e2;
          };
          var y = 0;
          function h(e2, t3, r3, o2) {
            var n2 = document.createElement(t3), s3 = ("string" == typeof (r3 = r3 || "") && (r3 = [r3]), true), t3 = false, i2 = void 0;
            try {
              for (var a2, l2 = r3[Symbol.iterator](); !(s3 = (a2 = l2.next()).done); s3 = true) {
                var u3 = a2.value, c2 = document.createElement("source");
                c2.setAttribute("src", u3), n2.appendChild(c2);
              }
            } catch (e3) {
              t3 = true, i2 = e3;
            } finally {
              try {
                s3 || null == l2.return || l2.return();
              } finally {
                if (t3) throw i2;
              }
            }
            "function" == typeof o2 && n2.addEventListener("canplaythrough", function e3() {
              o2(), n2.removeEventListener("canplaythrough", e3);
            });
            var d2 = m(n2, e2, true);
            return d2.loadedmetadata = false, n2.addEventListener("loadedmetadata", function() {
              d2.width = n2.videoWidth, d2.height = n2.videoHeight, 0 === d2.elt.width && (d2.elt.width = n2.videoWidth), 0 === d2.elt.height && (d2.elt.height = n2.videoHeight), d2.presetPlaybackRate && (d2.elt.playbackRate = d2.presetPlaybackRate, delete d2.presetPlaybackRate), d2.loadedmetadata = true;
            }), d2;
          }
          f.default.prototype.createRadio = function() {
            function t3(e3) {
              return e3 instanceof HTMLInputElement && "radio" === e3.type;
            }
            function d2(e3) {
              return e3 instanceof HTMLLabelElement;
            }
            var h2, e2, r3, o2 = arguments.length <= 0 ? void 0 : arguments[0];
            o2 instanceof f.default.Element && (o2.elt instanceof HTMLDivElement || o2.elt instanceof HTMLSpanElement) ? (h2 = o2, this.elt = o2.elt) : o2 instanceof HTMLDivElement || o2 instanceof HTMLSpanElement ? (h2 = m(o2, this), e2 = this.elt = o2, "string" == typeof (arguments.length <= 1 ? void 0 : arguments[1]) && (r3 = arguments.length <= 1 ? void 0 : arguments[1])) : ("string" == typeof o2 && (r3 = o2), e2 = document.createElement("div"), h2 = m(e2, this), this.elt = e2), h2._name = r3 || "radioOption_".concat(y++);
            return h2._getOptionsArray = function() {
              return Array.from(this.elt.children).filter(function(e3) {
                return t3(e3) || d2(e3) && t3(e3.firstElementChild);
              }).map(function(e3) {
                return t3(e3) ? e3 : e3.firstElementChild;
              });
            }, h2.option = function(e3, t4) {
              var r4, o3, n2, s3 = true, i2 = false, a2 = void 0;
              try {
                for (var l2, u3 = h2._getOptionsArray()[Symbol.iterator](); !(s3 = (l2 = u3.next()).done); s3 = true) {
                  var c2 = l2.value;
                  if (c2.value === e3) {
                    r4 = c2;
                    break;
                  }
                }
              } catch (e4) {
                i2 = true, a2 = e4;
              } finally {
                try {
                  s3 || null == u3.return || u3.return();
                } finally {
                  if (i2) throw a2;
                }
              }
              return void 0 === r4 && ((r4 = document.createElement("input")).setAttribute("type", "radio"), r4.setAttribute("value", e3)), r4.setAttribute("name", h2._name), d2(r4.parentElement) ? o3 = r4.parentElement : (o3 = document.createElement("label")).insertAdjacentElement("afterbegin", r4), o3.lastElementChild instanceof HTMLSpanElement ? n2 = o3.lastElementChild : (n2 = document.createElement("span"), r4.insertAdjacentElement("afterend", n2)), n2.innerHTML = void 0 === t4 ? e3 : t4, this.elt.appendChild(o3), r4;
            }, h2.remove = function(e3) {
              var t4 = true, r4 = false, o3 = void 0;
              try {
                for (var n2, s3 = h2._getOptionsArray()[Symbol.iterator](); !(t4 = (n2 = s3.next()).done); t4 = true) {
                  var i2 = n2.value;
                  if (i2.value === e3) return void (d2(i2.parentElement) ? i2.parentElement : i2).remove();
                }
              } catch (e4) {
                r4 = true, o3 = e4;
              } finally {
                try {
                  t4 || null == s3.return || s3.return();
                } finally {
                  if (r4) throw o3;
                }
              }
            }, h2.value = function() {
              var e3 = "", t4 = true, r4 = false, o3 = void 0;
              try {
                for (var n2, s3 = h2._getOptionsArray()[Symbol.iterator](); !(t4 = (n2 = s3.next()).done); t4 = true) {
                  var i2 = n2.value;
                  if (i2.checked) {
                    e3 = i2.value;
                    break;
                  }
                }
              } catch (e4) {
                r4 = true, o3 = e4;
              } finally {
                try {
                  t4 || null == s3.return || s3.return();
                } finally {
                  if (r4) throw o3;
                }
              }
              return e3;
            }, h2.selected = function(e3) {
              var t4 = null;
              if (void 0 === e3) {
                var r4 = true, o3 = false, n2 = void 0;
                try {
                  for (var s3, i2 = h2._getOptionsArray()[Symbol.iterator](); !(r4 = (s3 = i2.next()).done); r4 = true) {
                    var a2 = s3.value;
                    if (a2.checked) {
                      t4 = a2;
                      break;
                    }
                  }
                } catch (e4) {
                  o3 = true, n2 = e4;
                } finally {
                  try {
                    r4 || null == i2.return || i2.return();
                  } finally {
                    if (o3) throw n2;
                  }
                }
              } else {
                h2._getOptionsArray().forEach(function(e4) {
                  e4.checked = false, e4.removeAttribute("checked");
                });
                var l2 = true, o3 = false, n2 = void 0;
                try {
                  for (var u3, c2 = h2._getOptionsArray()[Symbol.iterator](); !(l2 = (u3 = c2.next()).done); l2 = true) {
                    var d3 = u3.value;
                    d3.value === e3 && (d3.setAttribute("checked", true), d3.checked = true, t4 = d3);
                  }
                } catch (e4) {
                  o3 = true, n2 = e4;
                } finally {
                  try {
                    l2 || null == c2.return || c2.return();
                  } finally {
                    if (o3) throw n2;
                  }
                }
              }
              return t4;
            }, h2.disable = function() {
              var e3 = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0], t4 = true, r4 = false, o3 = void 0;
              try {
                for (var n2, s3 = h2._getOptionsArray()[Symbol.iterator](); !(t4 = (n2 = s3.next()).done); t4 = true) n2.value.setAttribute("disabled", e3);
              } catch (e4) {
                r4 = true, o3 = e4;
              } finally {
                try {
                  t4 || null == s3.return || s3.return();
                } finally {
                  if (r4) throw o3;
                }
              }
            }, h2;
          }, f.default.prototype.createColorPicker = function(e2) {
            f.default._validateParameters("createColorPicker", arguments);
            var t3 = document.createElement("input");
            return t3.type = "color", e2 ? e2 instanceof f.default.Color ? t3.value = e2.toString("#rrggbb") : (f.default.prototype._colorMode = "rgb", f.default.prototype._colorMaxes = {
              rgb: [255, 255, 255, 255],
              hsb: [360, 100, 100, 1],
              hsl: [360, 100, 100, 1]
            }, t3.value = f.default.prototype.color(e2).toString("#rrggbb")) : t3.value = "#000000", (t3 = m(t3, this)).color = function() {
              return e2 && (e2.mode && (f.default.prototype._colorMode = e2.mode), e2.maxes && (f.default.prototype._colorMaxes = e2.maxes)), f.default.prototype.color(this.elt.value);
            }, t3;
          }, f.default.prototype.createInput = function() {
            var e2 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "text", r3 = (f.default._validateParameters("createInput", arguments), document.createElement("input"));
            return r3.setAttribute("value", e2), r3.setAttribute("type", t3), m(r3, this);
          }, f.default.prototype.createFileInput = function(a2) {
            var e2, t3 = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
            f.default._validateParameters("createFileInput", arguments);
            if (window.File && window.FileReader && window.FileList && window.Blob) return (e2 = document.createElement("input")).setAttribute("type", "file"), t3 && e2.setAttribute("multiple", true), e2.addEventListener("change", function(e3) {
              var t4 = true, r3 = false, o2 = void 0;
              try {
                for (var n2, s3 = e3.target.files[Symbol.iterator](); !(t4 = (n2 = s3.next()).done); t4 = true) {
                  var i2 = n2.value;
                  f.default.File._load(i2, a2);
                }
              } catch (e4) {
                r3 = true, o2 = e4;
              } finally {
                try {
                  t4 || null == s3.return || s3.return();
                } finally {
                  if (r3) throw o2;
                }
              }
            }, false), m(e2, this);
            console.log("The File APIs are not fully supported in this browser. Cannot create element.");
          }, f.default.prototype.createVideo = function(e2, t3) {
            return f.default._validateParameters("createVideo", arguments), h(this, "video", e2, t3);
          }, f.default.prototype.createAudio = function(e2, t3) {
            return f.default._validateParameters("createAudio", arguments), h(this, "audio", e2, t3);
          }, f.default.prototype.VIDEO = "video", f.default.prototype.AUDIO = "audio", void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}), void 0 === navigator.mediaDevices.getUserMedia && (navigator.mediaDevices.getUserMedia = function(r3) {
            var o2 = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            return o2 ? new Promise(function(e2, t3) {
              o2.call(navigator, r3, e2, t3);
            }) : Promise.reject(new Error("getUserMedia is not implemented in this browser"));
          }), f.default.prototype.createCapture = function() {
            for (var e2 = arguments.length, t3 = new Array(e2), r3 = 0; r3 < e2; r3++) t3[r3] = arguments[r3];
            if (f.default._validateParameters("createCapture", t3), !navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) throw new DOMException("getUserMedia not supported in this browser");
            for (var o2, n2 = true, s3 = true, i2 = false, a2 = 0, l2 = t3; a2 < l2.length; a2++) {
              var u3 = l2[a2];
              u3 === f.default.prototype.VIDEO ? s3 = false : u3 === f.default.prototype.AUDIO ? n2 = false : "object" === p(u3) ? (void 0 !== u3.flipped && (i2 = u3.flipped, delete u3.flipped), c2 = Object.assign({}, c2, u3)) : "function" == typeof u3 && (o2 = u3);
            }
            var c2 = Object.assign({}, {
              video: n2,
              audio: s3
            }, c2), d2 = document.createElement("video"), h2 = (d2.setAttribute("playsinline", ""), navigator.mediaDevices.getUserMedia(c2).then(function(t4) {
              try {
                "srcObject" in d2 ? d2.srcObject = t4 : d2.src = window.URL.createObjectURL(t4);
              } catch (e3) {
                d2.src = t4;
              }
            }).catch(function(e3) {
              "NotFoundError" === e3.name && f.default._friendlyError("No webcam found on this device", "createCapture"), "NotAllowedError" === e3.name && f.default._friendlyError("Access to the camera was denied", "createCapture"), console.error(e3);
            }), m(d2, this, true));
            return h2.loadedmetadata = false, d2.addEventListener("loadedmetadata", function() {
              d2.play(), d2.width ? (h2.width = d2.width, h2.height = d2.height, i2 && (h2.elt.style.transform = "scaleX(-1)")) : (h2.width = h2.elt.width = d2.videoWidth, h2.height = h2.elt.height = d2.videoHeight), h2.loadedmetadata = true, o2 && o2(d2.srcObject);
            }), h2.flipped = i2, h2;
          }, f.default.prototype.createElement = function(e2, t3) {
            f.default._validateParameters("createElement", arguments);
            e2 = document.createElement(e2);
            return void 0 !== t3 && (e2.innerHTML = t3), m(e2, this);
          }, f.default.Element.prototype.addClass = function(e2) {
            return this.elt.className ? this.hasClass(e2) || (this.elt.className = this.elt.className + " " + e2) : this.elt.className = e2, this;
          }, f.default.Element.prototype.removeClass = function(e2) {
            return this.elt.classList.remove(e2), this;
          }, f.default.Element.prototype.hasClass = function(e2) {
            return this.elt.classList.contains(e2);
          }, f.default.Element.prototype.toggleClass = function(e2) {
            return this.elt.classList.contains(e2) ? this.elt.classList.remove(e2) : this.elt.classList.add(e2), this;
          }, f.default.Element.prototype.child = function(e2) {
            return void 0 === e2 ? this.elt.childNodes : ("string" == typeof e2 ? ("#" === e2[0] && (e2 = e2.substring(1)), e2 = document.getElementById(e2)) : e2 instanceof f.default.Element && (e2 = e2.elt), e2 instanceof HTMLElement && this.elt.appendChild(e2), this);
          }, f.default.Element.prototype.center = function(e2) {
            var t3 = this.elt.style.display, r3 = "none" === this.elt.style.display, o2 = "none" === this.parent().style.display, n2 = {
              x: this.elt.offsetLeft,
              y: this.elt.offsetTop
            }, s3 = (r3 && this.show(), o2 && this.parent().show(), this.elt.style.display = "block", this.position(0, 0), Math.abs(this.parent().offsetWidth - this.elt.offsetWidth)), i2 = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);
            return "both" === e2 || void 0 === e2 ? this.position(s3 / 2 + this.parent().offsetLeft, i2 / 2 + this.parent().offsetTop) : "horizontal" === e2 ? this.position(s3 / 2 + this.parent().offsetLeft, n2.y) : "vertical" === e2 && this.position(n2.x, i2 / 2 + this.parent().offsetTop), this.style("display", t3), r3 && this.hide(), o2 && this.parent().hide(), this;
          }, f.default.Element.prototype.html = function() {
            return 0 === arguments.length ? this.elt.innerHTML : (arguments.length <= 1 || !arguments[1] ? this.elt.innerHTML = arguments.length <= 0 ? void 0 : arguments[0] : this.elt.insertAdjacentHTML("beforeend", arguments.length <= 0 ? void 0 : arguments[0]), this);
          }, f.default.Element.prototype.position = function() {
            return 0 === arguments.length ? {
              x: this.elt.offsetLeft,
              y: this.elt.offsetTop
            } : (this.elt.style.position = "static" !== (arguments.length <= 2 ? void 0 : arguments[2]) && "fixed" !== (arguments.length <= 2 ? void 0 : arguments[2]) && "relative" !== (arguments.length <= 2 ? void 0 : arguments[2]) && "sticky" !== (arguments.length <= 2 ? void 0 : arguments[2]) && "initial" !== (arguments.length <= 2 ? void 0 : arguments[2]) && "inherit" !== (arguments.length <= 2 ? void 0 : arguments[2]) ? "absolute" : arguments.length <= 2 ? void 0 : arguments[2], this.elt.style.left = (arguments.length <= 0 ? void 0 : arguments[0]) + "px", this.elt.style.top = (arguments.length <= 1 ? void 0 : arguments[1]) + "px", this.x = arguments.length <= 0 ? void 0 : arguments[0], this.y = arguments.length <= 1 ? void 0 : arguments[1], this);
          }, f.default.Element.prototype._translate = function() {
            this.elt.style.position = "absolute";
            var e2 = "";
            return this.elt.style.transform && (e2 = (e2 = this.elt.style.transform.replace(/translate3d\(.*\)/g, "")).replace(/translate[X-Z]?\(.*\)/g, "")), 2 === arguments.length ? this.elt.style.transform = "translate(" + (arguments.length <= 0 ? void 0 : arguments[0]) + "px, " + (arguments.length <= 1 ? void 0 : arguments[1]) + "px)" : 2 < arguments.length && (this.elt.style.transform = "translate3d(" + (arguments.length <= 0 ? void 0 : arguments[0]) + "px," + (arguments.length <= 1 ? void 0 : arguments[1]) + "px," + (arguments.length <= 2 ? void 0 : arguments[2]) + "px)", this.elt.parentElement.style.perspective = 3 === arguments.length ? "1000px" : (arguments.length <= 3 ? void 0 : arguments[3]) + "px"), this.elt.style.transform += e2, this;
          }, f.default.Element.prototype._rotate = function() {
            var e2 = "";
            return this.elt.style.transform && (e2 = (e2 = this.elt.style.transform.replace(/rotate3d\(.*\)/g, "")).replace(/rotate[X-Z]?\(.*\)/g, "")), 1 === arguments.length ? this.elt.style.transform = "rotate(" + (arguments.length <= 0 ? void 0 : arguments[0]) + "deg)" : 2 === arguments.length ? this.elt.style.transform = "rotate(" + (arguments.length <= 0 ? void 0 : arguments[0]) + "deg, " + (arguments.length <= 1 ? void 0 : arguments[1]) + "deg)" : 3 === arguments.length && (this.elt.style.transform = "rotateX(" + (arguments.length <= 0 ? void 0 : arguments[0]) + "deg)", this.elt.style.transform += "rotateY(" + (arguments.length <= 1 ? void 0 : arguments[1]) + "deg)", this.elt.style.transform += "rotateZ(" + (arguments.length <= 2 ? void 0 : arguments[2]) + "deg)"), this.elt.style.transform += e2, this;
          }, f.default.Element.prototype.style = function(e2, t3) {
            if (void 0 === (t3 = t3 instanceof f.default.Color ? "rgba(" + t3.levels[0] + "," + t3.levels[1] + "," + t3.levels[2] + "," + t3.levels[3] / 255 + ")" : t3)) {
              if (-1 === e2.indexOf(":")) return window.getComputedStyle(this.elt).getPropertyValue(e2);
              for (var r3 = e2.split(";"), o2 = 0; o2 < r3.length; o2++) {
                var n2 = r3[o2].split(":");
                n2[0] && n2[1] && (this.elt.style[n2[0].trim()] = n2[1].trim());
              }
            } else this.elt.style[e2] = t3, "width" !== e2 && "height" !== e2 && "left" !== e2 && "top" !== e2 || (t3 = window.getComputedStyle(this.elt).getPropertyValue(e2).replace(/[^\d.]/g, ""), this[e2] = Math.round(parseFloat(t3, 10)));
            return this;
          }, f.default.Element.prototype.attribute = function(e2, t3) {
            if (null == this.elt.firstChild || "checkbox" !== this.elt.firstChild.type && "radio" !== this.elt.firstChild.type) return void 0 === t3 ? this.elt.getAttribute(e2) : (this.elt.setAttribute(e2, t3), this);
            if (void 0 === t3) return this.elt.firstChild.getAttribute(e2);
            for (var r3 = 0; r3 < this.elt.childNodes.length; r3++) this.elt.childNodes[r3].setAttribute(e2, t3);
          }, f.default.Element.prototype.removeAttribute = function(e2) {
            if (null != this.elt.firstChild && ("checkbox" === this.elt.firstChild.type || "radio" === this.elt.firstChild.type)) for (var t3 = 0; t3 < this.elt.childNodes.length; t3++) this.elt.childNodes[t3].removeAttribute(e2);
            return this.elt.removeAttribute(e2), this;
          }, f.default.Element.prototype.value = function() {
            return 0 < arguments.length ? (this.elt.value = arguments.length <= 0 ? void 0 : arguments[0], this) : "range" === this.elt.type ? parseFloat(this.elt.value) : this.elt.value;
          }, f.default.Element.prototype.show = function() {
            return this.elt.style.display = "block", this;
          }, f.default.Element.prototype.hide = function() {
            return this.elt.style.display = "none", this;
          }, f.default.Element.prototype.size = function(e2, t3) {
            if (0 === arguments.length) return {
              width: this.elt.offsetWidth,
              height: this.elt.offsetHeight
            };
            var r3 = e2, o2 = t3, n2 = f.default.prototype.AUTO;
            if (r3 !== n2 || o2 !== n2) {
              if (r3 === n2 ? r3 = t3 * this.width / this.height : o2 === n2 && (o2 = e2 * this.height / this.width), this.elt instanceof HTMLCanvasElement) {
                var s3, i2 = {}, a2 = this.elt.getContext("2d");
                for (s3 in a2) i2[s3] = a2[s3];
                for (s3 in this.elt.setAttribute("width", r3 * this._pInst._pixelDensity), this.elt.setAttribute("height", o2 * this._pInst._pixelDensity), this.elt.style.width = r3 + "px", this.elt.style.height = o2 + "px", this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), i2) this.elt.getContext("2d")[s3] = i2[s3];
              } else this.elt.style.width = r3 + "px", this.elt.style.height = o2 + "px", this.elt.width = r3, this.elt.height = o2;
              this.width = r3, this.height = o2, this._pInst && this._pInst._curElement && this._pInst._curElement.elt === this.elt && (this._pInst._setProperty("width", r3), this._pInst._setProperty("height", o2));
            }
            return this;
          }, f.default.Element.prototype.remove = function() {
            this instanceof f.default.MediaElement && (this.stop(), null !== (t3 = this.elt.srcObject) && t3.getTracks().forEach(function(e3) {
              e3.stop();
            }));
            var e2, t3 = this._pInst._elements.indexOf(this);
            for (e2 in -1 !== t3 && this._pInst._elements.splice(t3, 1), this._events) this.elt.removeEventListener(e2, this._events[e2]);
            this.elt && this.elt.parentNode && this.elt.parentNode.removeChild(this.elt);
          }, f.default.Element.prototype.drop = function(a2, l2) {
            var e2;
            return window.File && window.FileReader && window.FileList && window.Blob ? (this._dragDisabled || (this._dragDisabled = true, this.elt.addEventListener("dragover", e2 = function(e3) {
              e3.preventDefault();
            }), this.elt.addEventListener("dragleave", e2)), f.default.Element._attachListener("drop", function(e3) {
              e3.preventDefault(), "function" == typeof l2 && l2.call(this, e3);
              var e3 = e3.dataTransfer.files, t3 = true, r3 = false, o2 = void 0;
              try {
                for (var n2, s3 = e3[Symbol.iterator](); !(t3 = (n2 = s3.next()).done); t3 = true) {
                  var i2 = n2.value;
                  f.default.File._load(i2, a2);
                }
              } catch (e4) {
                r3 = true, o2 = e4;
              } finally {
                try {
                  t3 || null == s3.return || s3.return();
                } finally {
                  if (r3) throw o2;
                }
              }
            }, this)) : console.log("The File APIs are not fully supported in this browser."), this;
          }, f.default.Element.prototype.draggable = function(r3) {
            var e2, o2 = "ontouchstart" in window, n2 = 0, s3 = 0, i2 = 0, a2 = 0, l2 = o2 ? "touchend" : "mouseup", u3 = o2 ? "touchmove" : "mousemove";
            function c2(e3) {
              var t3;
              e3 = e3 || window.event, a2 = o2 ? (t3 = e3.changedTouches, n2 = i2 - parseInt(t3[0].clientX), s3 = a2 - parseInt(t3[0].clientY), i2 = parseInt(t3[0].clientX), parseInt(t3[0].clientY)) : (n2 = i2 - parseInt(e3.clientX), s3 = a2 - parseInt(e3.clientY), i2 = parseInt(e3.clientX), parseInt(e3.clientY)), r3.style.left = r3.offsetLeft - n2 + "px", r3.style.top = r3.offsetTop - s3 + "px";
            }
            function d2() {
              document.removeEventListener(l2, d2, false), document.removeEventListener(u3, c2, false);
            }
            return void 0 === r3 ? e2 = r3 = this.elt : r3 !== this.elt && r3.elt !== this.elt && (r3 = r3.elt, e2 = this.elt), e2.addEventListener(o2 ? "touchstart" : "mousedown", function(e3) {
              {
                var t3;
                e3 = e3 || window.event, a2 = o2 ? (t3 = e3.changedTouches, i2 = parseInt(t3[0].clientX), parseInt(t3[0].clientY)) : (i2 = parseInt(e3.clientX), parseInt(e3.clientY));
              }
              return document.addEventListener(l2, d2, false), document.addEventListener(u3, c2, false), false;
            }, false), e2.style.cursor = "move", this;
          };
          function g(e2, t3, r3, o2) {
            d(this, g), this.callback = e2, this.time = t3, this.id = r3, this.val = o2;
          }
          t2 = function(t3) {
            var r3 = i2;
            if ("function" != typeof t3 && null !== t3) throw new TypeError("Super expression must either be null or a function");
            r3.prototype = Object.create(t3 && t3.prototype, {
              constructor: {
                value: r3,
                writable: true,
                configurable: true
              }
            }), t3 && l(r3, t3);
            var s3 = u2(i2);
            function i2(o2, e2) {
              d(this, i2);
              var n2 = c(e2 = s3.call(this, o2, e2));
              return e2.elt.crossOrigin = "anonymous", e2._prevTime = 0, e2._cueIDCounter = 0, e2._cues = [], e2.pixels = [], e2._pixelsState = c(e2), e2._pixelDensity = 1, e2._modified = false, e2._frameOnCanvas = -1, Object.defineProperty(n2, "src", {
                get: function() {
                  var e3 = n2.elt.children[0].src, t4 = n2.elt.src === window.location.href ? "" : n2.elt.src;
                  return e3 === window.location.href ? t4 : e3;
                },
                set: function(e3) {
                  for (var t4 = 0; t4 < n2.elt.children.length; t4++) n2.elt.removeChild(n2.elt.children[t4]);
                  var r4 = document.createElement("source");
                  r4.src = e3, o2.appendChild(r4), n2.elt.src = e3, n2.modified = true;
                }
              }), n2._onended = function() {
              }, n2.elt.onended = function() {
                n2._onended(n2);
              }, e2;
            }
            return a(i2, [{
              key: "play",
              value: function() {
                var e2;
                return this.elt.currentTime === this.elt.duration && (this.elt.currentTime = 0), 1 < this.elt.readyState || this.elt.load(), (e2 = this.elt.play()) && e2.catch && e2.catch(function(e3) {
                  "NotAllowedError" === e3.name ? console.error(e3) : console.error("Media play method encountered an unexpected error", e3);
                }), this;
              }
            }, {
              key: "stop",
              value: function() {
                return this.elt.pause(), this.elt.currentTime = 0, this;
              }
            }, {
              key: "pause",
              value: function() {
                return this.elt.pause(), this;
              }
            }, {
              key: "loop",
              value: function() {
                return this.elt.setAttribute("loop", true), this.play(), this;
              }
            }, {
              key: "noLoop",
              value: function() {
                return this.elt.removeAttribute("loop"), this;
              }
            }, {
              key: "_setupAutoplayFailDetection",
              value: function() {
                var t4 = setTimeout(function() {
                  console.error(e);
                }, 500);
                this.elt.addEventListener("play", function() {
                  return clearTimeout(t4);
                }, {
                  passive: true,
                  once: true
                });
              }
            }, {
              key: "autoplay",
              value: function(e2) {
                var t4 = this, r4 = this.elt.getAttribute("autoplay");
                return this.elt.setAttribute("autoplay", e2), e2 && !r4 && (e2 = function() {
                  return t4._setupAutoplayFailDetection();
                }, 4 === this.elt.readyState ? e2() : this.elt.addEventListener("canplay", e2, {
                  passive: true,
                  once: true
                })), this;
              }
            }, {
              key: "volume",
              value: function(e2) {
                if (void 0 === e2) return this.elt.volume;
                this.elt.volume = e2;
              }
            }, {
              key: "speed",
              value: function(e2) {
                if (void 0 === e2) return this.presetPlaybackRate || this.elt.playbackRate;
                this.loadedmetadata ? this.elt.playbackRate = e2 : this.presetPlaybackRate = e2;
              }
            }, {
              key: "time",
              value: function(e2) {
                return void 0 === e2 ? this.elt.currentTime : (this.elt.currentTime = e2, this);
              }
            }, {
              key: "duration",
              value: function() {
                return this.elt.duration;
              }
            }, {
              key: "_ensureCanvas",
              value: function() {
                this.canvas || (this.canvas = document.createElement("canvas"), this.drawingContext = this.canvas.getContext("2d"), this.setModified(true));
                var e2 = this._frameOnCanvas !== this._pInst.frameCount;
                this.loadedmetadata && e2 && (this.canvas.width !== this.elt.width && (this.canvas.width = this.elt.width, this.canvas.height = this.elt.height, this.width = this.canvas.width, this.height = this.canvas.height), this.drawingContext.clearRect(0, 0, this.canvas.width, this.canvas.height), true === this.flipped && (this.drawingContext.save(), this.drawingContext.scale(-1, 1), this.drawingContext.translate(-this.canvas.width, 0)), this.drawingContext.drawImage(this.elt, 0, 0, this.canvas.width, this.canvas.height), true === this.flipped && this.drawingContext.restore(), this.setModified(true), this._frameOnCanvas = this._pInst.frameCount);
              }
            }, {
              key: "loadPixels",
              value: function() {
                this._ensureCanvas();
                for (var e2 = arguments.length, t4 = new Array(e2), r4 = 0; r4 < e2; r4++) t4[r4] = arguments[r4];
                return f.default.Renderer2D.prototype.loadPixels.apply(this, t4);
              }
            }, {
              key: "updatePixels",
              value: function(e2, t4, r4, o2) {
                return this.loadedmetadata && (this._ensureCanvas(), f.default.Renderer2D.prototype.updatePixels.call(this, e2, t4, r4, o2)), this.setModified(true), this;
              }
            }, {
              key: "get",
              value: function() {
                this._ensureCanvas();
                for (var e2 = arguments.length, t4 = new Array(e2), r4 = 0; r4 < e2; r4++) t4[r4] = arguments[r4];
                return f.default.Renderer2D.prototype.get.apply(this, t4);
              }
            }, {
              key: "_getPixel",
              value: function() {
                this.loadPixels();
                for (var e2 = arguments.length, t4 = new Array(e2), r4 = 0; r4 < e2; r4++) t4[r4] = arguments[r4];
                return f.default.Renderer2D.prototype._getPixel.apply(this, t4);
              }
            }, {
              key: "set",
              value: function(e2, t4, r4) {
                this.loadedmetadata && (this._ensureCanvas(), f.default.Renderer2D.prototype.set.call(this, e2, t4, r4), this.setModified(true));
              }
            }, {
              key: "copy",
              value: function() {
                this._ensureCanvas();
                for (var e2 = arguments.length, t4 = new Array(e2), r4 = 0; r4 < e2; r4++) t4[r4] = arguments[r4];
                f.default.prototype.copy.apply(this, t4);
              }
            }, {
              key: "mask",
              value: function() {
                this.loadPixels(), this.setModified(true);
                for (var e2 = arguments.length, t4 = new Array(e2), r4 = 0; r4 < e2; r4++) t4[r4] = arguments[r4];
                f.default.Image.prototype.mask.apply(this, t4);
              }
            }, {
              key: "isModified",
              value: function() {
                return this._modified;
              }
            }, {
              key: "setModified",
              value: function(e2) {
                this._modified = e2;
              }
            }, {
              key: "onended",
              value: function(e2) {
                return this._onended = e2, this;
              }
            }, {
              key: "connect",
              value: function(e2) {
                var t4, r4;
                if ("function" == typeof f.default.prototype.getAudioContext) t4 = f.default.prototype.getAudioContext(), r4 = f.default.soundOut.input;
                else try {
                  r4 = (t4 = e2.context).destination;
                } catch (e3) {
                  throw "connect() is meant to be used with Web Audio API or p5.sound.js";
                }
                this.audioSourceNode || (this.audioSourceNode = t4.createMediaElementSource(this.elt), this.audioSourceNode.connect(r4)), e2 ? e2.input ? this.audioSourceNode.connect(e2.input) : this.audioSourceNode.connect(e2) : this.audioSourceNode.connect(r4);
              }
            }, {
              key: "disconnect",
              value: function() {
                if (!this.audioSourceNode) throw "nothing to disconnect";
                this.audioSourceNode.disconnect();
              }
            }, {
              key: "showControls",
              value: function() {
                this.elt.style["text-align"] = "inherit", this.elt.controls = true;
              }
            }, {
              key: "hideControls",
              value: function() {
                this.elt.controls = false;
              }
            }, {
              key: "addCue",
              value: function(e2, t4, r4) {
                var o2 = this._cueIDCounter++, t4 = new g(t4, e2, o2, r4);
                return this._cues.push(t4), this.elt.ontimeupdate || (this.elt.ontimeupdate = this._onTimeUpdate.bind(this)), o2;
              }
            }, {
              key: "removeCue",
              value: function(e2) {
                for (var t4 = 0; t4 < this._cues.length; t4++) this._cues[t4].id === e2 && (console.log(e2), this._cues.splice(t4, 1));
                0 === this._cues.length && (this.elt.ontimeupdate = null);
              }
            }, {
              key: "clearCues",
              value: function() {
                this._cues = [], this.elt.ontimeupdate = null;
              }
            }, {
              key: "_onTimeUpdate",
              value: function() {
                for (var e2 = this.time(), t4 = 0; t4 < this._cues.length; t4++) {
                  var r4 = this._cues[t4].time, o2 = this._cues[t4].val;
                  this._prevTime < r4 && r4 <= e2 && this._cues[t4].callback(o2);
                }
                this._prevTime = e2;
              }
            }]), i2;
          }(f.default.Element), f.default.MediaElement = t2, t2 = function() {
            function r3(e2, t3) {
              d(this, r3), this.file = e2, this._pInst = t3;
              t3 = e2.type.split("/");
              this.type = t3[0], this.subtype = t3[1], this.name = e2.name, this.size = e2.size, this.data = void 0;
            }
            return a(r3, null, [{
              key: "_createLoader",
              value: function(o2, n2) {
                var e2 = new FileReader();
                return e2.onload = function(e3) {
                  var t3, r4 = new f.default.File(o2);
                  "application/json" === r4.file.type ? r4.data = JSON.parse(e3.target.result) : "text/xml" === r4.file.type ? (t3 = new DOMParser().parseFromString(e3.target.result, "text/xml"), r4.data = new f.default.XML(t3.documentElement)) : r4.data = e3.target.result, n2(r4);
                }, e2;
              }
            }, {
              key: "_load",
              value: function(e2, t3) {
                var r4;
                /^text\//.test(e2.type) || "application/json" === e2.type ? f.default.File._createLoader(e2, t3).readAsText(e2) : /^(video|audio)\//.test(e2.type) ? ((r4 = new f.default.File(e2)).data = URL.createObjectURL(e2), t3(r4)) : f.default.File._createLoader(e2, t3).readAsDataURL(e2);
              }
            }]), r3;
          }(), f.default.File = t2, t2 = f.default;
          o.default = t2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.every": 155,
          "core-js/modules/es.array.filter": 157,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.array.splice": 171,
          "core-js/modules/es.function.name": 174,
          "core-js/modules/es.object.assign": 183,
          "core-js/modules/es.object.get-prototype-of": 188,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.promise": 191,
          "core-js/modules/es.reflect.construct": 192,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.string.trim": 209,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.for-each": 245,
          "core-js/modules/web.dom-collections.iterator": 246,
          "core-js/modules/web.url": 248
        }],
        300: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var o = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          o.default.prototype.deviceOrientation = 1 < window.innerWidth / window.innerHeight ? "landscape" : "portrait", o.default.prototype.accelerationX = 0, o.default.prototype.accelerationY = 0, o.default.prototype.accelerationZ = 0, o.default.prototype.pAccelerationX = 0, o.default.prototype.pAccelerationY = 0, o.default.prototype.pAccelerationZ = 0, o.default.prototype._updatePAccelerations = function() {
            this._setProperty("pAccelerationX", this.accelerationX), this._setProperty("pAccelerationY", this.accelerationY), this._setProperty("pAccelerationZ", this.accelerationZ);
          }, o.default.prototype.rotationX = 0, o.default.prototype.rotationY = 0, o.default.prototype.rotationZ = 0, o.default.prototype.pRotationX = 0, o.default.prototype.pRotationY = 0;
          var i = o.default.prototype.pRotationZ = 0, a = 0, l = 0, u2 = "clockwise", c = "clockwise", d = "clockwise", h = (o.default.prototype.pRotateDirectionX = void 0, o.default.prototype.pRotateDirectionY = void 0, o.default.prototype.pRotateDirectionZ = void 0, o.default.prototype._updatePRotations = function() {
            this._setProperty("pRotationX", this.rotationX), this._setProperty("pRotationY", this.rotationY), this._setProperty("pRotationZ", this.rotationZ);
          }, o.default.prototype.turnAxis = void 0, 0.5), f = 30, e2 = (o.default.prototype.setMoveThreshold = function(e3) {
            o.default._validateParameters("setMoveThreshold", arguments), h = e3;
          }, o.default.prototype.setShakeThreshold = function(e3) {
            o.default._validateParameters("setShakeThreshold", arguments), f = e3;
          }, o.default.prototype._ondeviceorientation = function(e3) {
            this._updatePRotations(), this._setProperty("rotationX", this._fromDegrees(e3.beta)), this._setProperty("rotationY", this._fromDegrees(e3.gamma)), this._setProperty("rotationZ", this._fromDegrees(e3.alpha)), this._handleMotion();
          }, o.default.prototype._ondevicemotion = function(e3) {
            this._updatePAccelerations(), this._setProperty("accelerationX", 2 * e3.acceleration.x), this._setProperty("accelerationY", 2 * e3.acceleration.y), this._setProperty("accelerationZ", 2 * e3.acceleration.z), this._handleMotion();
          }, o.default.prototype._handleMotion = function() {
            90 === window.orientation || -90 === window.orientation ? this._setProperty("deviceOrientation", "landscape") : 0 === window.orientation ? this._setProperty("deviceOrientation", "portrait") : void 0 === window.orientation && this._setProperty("deviceOrientation", "undefined");
            var e3, t3, r3, o2, n, s2 = this._isGlobal ? window : this;
            "function" == typeof s2.deviceMoved && (Math.abs(this.accelerationX - this.pAccelerationX) > h || Math.abs(this.accelerationY - this.pAccelerationY) > h || Math.abs(this.accelerationZ - this.pAccelerationZ) > h) && s2.deviceMoved(), "function" == typeof s2.deviceTurned && (t3 = this._toDegrees(this.rotationX) + 180, r3 = this._toDegrees(this.pRotationX) + 180, e3 = i + 180, 0 < t3 - r3 && t3 - r3 < 270 || t3 - r3 < -270 ? u2 = "clockwise" : (t3 - r3 < 0 || 270 < t3 - r3) && (u2 = "counter-clockwise"), u2 !== this.pRotateDirectionX && (e3 = t3), 90 < Math.abs(t3 - e3) && Math.abs(t3 - e3) < 270 && (e3 = t3, this._setProperty("turnAxis", "X"), s2.deviceTurned()), this.pRotateDirectionX = u2, i = e3 - 180, r3 = this._toDegrees(this.rotationY) + 180, t3 = this._toDegrees(this.pRotationY) + 180, e3 = a + 180, 0 < r3 - t3 && r3 - t3 < 270 || r3 - t3 < -270 ? c = "clockwise" : (r3 - t3 < 0 || 270 < r3 - this.pRotationY) && (c = "counter-clockwise"), c !== this.pRotateDirectionY && (e3 = r3), 90 < Math.abs(r3 - e3) && Math.abs(r3 - e3) < 270 && (e3 = r3, this._setProperty("turnAxis", "Y"), s2.deviceTurned()), this.pRotateDirectionY = c, a = e3 - 180, 0 < (t3 = this._toDegrees(this.rotationZ)) - (r3 = this._toDegrees(this.pRotationZ)) && t3 - r3 < 270 || t3 - r3 < -270 ? d = "clockwise" : (t3 - r3 < 0 || 270 < t3 - r3) && (d = "counter-clockwise"), d !== this.pRotateDirectionZ && (l = t3), 90 < Math.abs(t3 - l) && Math.abs(t3 - l) < 270 && (l = t3, this._setProperty("turnAxis", "Z"), s2.deviceTurned()), this.pRotateDirectionZ = d, this._setProperty("turnAxis", void 0)), "function" == typeof s2.deviceShaken && (null !== this.pAccelerationX && (o2 = Math.abs(this.accelerationX - this.pAccelerationX), n = Math.abs(this.accelerationY - this.pAccelerationY)), f < o2 + n && s2.deviceShaken());
          }, o.default);
          r2.default = e2;
        }, {
          "../core/main": 283
        }],
        301: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.string.repeat"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.string.repeat"), e2("core-js/modules/web.dom-collections.for-each"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var o = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          o.default.prototype.isKeyPressed = false, o.default.prototype.keyIsPressed = false, o.default.prototype.key = "", o.default.prototype.keyCode = 0, o.default.prototype._onkeydown = function(e3) {
            var t3;
            e3.repeat || (this._setProperty("isKeyPressed", true), this._setProperty("keyIsPressed", true), this._setProperty("keyCode", e3.which), this._downKeys[e3.which] = true, this._setProperty("key", e3.key || String.fromCharCode(e3.which) || e3.which), e3.metaKey && (this._metaKeys || (this._metaKeys = []), this._metaKeys.push(e3.which)), "function" != typeof (t3 = this._isGlobal ? window : this).keyPressed || e3.charCode || false === t3.keyPressed(e3) && e3.preventDefault());
          }, o.default.prototype._onkeyup = function(e3) {
            var t3 = this, r3 = (this._setProperty("isKeyPressed", false), this._setProperty("keyIsPressed", false), this._setProperty("_lastKeyCodePressed", this._keyCode), this._downKeys[e3.which] = false, "Meta" === e3.key && this._metaKeys && (this._metaKeys.forEach(function(e4) {
              t3._downKeys[e4] = false;
            }), this._metaKeys = []), this._isGlobal ? window : this);
            "function" == typeof r3.keyReleased && false === r3.keyReleased(e3) && e3.preventDefault();
          }, o.default.prototype._onkeypress = function(e3) {
            var t3;
            e3.which !== this._lastKeyCodeTyped && (this._setProperty("_lastKeyCodeTyped", e3.which), this._setProperty("key", e3.key || String.fromCharCode(e3.which) || e3.which), "function" == typeof (t3 = this._isGlobal ? window : this).keyTyped && false === t3.keyTyped(e3) && e3.preventDefault());
          }, o.default.prototype._onblur = function(e3) {
            this._downKeys = {};
          }, o.default.prototype.keyIsDown = function(e3) {
            return o.default._validateParameters("keyIsDown", arguments), this._downKeys[e3] || false;
          }, o.default.prototype._areDownKeys = function() {
            for (var e3 in this._downKeys) if (this._downKeys.hasOwnProperty(e3) && true === this._downKeys[e3]) return true;
            return false;
          };
          e2 = o.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.string.repeat": 203,
          "core-js/modules/web.dom-collections.for-each": 245
        }],
        302: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (n = e2("../core/main")) && n.__esModule ? n : {
            default: n
          }, s2 = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          n.default.prototype.movedX = 0, n.default.prototype.movedY = 0, n.default.prototype._hasMouseInteracted = false, n.default.prototype.mouseX = 0, n.default.prototype.mouseY = 0, n.default.prototype.pmouseX = 0, n.default.prototype.pmouseY = 0, n.default.prototype.winMouseX = 0, n.default.prototype.winMouseY = 0, n.default.prototype.pwinMouseX = 0, n.default.prototype.pwinMouseY = 0, n.default.prototype.mouseButton = 0, n.default.prototype.mouseIsPressed = false, n.default.prototype._updateNextMouseCoords = function(e3) {
            var t3, r3, o2, n2, s3;
            null !== this._curElement && (!e3.touches || 0 < e3.touches.length) && (t3 = this._curElement.elt, r3 = this.width, o2 = this.height, (n2 = e3) && !n2.clientX && (n2.touches ? n2 = n2.touches[0] : n2.changedTouches && (n2 = n2.changedTouches[0])), s3 = t3.getBoundingClientRect(), r3 = t3.scrollWidth / r3 || 1, t3 = t3.scrollHeight / o2 || 1, o2 = {
              x: (n2.clientX - s3.left) / r3,
              y: (n2.clientY - s3.top) / t3,
              winX: n2.clientX,
              winY: n2.clientY,
              id: n2.identifier
            }, this._setProperty("movedX", e3.movementX), this._setProperty("movedY", e3.movementY), this._setProperty("mouseX", o2.x), this._setProperty("mouseY", o2.y), this._setProperty("winMouseX", o2.winX), this._setProperty("winMouseY", o2.winY)), this._hasMouseInteracted || (this._updateMouseCoords(), this._setProperty("_hasMouseInteracted", true));
          }, n.default.prototype._updateMouseCoords = function() {
            this._setProperty("pmouseX", this.mouseX), this._setProperty("pmouseY", this.mouseY), this._setProperty("pwinMouseX", this.winMouseX), this._setProperty("pwinMouseY", this.winMouseY), this._setProperty("_pmouseWheelDeltaY", this._mouseWheelDeltaY);
          }, n.default.prototype._setMouseButton = function(e3) {
            1 === e3.button ? this._setProperty("mouseButton", s2.CENTER) : 2 === e3.button ? this._setProperty("mouseButton", s2.RIGHT) : this._setProperty("mouseButton", s2.LEFT);
          }, n.default.prototype._onmousemove = function(e3) {
            var t3 = this._isGlobal ? window : this;
            this._updateNextMouseCoords(e3), this.mouseIsPressed ? "function" == typeof t3.mouseDragged ? false === t3.mouseDragged(e3) && e3.preventDefault() : "function" == typeof t3.touchMoved && false === t3.touchMoved(e3) && e3.preventDefault() : "function" == typeof t3.mouseMoved && false === t3.mouseMoved(e3) && e3.preventDefault();
          }, n.default.prototype._onmousedown = function(e3) {
            var t3 = this._isGlobal ? window : this;
            this._setProperty("mouseIsPressed", true), this._setMouseButton(e3), this._updateNextMouseCoords(e3), this.touchstart || ("function" == typeof t3.mousePressed ? false === t3.mousePressed(e3) && e3.preventDefault() : "function" == typeof t3.touchStarted && false === t3.touchStarted(e3) && e3.preventDefault(), this.touchstart = false);
          }, n.default.prototype._onmouseup = function(e3) {
            var t3 = this._isGlobal ? window : this;
            this._setProperty("mouseIsPressed", false), this.touchend || ("function" == typeof t3.mouseReleased ? false === t3.mouseReleased(e3) && e3.preventDefault() : "function" == typeof t3.touchEnded && false === t3.touchEnded(e3) && e3.preventDefault(), this.touchend = false);
          }, n.default.prototype._ondragend = n.default.prototype._onmouseup, n.default.prototype._ondragover = n.default.prototype._onmousemove, n.default.prototype._onclick = function(e3) {
            var t3 = this._isGlobal ? window : this;
            "function" == typeof t3.mouseClicked && false === t3.mouseClicked(e3) && e3.preventDefault();
          }, n.default.prototype._ondblclick = function(e3) {
            var t3 = this._isGlobal ? window : this;
            "function" == typeof t3.doubleClicked && false === t3.doubleClicked(e3) && e3.preventDefault();
          }, n.default.prototype._mouseWheelDeltaY = 0, n.default.prototype._pmouseWheelDeltaY = 0, n.default.prototype._onwheel = function(e3) {
            var t3 = this._isGlobal ? window : this;
            this._setProperty("_mouseWheelDeltaY", e3.deltaY), "function" == typeof t3.mouseWheel && (e3.delta = e3.deltaY, false === t3.mouseWheel(e3) && e3.preventDefault());
          }, n.default.prototype.requestPointerLock = function() {
            var e3 = this._curElement.elt;
            return e3.requestPointerLock = e3.requestPointerLock || e3.mozRequestPointerLock, e3.requestPointerLock ? (e3.requestPointerLock(), true) : (console.log("requestPointerLock is not implemented in this browser"), false);
          }, n.default.prototype.exitPointerLock = function() {
            document.exitPointerLock();
          };
          e2 = n.default;
          r2.default = e2;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        303: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          e2.default.prototype.touches = [], e2.default.prototype._updateTouchCoords = function(e3) {
            if (null !== this._curElement) {
              for (var t3 = [], r3 = 0; r3 < e3.touches.length; r3++) t3[r3] = function(e4, t4, r4, o) {
                var n = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0, s2 = e4.getBoundingClientRect(), t4 = e4.scrollWidth / t4 || 1, e4 = e4.scrollHeight / r4 || 1, r4 = o.touches[n] || o.changedTouches[n];
                return {
                  x: (r4.clientX - s2.left) / t4,
                  y: (r4.clientY - s2.top) / e4,
                  winX: r4.clientX,
                  winY: r4.clientY,
                  id: r4.identifier
                };
              }(this._curElement.elt, this.width, this.height, e3, r3);
              this._setProperty("touches", t3);
            }
          }, e2.default.prototype._ontouchstart = function(e3) {
            var t3 = this._isGlobal ? window : this;
            this._setProperty("mouseIsPressed", true), this._updateTouchCoords(e3), this._updateNextMouseCoords(e3), this._updateMouseCoords(), "function" == typeof t3.touchStarted && (false === t3.touchStarted(e3) && e3.preventDefault(), this.touchstart = true);
          }, e2.default.prototype._ontouchmove = function(e3) {
            var t3 = this._isGlobal ? window : this;
            this._updateTouchCoords(e3), this._updateNextMouseCoords(e3), "function" == typeof t3.touchMoved ? false === t3.touchMoved(e3) && e3.preventDefault() : "function" == typeof t3.mouseDragged && false === t3.mouseDragged(e3) && e3.preventDefault();
          }, e2.default.prototype._ontouchend = function(e3) {
            this._setProperty("mouseIsPressed", false), this._updateTouchCoords(e3), this._updateNextMouseCoords(e3);
            var t3 = this._isGlobal ? window : this;
            "function" == typeof t3.touchEnded && (false === t3.touchEnded(e3) && e3.preventDefault(), this.touchend = true);
          };
          e2 = e2.default;
          r2.default = e2;
        }, {
          "../core/main": 283
        }],
        304: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.typed-array.int32-array"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.typed-array.int32-array"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var U, N, B, G, V = {
            _toPixels: function(e3) {
              var t3, r3;
              return e3 instanceof ImageData ? e3.data : e3.getContext("2d") ? e3.getContext("2d").getImageData(0, 0, e3.width, e3.height).data : e3.getContext("webgl") ? (r3 = (t3 = e3.getContext("webgl")).drawingBufferWidth * t3.drawingBufferHeight * 4, r3 = new Uint8Array(r3), t3.readPixels(0, 0, e3.width, e3.height, t3.RGBA, t3.UNSIGNED_BYTE, r3), r3) : void 0;
            },
            _getARGB: function(e3, t3) {
              t3 *= 4;
              return e3[3 + t3] << 24 & 4278190080 | e3[t3] << 16 & 16711680 | e3[1 + t3] << 8 & 65280 | 255 & e3[2 + t3];
            },
            _setPixels: function(e3, t3) {
              for (var r3, o = 0, n = e3.length; o < n; o++) e3[0 + (r3 = 4 * o)] = (16711680 & t3[o]) >>> 16, e3[1 + r3] = (65280 & t3[o]) >>> 8, e3[2 + r3] = 255 & t3[o], e3[3 + r3] = (4278190080 & t3[o]) >>> 24;
            },
            _toImageData: function(e3) {
              return e3 instanceof ImageData ? e3 : e3.getContext("2d").getImageData(0, 0, e3.width, e3.height);
            },
            _createImageData: function(e3, t3) {
              return V._tmpCanvas = document.createElement("canvas"), V._tmpCtx = V._tmpCanvas.getContext("2d"), this._tmpCtx.createImageData(e3, t3);
            },
            apply: function(e3, t3, r3) {
              var o = e3.getContext("2d"), n = o.getImageData(0, 0, e3.width, e3.height), t3 = t3(n, r3);
              t3 instanceof ImageData ? o.putImageData(t3, 0, 0, 0, 0, e3.width, e3.height) : o.putImageData(n, 0, 0, 0, 0, e3.width, e3.height);
            },
            threshold: function(e3) {
              for (var t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0.5, r3 = V._toPixels(e3), o = Math.floor(255 * t3), n = 0; n < r3.length; n += 4) {
                var s2 = void 0, s2 = o <= 0.2126 * r3[n] + 0.7152 * r3[n + 1] + 0.0722 * r3[n + 2] ? 255 : 0;
                r3[n] = r3[n + 1] = r3[n + 2] = s2;
              }
            },
            gray: function(e3) {
              for (var t3 = V._toPixels(e3), r3 = 0; r3 < t3.length; r3 += 4) {
                var o = t3[r3], n = t3[r3 + 1], s2 = t3[r3 + 2];
                t3[r3] = t3[r3 + 1] = t3[r3 + 2] = 0.2126 * o + 0.7152 * n + 0.0722 * s2;
              }
            },
            opaque: function(e3) {
              for (var t3 = V._toPixels(e3), r3 = 0; r3 < t3.length; r3 += 4) t3[r3 + 3] = 255;
              return t3;
            },
            invert: function(e3) {
              for (var t3 = V._toPixels(e3), r3 = 0; r3 < t3.length; r3 += 4) t3[r3] = 255 - t3[r3], t3[r3 + 1] = 255 - t3[r3 + 1], t3[r3 + 2] = 255 - t3[r3 + 2];
            },
            posterize: function(e3) {
              var t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 4, r3 = V._toPixels(e3);
              if (t3 < 2 || 255 < t3) throw new Error("Level must be greater than 2 and less than 255 for posterize");
              for (var o = t3 - 1, n = 0; n < r3.length; n += 4) {
                var s2 = r3[n], i = r3[n + 1], a = r3[n + 2];
                r3[n] = 255 * (s2 * t3 >> 8) / o, r3[n + 1] = 255 * (i * t3 >> 8) / o, r3[n + 2] = 255 * (a * t3 >> 8) / o;
              }
            },
            dilate: function(e3) {
              for (var t3, r3, o, n, s2, i, a, l, u2, c = V._toPixels(e3), d = 0, h = c.length ? c.length / 4 : 0, f = new Int32Array(h); d < h; ) for (r3 = (t3 = d) + e3.width; d < r3; ) n = o = V._getARGB(c, d), (u2 = d - 1) < t3 && (u2 = d), r3 <= (l = d + 1) && (l = d), (s2 = d - e3.width) < 0 && (s2 = 0), h <= (i = d + e3.width) && (i = d), s2 = V._getARGB(c, s2), u2 = V._getARGB(c, u2), i = V._getARGB(c, i), (n = 77 * (n >> 16 & 255) + 151 * (n >> 8 & 255) + 28 * (255 & n)) < (a = 77 * (u2 >> 16 & 255) + 151 * (u2 >> 8 & 255) + 28 * (255 & u2)) && (o = u2, n = a), n < (a = 77 * ((u2 = V._getARGB(c, l)) >> 16 & 255) + 151 * (u2 >> 8 & 255) + 28 * (255 & u2)) && (o = u2, n = a), n < (l = 77 * (s2 >> 16 & 255) + 151 * (s2 >> 8 & 255) + 28 * (255 & s2)) && (o = s2, n = l), n < (u2 = 77 * (i >> 16 & 255) + 151 * (i >> 8 & 255) + 28 * (255 & i)) && (o = i, n = u2), f[d++] = o;
              V._setPixels(c, f);
            },
            erode: function(e3) {
              for (var t3, r3, o, n, s2, i, a, l, u2, c = V._toPixels(e3), d = 0, h = c.length ? c.length / 4 : 0, f = new Int32Array(h); d < h; ) for (r3 = (t3 = d) + e3.width; d < r3; ) n = o = V._getARGB(c, d), (u2 = d - 1) < t3 && (u2 = d), r3 <= (l = d + 1) && (l = d), (s2 = d - e3.width) < 0 && (s2 = 0), h <= (i = d + e3.width) && (i = d), s2 = V._getARGB(c, s2), u2 = V._getARGB(c, u2), i = V._getARGB(c, i), (a = 77 * (u2 >> 16 & 255) + 151 * (u2 >> 8 & 255) + 28 * (255 & u2)) < (n = 77 * (n >> 16 & 255) + 151 * (n >> 8 & 255) + 28 * (255 & n)) && (o = u2, n = a), (a = 77 * ((u2 = V._getARGB(c, l)) >> 16 & 255) + 151 * (u2 >> 8 & 255) + 28 * (255 & u2)) < n && (o = u2, n = a), (l = 77 * (s2 >> 16 & 255) + 151 * (s2 >> 8 & 255) + 28 * (255 & s2)) < n && (o = s2, n = l), (u2 = 77 * (i >> 16 & 255) + 151 * (i >> 8 & 255) + 28 * (255 & i)) < n && (o = i, n = u2), f[d++] = o;
              V._setPixels(c, f);
            },
            blur: function(e3, D) {
              for (var t3, r3, o, n, s2, i, a, l, u2, c, d = V._toPixels(e3), h = e3.width, f = e3.height, p = h * f, m = new Int32Array(p), y = 0; y < p; y++) m[y] = V._getARGB(d, y);
              var g, v, b, _, j, x, w, S, T = new Int32Array(p), E = new Int32Array(p), M = new Int32Array(p), F = new Int32Array(p), k = 0, O = 3.5 * D | 0;
              if (U !== (O = O < 1 ? 1 : O < 248 ? O : 248)) {
                N = 1 + (U = O) << 1, B = new Int32Array(N), G = new Array(N);
                for (var C = 0; C < N; C++) G[C] = new Int32Array(256);
                for (var A = 1, P = O - 1; A < O; A++) {
                  B[O + A] = B[P] = x = P * P, w = G[O + A], S = G[P--];
                  for (var L = 0; L < 256; L++) w[L] = S[L] = x * L;
                }
                j = B[O] = O * O, w = G[O];
                for (var R = 0; R < 256; R++) w[R] = j * R;
              }
              for (v = 0; v < f; v++) {
                for (g = 0; g < h; g++) {
                  if (n = o = r3 = s2 = t3 = 0, (i = g - U) < 0) c = -i, i = 0;
                  else {
                    if (h <= i) break;
                    c = 0;
                  }
                  for (b = c; b < N && !(h <= i); b++) {
                    var I = m[i + k];
                    _ = G[b], s2 += _[(-16777216 & I) >>> 24], r3 += _[(16711680 & I) >> 16], o += _[(65280 & I) >> 8], n += _[255 & I], t3 += B[b], i++;
                  }
                  T[a = k + g] = s2 / t3, E[a] = r3 / t3, M[a] = o / t3, F[a] = n / t3;
                }
                k += h;
              }
              for (u2 = (l = -U) * h, v = k = 0; v < f; v++) {
                for (g = 0; g < h; g++) {
                  if (n = o = r3 = s2 = t3 = 0, l < 0) c = a = -l, i = g;
                  else {
                    if (f <= l) break;
                    c = 0, a = l, i = g + u2;
                  }
                  for (b = c; b < N && !(f <= a); b++) _ = G[b], s2 += _[T[i]], r3 += _[E[i]], o += _[M[i]], n += _[F[i]], t3 += B[b], a++, i += h;
                  m[g + k] = s2 / t3 << 24 | r3 / t3 << 16 | o / t3 << 8 | n / t3;
                }
                k += h, u2 += h, l++;
              }
              V._setPixels(d, m);
            }
          };
          r2.default = V;
        }, {
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.int32-array": 225,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239,
          "core-js/modules/es.typed-array.uint8-array": 242
        }],
        305: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.set"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.uint32-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.set"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.uint32-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var O = o(e2("../core/main")), C = o(e2("omggif"));
          function o(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          function A(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          O.default.prototype.createImage = function(e3, t3) {
            return O.default._validateParameters("createImage", arguments), new O.default.Image(e3, t3);
          }, O.default.prototype.saveCanvas = function() {
            for (var e3, t3, r3, o2, n, s2, i = arguments.length, a = new Array(i), l = 0; l < i; l++) a[l] = arguments[l];
            switch (O.default._validateParameters("saveCanvas", a), a[0] instanceof HTMLCanvasElement ? (e3 = a[0], a.shift()) : a[0] instanceof O.default.Element ? (e3 = a[0].elt, a.shift()) : a[0] instanceof O.default.Framebuffer ? (o2 = a[0], (n = this.createGraphics(o2.width, o2.height)).pixelDensity(pixelDensity()), o2.loadPixels(), n.loadPixels(), n.pixels.set(o2.pixels), n.updatePixels(), e3 = n.elt, a.shift()) : e3 = this._curElement && this._curElement.elt, 1 <= a.length && (t3 = a[0]), r3 = (r3 = 2 <= a.length ? a[1] : r3) || O.default.prototype._checkFileExtension(t3, r3)[1] || "png") {
              default:
                s2 = "image/png";
                break;
              case "webp":
                s2 = "image/webp";
                break;
              case "jpeg":
              case "jpg":
                s2 = "image/jpeg";
            }
            e3.toBlob(function(e4) {
              O.default.prototype.downloadFile(e4, t3, r3), n && n.remove();
            }, s2);
          }, O.default.prototype.encodeAndDownloadGif = function(d, e3) {
            for (var h = d.gifProperties, t3 = h.loopLimit, r3 = (1 === t3 ? t3 = null : null === t3 && (t3 = 0), new Uint8Array(d.width * d.height * h.numFrames)), f = [], o2 = {}, n = 0; n < h.numFrames; n++) {
              for (var s2 = /* @__PURE__ */ new Set(), i = h.frames[n].image.data, a = i.length, l = new Uint32Array(d.width * d.height), u2 = 0, c = 0; u2 < a; u2 += 4, c++) {
                var p = i[u2 + 0] << 16 | i[u2 + 1] << 8 | i[u2 + 2] << 0;
                s2.add(p), l[c] = p;
              }
              var m = A(s2).sort().toString();
              void 0 === o2[m] ? o2[m] = {
                freq: 1,
                frames: [n]
              } : (o2[m].freq += 1, o2[m].frames.push(n)), f.push(l);
            }
            for (var y = [], g = Object.keys(o2).sort(function(e4, t4) {
              return o2[t4].freq - o2[e4].freq;
            }), v = g[0].split(",").map(function(e4) {
              return parseInt(e4);
            }), y = y.concat(o2[v].frames), b = new Set(v), _ = 1; _ < g.length; _++) {
              var j = g[_].split(",").map(function(e4) {
                return parseInt(e4);
              }).filter(function(e4) {
                return !b.has(e4);
              });
              if (v.length + j.length <= 256) {
                for (var x = 0; x < j.length; x++) v.push(j[x]), b.add(j[x]);
                y = y.concat(o2[g[_]].frames);
              }
            }
            y = new Set(y);
            for (var w = {}, S = 0; S < v.length; S++) w[v[S]] || (w[v[S]] = S);
            for (var T = 1; T < v.length; ) T <<= 1;
            v.length = T;
            for (var t3 = {
              loop: t3,
              palette: new Uint32Array(v)
            }, E = new C.default.GifWriter(r3, d.width, d.height, t3), M = {}, k = 0; k < h.numFrames; k++) !function(r4) {
              var o3 = !y.has(r4), n2 = o3 ? [] : v, s3 = new Uint8Array(d.width * d.height), i2 = {}, a2 = /* @__PURE__ */ new Set(), e4 = (f[r4].forEach(function(e5, t5) {
                o3 ? (void 0 === i2[e5] && (i2[e5] = n2.length, n2.push(e5)), s3[t5] = i2[e5]) : s3[t5] = w[e5], 0 < r4 && f[r4 - 1][t5] !== e5 && a2.add(e5);
              }), {}), t4 = n2.filter(function(e5) {
                return !a2.has(e5);
              });
              if (0 < t4.length) {
                var t4 = t4[0], l2 = (o3 ? i2 : w)[t4];
                if (0 < r4) {
                  for (var u3 = 0; u3 < f[r4].length; u3++) f[r4 - 1][u3] === f[r4][u3] && (s3[u3] = l2);
                  e4.transparent = l2, M.frameOpts.disposal = 1;
                }
              }
              if (e4.delay = h.frames[r4].delay / 10, o3) {
                for (var c2 = 1; c2 < n2.length; ) c2 <<= 1;
                n2.length = c2, e4.palette = new Uint32Array(n2);
              }
              0 < r4 && E.addFrame(0, 0, d.width, d.height, M.pixelPaletteIndex, M.frameOpts), M = {
                pixelPaletteIndex: s3,
                frameOpts: e4
              };
            }(k);
            M.frameOpts.disposal = 1, E.addFrame(0, 0, d.width, d.height, M.pixelPaletteIndex, M.frameOpts);
            t3 = new Blob([r3.slice(0, E.end())], {
              type: "image/gif"
            });
            O.default.prototype.downloadFile(t3, e3, "gif");
          }, O.default.prototype.saveFrames = function(e3, t3, r3, o2, n) {
            O.default._validateParameters("saveFrames", arguments);
            r3 = O.default.prototype.constrain(r3 = r3 || 3, 0, 15);
            r3 *= 1e3;
            var o2 = O.default.prototype.constrain(o2 || 15, 0, 22), s2 = 0, i = O.default.prototype._makeFrame, a = this._curElement.elt, l = [], u2 = setInterval(function() {
              l.push(i(e3 + s2, t3, a)), s2++;
            }, 1e3 / o2);
            setTimeout(function() {
              if (clearInterval(u2), n) n(l);
              else for (var e4 = 0, t4 = l; e4 < t4.length; e4++) {
                var r4 = t4[e4];
                O.default.prototype.downloadFile(r4.imageData, r4.filename, r4.ext);
              }
              l = [];
            }, 0.01 + r3);
          }, O.default.prototype._makeFrame = function(e3, t3, r3) {
            var o2, r3 = this ? this._curElement.elt : r3;
            if (t3) switch (t3.toLowerCase()) {
              case "png":
                o2 = "image/png";
                break;
              case "jpeg":
              case "jpg":
                o2 = "image/jpeg";
                break;
              default:
                o2 = "image/png";
            }
            else t3 = "png", o2 = "image/png";
            var r3 = (r3 = r3.toDataURL(o2)).replace(o2, "image/octet-stream"), n = {};
            return n.imageData = r3, n.filename = e3, n.ext = t3, n;
          };
          e2 = O.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.filter": 157,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.object.keys": 189,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.set": 197,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239,
          "core-js/modules/es.typed-array.uint32-array": 241,
          "core-js/modules/es.typed-array.uint8-array": 242,
          "core-js/modules/web.dom-collections.for-each": 245,
          "core-js/modules/web.dom-collections.iterator": 246,
          omggif: 256
        }],
        306: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.copy-within"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.uint8-clamped-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.copy-within"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.uint8-clamped-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0, e2("regenerator-runtime/runtime");
          var C = n(e2("../core/main")), m = n(e2("../core/helpers")), _ = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s2;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r3, s2) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants")), g = n(e2("omggif")), A = e2("gifenc");
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          function n(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          function l(e3, t3, r3, o2, n2, s2, i2) {
            try {
              var a2 = e3[s2](i2), l2 = a2.value;
            } catch (e4) {
              return void r3(e4);
            }
            a2.done ? t3(l2) : Promise.resolve(l2).then(o2, n2);
          }
          function y(e3, t3, r3, o2, n2, s2, i2, a2, l2, u2, c) {
            var d, h, f, p, m2, y2, g2, v2, b;
            return e3 === _.COVER && (d = t3, f = r3, g2 = s2, v2 = i2, y2 = a2, b = l2, h = u2, p = c, m2 = Math.max(g2 / h, v2 / p), g2 /= m2, v2 /= m2, m2 = y2, y2 = b, d === _.CENTER ? m2 += (h - g2) / 2 : d === _.RIGHT && (m2 += h - g2), f === _.CENTER ? y2 += (p - v2) / 2 : f === _.BOTTOM && (y2 += p - v2), a2 = (b = {
              x: m2,
              y: y2,
              w: g2,
              h: v2
            }).x, l2 = b.y, u2 = b.w, c = b.h), e3 === _.CONTAIN && (d = t3, h = r3, f = o2, p = n2, m2 = s2, y2 = i2, g2 = u2, v2 = c, b = Math.max(g2 / m2, v2 / y2), g2 /= b, v2 /= b, b = f, f = p, d === _.CENTER ? b += (m2 - g2) / 2 : d === _.RIGHT && (b += m2 - g2), h === _.CENTER ? f += (y2 - v2) / 2 : h === _.BOTTOM && (f += y2 - v2), o2 = (e3 = {
              x: b,
              y: f,
              w: g2,
              h: v2
            }).x, n2 = e3.y, s2 = e3.w, i2 = e3.h), {
              sx: a2,
              sy: l2,
              sw: u2,
              sh: c,
              dx: o2,
              dy: n2,
              dw: s2,
              dh: i2
            };
          }
          function v(e3, t3) {
            return 0 < e3 && e3 < t3 ? e3 : t3;
          }
          e2("../core/friendly_errors/validate_params"), e2("../core/friendly_errors/file_errors"), e2("../core/friendly_errors/fes_core"), C.default.prototype.loadImage = function(o2, f, p) {
            C.default._validateParameters("loadImage", arguments);
            var m2 = new C.default.Image(1, 1, this), y2 = this, e3 = new Request(o2, {
              method: "GET",
              mode: "cors"
            });
            return fetch(o2, e3).then(function(e4) {
              var t3, r3 = e4.headers.get("content-type");
              null === r3 && console.warn("The image you loaded does not have a Content-Type header. If you are using the online editor consider reuploading the asset."), r3 && r3.includes("image/gif") ? e4.arrayBuffer().then(function(e5) {
                if (e5) {
                  for (var e5 = new Uint8Array(e5), r4 = m2, t4 = f, o3 = p, n2 = function(e6) {
                    y2._decrementPreload();
                  }.bind(y2), s2 = new g.default.GifReader(e5), i2 = (r4.width = r4.canvas.width = s2.width, r4.height = r4.canvas.height = s2.height, []), a2 = s2.numFrames(), l2 = new Uint8ClampedArray(r4.width * r4.height * 4), u2 = 0; u2 < a2; u2++) {
                    var c = s2.frameInfo(u2), d = r4.drawingContext.getImageData(0, 0, r4.width, r4.height), h = (l2 = d.data.slice(), !function(e6, t5) {
                      try {
                        t5.decodeAndBlitFrameRGBA(e6, l2);
                      } catch (e7) {
                        C.default._friendlyFileLoadError(8, r4.src), "function" == typeof o3 ? o3(e7) : console.error(e7);
                      }
                    }(u2, s2), new ImageData(l2, r4.width, r4.height)), h = (r4.drawingContext.putImageData(h, 0, 0), c.delay);
                    0 === h && (h = 10), i2.push({
                      image: r4.drawingContext.getImageData(0, 0, r4.width, r4.height),
                      delay: 10 * h
                    }), 2 === c.disposal ? r4.drawingContext.clearRect(c.x, c.y, c.width, c.height) : 3 === c.disposal && r4.drawingContext.putImageData(d, 0, 0, c.x, c.y, c.width, c.height);
                  }
                  null === (e5 = s2.loopCount()) ? e5 = 1 : 0 === e5 && (e5 = null), r4.drawingContext.putImageData(i2[0].image, 0, 0), 1 < i2.length && (r4.gifProperties = {
                    displayIndex: 0,
                    loopLimit: e5,
                    loopCount: 0,
                    frames: i2,
                    numFrames: a2,
                    playing: true,
                    timeDisplayed: 0,
                    lastChangeTime: 0
                  }), "function" == typeof t4 && t4(r4), n2();
                }
              }, function(e5) {
                "function" == typeof p ? (p(e5), y2._decrementPreload()) : console.error(e5);
              }) : ((t3 = new Image()).onload = function() {
                m2.width = m2.canvas.width = t3.width, m2.height = m2.canvas.height = t3.height, m2.drawingContext.drawImage(t3, 0, 0), m2.modified = true, "function" == typeof f && f(m2), y2._decrementPreload();
              }, t3.onerror = function(e5) {
                C.default._friendlyFileLoadError(0, t3.src), "function" == typeof p ? (p(e5), y2._decrementPreload()) : console.error(e5);
              }, 0 !== o2.indexOf("data:image/") && (t3.crossOrigin = "Anonymous"), t3.src = o2), m2.modified = true;
            }).catch(function(e4) {
              C.default._friendlyFileLoadError(0, o2), "function" == typeof p ? (p(e4), y2._decrementPreload()) : console.error(e4);
            }), m2;
          }, C.default.prototype.saveGif = function() {
            a2 = regeneratorRuntime.mark(function e3(t3, r4) {
              var o2, n2, s2, i2, a3, l2, u2, c, d, h, f, p, m2, y2, g2, v2, b, _2, j, x, w, S, T, E, M, k, O = arguments;
              return regeneratorRuntime.wrap(function(e4) {
                for (; ; ) switch (e4.prev = e4.next) {
                  case 0:
                    if (o2 = 2 < O.length && void 0 !== O[2] ? O[2] : {
                      delay: 0,
                      units: "seconds",
                      silent: false,
                      notificationDuration: 0,
                      notificationID: "progressBar"
                    }, "string" != typeof t3) throw TypeError("fileName parameter must be a string");
                    e4.next = 3;
                    break;
                  case 3:
                    if ("number" != typeof r4) throw TypeError("Duration parameter must be a number");
                    e4.next = 5;
                    break;
                  case 5:
                    if (n2 = o2 && o2.delay || 0, s2 = o2 && o2.units || "seconds", i2 = o2 && o2.silent || false, a3 = o2 && o2.notificationDuration || 0, l2 = o2 && o2.notificationID || "progressBar", "number" != typeof n2) throw TypeError("Delay parameter must be a number");
                    e4.next = 12;
                    break;
                  case 12:
                    if ("seconds" !== s2 && "frames" !== s2) throw TypeError('Units parameter must be either "frames" or "seconds"');
                    e4.next = 14;
                    break;
                  case 14:
                    if ("boolean" != typeof i2) throw TypeError("Silent parameter must be a boolean");
                    e4.next = 16;
                    break;
                  case 16:
                    if ("number" != typeof a3) throw TypeError("Notification duration parameter must be a number");
                    e4.next = 18;
                    break;
                  case 18:
                    if ("string" != typeof l2) throw TypeError("Notification ID parameter must be a string");
                    e4.next = 20;
                    break;
                  case 20:
                    return this._recording = true, h = this._targetFrameRate, u2 = (u2 = 1 / (h = h !== 1 / 0 && void 0 !== h && 0 !== h ? h : 60) * 1e3) < 20 ? 20 : u2, d = (c = "seconds" === s2 ? r4 * h : r4) + (h = "seconds" === s2 ? n2 * h : n2), h = h, this.frameCount = h, f = this._pixelDensity, this.pixelDensity(1), p = [], null !== document.getElementById(l2) && document.getElementById(l2).remove(), i2 || ((m2 = this.createP("")).id(l2), m2.style("font-size", "16px"), m2.style("font-family", "Montserrat"), m2.style("background-color", "#ffffffa0"), m2.style("padding", "8px"), m2.style("border-radius", "10px"), m2.position(0, 0)), this._renderer instanceof C.default.RendererGL && (g2 = this.drawingContext, y2 = new Uint8Array(g2.drawingBufferWidth * g2.drawingBufferHeight * 4)), this.noLoop(), e4.next = 39, Promise.resolve();
                  case 39:
                    if (h < d) return this.redraw(), E = void 0, E = this._renderer instanceof C.default.RendererGL ? (y2 = new Uint8Array(g2.drawingBufferWidth * g2.drawingBufferHeight * 4), g2.readPixels(0, 0, g2.drawingBufferWidth, g2.drawingBufferHeight, g2.RGBA, g2.UNSIGNED_BYTE, y2), function(e5, t4, r5) {
                      for (var o3 = parseInt(r5 / 2), n3 = 4 * t4, s3 = new Uint8Array(4 * t4), i3 = 0; i3 < o3; ++i3) {
                        var a4 = i3 * n3, l3 = (r5 - i3 - 1) * n3;
                        s3.set(e5.subarray(a4, a4 + n3)), e5.copyWithin(a4, l3, l3 + n3), e5.set(s3, l3);
                      }
                      return e5;
                    }(y2, this.width, this.height)) : this.drawingContext.getImageData(0, 0, this.width, this.height).data, p.push(E), h++, i2 || m2.html("Saved frame <b>" + p.length.toString() + "</b> out of " + c.toString()), e4.next = 48, new Promise(function(e5) {
                      return setTimeout(e5, 0);
                    });
                    e4.next = 50;
                    break;
                  case 48:
                    e4.next = 39;
                    break;
                  case 50:
                    i2 || m2.html("Frames processed, generating color palette..."), this.loop(), this.pixelDensity(f), v2 = (0, A.GIFEncoder)(), b = function(e5) {
                      for (var t4 = new Uint8Array(e5.length * e5[0].length), r5 = 0; r5 < e5.length; r5++) t4.set(e5[r5], r5 * e5[0].length);
                      var o3 = (0, A.quantize)(t4, 256, {
                        format: "rgba4444",
                        oneBitAlpha: true
                      });
                      256 === o3.length ? o3[o3.length - 1] = [255 * Math.random(), 255 * Math.random(), 255 * Math.random(), 0] : o3.push([255 * Math.random(), 255 * Math.random(), 255 * Math.random(), 0]);
                      return o3;
                    }(p), _2 = {}, j = function(e5) {
                      for (var t4 = e5.length / 4, r5 = new Uint8Array(t4), o3 = 0; o3 < t4; o3++) {
                        var n3 = e5[4 * o3] << 24 | e5[4 * o3 + 1] << 16 | e5[4 * o3 + 2] << 8 | e5[4 * o3 + 3];
                        void 0 === _2[n3] && (_2[n3] = (0, A.nearestColorIndex)(b, e5.slice(4 * o3, 4 * (o3 + 1)))), r5[o3] = _2[n3];
                      }
                      return r5;
                    }, x = b.length - 1, w = [], S = 0;
                  case 60:
                    if (!(S < p.length)) {
                      e4.next = 71;
                      break;
                    }
                    if (T = j(p[S]), E = T.slice(), 0 === S) v2.writeFrame(T, this.width, this.height, {
                      palette: b,
                      delay: u2,
                      dispose: 1
                    });
                    else {
                      for (M = 0; M < T.length; M++) T[M] === w[M] && (T[M] = x);
                      v2.writeFrame(T, this.width, this.height, {
                        delay: u2,
                        transparent: true,
                        transparentIndex: x,
                        dispose: 1
                      });
                    }
                    return w = E, i2 || m2.html("Rendered frame <b>" + S.toString() + "</b> out of " + c.toString()), e4.next = 68, new Promise(function(e5) {
                      return setTimeout(e5, 0);
                    });
                  case 68:
                    S++, e4.next = 60;
                    break;
                  case 71:
                    v2.finish(), k = v2.bytesView(), k = new Blob([k], {
                      type: "image/gif"
                    }), p = [], this._recording = false, this.loop(), i2 || (m2.html("Done. Downloading your gif!\u{1F338}"), 0 < a3 && setTimeout(function() {
                      return m2.remove();
                    }, 1e3 * a3)), C.default.prototype.downloadFile(k, t3, "gif");
                  case 80:
                  case "end":
                    return e4.stop();
                }
              }, e3, this);
            });
            var a2, r3 = function() {
              var e3 = this, i2 = arguments;
              return new Promise(function(t3, r4) {
                var o2 = a2.apply(e3, i2);
                function n2(e4) {
                  l(o2, t3, r4, n2, s2, "next", e4);
                }
                function s2(e4) {
                  l(o2, t3, r4, n2, s2, "throw", e4);
                }
                n2(void 0);
              });
            };
            return function(e3, t3) {
              return r3.apply(this, arguments);
            };
          }(), C.default.prototype.image = function(e3, t3, r3, o2, n2, s2, i2, a2, l2, u2, c, d) {
            C.default._validateParameters("image", arguments);
            var h = e3.width, f = e3.height, p = (d = d || _.CENTER, c = c || _.CENTER, e3.elt && (h = void 0 !== h ? h : e3.elt.width, f = void 0 !== f ? f : e3.elt.height), e3.elt && e3.elt.videoWidth && !e3.canvas && (h = void 0 !== h ? h : e3.elt.videoWidth, f = void 0 !== f ? f : e3.elt.videoHeight), o2 || h), n2 = n2 || f, s2 = s2 || 0, i2 = i2 || 0, a2 = v(void 0 !== a2 ? a2 : h, h), h = v(void 0 !== l2 ? l2 : f, f), l2 = 1;
            e3.elt && !e3.canvas && e3.elt.style.width && (l2 = e3.elt.videoWidth && !o2 ? e3.elt.videoWidth : e3.elt.width, l2 /= parseInt(e3.elt.style.width, 10)), s2 *= l2, i2 *= l2, h *= l2, a2 *= l2;
            f = y(u2, c, d, (f = m.default.modeAdjust(t3, r3, p, n2, this._renderer._imageMode)).x, f.y, f.w, f.h, s2, i2, a2, h);
            this._renderer.image(e3, f.sx, f.sy, f.sw, f.sh, f.dx, f.dy, f.dw, f.dh);
          }, C.default.prototype.tint = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            C.default._validateParameters("tint", t3);
            var o2 = this.color.apply(this, t3);
            this._renderer._tint = o2.levels;
          }, C.default.prototype.noTint = function() {
            this._renderer._tint = null;
          }, C.default.prototype._getTintedImageCanvas = C.default.Renderer2D.prototype._getTintedImageCanvas, C.default.prototype.imageMode = function(e3) {
            C.default._validateParameters("imageMode", arguments), e3 !== _.CORNER && e3 !== _.CORNERS && e3 !== _.CENTER || (this._renderer._imageMode = e3);
          };
          e2 = C.default;
          r2.default = e2;
        }, {
          "../core/constants": 272,
          "../core/friendly_errors/fes_core": 274,
          "../core/friendly_errors/file_errors": 275,
          "../core/friendly_errors/validate_params": 278,
          "../core/helpers": 279,
          "../core/main": 283,
          "core-js/modules/es.array.copy-within": 154,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.promise": 191,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239,
          "core-js/modules/es.typed-array.uint8-array": 242,
          "core-js/modules/es.typed-array.uint8-clamped-array": 243,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246,
          gifenc: 253,
          omggif: 256,
          "regenerator-runtime/runtime": 260
        }],
        307: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var i = o(e2("../core/main")), n = o(e2("./filters"));
          function o(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          function s2(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          i.default.Image = function() {
            function r3(e4, t4) {
              if (!(this instanceof r3)) throw new TypeError("Cannot call a class as a function");
              this.width = e4, this.height = t4, this.canvas = document.createElement("canvas"), this.canvas.width = this.width, this.canvas.height = this.height, this.drawingContext = this.canvas.getContext("2d"), (this._pixelsState = this)._pixelDensity = 1, this.gifProperties = null, this._modified = false, this.pixels = [];
            }
            var e3, t3, o2;
            return e3 = r3, (t3 = [{
              key: "pixelDensity",
              value: function(e4) {
                return void 0 !== e4 ? (e4 <= 0 && (i.default._friendlyParamError({
                  type: "INVALID_VALUE",
                  format: {
                    types: ["Number"]
                  },
                  position: 1
                }, "pixelDensity"), e4 = 1), this._pixelDensity = e4, this.width /= e4, this.height /= e4, this) : this._pixelDensity;
              }
            }, {
              key: "_animateGif",
              value: function(e4) {
                var t4, r4 = this.gifProperties, e4 = e4._lastRealFrameTime || window.performance.now();
                0 === r4.lastChangeTime && (r4.lastChangeTime = e4), r4.playing && (r4.timeDisplayed = e4 - r4.lastChangeTime, t4 = r4.frames[r4.displayIndex].delay, r4.timeDisplayed >= t4 && (t4 = Math.floor(r4.timeDisplayed / t4), r4.timeDisplayed = 0, r4.lastChangeTime = e4, r4.displayIndex += t4, r4.loopCount = Math.floor(r4.displayIndex / r4.numFrames), null !== r4.loopLimit && r4.loopCount >= r4.loopLimit ? r4.playing = false : (e4 = r4.displayIndex % r4.numFrames, this.drawingContext.putImageData(r4.frames[e4].image, 0, 0), r4.displayIndex = e4, this.setModified(true))));
              }
            }, {
              key: "_setProperty",
              value: function(e4, t4) {
                this[e4] = t4, this.setModified(true);
              }
            }, {
              key: "loadPixels",
              value: function() {
                i.default.Renderer2D.prototype.loadPixels.call(this), this.setModified(true);
              }
            }, {
              key: "updatePixels",
              value: function(e4, t4, r4, o3) {
                i.default.Renderer2D.prototype.updatePixels.call(this, e4, t4, r4, o3), this.setModified(true);
              }
            }, {
              key: "get",
              value: function(e4, t4, r4, o3) {
                return i.default._validateParameters("p5.Image.get", arguments), i.default.Renderer2D.prototype.get.apply(this, arguments);
              }
            }, {
              key: "_getPixel",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                return i.default.Renderer2D.prototype._getPixel.apply(this, t4);
              }
            }, {
              key: "set",
              value: function(e4, t4, r4) {
                i.default.Renderer2D.prototype.set.call(this, e4, t4, r4), this.setModified(true);
              }
            }, {
              key: "resize",
              value: function(e4, t4) {
                0 === e4 && 0 === t4 ? (e4 = this.canvas.width, t4 = this.canvas.height) : 0 === e4 ? e4 = this.canvas.width * t4 / this.canvas.height : 0 === t4 && (t4 = this.canvas.height * e4 / this.canvas.width), e4 = Math.floor(e4), t4 = Math.floor(t4);
                var r4 = document.createElement("canvas");
                if (r4.width = e4, r4.height = t4, this.gifProperties) for (var o3 = this.gifProperties, n2 = 0; n2 < o3.numFrames; n2++) {
                  for (var s3 = this.drawingContext.createImageData(e4, t4), i2 = (d = d = c = u2 = l = void 0, o3.frames[n2].image), a = s3, l = 0, u2 = 0; u2 < a.height; u2++) for (var c = 0; c < a.width; c++) {
                    var d = Math.floor(c * i2.width / a.width), d = 4 * (Math.floor(u2 * i2.height / a.height) * i2.width + d);
                    a.data[l++] = i2.data[d++], a.data[l++] = i2.data[d++], a.data[l++] = i2.data[d++], a.data[l++] = i2.data[+d];
                  }
                  o3.frames[n2].image = s3;
                }
                r4.getContext("2d").drawImage(this.canvas, 0, 0, this.canvas.width, this.canvas.height, 0, 0, r4.width, r4.height), this.canvas.width = this.width = e4, this.canvas.height = this.height = t4, this.drawingContext.drawImage(r4, 0, 0, e4, t4, 0, 0, e4, t4), 0 < this.pixels.length && this.loadPixels(), this.setModified(true);
              }
            }, {
              key: "copy",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                i.default.prototype.copy.apply(this, t4);
              }
            }, {
              key: "mask",
              value: function(e4) {
                var t4 = this.drawingContext.globalCompositeOperation, r4 = this._pixelDensity, o3 = 1, n2 = [e4 = void 0 === e4 ? this : e4, 0, 0, (o3 = e4 instanceof i.default.Renderer ? e4._pInst._pixelDensity : o3) * e4.width, o3 * e4.height, 0, 0, r4 * this.width, r4 * this.height];
                if (this.drawingContext.globalCompositeOperation = "destination-in", this.gifProperties) {
                  for (var s3 = 0; s3 < this.gifProperties.frames.length; s3++) this.drawingContext.putImageData(this.gifProperties.frames[s3].image, 0, 0), this.copy.apply(this, n2), this.gifProperties.frames[s3].image = this.drawingContext.getImageData(0, 0, r4 * this.width, r4 * this.height);
                  this.drawingContext.putImageData(this.gifProperties.frames[this.gifProperties.displayIndex].image, 0, 0);
                } else this.copy.apply(this, n2);
                this.drawingContext.globalCompositeOperation = t4, this.setModified(true);
              }
            }, {
              key: "filter",
              value: function(e4, t4) {
                n.default.apply(this.canvas, n.default[e4], t4), this.setModified(true);
              }
            }, {
              key: "blend",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                i.default._validateParameters("p5.Image.blend", arguments), i.default.prototype.blend.apply(this, t4), this.setModified(true);
              }
            }, {
              key: "setModified",
              value: function(e4) {
                this._modified = e4;
              }
            }, {
              key: "isModified",
              value: function() {
                return this._modified;
              }
            }, {
              key: "save",
              value: function(e4, t4) {
                this.gifProperties ? i.default.prototype.encodeAndDownloadGif(this, e4) : i.default.prototype.saveCanvas(this.canvas, e4, t4);
              }
            }, {
              key: "reset",
              value: function() {
                var e4;
                this.gifProperties && ((e4 = this.gifProperties).playing = true, e4.timeSinceStart = 0, e4.timeDisplayed = 0, e4.lastChangeTime = 0, e4.loopCount = 0, e4.displayIndex = 0, this.drawingContext.putImageData(e4.frames[0].image, 0, 0));
              }
            }, {
              key: "getCurrentFrame",
              value: function() {
                var e4;
                if (this.gifProperties) return (e4 = this.gifProperties).displayIndex % e4.numFrames;
              }
            }, {
              key: "setFrame",
              value: function(e4) {
                var t4;
                this.gifProperties && (e4 < (t4 = this.gifProperties).numFrames && 0 <= e4 ? (t4.timeDisplayed = 0, t4.lastChangeTime = 0, t4.displayIndex = e4, this.drawingContext.putImageData(t4.frames[e4].image, 0, 0)) : console.log("Cannot set GIF to a frame number that is higher than total number of frames or below zero."));
              }
            }, {
              key: "numFrames",
              value: function() {
                if (this.gifProperties) return this.gifProperties.numFrames;
              }
            }, {
              key: "play",
              value: function() {
                this.gifProperties && (this.gifProperties.playing = true);
              }
            }, {
              key: "pause",
              value: function() {
                this.gifProperties && (this.gifProperties.playing = false);
              }
            }, {
              key: "delay",
              value: function(e4, t4) {
                if (this.gifProperties) {
                  var r4 = this.gifProperties;
                  if (t4 < r4.numFrames && 0 <= t4) r4.frames[t4].delay = e4;
                  else {
                    var o3 = true, t4 = false, n2 = void 0;
                    try {
                      for (var s3, i2 = r4.frames[Symbol.iterator](); !(o3 = (s3 = i2.next()).done); o3 = true) s3.value.delay = e4;
                    } catch (e5) {
                      t4 = true, n2 = e5;
                    } finally {
                      try {
                        o3 || null == i2.return || i2.return();
                      } finally {
                        if (t4) throw n2;
                      }
                    }
                  }
                }
              }
            }]) && s2(e3.prototype, t3), o2 && s2(e3, o2), r3;
          }();
          e2 = i.default.Image;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "./filters": 304,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        308: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.filter"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var f = o(e2("../core/main")), a = o(e2("./filters"));
          function o(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          e2("../color/p5.Color"), f.default.prototype.pixels = [], f.default.prototype.blend = function() {
            for (var e3, t3 = arguments.length, r3 = new Array(t3), o2 = 0; o2 < t3; o2++) r3[o2] = arguments[o2];
            f.default._validateParameters("blend", r3), this._renderer ? (e3 = this._renderer).blend.apply(e3, r3) : f.default.Renderer2D.prototype.blend.apply(this, r3);
          }, f.default.prototype.copy = function() {
            for (var e3, t3, r3, o2, n, s2, i, a2, l, u2 = arguments.length, c = new Array(u2), d = 0; d < u2; d++) c[d] = arguments[d];
            if (f.default._validateParameters("copy", c), 9 === c.length) e3 = c[0], t3 = c[1], r3 = c[2], o2 = c[3], n = c[4], s2 = c[5], i = c[6], a2 = c[7], l = c[8];
            else {
              if (8 !== c.length) throw new Error("Signature not supported");
              e3 = this, t3 = c[0], r3 = c[1], o2 = c[2], n = c[3], s2 = c[4], i = c[5], a2 = c[6], l = c[7];
            }
            f.default.prototype._copyHelper(this, e3, t3, r3, o2, n, s2, i, a2, l);
          }, f.default.prototype._copyHelper = function(e3, t3, r3, o2, n, s2, i, a2, l, u2) {
            var c = t3.canvas.width / t3.width, d = 0, h = 0;
            t3._renderer && t3._renderer.isP3D && (d = t3.width / 2, h = t3.height / 2), e3._renderer && e3._renderer.isP3D ? (e3.push(), e3.resetMatrix(), e3.noLights(), e3.blendMode(e3.BLEND), e3.imageMode(e3.CORNER), f.default.RendererGL.prototype.image.call(e3._renderer, t3, r3 + d, o2 + h, n, s2, i, a2, l, u2), e3.pop()) : e3.drawingContext.drawImage(t3.canvas, c * (r3 + d), c * (o2 + h), c * n, c * s2, i, a2, l, u2);
          }, f.default.prototype.getFilterGraphicsLayer = function() {
            return this._renderer.getFilterGraphicsLayer();
          }, f.default.prototype.filter = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            f.default._validateParameters("filter", t3);
            var o2 = function() {
              var e4, t4 = {
                shader: void 0,
                operation: void 0,
                value: void 0,
                useWebGL: true
              };
              return (arguments.length <= 0 ? void 0 : arguments[0]) instanceof f.default.Shader ? t4.shader = arguments.length <= 0 ? void 0 : arguments[0] : (t4.operation = arguments.length <= 0 ? void 0 : arguments[0], 1 < arguments.length && "number" == typeof (arguments.length <= 1 ? void 0 : arguments[1]) && (t4.value = arguments.length <= 1 ? void 0 : arguments[1]), false === ((e4 = arguments.length - 1) < 0 || arguments.length <= e4 ? void 0 : arguments[e4]) && (t4.useWebGL = false)), t4;
            }.apply(void 0, t3), n = o2.shader, s2 = o2.operation, i = o2.value, o2 = o2.useWebGL;
            this._renderer.isP3D && n ? f.default.RendererGL.prototype.filter.call(this._renderer, n) : o2 || this._renderer.isP3D ? (!o2 && this._renderer.isP3D && console.warn("filter() with useWebGL=false is not supported in WEBGL"), this._renderer.isP3D ? f.default.RendererGL.prototype.filter.call(this._renderer, s2, i) : ((n = this.getFilterGraphicsLayer()).copy(this._renderer, 0, 0, this.width, this.height, -this.width / 2, -this.height / 2, this.width, this.height), this._renderer.clear(), this._renderer.resetMatrix(), n.filter.apply(n, t3), this.copy(n._renderer, 0, 0, this.width, this.height, 0, 0, this.width, this.height), n.clear())) : void 0 !== this.canvas ? a.default.apply(this.canvas, a.default[s2], i) : a.default.apply(this.elt, a.default[s2], i);
          }, f.default.prototype.get = function(e3, t3, r3, o2) {
            var n;
            return f.default._validateParameters("get", arguments), (n = this._renderer).get.apply(n, arguments);
          }, f.default.prototype.loadPixels = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            f.default._validateParameters("loadPixels", t3), this._renderer.loadPixels();
          }, f.default.prototype.set = function(e3, t3, r3) {
            this._renderer.set(e3, t3, r3);
          }, f.default.prototype.updatePixels = function(e3, t3, r3, o2) {
            f.default._validateParameters("updatePixels", arguments), 0 !== this.pixels.length && this._renderer.updatePixels(e3, t3, r3, o2);
          };
          e2 = f.default;
          r2.default = e2;
        }, {
          "../color/p5.Color": 270,
          "../core/main": 283,
          "./filters": 304,
          "core-js/modules/es.array.filter": 157
        }],
        309: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.last-index-of"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.object.from-entries"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/web.url"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.last-index-of"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.object.from-entries"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/web.url"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var v = s2(e2("../core/main")), m = (e2("whatwg-fetch"), e2("es6-promise/auto"), s2(e2("fetch-jsonp"))), n = s2(e2("file-saver"));
          function s2(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          function y(e3) {
            return (y = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          function g(e3) {
            return e3.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
          }
          function i(e3, t3) {
            t3 && true !== t3 && "true" !== t3 || (t3 = "");
            var r3 = "";
            return (e3 = e3 || "untitled") && e3.includes(".") && (r3 = e3.split(".").pop()), t3 && r3 !== t3 && (r3 = t3, e3 = "".concat(e3, ".").concat(r3)), [e3, r3];
          }
          e2("../core/friendly_errors/validate_params"), e2("../core/friendly_errors/file_errors"), e2("../core/friendly_errors/fes_core"), v.default.prototype.loadJSON = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            v.default._validateParameters("loadJSON", t3);
            for (var o2, n2, s3, i2 = t3[0], a = {}, l = "json", u2 = 1; u2 < t3.length; u2++) {
              var c = t3[u2];
              "string" == typeof c ? "jsonp" !== c && "json" !== c || (l = c) : "function" == typeof c ? o2 ? n2 = c : o2 = c : "object" === y(c) && (c.hasOwnProperty("jsonpCallback") || c.hasOwnProperty("jsonpCallbackFunction")) && (l = "jsonp", s3 = c);
            }
            var d = this;
            return this.httpDo(i2, "GET", s3, l, function(e4) {
              for (var t4 in e4) a[t4] = e4[t4];
              void 0 !== o2 && o2(e4), d._decrementPreload();
            }, function(e4) {
              if (v.default._friendlyFileLoadError(5, i2), !n2) throw e4;
              n2(e4);
            }), a;
          }, v.default.prototype.loadStrings = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            v.default._validateParameters("loadStrings", t3);
            for (var n2, o2, s3 = [], i2 = 1; i2 < t3.length; i2++) {
              var a = t3[i2];
              "function" == typeof a && (void 0 === n2 ? n2 = a : void 0 === o2 && (o2 = a));
            }
            var l = this;
            return v.default.prototype.httpDo.call(this, t3[0], "GET", "text", function(e4) {
              for (var t4 = e4.replace(/\r\n/g, "\r").replace(/\n/g, "\r").split(/\r/), r4 = 0, o3 = t4.length; r4 < o3; r4 += 32768) Array.prototype.push.apply(s3, t4.slice(r4, Math.min(r4 + 32768, o3)));
              void 0 !== n2 && n2(s3), l._decrementPreload();
            }, function(e4) {
              if (v.default._friendlyFileLoadError(3, e4), !o2) throw e4;
              o2(e4);
            }), s3;
          }, v.default.prototype.loadTable = function(t3) {
            var f, r3, p, e3 = [], m2 = false, o2 = t3.substring(t3.lastIndexOf(".") + 1, t3.length);
            "csv" === o2 ? p = "," : "ssv" === o2 ? p = ";" : "tsv" === o2 && (p = "	");
            for (var n2 = 1; n2 < arguments.length; n2++) "function" == typeof arguments[n2] ? void 0 === f ? f = arguments[n2] : void 0 === r3 && (r3 = arguments[n2]) : "string" == typeof arguments[n2] && (e3.push(arguments[n2]), "header" === arguments[n2] && (m2 = true), "csv" === arguments[n2] ? p = "," : "ssv" === arguments[n2] ? p = ";" : "tsv" === arguments[n2] && (p = "	"));
            var y2 = new v.default.Table(), g2 = this;
            return this.httpDo(t3, "GET", "table", function(e4) {
              for (var t4, r4, o3 = {}, n3 = 0, s3 = [], i2 = 0, a = null, l = function() {
                o3.currentState = n3, o3.token = "";
              }, u2 = function() {
                a.push(o3.token), l();
              }, c = function() {
                o3.currentState = 4, s3.push(a), a = null;
              }; ; ) {
                if (null == (t4 = e4[i2++])) {
                  if (o3.escaped) throw new Error("Unclosed quote in file.");
                  if (a) {
                    u2(), c();
                    break;
                  }
                }
                if (null === a && (o3.escaped = false, a = [], l()), o3.currentState === n3) {
                  if ('"' === t4) {
                    o3.escaped = true, o3.currentState = 1;
                    continue;
                  }
                  o3.currentState = 1;
                }
                if (1 === o3.currentState && o3.escaped) {
                  if ('"' === t4) '"' === e4[i2] ? (o3.token += '"', i2++) : (o3.escaped = false, o3.currentState = 2);
                  else {
                    if ("\r" === t4) continue;
                    o3.token += t4;
                  }
                } else "\r" === t4 ? ("\n" === e4[i2] && i2++, u2(), c()) : "\n" === t4 ? (u2(), c()) : t4 === p ? u2() : 1 === o3.currentState && (o3.token += t4);
              }
              if (m2) y2.columns = s3.shift();
              else for (var d = 0; d < s3[0].length; d++) y2.columns[d] = "null";
              for (var h = 0; h < s3.length; h++) (1 !== s3[h].length || "undefined" !== s3[h][0] && "" !== s3[h][0]) && ((r4 = new v.default.TableRow()).arr = s3[h], r4.obj = function(r5, e5) {
                if (void 0 === (e5 = e5 || [])) for (var t5 = 0; t5 < r5.length; t5++) e5[t5.toString()] = t5;
                return Object.fromEntries(e5.map(function(e6, t6) {
                  return [e6, r5[t6]];
                }));
              }(s3[h], y2.columns), y2.addRow(r4));
              "function" == typeof f && f(y2), g2._decrementPreload();
            }, function(e4) {
              v.default._friendlyFileLoadError(2, t3), r3 ? r3(e4) : console.error(e4);
            }), y2;
          }, v.default.prototype.loadXML = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            for (var o2, n2, s3 = new v.default.XML(), i2 = 1; i2 < t3.length; i2++) {
              var a = t3[i2];
              "function" == typeof a && (void 0 === o2 ? o2 = a : void 0 === n2 && (n2 = a));
            }
            var l = this;
            return this.httpDo(t3[0], "GET", "xml", function(e4) {
              for (var t4 in e4) s3[t4] = e4[t4];
              void 0 !== o2 && o2(s3), l._decrementPreload();
            }, function(e4) {
              if (v.default._friendlyFileLoadError(1, e4), !n2) throw e4;
              n2(e4);
            }), s3;
          }, v.default.prototype.loadBytes = function(t3, r3, o2) {
            var n2 = {}, s3 = this;
            return this.httpDo(t3, "GET", "arrayBuffer", function(e3) {
              n2.bytes = new Uint8Array(e3), "function" == typeof r3 && r3(n2), s3._decrementPreload();
            }, function(e3) {
              if (v.default._friendlyFileLoadError(6, t3), !o2) throw e3;
              o2(e3);
            }), n2;
          }, v.default.prototype.httpGet = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            return v.default._validateParameters("httpGet", t3), t3.splice(1, 0, "GET"), v.default.prototype.httpDo.apply(this, t3);
          }, v.default.prototype.httpPost = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            return v.default._validateParameters("httpPost", t3), t3.splice(1, 0, "POST"), v.default.prototype.httpDo.apply(this, t3);
          }, v.default.prototype.httpDo = function() {
            for (var r3, e3, t3, o2 = {}, n2 = 0, s3 = "text/plain", i2 = arguments.length - 1; 0 < i2 && "function" == typeof (i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]); i2--) n2++;
            var a = arguments.length - n2, l = arguments.length <= 0 ? void 0 : arguments[0];
            if (2 == a && "string" == typeof l && "object" === y(arguments.length <= 1 ? void 0 : arguments[1])) p = new Request(l, arguments.length <= 1 ? void 0 : arguments[1]), e3 = arguments.length <= 2 ? void 0 : arguments[2], t3 = arguments.length <= 3 ? void 0 : arguments[3];
            else {
              for (var u2, c = "GET", d = 1; d < arguments.length; d++) {
                var h = d < 0 || arguments.length <= d ? void 0 : arguments[d];
                if ("string" == typeof h) "GET" === h || "POST" === h || "PUT" === h || "DELETE" === h ? c = h : "json" === h || "jsonp" === h || "binary" === h || "arrayBuffer" === h || "xml" === h || "text" === h || "table" === h ? r3 = h : u2 = h;
                else if ("number" == typeof h) u2 = h.toString();
                else if ("object" === y(h)) {
                  if (h.hasOwnProperty("jsonpCallback") || h.hasOwnProperty("jsonpCallbackFunction")) for (var f in h) o2[f] = h[f];
                  else s3 = h instanceof v.default.XML ? (u2 = h.serialize(), "application/xml") : (u2 = JSON.stringify(h), "application/json");
                } else "function" == typeof h && (e3 ? t3 = h : e3 = h);
              }
              var a = "GET" === c ? new Headers() : new Headers({
                "Content-Type": s3
              }), p = new Request(l, {
                method: c,
                mode: "cors",
                body: u2,
                headers: a
              });
            }
            return (a = (a = "jsonp" === (r3 = r3 || (l.includes("json") ? "json" : l.includes("xml") ? "xml" : "text")) ? (0, m.default)(l, o2) : fetch(p)).then(function(e4) {
              if (!e4.ok) throw (t4 = new Error(e4.body)).status = e4.status, t4.ok = false, t4;
              var t4 = 0;
              switch ((t4 = "jsonp" !== r3 ? e4.headers.get("content-length") : t4) && 64e6 < t4 && v.default._friendlyFileLoadError(7, l), r3) {
                case "json":
                case "jsonp":
                  return e4.json();
                case "binary":
                  return e4.blob();
                case "arrayBuffer":
                  return e4.arrayBuffer();
                case "xml":
                  return e4.text().then(function(e5) {
                    e5 = new DOMParser().parseFromString(e5, "text/xml");
                    return new v.default.XML(e5.documentElement);
                  });
                default:
                  return e4.text();
              }
            })).then(e3 || function() {
            }), a.catch(t3 || console.error), a;
          }, window.URL = window.URL || window.webkitURL, v.default.prototype._pWriters = [], v.default.prototype.createWriter = function(e3, t3) {
            var r3, o2;
            for (o2 in v.default.prototype._pWriters) if (v.default.prototype._pWriters[o2].name === e3) return r3 = new v.default.PrintWriter(e3 + this.millis(), t3), v.default.prototype._pWriters.push(r3), r3;
            return r3 = new v.default.PrintWriter(e3, t3), v.default.prototype._pWriters.push(r3), r3;
          }, v.default.PrintWriter = function(r3, o2) {
            var n2 = this;
            this.name = r3, this.content = "", this.write = function(e3) {
              this.content += e3;
            }, this.print = function(e3) {
              this.content += "".concat(e3, "\n");
            }, this.clear = function() {
              this.content = "";
            }, this.close = function() {
              var e3, t3 = [];
              for (e3 in t3.push(this.content), v.default.prototype.writeFile(t3, r3, o2), v.default.prototype._pWriters) v.default.prototype._pWriters[e3].name === this.name && v.default.prototype._pWriters.splice(e3, 1);
              n2.clear(), n2 = {};
            };
          }, v.default.prototype.save = function(e3, t3, r3) {
            var o2 = arguments, n2 = (this._curElement || this).elt;
            if (0 === o2.length) v.default.prototype.saveCanvas(n2);
            else if (o2[0] instanceof v.default.Renderer || o2[0] instanceof v.default.Graphics) v.default.prototype.saveCanvas(o2[0].elt, o2[1], o2[2]);
            else if (1 === o2.length && "string" == typeof o2[0]) v.default.prototype.saveCanvas(n2, o2[0]);
            else switch (i(o2[1], o2[2])[1]) {
              case "json":
                return void v.default.prototype.saveJSON(o2[0], o2[1], o2[2]);
              case "txt":
                return void v.default.prototype.saveStrings(o2[0], o2[1], o2[2]);
              default:
                o2[0] instanceof Array ? v.default.prototype.saveStrings(o2[0], o2[1], o2[2]) : o2[0] instanceof v.default.Table ? v.default.prototype.saveTable(o2[0], o2[1], o2[2]) : o2[0] instanceof v.default.Image ? v.default.prototype.saveCanvas(o2[0].canvas, o2[1]) : o2[0] instanceof v.default.SoundFile && v.default.prototype.saveSound(o2[0], o2[1], o2[2], o2[3]);
            }
          }, v.default.prototype.saveJSON = function(e3, t3, r3) {
            v.default._validateParameters("saveJSON", arguments), r3 = r3 ? JSON.stringify(e3) : JSON.stringify(e3, void 0, 2), this.saveStrings(r3.split("\n"), t3, "json");
          }, v.default.prototype.saveJSONObject = v.default.prototype.saveJSON, v.default.prototype.saveJSONArray = v.default.prototype.saveJSON, v.default.prototype.saveStrings = function(e3, t3, r3, o2) {
            v.default._validateParameters("saveStrings", arguments);
            for (var n2 = this.createWriter(t3, r3 || "txt"), s3 = 0; s3 < e3.length; s3++) o2 ? n2.write(e3[s3] + "\r\n") : n2.write(e3[s3] + "\n");
            n2.close(), n2.clear();
          }, v.default.prototype.saveTable = function(e3, t3, r3) {
            v.default._validateParameters("saveTable", arguments), o2 = void 0 === r3 ? t3.substring(t3.lastIndexOf(".") + 1, t3.length) : r3;
            var o2, n2 = this.createWriter(t3, o2), s3 = e3.columns, i2 = "tsv" === o2 ? "	" : ",";
            if ("html" !== o2) {
              if ("0" !== s3[0]) {
                for (var a = 0; a < s3.length; a++) a < s3.length - 1 ? n2.write(s3[a] + i2) : n2.write(s3[a]);
                n2.write("\n");
              }
              for (var l = 0; l < e3.rows.length; l++) {
                for (var u2 = void 0, u2 = 0; u2 < e3.rows[l].arr.length; u2++) u2 < e3.rows[l].arr.length - 1 ? "csv" === o2 && String(e3.rows[l].arr[u2]).includes(",") ? n2.write('"' + e3.rows[l].arr[u2] + '"' + i2) : n2.write(e3.rows[l].arr[u2] + i2) : "csv" === o2 && String(e3.rows[l].arr[u2]).includes(",") ? n2.write('"' + e3.rows[l].arr[u2] + '"') : n2.write(e3.rows[l].arr[u2]);
                n2.write("\n");
              }
            } else {
              n2.print("<html>"), n2.print("<head>");
              if (n2.print('  <meta http-equiv="content-type" content="text/html;charset=utf-8" />'), n2.print("</head>"), n2.print("<body>"), n2.print("  <table>"), "0" !== s3[0]) {
                n2.print("    <tr>");
                for (var c = 0; c < s3.length; c++) {
                  var d = g(s3[c]);
                  n2.print("      <td>".concat(d)), n2.print("      </td>");
                }
                n2.print("    </tr>");
              }
              for (var h = 0; h < e3.rows.length; h++) {
                n2.print("    <tr>");
                for (var f = 0; f < e3.columns.length; f++) {
                  var p = g(e3.rows[h].getString(f));
                  n2.print("      <td>".concat(p)), n2.print("      </td>");
                }
                n2.print("    </tr>");
              }
              n2.print("  </table>"), n2.print("</body>"), n2.print("</html>");
            }
            n2.close(), n2.clear();
          }, v.default.prototype.writeFile = function(e3, t3, r3) {
            var o2 = "application/octet-stream", e3 = (v.default.prototype._isSafari() && (o2 = "text/plain"), new Blob(e3, {
              type: o2
            }));
            v.default.prototype.downloadFile(e3, t3, r3);
          }, v.default.prototype.downloadFile = function(e3, t3, r3) {
            var o2, t3 = i(t3, r3), r3 = t3[0];
            e3 instanceof Blob ? n.default.saveAs(e3, r3) : ((o2 = document.createElement("a")).href = e3, o2.download = r3, o2.onclick = function(e4) {
              document.body.removeChild(e4.target), e4.stopPropagation();
            }, o2.style.display = "none", document.body.appendChild(o2), v.default.prototype._isSafari() && (e3 = (e3 = 'Hello, Safari user! To download this file...\n1. Go to File --> Save As.\n2. Choose "Page Source" as the Format.\n') + '3. Name it with this extension: ."'.concat(t3[1], '"'), alert(e3)), o2.click());
          }, v.default.prototype._checkFileExtension = i, v.default.prototype._isSafari = function() {
            return window.HTMLElement.toString().includes("Constructor");
          };
          e2 = v.default;
          r2.default = e2;
        }, {
          "../core/friendly_errors/fes_core": 274,
          "../core/friendly_errors/file_errors": 275,
          "../core/friendly_errors/validate_params": 278,
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.last-index-of": 167,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.array.splice": 171,
          "core-js/modules/es.function.name": 174,
          "core-js/modules/es.object.from-entries": 185,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.promise": 191,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239,
          "core-js/modules/es.typed-array.uint8-array": 242,
          "core-js/modules/web.dom-collections.iterator": 246,
          "core-js/modules/web.url": 248,
          "es6-promise/auto": 249,
          "fetch-jsonp": 251,
          "file-saver": 252,
          "whatwg-fetch": 261
        }],
        310: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.regexp.constructor"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.match"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.regexp.constructor"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.match"), e2("core-js/modules/es.string.replace"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function s2(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o = t3[r3];
              o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e3, o.key, o);
            }
          }
          n.default.Table = function() {
            function o() {
              var e4 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], t4 = this, r4 = o;
              if (!(t4 instanceof r4)) throw new TypeError("Cannot call a class as a function");
              this.columns = [], this.rows = e4;
            }
            var e3, t3, r3;
            return e3 = o, (t3 = [{
              key: "addRow",
              value: function(e4) {
                e4 = e4 || new n.default.TableRow();
                if (void 0 === e4.arr || void 0 === e4.obj) throw new Error("invalid TableRow: ".concat(e4));
                return (e4.table = this).rows.push(e4), e4;
              }
            }, {
              key: "removeRow",
              value: function(e4) {
                this.rows[e4].table = null;
                e4 = this.rows.splice(e4 + 1, this.rows.length);
                this.rows.pop(), this.rows = this.rows.concat(e4);
              }
            }, {
              key: "getRow",
              value: function(e4) {
                return this.rows[e4];
              }
            }, {
              key: "getRows",
              value: function() {
                return this.rows;
              }
            }, {
              key: "findRow",
              value: function(e4, t4) {
                if ("string" == typeof t4) {
                  for (var r4 = 0; r4 < this.rows.length; r4++) if (this.rows[r4].obj[t4] === e4) return this.rows[r4];
                } else for (var o2 = 0; o2 < this.rows.length; o2++) if (this.rows[o2].arr[t4] === e4) return this.rows[o2];
                return null;
              }
            }, {
              key: "findRows",
              value: function(e4, t4) {
                var r4 = [];
                if ("string" == typeof t4) for (var o2 = 0; o2 < this.rows.length; o2++) this.rows[o2].obj[t4] === e4 && r4.push(this.rows[o2]);
                else for (var n2 = 0; n2 < this.rows.length; n2++) this.rows[n2].arr[t4] === e4 && r4.push(this.rows[n2]);
                return r4;
              }
            }, {
              key: "matchRow",
              value: function(e4, t4) {
                if ("number" == typeof t4) {
                  for (var r4 = 0; r4 < this.rows.length; r4++) if (this.rows[r4].arr[t4].match(e4)) return this.rows[r4];
                } else for (var o2 = 0; o2 < this.rows.length; o2++) if (this.rows[o2].obj[t4].match(e4)) return this.rows[o2];
                return null;
              }
            }, {
              key: "matchRows",
              value: function(e4, t4) {
                var r4 = [];
                if ("number" == typeof t4) for (var o2 = 0; o2 < this.rows.length; o2++) this.rows[o2].arr[t4].match(e4) && r4.push(this.rows[o2]);
                else for (var n2 = 0; n2 < this.rows.length; n2++) this.rows[n2].obj[t4].match(e4) && r4.push(this.rows[n2]);
                return r4;
              }
            }, {
              key: "getColumn",
              value: function(e4) {
                var t4 = [];
                if ("string" == typeof e4) for (var r4 = 0; r4 < this.rows.length; r4++) t4.push(this.rows[r4].obj[e4]);
                else for (var o2 = 0; o2 < this.rows.length; o2++) t4.push(this.rows[o2].arr[e4]);
                return t4;
              }
            }, {
              key: "clearRows",
              value: function() {
                delete this.rows, this.rows = [];
              }
            }, {
              key: "addColumn",
              value: function(e4) {
                this.columns.push(e4 || null);
              }
            }, {
              key: "getColumnCount",
              value: function() {
                return this.columns.length;
              }
            }, {
              key: "getRowCount",
              value: function() {
                return this.rows.length;
              }
            }, {
              key: "removeTokens",
              value: function(e4, t4) {
                for (var r4 = [], o2 = 0; o2 < e4.length; o2++) r4.push(e4.charAt(o2).replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"));
                var n2 = new RegExp(r4.join("|"), "g");
                if (void 0 === t4) for (var s3 = 0; s3 < this.columns.length; s3++) for (var i = 0; i < this.rows.length; i++) {
                  var a = (a = this.rows[i].arr[s3]).replace(n2, "");
                  this.rows[i].arr[s3] = a, this.rows[i].obj[this.columns[s3]] = a;
                }
                else if ("string" == typeof t4) for (var l = 0; l < this.rows.length; l++) {
                  var u2 = (u2 = this.rows[l].obj[t4]).replace(n2, ""), c = (this.rows[l].obj[t4] = u2, this.columns.indexOf(t4));
                  this.rows[l].arr[c] = u2;
                }
                else for (var d = 0; d < this.rows.length; d++) {
                  var h = (h = this.rows[d].arr[t4]).replace(n2, "");
                  this.rows[d].arr[t4] = h, this.rows[d].obj[this.columns[t4]] = h;
                }
              }
            }, {
              key: "trim",
              value: function(e4) {
                var t4 = new RegExp(" ", "g");
                if (void 0 === e4) for (var r4 = 0; r4 < this.columns.length; r4++) for (var o2 = 0; o2 < this.rows.length; o2++) {
                  var n2 = (n2 = this.rows[o2].arr[r4]).replace(t4, "");
                  this.rows[o2].arr[r4] = n2, this.rows[o2].obj[this.columns[r4]] = n2;
                }
                else if ("string" == typeof e4) for (var s3 = 0; s3 < this.rows.length; s3++) {
                  var i = (i = this.rows[s3].obj[e4]).replace(t4, ""), a = (this.rows[s3].obj[e4] = i, this.columns.indexOf(e4));
                  this.rows[s3].arr[a] = i;
                }
                else for (var l = 0; l < this.rows.length; l++) {
                  var u2 = (u2 = this.rows[l].arr[e4]).replace(t4, "");
                  this.rows[l].arr[e4] = u2, this.rows[l].obj[this.columns[e4]] = u2;
                }
              }
            }, {
              key: "removeColumn",
              value: function(e4) {
                "string" == typeof e4 ? r4 = this.columns.indexOf(t4 = e4) : t4 = this.columns[r4 = e4];
                var t4, r4, e4 = this.columns.splice(r4 + 1, this.columns.length);
                this.columns.pop(), this.columns = this.columns.concat(e4);
                for (var o2 = 0; o2 < this.rows.length; o2++) {
                  var n2 = this.rows[o2].arr, s3 = n2.splice(r4 + 1, n2.length);
                  n2.pop(), this.rows[o2].arr = n2.concat(s3), delete this.rows[o2].obj[t4];
                }
              }
            }, {
              key: "set",
              value: function(e4, t4, r4) {
                this.rows[e4].set(t4, r4);
              }
            }, {
              key: "setNum",
              value: function(e4, t4, r4) {
                this.rows[e4].setNum(t4, r4);
              }
            }, {
              key: "setString",
              value: function(e4, t4, r4) {
                this.rows[e4].setString(t4, r4);
              }
            }, {
              key: "get",
              value: function(e4, t4) {
                return this.rows[e4].get(t4);
              }
            }, {
              key: "getNum",
              value: function(e4, t4) {
                return this.rows[e4].getNum(t4);
              }
            }, {
              key: "getString",
              value: function(e4, t4) {
                return this.rows[e4].getString(t4);
              }
            }, {
              key: "getObject",
              value: function(e4) {
                for (var t4, r4 = {}, o2 = 0; o2 < this.rows.length; o2++) if (t4 = this.rows[o2].obj, "string" == typeof e4) {
                  if (!(0 <= this.columns.indexOf(e4))) throw new Error('This table has no column named "'.concat(e4, '"'));
                  r4[t4[e4]] = t4;
                } else r4[o2] = this.rows[o2].obj;
                return r4;
              }
            }, {
              key: "getArray",
              value: function() {
                for (var e4 = [], t4 = 0; t4 < this.rows.length; t4++) e4.push(this.rows[t4].arr);
                return e4;
              }
            }]) && s2(e3.prototype, t3), r3 && s2(e3, r3), o;
          }();
          e2 = n.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.splice": 171,
          "core-js/modules/es.regexp.constructor": 194,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.match": 201,
          "core-js/modules/es.string.replace": 204
        }],
        311: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.from-entries"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.split"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.from-entries"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.split"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function n(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o = t3[r3];
              o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e3, o.key, o);
            }
          }
          e2.default.TableRow = function() {
            function o(e4, t4) {
              if (!(this instanceof o)) throw new TypeError("Cannot call a class as a function");
              var r4 = [];
              e4 && (r4 = e4.split(t4 = t4 || ",")), this.arr = r4, this.obj = Object.fromEntries(r4.entries()), this.table = null;
            }
            var e3, t3, r3;
            return e3 = o, (t3 = [{
              key: "set",
              value: function(e4, t4) {
                if ("string" == typeof e4) {
                  var r4 = this.table.columns.indexOf(e4);
                  if (!(0 <= r4)) throw new Error('This table has no column named "'.concat(e4, '"'));
                  this.obj[e4] = t4, this.arr[r4] = t4;
                } else {
                  if (!(e4 < this.table.columns.length)) throw new Error("Column #".concat(e4, " is out of the range of this table"));
                  this.arr[e4] = t4;
                  r4 = this.table.columns[e4];
                  this.obj[r4] = t4;
                }
              }
            }, {
              key: "setNum",
              value: function(e4, t4) {
                t4 = parseFloat(t4);
                this.set(e4, t4);
              }
            }, {
              key: "setString",
              value: function(e4, t4) {
                t4 = t4.toString();
                this.set(e4, t4);
              }
            }, {
              key: "get",
              value: function(e4) {
                return ("string" == typeof e4 ? this.obj : this.arr)[e4];
              }
            }, {
              key: "getNum",
              value: function(e4) {
                var t4 = "string" == typeof e4 ? parseFloat(this.obj[e4]) : parseFloat(this.arr[e4]);
                if ("NaN" === t4.toString()) throw "Error: ".concat(this.obj[e4], " is NaN (Not a Number)");
                return t4;
              }
            }, {
              key: "getString",
              value: function(e4) {
                return ("string" == typeof e4 ? this.obj : this.arr)[e4].toString();
              }
            }]) && n(e3.prototype, t3), r3 && n(e3, r3), o;
          }();
          e2 = e2.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.from-entries": 185,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        312: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var a = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function n(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o = t3[r3];
              o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e3, o.key, o);
            }
          }
          function s2(e3) {
            for (var t3 = [], r3 = 0; r3 < e3.length; r3++) t3.push(new a.default.XML(e3[r3]));
            return t3;
          }
          a.default.XML = function() {
            function t3(e4) {
              if (!(this instanceof t3)) throw new TypeError("Cannot call a class as a function");
              e4 ? this.DOM = e4 : (e4 = document.implementation.createDocument(null, "doc"), this.DOM = e4.createElement("root"));
            }
            var e3, r3, o;
            return e3 = t3, (r3 = [{
              key: "getParent",
              value: function() {
                return new a.default.XML(this.DOM.parentElement);
              }
            }, {
              key: "getName",
              value: function() {
                return this.DOM.tagName;
              }
            }, {
              key: "setName",
              value: function(e4) {
                var t4 = this.DOM.innerHTML, r4 = this.DOM.attributes, o2 = document.implementation.createDocument(null, "default").createElement(e4);
                o2.innerHTML = t4;
                for (var n2 = 0; n2 < r4.length; n2++) o2.setAttribute(r4[n2].nodeName, r4[n2].nodeValue);
                this.DOM = o2;
              }
            }, {
              key: "hasChildren",
              value: function() {
                return 0 < this.DOM.children.length;
              }
            }, {
              key: "listChildren",
              value: function() {
                for (var e4 = [], t4 = 0; t4 < this.DOM.childNodes.length; t4++) e4.push(this.DOM.childNodes[t4].nodeName);
                return e4;
              }
            }, {
              key: "getChildren",
              value: function(e4) {
                return s2(e4 ? this.DOM.getElementsByTagName(e4) : this.DOM.children);
              }
            }, {
              key: "getChild",
              value: function(e4) {
                if ("string" != typeof e4) return new a.default.XML(this.DOM.children[e4]);
                var t4 = true, r4 = false, o2 = void 0;
                try {
                  for (var n2, s3 = this.DOM.children[Symbol.iterator](); !(t4 = (n2 = s3.next()).done); t4 = true) {
                    var i = n2.value;
                    if (i.tagName === e4) return new a.default.XML(i);
                  }
                } catch (e5) {
                  r4 = true, o2 = e5;
                } finally {
                  try {
                    t4 || null == s3.return || s3.return();
                  } finally {
                    if (r4) throw o2;
                  }
                }
              }
            }, {
              key: "addChild",
              value: function(e4) {
                e4 instanceof a.default.XML && this.DOM.appendChild(e4.DOM);
              }
            }, {
              key: "removeChild",
              value: function(e4) {
                var t4 = -1;
                if ("string" == typeof e4) {
                  for (var r4 = 0; r4 < this.DOM.children.length; r4++) if (this.DOM.children[r4].tagName === e4) {
                    t4 = r4;
                    break;
                  }
                } else t4 = e4;
                -1 !== t4 && this.DOM.removeChild(this.DOM.children[t4]);
              }
            }, {
              key: "getAttributeCount",
              value: function() {
                return this.DOM.attributes.length;
              }
            }, {
              key: "listAttributes",
              value: function() {
                var e4 = [], t4 = true, r4 = false, o2 = void 0;
                try {
                  for (var n2, s3 = this.DOM.attributes[Symbol.iterator](); !(t4 = (n2 = s3.next()).done); t4 = true) {
                    var i = n2.value;
                    e4.push(i.nodeName);
                  }
                } catch (e5) {
                  r4 = true, o2 = e5;
                } finally {
                  try {
                    t4 || null == s3.return || s3.return();
                  } finally {
                    if (r4) throw o2;
                  }
                }
                return e4;
              }
            }, {
              key: "hasAttribute",
              value: function(e4) {
                var t4 = {}, r4 = true, o2 = false, n2 = void 0;
                try {
                  for (var s3, i = this.DOM.attributes[Symbol.iterator](); !(r4 = (s3 = i.next()).done); r4 = true) {
                    var a2 = s3.value;
                    t4[a2.nodeName] = a2.nodeValue;
                  }
                } catch (e5) {
                  o2 = true, n2 = e5;
                } finally {
                  try {
                    r4 || null == i.return || i.return();
                  } finally {
                    if (o2) throw n2;
                  }
                }
                return !!t4[e4];
              }
            }, {
              key: "getNum",
              value: function(e4, t4) {
                var r4 = {}, o2 = true, n2 = false, s3 = void 0;
                try {
                  for (var i, a2 = this.DOM.attributes[Symbol.iterator](); !(o2 = (i = a2.next()).done); o2 = true) {
                    var l = i.value;
                    r4[l.nodeName] = l.nodeValue;
                  }
                } catch (e5) {
                  n2 = true, s3 = e5;
                } finally {
                  try {
                    o2 || null == a2.return || a2.return();
                  } finally {
                    if (n2) throw s3;
                  }
                }
                return Number(r4[e4]) || t4 || 0;
              }
            }, {
              key: "getString",
              value: function(e4, t4) {
                var r4 = {}, o2 = true, n2 = false, s3 = void 0;
                try {
                  for (var i, a2 = this.DOM.attributes[Symbol.iterator](); !(o2 = (i = a2.next()).done); o2 = true) {
                    var l = i.value;
                    r4[l.nodeName] = l.nodeValue;
                  }
                } catch (e5) {
                  n2 = true, s3 = e5;
                } finally {
                  try {
                    o2 || null == a2.return || a2.return();
                  } finally {
                    if (n2) throw s3;
                  }
                }
                return r4[e4] ? String(r4[e4]) : t4 || null;
              }
            }, {
              key: "setAttribute",
              value: function(e4, t4) {
                this.DOM.setAttribute(e4, t4);
              }
            }, {
              key: "getContent",
              value: function(e4) {
                var t4 = this.DOM.textContent;
                return (t4 = t4.replace(/\s\s+/g, ",")) || e4 || null;
              }
            }, {
              key: "setContent",
              value: function(e4) {
                this.DOM.children.length || (this.DOM.textContent = e4);
              }
            }, {
              key: "serialize",
              value: function() {
                return new XMLSerializer().serializeToString(this.DOM);
              }
            }]) && n(e3.prototype, r3), o && n(e3, o), t3;
          }();
          e2 = a.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.number.constructor": 179,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        313: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.math.hypot"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.math.hypot"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.string.includes"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var i = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function n(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          i.default.prototype.abs = Math.abs, i.default.prototype.ceil = Math.ceil, i.default.prototype.constrain = function(e3, t3, r3) {
            return i.default._validateParameters("constrain", arguments), Math.max(Math.min(e3, r3), t3);
          }, i.default.prototype.dist = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            return i.default._validateParameters("dist", t3), 4 === t3.length ? Math.hypot(t3[2] - t3[0], t3[3] - t3[1]) : 6 === t3.length ? Math.hypot(t3[3] - t3[0], t3[4] - t3[1], t3[5] - t3[2]) : void 0;
          }, i.default.prototype.exp = Math.exp, i.default.prototype.floor = Math.floor, i.default.prototype.lerp = function(e3, t3, r3) {
            return i.default._validateParameters("lerp", arguments), r3 * (t3 - e3) + e3;
          }, i.default.prototype.log = Math.log, i.default.prototype.mag = function(e3, t3) {
            return i.default._validateParameters("mag", arguments), Math.hypot(e3, t3);
          }, i.default.prototype.map = function(e3, t3, r3, o, n2, s2) {
            i.default._validateParameters("map", arguments);
            e3 = (e3 - t3) / (r3 - t3) * (n2 - o) + o;
            return s2 ? o < n2 ? this.constrain(e3, o, n2) : this.constrain(e3, n2, o) : e3;
          }, i.default.prototype.max = function() {
            for (var e3 = function(e4) {
              return Math.max.apply(Math, n(e4));
            }, t3 = arguments.length, r3 = new Array(t3), o = 0; o < t3; o++) r3[o] = arguments[o];
            return Array.isArray(r3[0]) ? e3(r3[0]) : e3(r3);
          }, i.default.prototype.min = function() {
            for (var e3 = function(e4) {
              return Math.min.apply(Math, n(e4));
            }, t3 = arguments.length, r3 = new Array(t3), o = 0; o < t3; o++) r3[o] = arguments[o];
            return Array.isArray(r3[0]) ? e3(r3[0]) : e3(r3);
          }, i.default.prototype.norm = function(e3, t3, r3) {
            return i.default._validateParameters("norm", arguments), this.map(e3, t3, r3, 0, 1);
          }, i.default.prototype.pow = Math.pow, i.default.prototype.round = function(e3, t3) {
            return t3 ? (t3 = Math.pow(10, t3), Math.round(e3 * t3) / t3) : Math.round(e3);
          }, i.default.prototype.sq = function(e3) {
            return e3 * e3;
          }, i.default.prototype.sqrt = Math.sqrt, i.default.prototype.fract = function(e3) {
            i.default._validateParameters("fract", arguments);
            var t3, r3 = 0, e3 = Number(e3);
            return isNaN(e3) || Math.abs(e3) === 1 / 0 ? e3 : (e3 < 0 && (e3 = -e3, r3 = 1), String(e3).includes(".") && !String(e3).includes("e") ? (t3 = String(e3), t3 = Number("0" + t3.slice(t3.indexOf("."))), Math.abs(r3 - t3)) : e3 < 1 ? Math.abs(r3 - e3) : 0);
          };
          e2 = i.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.math.hypot": 176,
          "core-js/modules/es.number.constructor": 179,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        314: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.reflect.construct"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.slice"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var o = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function n(e3, t3, r3) {
            return (n = function() {
              if ("undefined" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {
                if ("function" == typeof Proxy) return 1;
                try {
                  return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                  })), 1;
                } catch (e4) {
                }
              }
            }() ? Reflect.construct : function(e4, t4, r4) {
              var o2 = [null];
              o2.push.apply(o2, t4);
              t4 = new (Function.bind.apply(e4, o2))();
              return r4 && s2(t4, r4.prototype), t4;
            }).apply(null, arguments);
          }
          function s2(e3, t3) {
            return (s2 = Object.setPrototypeOf || function(e4, t4) {
              return e4.__proto__ = t4, e4;
            })(e3, t3);
          }
          o.default.prototype.createVector = function(e3, t3, r3) {
            return this instanceof o.default ? n(o.default.Vector, [this._fromRadians.bind(this), this._toRadians.bind(this)].concat(Array.prototype.slice.call(arguments))) : new o.default.Vector(e3, t3, r3);
          };
          e2 = o.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.reflect.construct": 192,
          "core-js/modules/es.regexp.to-string": 196
        }],
        315: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function b(e3) {
            return 0.5 * (1 - Math.cos(e3 * Math.PI));
          }
          var _, j = 4095, x = 4, w = 0.5, e2 = (e2.default.prototype.noise = function(e3) {
            var t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, r3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;
            if (null == _) {
              _ = new Array(4096);
              for (var o = 0; o < 4096; o++) _[o] = Math.random();
            }
            e3 < 0 && (e3 = -e3), t3 < 0 && (t3 = -t3), r3 < 0 && (r3 = -r3);
            for (var n, s2, i = Math.floor(e3), a = Math.floor(t3), l = Math.floor(r3), u2 = e3 - i, c = t3 - a, d = r3 - l, h = 0, f = 0.5, p = 0; p < x; p++) {
              var m = i + (a << 4) + (l << 8), y = b(u2), g = b(c), v = _[m & j];
              v += y * (_[m + 1 & j] - v), n = _[m + 16 & j], v += g * ((n += y * (_[m + 16 + 1 & j] - n)) - v), n = _[(m += 256) & j], n += y * (_[m + 1 & j] - n), s2 = _[m + 16 & j], n += g * ((s2 += y * (_[m + 16 + 1 & j] - s2)) - n), h += (v += b(d) * (n - v)) * f, f *= w, i <<= 1, a <<= 1, l <<= 1, 1 <= (u2 *= 2) && (i++, u2--), 1 <= (c *= 2) && (a++, c--), 1 <= (d *= 2) && (l++, d--);
            }
            return h;
          }, e2.default.prototype.noiseDetail = function(e3, t3) {
            0 < e3 && (x = e3), 0 < t3 && (w = t3);
          }, e2.default.prototype.noiseSeed = function(e3) {
            o = 4294967296;
            var t3, r3, o, n = {
              setSeed: function(e4) {
                r3 = t3 = (null == e4 ? Math.random() * o : e4) >>> 0;
              },
              getSeed: function() {
                return t3;
              },
              rand: function() {
                return (r3 = (1664525 * r3 + 1013904223) % o) / o;
              }
            };
            n.setSeed(e3), _ = new Array(4096);
            for (var s2 = 0; s2 < 4096; s2++) _[s2] = n.rand();
          }, e2.default);
          r2.default = e2;
        }, {
          "../core/main": 283
        }],
        316: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.every"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.some"), e2("core-js/modules/es.math.sign"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.number.epsilon"), e2("core-js/modules/es.number.is-finite"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.sub"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.every"), e2("core-js/modules/es.array.some"), e2("core-js/modules/es.math.sign"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.number.epsilon"), e2("core-js/modules/es.number.is-finite"), e2("core-js/modules/es.string.sub"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var u2 = (n = e2("../core/main")) && n.__esModule ? n : {
            default: n
          }, s2 = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          function l(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          u2.default.Vector = function() {
            function n2() {
              var e4 = this, t4 = n2;
              if (!(e4 instanceof t4)) throw new TypeError("Cannot call a class as a function");
              var r4, o2, e4 = "function" == typeof (arguments.length <= 0 ? void 0 : arguments[0]) ? (this.isPInst = true, this._fromRadians = arguments.length <= 0 ? void 0 : arguments[0], this._toRadians = arguments.length <= 1 ? void 0 : arguments[1], r4 = (arguments.length <= 2 ? void 0 : arguments[2]) || 0, o2 = (arguments.length <= 3 ? void 0 : arguments[3]) || 0, (arguments.length <= 4 ? void 0 : arguments[4]) || 0) : (r4 = (arguments.length <= 0 ? void 0 : arguments[0]) || 0, o2 = (arguments.length <= 1 ? void 0 : arguments[1]) || 0, (arguments.length <= 2 ? void 0 : arguments[2]) || 0);
              this.x = r4, this.y = o2, this.z = e4;
            }
            var e3, t3, r3;
            return e3 = n2, r3 = [{
              key: "fromAngle",
              value: function(e4) {
                var t4 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 1;
                return new u2.default.Vector(t4 * Math.cos(e4), t4 * Math.sin(e4), 0);
              }
            }, {
              key: "fromAngles",
              value: function(e4, t4) {
                var r4 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1, o2 = Math.cos(t4), t4 = Math.sin(t4), n3 = Math.cos(e4), e4 = Math.sin(e4);
                return new u2.default.Vector(r4 * e4 * t4, -r4 * n3, r4 * e4 * o2);
              }
            }, {
              key: "random2D",
              value: function() {
                return this.fromAngle(Math.random() * s2.TWO_PI);
              }
            }, {
              key: "random3D",
              value: function() {
                var e4 = Math.random() * s2.TWO_PI, t4 = 2 * Math.random() - 1, r4 = Math.sqrt(1 - t4 * t4), o2 = r4 * Math.cos(e4), r4 = r4 * Math.sin(e4);
                return new u2.default.Vector(o2, r4, t4);
              }
            }, {
              key: "copy",
              value: function(e4) {
                return e4.copy(e4);
              }
            }, {
              key: "add",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2];
                return s3 ? s3.set(o2) : (s3 = o2.copy(), 3 === t4.length && u2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.add")), s3.add(n3), s3;
              }
            }, {
              key: "rem",
              value: function(e4, t4) {
                if (e4 instanceof u2.default.Vector && t4 instanceof u2.default.Vector) return (e4 = e4.copy()).rem(t4), e4;
              }
            }, {
              key: "sub",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2];
                return s3 ? s3.set(o2) : (s3 = o2.copy(), 3 === t4.length && u2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.sub")), s3.sub(n3), s3;
              }
            }, {
              key: "mult",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2];
                return s3 ? s3.set(o2) : (s3 = o2.copy(), 3 === t4.length && u2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.mult")), s3.mult(n3), s3;
              }
            }, {
              key: "rotate",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2];
                return 2 === t4.length ? s3 = o2.copy() : (s3 instanceof u2.default.Vector || u2.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.rotate"), s3.set(o2)), s3.rotate(n3), s3;
              }
            }, {
              key: "div",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2];
                return s3 ? s3.set(o2) : (s3 = o2.copy(), 3 === t4.length && u2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.div")), s3.div(n3), s3;
              }
            }, {
              key: "dot",
              value: function(e4, t4) {
                return e4.dot(t4);
              }
            }, {
              key: "cross",
              value: function(e4, t4) {
                return e4.cross(t4);
              }
            }, {
              key: "dist",
              value: function(e4, t4) {
                return e4.dist(t4);
              }
            }, {
              key: "lerp",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2], i2 = t4[3];
                return i2 ? i2.set(o2) : (i2 = o2.copy(), 4 === t4.length && u2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.lerp")), i2.lerp(n3, s3), i2;
              }
            }, {
              key: "slerp",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2], i2 = t4[3];
                return i2 ? i2.set(o2) : (i2 = o2.copy(), 4 === t4.length && u2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.slerp")), i2.slerp(n3, s3), i2;
              }
            }, {
              key: "mag",
              value: function(e4) {
                return e4.mag();
              }
            }, {
              key: "magSq",
              value: function(e4) {
                return e4.magSq();
              }
            }, {
              key: "normalize",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1];
                return t4.length < 2 ? n3 = o2.copy() : (n3 instanceof u2.default.Vector || u2.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.normalize"), n3.set(o2)), n3.normalize();
              }
            }, {
              key: "limit",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2];
                return t4.length < 3 ? s3 = o2.copy() : (s3 instanceof u2.default.Vector || u2.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.limit"), s3.set(o2)), s3.limit(n3);
              }
            }, {
              key: "setMag",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2];
                return t4.length < 3 ? s3 = o2.copy() : (s3 instanceof u2.default.Vector || u2.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.setMag"), s3.set(o2)), s3.setMag(n3);
              }
            }, {
              key: "heading",
              value: function(e4) {
                return e4.heading();
              }
            }, {
              key: "angleBetween",
              value: function(e4, t4) {
                return e4.angleBetween(t4);
              }
            }, {
              key: "reflect",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2];
                return t4.length < 3 ? s3 = o2.copy() : (s3 instanceof u2.default.Vector || u2.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.reflect"), s3.set(o2)), s3.reflect(n3);
              }
            }, {
              key: "array",
              value: function(e4) {
                return e4.array();
              }
            }, {
              key: "equals",
              value: function(e4, t4) {
                var r4;
                return e4 instanceof u2.default.Vector ? r4 = e4 : Array.isArray(e4) ? r4 = new u2.default.Vector().set(e4) : u2.default._friendlyError("The v1 parameter should be of type Array or p5.Vector", "p5.Vector.equals"), r4.equals(t4);
              }
            }], (t3 = [{
              key: "toString",
              value: function() {
                return "p5.Vector Object : [".concat(this.x, ", ").concat(this.y, ", ").concat(this.z, "]");
              }
            }, {
              key: "set",
              value: function(e4, t4, r4) {
                return e4 instanceof u2.default.Vector ? (this.x = e4.x || 0, this.y = e4.y || 0, this.z = e4.z || 0) : Array.isArray(e4) ? (this.x = e4[0] || 0, this.y = e4[1] || 0, this.z = e4[2] || 0) : (this.x = e4 || 0, this.y = t4 || 0, this.z = r4 || 0), this;
              }
            }, {
              key: "copy",
              value: function() {
                return this.isPInst ? new u2.default.Vector(this._fromRadians, this._toRadians, this.x, this.y, this.z) : new u2.default.Vector(this.x, this.y, this.z);
              }
            }, {
              key: "add",
              value: function(e4, t4, r4) {
                return e4 instanceof u2.default.Vector ? (this.x += e4.x || 0, this.y += e4.y || 0, this.z += e4.z || 0) : Array.isArray(e4) ? (this.x += e4[0] || 0, this.y += e4[1] || 0, this.z += e4[2] || 0) : (this.x += e4 || 0, this.y += t4 || 0, this.z += r4 || 0), this;
              }
            }, {
              key: "calculateRemainder2D",
              value: function(e4, t4) {
                return 0 !== e4 && (this.x = this.x % e4), 0 !== t4 && (this.y = this.y % t4), this;
              }
            }, {
              key: "calculateRemainder3D",
              value: function(e4, t4, r4) {
                return 0 !== e4 && (this.x = this.x % e4), 0 !== t4 && (this.y = this.y % t4), 0 !== r4 && (this.z = this.z % r4), this;
              }
            }, {
              key: "rem",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2, n3, s3, i2 = t4[0], a2 = t4[1], l2 = t4[2];
                if (i2 instanceof u2.default.Vector) {
                  if ([i2.x, i2.y, i2.z].every(Number.isFinite)) return o2 = parseFloat(i2.x), n3 = parseFloat(i2.y), s3 = parseFloat(i2.z), this.calculateRemainder3D(o2, n3, s3);
                } else if (Array.isArray(i2)) {
                  if (i2.every(Number.isFinite)) return 2 === i2.length ? this.calculateRemainder2D(i2[0], i2[1]) : 3 === i2.length ? this.calculateRemainder3D(i2[0], i2[1], i2[2]) : void 0;
                } else if (1 === t4.length) {
                  if (Number.isFinite(i2) && 0 !== i2) return this.x = this.x % i2, this.y = this.y % i2, this.z = this.z % i2, this;
                } else if (2 === t4.length) {
                  if (t4.every(Number.isFinite)) return this.calculateRemainder2D(i2, a2);
                } else if (3 === t4.length && t4.every(Number.isFinite)) return this.calculateRemainder3D(i2, a2, l2);
              }
            }, {
              key: "sub",
              value: function(e4, t4, r4) {
                return e4 instanceof u2.default.Vector ? (this.x -= e4.x || 0, this.y -= e4.y || 0, this.z -= e4.z || 0) : Array.isArray(e4) ? (this.x -= e4[0] || 0, this.y -= e4[1] || 0, this.z -= e4[2] || 0) : (this.x -= e4 || 0, this.y -= t4 || 0, this.z -= r4 || 0), this;
              }
            }, {
              key: "mult",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2, n3 = t4[0], s3 = t4[1], i2 = t4[2];
                return n3 instanceof u2.default.Vector ? Number.isFinite(n3.x) && Number.isFinite(n3.y) && Number.isFinite(n3.z) && "number" == typeof n3.x && "number" == typeof n3.y && "number" == typeof n3.z ? (this.x *= n3.x, this.y *= n3.y, this.z *= n3.z) : console.warn("p5.Vector.prototype.mult:", "x contains components that are either undefined or not finite numbers") : Array.isArray(n3) ? n3.every(function(e5) {
                  return Number.isFinite(e5);
                }) && n3.every(function(e5) {
                  return "number" == typeof e5;
                }) ? 1 === n3.length ? (this.x *= n3[0], this.y *= n3[0], this.z *= n3[0]) : 2 === n3.length ? (this.x *= n3[0], this.y *= n3[1]) : 3 === n3.length && (this.x *= n3[0], this.y *= n3[1], this.z *= n3[2]) : console.warn("p5.Vector.prototype.mult:", "x contains elements that are either undefined or not finite numbers") : (o2 = t4).every(function(e5) {
                  return Number.isFinite(e5);
                }) && o2.every(function(e5) {
                  return "number" == typeof e5;
                }) ? (1 === t4.length && (this.x *= n3, this.y *= n3, this.z *= n3), 2 === t4.length && (this.x *= n3, this.y *= s3), 3 === t4.length && (this.x *= n3, this.y *= s3, this.z *= i2)) : console.warn("p5.Vector.prototype.mult:", "x, y, or z arguments are either undefined or not a finite number"), this;
              }
            }, {
              key: "div",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                var o2 = t4[0], n3 = t4[1], s3 = t4[2];
                if (o2 instanceof u2.default.Vector) {
                  if (Number.isFinite(o2.x) && Number.isFinite(o2.y) && Number.isFinite(o2.z) && "number" == typeof o2.x && "number" == typeof o2.y && "number" == typeof o2.z) {
                    var i2 = 0 === o2.z && 0 === this.z;
                    if (0 === o2.x || 0 === o2.y || !i2 && 0 === o2.z) return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
                    this.x /= o2.x, this.y /= o2.y, i2 || (this.z /= o2.z);
                  } else console.warn("p5.Vector.prototype.div:", "x contains components that are either undefined or not finite numbers");
                } else if (Array.isArray(o2)) {
                  if (o2.every(Number.isFinite) && o2.every(function(e5) {
                    return "number" == typeof e5;
                  })) {
                    if (o2.some(function(e5) {
                      return 0 === e5;
                    })) return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
                    1 === o2.length ? (this.x /= o2[0], this.y /= o2[0], this.z /= o2[0]) : 2 === o2.length ? (this.x /= o2[0], this.y /= o2[1]) : 3 === o2.length && (this.x /= o2[0], this.y /= o2[1], this.z /= o2[2]);
                  } else console.warn("p5.Vector.prototype.div:", "x contains components that are either undefined or not finite numbers");
                } else if (t4.every(Number.isFinite) && t4.every(function(e5) {
                  return "number" == typeof e5;
                })) {
                  if (t4.some(function(e5) {
                    return 0 === e5;
                  })) return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
                  1 === t4.length && (this.x /= o2, this.y /= o2, this.z /= o2), 2 === t4.length && (this.x /= o2, this.y /= n3), 3 === t4.length && (this.x /= o2, this.y /= n3, this.z /= s3);
                } else console.warn("p5.Vector.prototype.div:", "x, y, or z arguments are either undefined or not a finite number");
                return this;
              }
            }, {
              key: "mag",
              value: function() {
                return Math.sqrt(this.magSq());
              }
            }, {
              key: "magSq",
              value: function() {
                var e4 = this.x, t4 = this.y, r4 = this.z;
                return e4 * e4 + t4 * t4 + r4 * r4;
              }
            }, {
              key: "dot",
              value: function(e4, t4, r4) {
                return e4 instanceof u2.default.Vector ? this.dot(e4.x, e4.y, e4.z) : this.x * (e4 || 0) + this.y * (t4 || 0) + this.z * (r4 || 0);
              }
            }, {
              key: "cross",
              value: function(e4) {
                var t4 = this.y * e4.z - this.z * e4.y, r4 = this.z * e4.x - this.x * e4.z, e4 = this.x * e4.y - this.y * e4.x;
                return this.isPInst ? new u2.default.Vector(this._fromRadians, this._toRadians, t4, r4, e4) : new u2.default.Vector(t4, r4, e4);
              }
            }, {
              key: "dist",
              value: function(e4) {
                return e4.copy().sub(this).mag();
              }
            }, {
              key: "normalize",
              value: function() {
                var e4 = this.mag();
                return 0 !== e4 && this.mult(1 / e4), this;
              }
            }, {
              key: "limit",
              value: function(e4) {
                var t4 = this.magSq();
                return e4 * e4 < t4 && this.div(Math.sqrt(t4)).mult(e4), this;
              }
            }, {
              key: "setMag",
              value: function(e4) {
                return this.normalize().mult(e4);
              }
            }, {
              key: "heading",
              value: function() {
                var e4 = Math.atan2(this.y, this.x);
                return this.isPInst ? this._fromRadians(e4) : e4;
              }
            }, {
              key: "setHeading",
              value: function(e4) {
                this.isPInst && (e4 = this._toRadians(e4));
                var t4 = this.mag();
                return this.x = t4 * Math.cos(e4), this.y = t4 * Math.sin(e4), this;
              }
            }, {
              key: "rotate",
              value: function(e4) {
                var e4 = this.heading() + e4, t4 = (this.isPInst && (e4 = this._toRadians(e4)), this.mag());
                return this.x = Math.cos(e4) * t4, this.y = Math.sin(e4) * t4, this;
              }
            }, {
              key: "angleBetween",
              value: function(e4) {
                var t4;
                return 0 == this.magSq() * e4.magSq() ? NaN : (t4 = this.cross(e4), e4 = Math.atan2(t4.mag(), this.dot(e4)) * Math.sign(t4.z || 1), this.isPInst ? this._fromRadians(e4) : e4);
              }
            }, {
              key: "lerp",
              value: function(e4, t4, r4, o2) {
                return e4 instanceof u2.default.Vector ? this.lerp(e4.x, e4.y, e4.z, t4) : (this.x += (e4 - this.x) * o2 || 0, this.y += (t4 - this.y) * o2 || 0, this.z += (r4 - this.z) * o2 || 0, this);
              }
            }, {
              key: "slerp",
              value: function(e4, t4) {
                if (0 !== t4) {
                  if (1 === t4) return this.set(e4);
                  var r4 = this.mag(), o2 = e4.mag();
                  if (0 == r4 * o2) this.mult(1 - t4).add(e4.x * t4, e4.y * t4, e4.z * t4);
                  else {
                    var n3 = this.cross(e4), s3 = n3.mag(), i2 = Math.atan2(s3, this.dot(e4));
                    if (0 < s3) n3.x /= s3, n3.y /= s3, n3.z /= s3;
                    else {
                      if (i2 < 0.5 * Math.PI) return this.mult(1 - t4).add(e4.x * t4, e4.y * t4, e4.z * t4), this;
                      0 === this.z && 0 === e4.z ? n3.set(0, 0, 1) : 0 !== this.x ? n3.set(this.y, -this.x, 0).normalize() : n3.set(1, 0, 0);
                    }
                    s3 = n3.cross(this), e4 = 1 - t4 + t4 * o2 / r4, n3 = e4 * Math.cos(t4 * i2), o2 = e4 * Math.sin(t4 * i2);
                    this.x = this.x * n3 + s3.x * o2, this.y = this.y * n3 + s3.y * o2, this.z = this.z * n3 + s3.z * o2;
                  }
                }
                return this;
              }
            }, {
              key: "reflect",
              value: function(e4) {
                e4 = u2.default.Vector.normalize(e4);
                return this.sub(e4.mult(2 * this.dot(e4)));
              }
            }, {
              key: "array",
              value: function() {
                return [this.x || 0, this.y || 0, this.z || 0];
              }
            }, {
              key: "equals",
              value: function(e4, t4, r4) {
                var o2, n3, e4 = e4 instanceof u2.default.Vector ? (o2 = e4.x || 0, n3 = e4.y || 0, e4.z || 0) : Array.isArray(e4) ? (o2 = e4[0] || 0, n3 = e4[1] || 0, e4[2] || 0) : (o2 = e4 || 0, n3 = t4 || 0, r4 || 0);
                return this.x === o2 && this.y === n3 && this.z === e4;
              }
            }, {
              key: "clampToZero",
              value: function() {
                return this.x = this._clampToZero(this.x), this.y = this._clampToZero(this.y), this.z = this._clampToZero(this.z), this;
              }
            }, {
              key: "_clampToZero",
              value: function(e4) {
                return Math.abs(+(e4 || 0)) <= Number.EPSILON ? 0 : e4;
              }
            }]) && l(e3.prototype, t3), r3 && l(e3, r3), n2;
          }();
          var n = u2.default.Vector;
          r2.default = n;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.every": 155,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.some": 170,
          "core-js/modules/es.math.sign": 178,
          "core-js/modules/es.number.constructor": 179,
          "core-js/modules/es.number.epsilon": 180,
          "core-js/modules/es.number.is-finite": 181,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.sub": 208,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        317: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          var s2 = "_lcg_random_state", o = 4294967296, i = 0, e2 = (n.default.prototype._lcg = function(e3) {
            return this[e3] = (1664525 * this[e3] + 1013904223) % o, this[e3] / o;
          }, n.default.prototype._lcgSetSeed = function(e3, t3) {
            this[e3] = (null == t3 ? Math.random() * o : t3) >>> 0;
          }, n.default.prototype.randomSeed = function(e3) {
            this._lcgSetSeed(s2, e3), this._gaussian_previous = false;
          }, n.default.prototype.random = function(e3, t3) {
            var r3, o2;
            return n.default._validateParameters("random", arguments), r3 = null != this[s2] ? this._lcg(s2) : Math.random(), void 0 === e3 ? r3 : void 0 === t3 ? Array.isArray(e3) ? e3[Math.floor(r3 * e3.length)] : r3 * e3 : (t3 < e3 && (o2 = e3, e3 = t3, t3 = o2), r3 * (t3 - e3) + e3);
          }, n.default.prototype.randomGaussian = function(e3) {
            var t3, r3, o2, n2, s3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 1;
            if (this._gaussian_previous) t3 = i, this._gaussian_previous = false;
            else {
              for (; 1 <= (n2 = (r3 = this.random(2) - 1) * r3 + (o2 = this.random(2) - 1) * o2); ) ;
              t3 = r3 * (n2 = Math.sqrt(-2 * Math.log(n2) / n2)), i = o2 * n2, this._gaussian_previous = true;
            }
            return t3 * s3 + (e3 || 0);
          }, n.default);
          r2.default = e2;
        }, {
          "../core/main": 283
        }],
        318: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (l = e2("../core/main")) && l.__esModule ? l : {
            default: l
          }, s2 = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          n.default.prototype._angleMode = s2.RADIANS, n.default.prototype.acos = function(e3) {
            return this._fromRadians(Math.acos(e3));
          }, n.default.prototype.asin = function(e3) {
            return this._fromRadians(Math.asin(e3));
          }, n.default.prototype.atan = function(e3) {
            return this._fromRadians(Math.atan(e3));
          }, n.default.prototype.atan2 = function(e3, t3) {
            return this._fromRadians(Math.atan2(e3, t3));
          }, n.default.prototype.cos = function(e3) {
            return Math.cos(this._toRadians(e3));
          }, n.default.prototype.sin = function(e3) {
            return Math.sin(this._toRadians(e3));
          }, n.default.prototype.tan = function(e3) {
            return Math.tan(this._toRadians(e3));
          }, n.default.prototype.degrees = function(e3) {
            return e3 * s2.RAD_TO_DEG;
          }, n.default.prototype.radians = function(e3) {
            return e3 * s2.DEG_TO_RAD;
          }, n.default.prototype.angleMode = function(e3) {
            if (n.default._validateParameters("angleMode", arguments), void 0 === e3) return this._angleMode;
            e3 !== s2.DEGREES && e3 !== s2.RADIANS || e3 !== this._angleMode && (e3 === s2.RADIANS ? (this._setProperty("pRotationX", this.pRotationX * s2.DEG_TO_RAD), this._setProperty("pRotationY", this.pRotationY * s2.DEG_TO_RAD), this._setProperty("pRotationZ", this.pRotationZ * s2.DEG_TO_RAD)) : (this._setProperty("pRotationX", this.pRotationX * s2.RAD_TO_DEG), this._setProperty("pRotationY", this.pRotationY * s2.RAD_TO_DEG), this._setProperty("pRotationZ", this.pRotationZ * s2.RAD_TO_DEG)), this._angleMode = e3);
          }, n.default.prototype._toRadians = function(e3) {
            return this._angleMode === s2.DEGREES ? e3 * s2.DEG_TO_RAD : e3;
          }, n.default.prototype._toDegrees = function(e3) {
            return this._angleMode === s2.RADIANS ? e3 * s2.RAD_TO_DEG : e3;
          }, n.default.prototype._fromRadians = function(e3) {
            return this._angleMode === s2.DEGREES ? e3 * s2.RAD_TO_DEG : e3;
          }, n.default.prototype._fromDegrees = function(e3) {
            return this._angleMode === s2.RADIANS ? e3 * s2.DEG_TO_RAD : e3;
          };
          var l = n.default;
          r2.default = l;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        319: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var i = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          i.default.prototype.textAlign = function(e3, t3) {
            var r3;
            return i.default._validateParameters("textAlign", arguments), (r3 = this._renderer).textAlign.apply(r3, arguments);
          }, i.default.prototype.textLeading = function(e3) {
            var t3;
            return i.default._validateParameters("textLeading", arguments), (t3 = this._renderer).textLeading.apply(t3, arguments);
          }, i.default.prototype.textSize = function(e3) {
            var t3;
            return i.default._validateParameters("textSize", arguments), (t3 = this._renderer).textSize.apply(t3, arguments);
          }, i.default.prototype.textStyle = function(e3) {
            var t3;
            return i.default._validateParameters("textStyle", arguments), (t3 = this._renderer).textStyle.apply(t3, arguments);
          }, i.default.prototype.textWidth = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            if (t3[0] += "", i.default._validateParameters("textWidth", t3), 0 === t3[0].length) return 0;
            for (var o = t3[0].replace(/\t/g, "  ").split(/\r?\n|\r|\n/g), n = [], s2 = 0; s2 < o.length; s2++) n.push(this._renderer.textWidth(o[s2]));
            return Math.max.apply(Math, n);
          }, i.default.prototype.textAscent = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            return i.default._validateParameters("textAscent", t3), this._renderer.textAscent();
          }, i.default.prototype.textDescent = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            return i.default._validateParameters("textDescent", t3), this._renderer.textDescent();
          }, i.default.prototype._updateTextMetrics = function() {
            return this._renderer._updateTextMetrics();
          }, i.default.prototype.textWrap = function(e3) {
            return i.default._validateParameters("textWrap", [e3]), this._renderer.textWrap(e3);
          };
          e2 = i.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.string.split": 206
        }],
        320: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.last-index-of"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.last-index-of"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.split"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var l = (c = e2("../core/main")) && c.__esModule ? c : {
            default: c
          }, n = s2(e2("../core/constants")), u2 = s2(e2("opentype.js"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          function s2(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2, n2 = {}, s3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) Object.prototype.hasOwnProperty.call(e3, r3) && ((o2 = s3 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (o2.get || o2.set) ? Object.defineProperty(n2, r3, o2) : n2[r3] = e3[r3]);
            return n2.default = e3, t3 && t3.set(e3, n2), n2;
          }
          e2("../core/friendly_errors/validate_params"), e2("../core/friendly_errors/file_errors"), e2("../core/friendly_errors/fes_core"), l.default.prototype.loadFont = function(o2, n2, s3) {
            l.default._validateParameters("loadFont", arguments);
            var i2 = new l.default.Font(this), a2 = this;
            return u2.load(o2, function(e3, t3) {
              if (e3) return l.default._friendlyFileLoadError(4, o2), void 0 !== s3 ? s3(e3) : void console.error(e3, o2);
              i2.font = t3, void 0 !== n2 && n2(i2), a2._decrementPreload();
              var e3 = o2.split("\\").pop().split("/").pop(), t3 = e3.lastIndexOf("."), r3 = t3 < 1 ? null : e3.slice(t3 + 1);
              ["ttf", "otf", "woff", "woff2"].includes(r3) && (r3 = e3.slice(0, -1 !== t3 ? t3 : 0), (e3 = document.createElement("style")).appendChild(document.createTextNode("\n@font-face {\nfont-family: ".concat(r3, ";\nsrc: url(").concat(o2, ");\n}\n"))), document.head.appendChild(e3));
            }), i2;
          }, l.default.prototype.text = function(e3, t3, r3, o2, n2) {
            var s3;
            return l.default._validateParameters("text", arguments), this._renderer._doFill || this._renderer._doStroke ? (s3 = this._renderer).text.apply(s3, arguments) : this;
          }, l.default.prototype.textFont = function(e3, t3) {
            if (l.default._validateParameters("textFont", arguments), arguments.length) {
              if (e3) return this._renderer._setProperty("_textFont", e3), t3 && (this._renderer._setProperty("_textSize", t3), this._renderer._leadingSet || this._renderer._setProperty("_textLeading", t3 * n._DEFAULT_LEADMULT)), this._renderer._applyTextProperties();
              throw new Error("null font passed to textFont");
            }
            return this._renderer._textFont;
          };
          var c = l.default;
          r2.default = c;
        }, {
          "../core/constants": 272,
          "../core/friendly_errors/fes_core": 274,
          "../core/friendly_errors/file_errors": 275,
          "../core/friendly_errors/validate_params": 278,
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.last-index-of": 167,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246,
          "opentype.js": 257
        }],
        321: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.number.to-fixed"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.number.to-fixed"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (n = e2("../core/main")) && n.__esModule ? n : {
            default: n
          }, v = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== x(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = i();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function i() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), i = function() {
              return e3;
            }, e3);
          }
          function x(e3) {
            return (x = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          function s2(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          function w(e3, t3) {
            var r3 = e3.length;
            return e3[t3 < 0 ? t3 % r3 + r3 : t3 % r3];
          }
          function S(e3, t3, r3, o2) {
            var n2, s3, i2;
            return o2 ? (void 0 === S.tmpPoint1 && (S.tmpPoint1 = [], S.tmpPoint2 = []), s3 = S.tmpPoint1, i2 = S.tmpPoint2, s3.x = t3.x - e3.x, s3.y = t3.y - e3.y, i2.x = r3.x - t3.x, i2.y = r3.y - t3.y, n2 = s3.x * i2.x + s3.y * i2.y, s3 = Math.sqrt(s3.x * s3.x + s3.y * s3.y), i2 = Math.sqrt(i2.x * i2.x + i2.y * i2.y), Math.acos(n2 / (s3 * i2)) < o2) : 0 == (t3[0] - e3[0]) * (r3[1] - e3[1]) - (r3[0] - e3[0]) * (t3[1] - e3[1]);
          }
          function d(e3, t3, r3, o2, n2, s3, i2, a, l) {
            var u2 = 1 - l, c = Math.pow(u2, 3), d2 = Math.pow(u2, 2), h2 = l * l, f2 = h2 * l, p = c * e3 + 3 * d2 * l * r3 + 3 * u2 * l * l * n2 + f2 * i2, c = c * t3 + 3 * d2 * l * o2 + 3 * u2 * l * l * s3 + f2 * a, d2 = e3 + 2 * l * (r3 - e3) + h2 * (n2 - 2 * r3 + e3), f2 = t3 + 2 * l * (o2 - t3) + h2 * (s3 - 2 * o2 + t3), m = r3 + 2 * l * (n2 - r3) + h2 * (i2 - 2 * n2 + r3), h2 = o2 + 2 * l * (s3 - o2) + h2 * (a - 2 * s3 + o2), e3 = u2 * e3 + l * r3, r3 = u2 * t3 + l * o2, t3 = u2 * n2 + l * i2, o2 = u2 * s3 + l * a, n2 = 90 - 180 * Math.atan2(d2 - m, f2 - h2) / Math.PI;
            return (m < d2 || f2 < h2) && (n2 += 180), {
              x: p,
              y: c,
              m: {
                x: d2,
                y: f2
              },
              n: {
                x: m,
                y: h2
              },
              start: {
                x: e3,
                y: r3
              },
              end: {
                x: t3,
                y: o2
              },
              alpha: n2
            };
          }
          function h(e3, t3, r3, o2, n2, s3, i2, a, l) {
            return null == l ? f(e3, t3, r3, o2, n2, s3, i2, a) : d(e3, t3, r3, o2, n2, s3, i2, a, function(e4, t4, r4, o3, n3, s4, i3, a2, l2) {
              if (!(l2 < 0 || f(e4, t4, r4, o3, n3, s4, i3, a2) < l2)) {
                var u2, c = 0.5, d2 = 1 - c;
                for (u2 = f(e4, t4, r4, o3, n3, s4, i3, a2, d2); 0.01 < Math.abs(u2 - l2); ) u2 = f(e4, t4, r4, o3, n3, s4, i3, a2, d2 += (u2 < l2 ? 1 : -1) * (c /= 2));
                return d2;
              }
            }(e3, t3, r3, o2, n2, s3, i2, a, l));
          }
          function T(e3, t3, r3) {
            for (var o2, n2, s3, i2, a, l = 0, u2 = 0, c = (e3 = function(e4, t4) {
              function r4(e5, t5, r5) {
                var o4, n4;
                if (!e5) return ["C", t5.x, t5.y, t5.x, t5.y, t5.x, t5.y];
                switch (e5[0] in {
                  T: 1,
                  Q: 1
                } || (t5.qx = t5.qy = null), e5[0]) {
                  case "M":
                    t5.X = e5[1], t5.Y = e5[2];
                    break;
                  case "A":
                    e5 = ["C"].concat(E.apply(0, [t5.x, t5.y].concat(e5.slice(1))));
                    break;
                  case "S":
                    n4 = "C" === r5 || "S" === r5 ? (o4 = 2 * t5.x - t5.bx, 2 * t5.y - t5.by) : (o4 = t5.x, t5.y), e5 = ["C", o4, n4].concat(e5.slice(1));
                    break;
                  case "T":
                    "Q" === r5 || "T" === r5 ? (t5.qx = 2 * t5.x - t5.qx, t5.qy = 2 * t5.y - t5.qy) : (t5.qx = t5.x, t5.qy = t5.y), e5 = ["C"].concat(M(t5.x, t5.y, t5.qx, t5.qy, e5[1], e5[2]));
                    break;
                  case "Q":
                    t5.qx = e5[1], t5.qy = e5[2], e5 = ["C"].concat(M(t5.x, t5.y, e5[1], e5[2], e5[3], e5[4]));
                    break;
                  case "L":
                    e5 = ["C"].concat(j(t5.x, t5.y, e5[1], e5[2]));
                    break;
                  case "H":
                    e5 = ["C"].concat(j(t5.x, t5.y, e5[1], t5.y));
                    break;
                  case "V":
                    e5 = ["C"].concat(j(t5.x, t5.y, t5.x, e5[1]));
                    break;
                  case "Z":
                    e5 = ["C"].concat(j(t5.x, t5.y, t5.X, t5.Y));
                }
                return e5;
              }
              function o3(e5, t5) {
                if (7 < e5[t5].length) {
                  e5[t5].shift();
                  for (var r5 = e5[t5]; r5.length; ) c2[t5] = "A", a2 && (d2[t5] = "A"), e5.splice(t5++, 0, ["C"].concat(r5.splice(0, 6)));
                  e5.splice(t5, 1), s4 = Math.max(i3.length, a2 && a2.length || 0);
                }
              }
              function n3(e5, t5, r5, o4, n4) {
                e5 && t5 && "M" === e5[n4][0] && "M" !== t5[n4][0] && (t5.splice(n4, 0, ["M", o4.x, o4.y]), r5.bx = 0, r5.by = 0, r5.x = e5[n4][1], r5.y = e5[n4][2], s4 = Math.max(i3.length, a2 && a2.length || 0));
              }
              var s4, i3 = b(e4), a2 = t4 && b(t4), l2 = {
                x: 0,
                y: 0,
                bx: 0,
                by: 0,
                X: 0,
                Y: 0,
                qx: null,
                qy: null
              }, u3 = {
                x: 0,
                y: 0,
                bx: 0,
                by: 0,
                X: 0,
                Y: 0,
                qx: null,
                qy: null
              }, c2 = [], d2 = [], h2 = "", f2 = "";
              s4 = Math.max(i3.length, a2 && a2.length || 0);
              for (var p = 0; p < s4; p++) {
                "C" !== (h2 = i3[p] ? i3[p][0] : h2) && (c2[p] = h2, p && (f2 = c2[p - 1])), i3[p] = r4(i3[p], l2, f2), "A" !== c2[p] && "C" === h2 && (c2[p] = "C"), o3(i3, p), a2 && ("C" !== (h2 = a2[p] ? a2[p][0] : h2) && (d2[p] = h2, p && (f2 = d2[p - 1])), a2[p] = r4(a2[p], u3, f2), "A" !== d2[p] && "C" === h2 && (d2[p] = "C"), o3(a2, p)), n3(i3, a2, l2, u3, p), n3(a2, i3, u3, l2, p);
                var m = i3[p], y2 = a2 && a2[p], g = m.length, v2 = a2 && y2.length;
                l2.x = m[g - 2], l2.y = m[g - 1], l2.bx = parseFloat(m[g - 4]) || l2.x, l2.by = parseFloat(m[g - 3]) || l2.y, u3.bx = a2 && (parseFloat(y2[v2 - 4]) || u3.x), u3.by = a2 && (parseFloat(y2[v2 - 3]) || u3.y), u3.x = a2 && y2[v2 - 2], u3.y = a2 && y2[v2 - 1];
              }
              return a2 ? [i3, a2] : i3;
            }(e3)).length; u2 < c; u2++) {
              if ("M" === (s3 = e3[u2])[0]) o2 = +s3[1], n2 = +s3[2];
              else {
                if (t3 < l + (i2 = h(o2, n2, s3[1], s3[2], s3[3], s3[4], s3[5], s3[6])) && !r3) return {
                  x: (a = h(o2, n2, s3[1], s3[2], s3[3], s3[4], s3[5], s3[6], t3 - l)).x,
                  y: a.y,
                  alpha: a.alpha
                };
                l += i2, o2 = +s3[5], n2 = +s3[6];
              }
              s3.shift();
            }
            return a = (a = r3 ? l : d(o2, n2, s3[0], s3[1], s3[2], s3[3], s3[4], s3[5], 1)).alpha ? {
              x: a.x,
              y: a.y,
              alpha: a.alpha
            } : a;
          }
          function b(e3) {
            var t3 = [], r3 = 0, o2 = 0, n2 = 0, s3 = 0, i2 = 0;
            if (e3) {
              "M" === e3[0][0] && (n2 = r3 = +e3[0][1], s3 = o2 = +e3[0][2], i2++, t3[0] = ["M", r3, o2]);
              for (var a, l, u2 = 3 === e3.length && "M" === e3[0][0] && "R" === e3[1][0].toUpperCase() && "Z" === e3[2][0].toUpperCase(), c = i2, d2 = e3.length; c < d2; c++) {
                if (t3.push(a = []), (l = e3[c])[0] !== l[0].toUpperCase()) switch (a[0] = l[0].toUpperCase(), a[0]) {
                  case "A":
                    a[1] = l[1], a[2] = l[2], a[3] = l[3], a[4] = l[4], a[5] = l[5], a[6] = +(l[6] + r3), a[7] = +(l[7] + o2);
                    break;
                  case "V":
                    a[1] = +l[1] + o2;
                    break;
                  case "H":
                    a[1] = +l[1] + r3;
                    break;
                  case "R":
                    for (var h2, f2 = 2, p = (h2 = [r3, o2].concat(l.slice(1))).length; f2 < p; f2++) h2[f2] = +h2[f2] + r3, h2[++f2] = +h2[f2] + o2;
                    t3.pop(), t3 = t3.concat(_(h2, u2));
                    break;
                  case "M":
                    n2 = +l[1] + r3, s3 = +l[2] + o2;
                    break;
                  default:
                    for (var m = 1, y2 = l.length; m < y2; m++) a[m] = +l[m] + (m % 2 ? r3 : o2);
                }
                else if ("R" === l[0]) h2 = [r3, o2].concat(l.slice(1)), t3.pop(), t3 = t3.concat(_(h2, u2)), a = ["R"].concat(l.slice(-2));
                else for (var g = 0, v2 = l.length; g < v2; g++) a[g] = l[g];
                switch (a[0]) {
                  case "Z":
                    r3 = n2, o2 = s3;
                    break;
                  case "H":
                    r3 = a[1];
                    break;
                  case "V":
                    o2 = a[1];
                    break;
                  case "M":
                    n2 = a[a.length - 2], s3 = a[a.length - 1];
                    break;
                  default:
                    r3 = a[a.length - 2], o2 = a[a.length - 1];
                }
              }
            }
            return t3;
          }
          function E(e3, t3, r3, o2, n2, s3, i2, a, l, u2) {
            function c(e4, t4, r4) {
              return {
                x: e4 * Math.cos(r4) - t4 * Math.sin(r4),
                y: e4 * Math.sin(r4) + t4 * Math.cos(r4)
              };
            }
            var d2, h2 = Math.PI, f2 = 120 * h2 / 180, p = h2 / 180 * (+n2 || 0), m = [], y2 = (u2 ? (x2 = u2[0], d2 = u2[1], _2 = u2[2], j2 = u2[3]) : (e3 = (v2 = c(e3, t3, -p)).x, t3 = v2.y, 1 < (y2 = (g = (e3 - (a = (v2 = c(a, l, -p)).x)) / 2) * g / (r3 * r3) + (v2 = (t3 - (l = v2.y)) / 2) * v2 / (o2 * o2)) && (r3 *= y2 = Math.sqrt(y2), o2 *= y2), y2 = r3 * r3, b2 = o2 * o2, _2 = (s3 = (s3 === i2 ? -1 : 1) * Math.sqrt(Math.abs((y2 * b2 - y2 * v2 * v2 - b2 * g * g) / (y2 * v2 * v2 + b2 * g * g)))) * r3 * v2 / o2 + (e3 + a) / 2, j2 = s3 * -o2 * g / r3 + (t3 + l) / 2, x2 = Math.asin(((t3 - j2) / o2).toFixed(9)), d2 = Math.asin(((l - j2) / o2).toFixed(9)), (x2 = e3 < _2 ? h2 - x2 : x2) < 0 && (x2 = 2 * h2 + x2), (d2 = a < _2 ? h2 - d2 : d2) < 0 && (d2 = 2 * h2 + d2), i2 && d2 < x2 && (x2 -= 2 * h2), !i2 && x2 < d2 && (d2 -= 2 * h2)), d2 - x2), g = (Math.abs(y2) > f2 && (b2 = d2, v2 = a, s3 = l, d2 = x2 + f2 * (i2 && x2 < d2 ? 1 : -1), m = E(a = _2 + r3 * Math.cos(d2), l = j2 + o2 * Math.sin(d2), r3, o2, n2, 0, i2, v2, s3, [d2, b2, _2, j2])), y2 = d2 - x2, Math.cos(x2)), h2 = Math.sin(x2), f2 = Math.cos(d2), n2 = Math.sin(d2), i2 = Math.tan(y2 / 4), v2 = 4 / 3 * r3 * i2, s3 = 4 / 3 * o2 * i2, b2 = [e3, t3], _2 = [e3 + v2 * h2, t3 - s3 * g], j2 = [a + v2 * n2, l - s3 * f2], x2 = [a, l];
            if (_2[0] = 2 * b2[0] - _2[0], _2[1] = 2 * b2[1] - _2[1], u2) return [_2, j2, x2].concat(m);
            for (var w2 = [], S2 = 0, T2 = (m = [_2, j2, x2].concat(m).join().split(",")).length; S2 < T2; S2++) w2[S2] = S2 % 2 ? c(m[S2 - 1], m[S2], p).y : c(m[S2], m[S2 + 1], p).x;
            return w2;
          }
          function _(e3, t3) {
            for (var r3 = [], o2 = 0, n2 = e3.length; o2 < n2 - 2 * !t3; o2 += 2) {
              var s3 = [{
                x: +e3[o2 - 2],
                y: +e3[o2 - 1]
              }, {
                x: +e3[o2],
                y: +e3[o2 + 1]
              }, {
                x: +e3[o2 + 2],
                y: +e3[o2 + 3]
              }, {
                x: +e3[o2 + 4],
                y: +e3[o2 + 5]
              }];
              t3 ? o2 ? n2 - 4 === o2 ? s3[3] = {
                x: +e3[0],
                y: +e3[1]
              } : n2 - 2 === o2 && (s3[2] = {
                x: +e3[0],
                y: +e3[1]
              }, s3[3] = {
                x: +e3[2],
                y: +e3[3]
              }) : s3[0] = {
                x: +e3[n2 - 2],
                y: +e3[n2 - 1]
              } : n2 - 4 === o2 ? s3[3] = s3[2] : o2 || (s3[0] = {
                x: +e3[o2],
                y: +e3[o2 + 1]
              }), r3.push(["C", (-s3[0].x + 6 * s3[1].x + s3[2].x) / 6, (-s3[0].y + 6 * s3[1].y + s3[2].y) / 6, (s3[1].x + 6 * s3[2].x - s3[3].x) / 6, (s3[1].y + 6 * s3[2].y - s3[3].y) / 6, s3[2].x, s3[2].y]);
            }
            return r3;
          }
          function j(e3, t3, r3, o2) {
            return [e3, t3, r3, o2, r3, o2];
          }
          function M(e3, t3, r3, o2, n2, s3) {
            return [1 / 3 * e3 + 2 / 3 * r3, 1 / 3 * t3 + 2 / 3 * o2, 1 / 3 * n2 + 2 / 3 * r3, 1 / 3 * s3 + 2 / 3 * o2, n2, s3];
          }
          function f(e3, t3, r3, o2, n2, s3, i2, a, l) {
            for (var u2 = (l = 1 < (l = null == l ? 1 : l) ? 1 : l < 0 ? 0 : l) / 2, c = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816], d2 = 0, h2 = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472], f2 = 0; f2 < 12; f2++) {
              var p = u2 * c[f2] + u2, m = y(p, e3, r3, n2, i2), p = y(p, t3, o2, s3, a);
              d2 += h2[f2] * Math.sqrt(m * m + p * p);
            }
            return u2 * d2;
          }
          function y(e3, t3, r3, o2, n2) {
            return e3 * (e3 * (-3 * t3 + 9 * r3 - 9 * o2 + 3 * n2) + 6 * t3 - 12 * r3 + 6 * o2) - 3 * t3 + 3 * r3;
          }
          n.default.Font = function() {
            function t3(e4) {
              if (!(this instanceof t3)) throw new TypeError("Cannot call a class as a function");
              this.parent = e4, this.cache = {}, this.font = void 0;
            }
            var e3, r3, o2;
            return e3 = t3, (r3 = [{
              key: "textBounds",
              value: function(e4) {
                var t4 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, r4 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0, o3 = 3 < arguments.length ? arguments[3] : void 0, n2 = 4 < arguments.length ? arguments[4] : void 0, s3 = n2 && n2.renderer && n2.renderer._pInst || this.parent, i2 = s3._renderer.drawingContext, o3 = (i2.textAlign || v.LEFT, i2.textBaseline || v.BASELINE, o3 || s3._renderer._textSize);
                if (!g) {
                  for (var a = [], l = [], u2 = [], c = (u2[0] = [], []), d2 = this._scale(o3), h2 = s3._renderer.textLeading(), f2 = 0, p = (this.font.forEachGlyph(e4, t4, r4, o3, n2, function(e5, t5, r5, o4) {
                    var n3 = e5.getMetrics();
                    0 === e5.index ? u2[f2 += 1] = [] : (u2[f2].push(t5 + n3.xMin * d2), u2[f2].push(t5 + n3.xMax * d2), c.push(r5 + f2 * h2 + -n3.yMin * d2), c.push(r5 + f2 * h2 + -n3.yMax * d2));
                  }), 0 < u2[f2].length && (a[f2] = Math.min.apply(null, u2[f2]), l[f2] = Math.max.apply(null, u2[f2])), 0), m = 0; m <= f2; m++) {
                    a[m] = Math.min.apply(null, u2[m]), l[m] = Math.max.apply(null, u2[m]);
                    var y2 = l[m] - a[m];
                    p < y2 && (p = y2);
                  }
                  var i2 = Math.min.apply(null, a), g = {
                    x: i2,
                    y: r4 = Math.min.apply(null, c),
                    h: Math.max.apply(null, c) - r4,
                    w: p,
                    advance: i2 - t4
                  }, o3 = this._handleAlignment(s3._renderer, e4, g.x, g.y, g.w + g.advance);
                  g.x = o3.x, g.y = o3.y;
                }
                return g;
              }
            }, {
              key: "textToPoints",
              value: function(e4, t4, r4, o3, n2) {
                var s3, i2 = t4, a = [], l = this.parent, u2 = e4.split(/\r?\n|\r|\n/g);
                o3 = o3 || this.parent._renderer._textSize;
                for (var c, d2, h2, f2 = 0; f2 < u2.length; f2++) {
                  var p = 0;
                  t4 = i2;
                  for (var m = (m = u2[f2]).replace("	", "  "), y2 = this._getGlyphs(m), g = 0; g < y2.length; g++) {
                    if (d2 = m, !((h2 = y2)[c = g].name && "space" === h2[c].name || d2.length === h2.length && " " === d2[c])) for (var v2 = function(e5) {
                      for (var t5, r5 = [], o4 = 0; o4 < e5.length; o4++) "M" === e5[o4].type && (t5 && r5.push(t5), t5 = []), t5.push(function(e6) {
                        var t6 = [e6.type];
                        "M" === e6.type || "L" === e6.type ? t6.push(e6.x, e6.y) : "C" === e6.type ? t6.push(e6.x1, e6.y1, e6.x2, e6.y2, e6.x, e6.y) : "Q" === e6.type && t6.push(e6.x1, e6.y1, e6.x, e6.y);
                        return t6;
                      }(e5[o4]));
                      return r5.push(t5), r5;
                    }(y2[g].getPath(t4, r4, o3).commands), b2 = 0; b2 < v2.length; b2++) for (var _2 = function(e5, t5) {
                      for (var t5 = function(e6, t6) {
                        if ("object" !== x(e6)) e6 = t6;
                        else for (var r6 in t6) void 0 === e6[r6] && (e6[r6] = t6[r6]);
                        return e6;
                      }(t5, {
                        sampleFactor: 0.1,
                        simplifyThreshold: 0
                      }), r5 = T(e5, 0, 1), o4 = r5 / (r5 * t5.sampleFactor), n3 = [], s4 = 0; s4 < r5; s4 += o4) n3.push(T(e5, s4));
                      t5.simplifyThreshold && !function(e6) {
                        for (var t6 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, r6 = 0, o5 = e6.length - 1; 3 < e6.length && 0 <= o5; --o5) S(w(e6, o5 - 1), w(e6, o5), w(e6, o5 + 1), t6) && (e6.splice(o5 % e6.length, 1), r6++);
                      }(n3, t5.simplifyThreshold);
                      return n3;
                    }(v2[b2], n2), j2 = 0; j2 < _2.length; j2++) _2[j2].x += p, s3 = this._handleAlignment(l._renderer, m, _2[j2].x, _2[j2].y), _2[j2].x = s3.x, _2[j2].y = s3.y, a.push(_2[j2]);
                    p += y2[g].advanceWidth * this._scale(o3);
                  }
                  r4 += this.parent._renderer._textLeading;
                }
                return a;
              }
            }, {
              key: "_getGlyphs",
              value: function(e4) {
                return this.font.stringToGlyphs(e4);
              }
            }, {
              key: "_getPath",
              value: function(e4, t4, r4, o3) {
                var n2 = (o3 && o3.renderer && o3.renderer._pInst || this.parent)._renderer, t4 = this._handleAlignment(n2, e4, t4, r4);
                return this.font.getPath(e4, t4.x, t4.y, n2._textSize, o3);
              }
            }, {
              key: "_getPathData",
              value: function(e4, t4, r4, o3) {
                var n2 = 3;
                return "string" == typeof e4 && 2 < arguments.length ? e4 = this._getPath(e4, t4, r4, o3) : "object" === x(t4) && (o3 = t4), o3 && "number" == typeof o3.decimals && (n2 = o3.decimals), e4.toPathData(n2);
              }
            }, {
              key: "_getSVG",
              value: function(e4, t4, r4, o3) {
                var n2 = 3;
                return "string" == typeof e4 && 2 < arguments.length ? e4 = this._getPath(e4, t4, r4, o3) : "object" === x(t4) && (o3 = t4), o3 && ("number" == typeof o3.decimals && (n2 = o3.decimals), "number" == typeof o3.strokeWidth && (e4.strokeWidth = o3.strokeWidth), void 0 !== o3.fill && (e4.fill = o3.fill), void 0 !== o3.stroke && (e4.stroke = o3.stroke)), e4.toSVG(n2);
              }
            }, {
              key: "_renderPath",
              value: function(e4, t4, r4, o3) {
                var n2 = o3 && o3.renderer || this.parent._renderer, s3 = n2.drawingContext, e4 = ("object" === x(e4) && e4.commands ? e4 : this._getPath(e4, t4, r4, o3)).commands, i2 = (n2._clipping || s3.beginPath(), true), t4 = false, r4 = void 0;
                try {
                  for (var a, l = e4[Symbol.iterator](); !(i2 = (a = l.next()).done); i2 = true) {
                    var u2 = a.value;
                    "M" === u2.type ? s3.moveTo(u2.x, u2.y) : "L" === u2.type ? s3.lineTo(u2.x, u2.y) : "C" === u2.type ? s3.bezierCurveTo(u2.x1, u2.y1, u2.x2, u2.y2, u2.x, u2.y) : "Q" === u2.type ? s3.quadraticCurveTo(u2.x1, u2.y1, u2.x, u2.y) : "Z" === u2.type && s3.closePath();
                  }
                } catch (e5) {
                  t4 = true, r4 = e5;
                } finally {
                  try {
                    i2 || null == l.return || l.return();
                  } finally {
                    if (t4) throw r4;
                  }
                }
                return n2._doStroke && n2._strokeSet && !n2._clipping && s3.stroke(), n2._doFill && !n2._clipping && (n2._fillSet || n2._setFill(v._DEFAULT_TEXT_FILL), s3.fill()), this;
              }
            }, {
              key: "_textWidth",
              value: function(e4, t4) {
                return this.font.getAdvanceWidth(e4, t4);
              }
            }, {
              key: "_textAscent",
              value: function(e4) {
                return this.font.ascender * this._scale(e4);
              }
            }, {
              key: "_textDescent",
              value: function(e4) {
                return -this.font.descender * this._scale(e4);
              }
            }, {
              key: "_scale",
              value: function(e4) {
                return 1 / this.font.unitsPerEm * (e4 || this.parent._renderer._textSize);
              }
            }, {
              key: "_handleAlignment",
              value: function(e4, t4, r4, o3, n2) {
                var s3 = e4._textSize;
                switch (void 0 === n2 && (n2 = this._textWidth(t4, s3)), e4._textAlign) {
                  case v.CENTER:
                    r4 -= n2 / 2;
                    break;
                  case v.RIGHT:
                    r4 -= n2;
                }
                switch (e4._textBaseline) {
                  case v.TOP:
                    o3 += this._textAscent(s3);
                    break;
                  case v.CENTER:
                    o3 += this._textAscent(s3) / 2;
                    break;
                  case v.BOTTOM:
                    o3 -= this._textDescent(s3);
                }
                return {
                  x: r4,
                  y: o3
                };
              }
            }]) && s2(e3.prototype, r3), o2 && s2(e3, o2), t3;
          }();
          e2 = n.default;
          r2.default = e2;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.fill": 156,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.array.splice": 171,
          "core-js/modules/es.function.name": 174,
          "core-js/modules/es.number.to-fixed": 182,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        322: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.array-buffer.constructor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.array-buffer.constructor"), e2("core-js/modules/es.object.to-string"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          e2.default.prototype.append = function(e3, t3) {
            return e3.push(t3), e3;
          }, e2.default.prototype.arrayCopy = function(e3, t3, r3, o, n) {
            var s2, i;
            e3 = void 0 !== n ? (i = Math.min(n, e3.length), s2 = o, e3.slice(t3, i + t3)) : (i = void 0 !== r3 ? (i = r3, Math.min(i, e3.length)) : e3.length, r3 = t3, e3.slice(s2 = 0, i)), Array.prototype.splice.apply(r3, [s2, i].concat(e3));
          }, e2.default.prototype.concat = function(e3, t3) {
            return e3.concat(t3);
          }, e2.default.prototype.reverse = function(e3) {
            return e3.reverse();
          }, e2.default.prototype.shorten = function(e3) {
            return e3.pop(), e3;
          }, e2.default.prototype.shuffle = function(e3, t3) {
            for (var r3, o, n = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(e3), s2 = (e3 = t3 || n ? e3 : e3.slice()).length; 1 < s2; ) r3 = this.random(0, 1) * s2 | 0, o = e3[--s2], e3[s2] = e3[r3], e3[r3] = o;
            return e3;
          }, e2.default.prototype.sort = function(e3, t3) {
            var r3 = t3 ? e3.slice(0, Math.min(t3, e3.length)) : e3, t3 = t3 ? e3.slice(Math.min(t3, e3.length)) : [];
            return (r3 = "string" == typeof r3[0] ? r3.sort() : r3.sort(function(e4, t4) {
              return e4 - t4;
            })).concat(t3);
          }, e2.default.prototype.splice = function(e3, t3, r3) {
            return Array.prototype.splice.apply(e3, [r3, 0].concat(t3)), e3;
          }, e2.default.prototype.subset = function(e3, t3, r3) {
            return void 0 !== r3 ? e3.slice(t3, t3 + r3) : e3.slice(t3, e3.length);
          };
          e2 = e2.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array-buffer.constructor": 152,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.array.splice": 171,
          "core-js/modules/es.object.to-string": 190
        }],
        323: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.map"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.repeat"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.repeat"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var o = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          o.default.prototype.float = function(e3) {
            return e3 instanceof Array ? e3.map(parseFloat) : parseFloat(e3);
          }, o.default.prototype.int = function(e3) {
            var t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 10;
            return e3 === 1 / 0 || "Infinity" === e3 ? 1 / 0 : e3 === -1 / 0 || "-Infinity" === e3 ? -1 / 0 : "string" == typeof e3 ? parseInt(e3, t3) : "number" == typeof e3 ? 0 | e3 : "boolean" == typeof e3 ? e3 ? 1 : 0 : e3 instanceof Array ? e3.map(function(e4) {
              return o.default.prototype.int(e4, t3);
            }) : void 0;
          }, o.default.prototype.str = function(e3) {
            return e3 instanceof Array ? e3.map(o.default.prototype.str) : String(e3);
          }, o.default.prototype.boolean = function(e3) {
            return "number" == typeof e3 ? 0 !== e3 : "string" == typeof e3 ? "true" === e3.toLowerCase() : "boolean" == typeof e3 ? e3 : e3 instanceof Array ? e3.map(o.default.prototype.boolean) : void 0;
          }, o.default.prototype.byte = function(e3) {
            e3 = o.default.prototype.int(e3, 10);
            return "number" == typeof e3 ? (e3 + 128) % 256 - 128 : e3 instanceof Array ? e3.map(o.default.prototype.byte) : void 0;
          }, o.default.prototype.char = function(e3) {
            return "number" != typeof e3 || isNaN(e3) ? e3 instanceof Array ? e3.map(o.default.prototype.char) : "string" == typeof e3 ? o.default.prototype.char(parseInt(e3, 10)) : void 0 : String.fromCharCode(e3);
          }, o.default.prototype.unchar = function(e3) {
            return "string" == typeof e3 && 1 === e3.length ? e3.charCodeAt(0) : e3 instanceof Array ? e3.map(o.default.prototype.unchar) : void 0;
          }, o.default.prototype.hex = function(e3, t3) {
            if (t3 = null == t3 ? 8 : t3, e3 instanceof Array) return e3.map(function(e4) {
              return o.default.prototype.hex(e4, t3);
            });
            if (e3 === 1 / 0 || e3 === -1 / 0) return (e3 === 1 / 0 ? "F" : "0").repeat(t3);
            if ("number" == typeof e3) {
              e3 < 0 && (e3 = 4294967295 + e3 + 1);
              for (var r3 = Number(e3).toString(16).toUpperCase(); r3.length < t3; ) r3 = "0".concat(r3);
              return r3 = r3.length >= t3 ? r3.substring(r3.length - t3, r3.length) : r3;
            }
          }, o.default.prototype.unhex = function(e3) {
            return e3 instanceof Array ? e3.map(o.default.prototype.unhex) : parseInt("0x".concat(e3), 16);
          };
          e2 = o.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.number.constructor": 179,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.repeat": 203
        }],
        324: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.number.to-fixed"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.constructor"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.match"), e2("core-js/modules/es.string.pad-start"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.string.trim"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.number.to-fixed"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.constructor"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.match"), e2("core-js/modules/es.string.pad-start"), e2("core-js/modules/es.string.replace"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.string.trim"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var s2 = (u2 = e2("../core/main")) && u2.__esModule ? u2 : {
            default: u2
          };
          function a(e3, t3) {
            return function(e4) {
              if (Array.isArray(e4)) return e4;
            }(e3) || function(e4, t4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) {
                var r3 = [], o2 = true, n2 = false, s3 = void 0;
                try {
                  for (var i2, a2 = e4[Symbol.iterator](); !(o2 = (i2 = a2.next()).done) && (r3.push(i2.value), !t4 || r3.length !== t4); o2 = true) ;
                } catch (e5) {
                  n2 = true, s3 = e5;
                } finally {
                  try {
                    o2 || null == a2.return || a2.return();
                  } finally {
                    if (n2) throw s3;
                  }
                }
                return r3;
              }
            }(e3, t3) || function() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }();
          }
          function o(e3, t3, r3) {
            var o2, n2 = e3 < 0, s3 = a((e3 = Math.abs(e3)).toString().split("."), 2), i2 = s3[0], s3 = s3[1];
            return void 0 === r3 ? (i2 = i2.padStart(t3, "0"), o2 = s3 ? i2 + "." + s3 : i2, n2 ? "-" + o2 : o2) : (i2 = (o2 = a(e3.toFixed(r3).toString().split("."), 2))[0], s3 = o2[1], i2 = i2.padStart(t3, "0"), e3 = void 0 === s3 ? i2 : i2 + "." + s3, n2 ? "-" + e3 : e3);
          }
          function n(e3, t3) {
            var r3 = (e3 = e3.toString()).indexOf("."), o2 = -1 !== r3 ? e3.substring(r3) : "", e3 = (e3 = -1 !== r3 ? e3.substring(0, r3) : e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            if (0 === t3) o2 = "";
            else if (void 0 !== t3) if (t3 > o2.length) for (var n2 = t3 - (o2 += -1 === r3 ? "." : "").length + 1, s3 = 0; s3 < n2; s3++) o2 += "0";
            else o2 = o2.substring(0, t3 + 1);
            return e3 + o2;
          }
          function i(e3) {
            return 0 < parseFloat(e3) ? "+".concat(e3.toString()) : e3.toString();
          }
          function l(e3) {
            return 0 <= parseFloat(e3) ? " ".concat(e3.toString()) : e3.toString();
          }
          e2("../core/friendly_errors/validate_params"), e2("../core/friendly_errors/file_errors"), e2("../core/friendly_errors/fes_core"), s2.default.prototype.join = function(e3, t3) {
            return s2.default._validateParameters("join", arguments), e3.join(t3);
          }, s2.default.prototype.match = function(e3, t3) {
            return s2.default._validateParameters("match", arguments), e3.match(t3);
          }, s2.default.prototype.matchAll = function(e3, t3) {
            s2.default._validateParameters("matchAll", arguments);
            for (var r3 = new RegExp(t3, "g"), o2 = r3.exec(e3), n2 = []; null !== o2; ) n2.push(o2), o2 = r3.exec(e3);
            return n2;
          }, s2.default.prototype.nf = function(e3, t3, r3) {
            return s2.default._validateParameters("nf", arguments), e3 instanceof Array ? e3.map(function(e4) {
              return o(e4, t3, r3);
            }) : "[object Arguments]" === Object.prototype.toString.call(e3) ? 3 === e3.length ? this.nf(e3[0], e3[1], e3[2]) : 2 === e3.length ? this.nf(e3[0], e3[1]) : this.nf(e3[0]) : o(e3, t3, r3);
          }, s2.default.prototype.nfc = function(e3, t3) {
            return s2.default._validateParameters("nfc", arguments), e3 instanceof Array ? e3.map(function(e4) {
              return n(e4, t3);
            }) : n(e3, t3);
          }, s2.default.prototype.nfp = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            s2.default._validateParameters("nfp", t3);
            var o2 = s2.default.prototype.nf.apply(this, t3);
            return o2 instanceof Array ? o2.map(i) : i(o2);
          }, s2.default.prototype.nfs = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            s2.default._validateParameters("nfs", t3);
            var o2 = s2.default.prototype.nf.apply(this, t3);
            return o2 instanceof Array ? o2.map(l) : l(o2);
          }, s2.default.prototype.split = function(e3, t3) {
            return s2.default._validateParameters("split", arguments), e3.split(t3);
          }, s2.default.prototype.splitTokens = function(e3, t3) {
            var r3, o2;
            return s2.default._validateParameters("splitTokens", arguments), o2 = void 0 !== t3 ? (o2 = /\]/g.exec(t3 = t3), (r3 = /\[/g.exec(t3)) && o2 ? (t3 = t3.slice(0, o2.index) + t3.slice(o2.index + 1), r3 = /\[/g.exec(t3), t3 = t3.slice(0, r3.index) + t3.slice(r3.index + 1), new RegExp("[\\[".concat(t3, "\\]]"), "g")) : o2 ? (t3 = t3.slice(0, o2.index) + t3.slice(o2.index + 1), new RegExp("[".concat(t3, "\\]]"), "g")) : r3 ? (t3 = t3.slice(0, r3.index) + t3.slice(r3.index + 1), new RegExp("[".concat(t3, "\\[]"), "g")) : new RegExp("[".concat(t3, "]"), "g")) : /\s/g, e3.split(o2).filter(function(e4) {
              return e4;
            });
          }, s2.default.prototype.trim = function(e3) {
            return s2.default._validateParameters("trim", arguments), e3 instanceof Array ? e3.map(this.trim) : e3.trim();
          };
          var u2 = s2.default;
          r2.default = u2;
        }, {
          "../core/friendly_errors/fes_core": 274,
          "../core/friendly_errors/file_errors": 275,
          "../core/friendly_errors/validate_params": 278,
          "../core/main": 283,
          "core-js/modules/es.array.filter": 157,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.number.to-fixed": 182,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.constructor": 194,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.match": 201,
          "core-js/modules/es.string.pad-start": 202,
          "core-js/modules/es.string.replace": 204,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.string.trim": 209,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        325: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          e2.default.prototype.day = function() {
            return (/* @__PURE__ */ new Date()).getDate();
          }, e2.default.prototype.hour = function() {
            return (/* @__PURE__ */ new Date()).getHours();
          }, e2.default.prototype.minute = function() {
            return (/* @__PURE__ */ new Date()).getMinutes();
          }, e2.default.prototype.millis = function() {
            return -1 === this._millisStart ? 0 : window.performance.now() - this._millisStart;
          }, e2.default.prototype.month = function() {
            return (/* @__PURE__ */ new Date()).getMonth() + 1;
          }, e2.default.prototype.second = function() {
            return (/* @__PURE__ */ new Date()).getSeconds();
          }, e2.default.prototype.year = function() {
            return (/* @__PURE__ */ new Date()).getFullYear();
          };
          e2 = e2.default;
          r2.default = e2;
        }, {
          "../core/main": 283
        }],
        326: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.math.hypot"), e2("core-js/modules/es.math.sign"), e2("core-js/modules/es.number.to-fixed"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.math.hypot"), e2("core-js/modules/es.math.sign"), e2("core-js/modules/es.number.to-fixed"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var S = (n = e2("../core/main")) && n.__esModule ? n : {
            default: n
          }, j = (e2("./p5.Geometry"), function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s2;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r3, s2) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants")));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          S.default.prototype.beginGeometry = function() {
            return this._renderer.beginGeometry();
          }, S.default.prototype.endGeometry = function() {
            return this._renderer.endGeometry();
          }, S.default.prototype.buildGeometry = function(e3) {
            return this._renderer.buildGeometry(e3);
          }, S.default.prototype.freeGeometry = function(e3) {
            this._renderer._freeBuffers(e3.gid);
          }, S.default.prototype.plane = function() {
            var e3, t3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 50, r3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : t3, o2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1, n2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 1, s2 = (this._assert3d("plane"), S.default._validateParameters("plane", arguments), "plane|".concat(o2, "|").concat(n2));
            return this._renderer.geometryInHash(s2) || ((e3 = new S.default.Geometry(o2, n2, function() {
              for (var e4, t4, r4 = 0; r4 <= this.detailY; r4++) for (var o3 = r4 / this.detailY, n3 = 0; n3 <= this.detailX; n3++) e4 = n3 / this.detailX, t4 = new S.default.Vector(e4 - 0.5, o3 - 0.5, 0), this.vertices.push(t4), this.uvs.push(e4, o3);
            })).computeFaces().computeNormals(), o2 <= 1 && n2 <= 1 ? e3._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on plane objects with more than 1 detailX or 1 detailY"), this._renderer.createBuffers(s2, e3)), this._renderer.drawBuffersScaled(s2, t3, r3, 1), this;
          }, S.default.prototype.box = function(e3, t3, r3, o2, n2) {
            this._assert3d("box"), S.default._validateParameters("box", arguments), void 0 === e3 && (e3 = 50), void 0 === t3 && (t3 = e3), void 0 === r3 && (r3 = t3);
            var s2, i2 = this._renderer.attributes && this._renderer.attributes.perPixelLighting, i2 = (void 0 === n2 && (n2 = i2 ? 1 : 4), "box|".concat(o2 = void 0 === o2 ? i2 ? 1 : 4 : o2, "|").concat(n2));
            return this._renderer.geometryInHash(i2) || ((s2 = new S.default.Geometry(o2, n2, function() {
              var n3 = this;
              this.edges = [[0, 1], [1, 3], [3, 2], [6, 7], [8, 9], [9, 11], [14, 15], [16, 17], [17, 19], [18, 19], [20, 21], [22, 23]], [[0, 4, 2, 6], [1, 3, 5, 7], [0, 1, 4, 5], [2, 6, 3, 7], [0, 2, 1, 3], [4, 5, 6, 7]].forEach(function(e4, t4) {
                for (var t4 = 4 * t4, r4 = 0; r4 < 4; r4++) {
                  var o3 = e4[r4], o3 = new S.default.Vector((2 * (1 & o3) - 1) / 2, ((2 & o3) - 1) / 2, ((4 & o3) / 2 - 1) / 2);
                  n3.vertices.push(o3), n3.uvs.push(1 & r4, (2 & r4) / 2);
                }
                n3.faces.push([t4, 1 + t4, 2 + t4]), n3.faces.push([2 + t4, 1 + t4, 3 + t4]);
              });
            })).computeNormals(), o2 <= 4 && n2 <= 4 ? s2._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on box objects with more than 4 detailX or 4 detailY"), this._renderer.createBuffers(i2, s2)), this._renderer.drawBuffersScaled(i2, e3, t3, r3), this;
          }, S.default.prototype.sphere = function() {
            var e3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 50, t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 24, r3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 16;
            return this._assert3d("sphere"), S.default._validateParameters("sphere", arguments), this.ellipsoid(e3, e3, e3, t3, r3), this;
          };
          function l(e3, t3, r3, o2, n2, s2, i2) {
            e3 = e3 <= 0 ? 1 : e3, t3 = t3 < 0 ? 0 : t3, r3 = r3 <= 0 ? e3 : r3, o2 = o2 < 3 ? 3 : o2;
            for (var a2, l2, u2 = (s2 = void 0 === s2 || s2) ? -2 : 0, c = (n2 = n2 < 1 ? 1 : n2) + ((i2 = void 0 === i2 ? 0 !== t3 : i2) ? 2 : 0), d = Math.atan2(e3 - t3, r3), h = Math.sin(d), f = Math.cos(d), p = u2; p <= c; ++p) {
              var m = p / n2, y = r3 * m, g = void 0, g = p < 0 ? (m = y = 0, e3) : n2 < p ? (y = r3, m = 1, t3) : e3 + (t3 - e3) * m;
              for (-2 !== p && p !== n2 + 2 || (g = 0), y -= r3 / 2, a2 = 0; a2 < o2; ++a2) {
                var v = a2 / (o2 - 1), b = 2 * Math.PI * v, _ = Math.sin(b), b = Math.cos(b), j2 = (this.vertices.push(new S.default.Vector(_ * g, y, b * g)), void 0), j2 = p < 0 ? new S.default.Vector(0, -1, 0) : n2 < p && t3 ? new S.default.Vector(0, 1, 0) : new S.default.Vector(_ * f, h, b * f);
                this.vertexNormals.push(j2), this.uvs.push(v, m);
              }
            }
            var x = 0;
            if (s2) {
              for (l2 = 0; l2 < o2; ++l2) this.faces.push([x + l2, x + o2 + (l2 + 1) % o2, x + o2 + l2]);
              x += 2 * o2;
            }
            for (p = 0; p < n2; ++p) {
              for (a2 = 0; a2 < o2; ++a2) {
                var w = (a2 + 1) % o2;
                this.faces.push([x + a2, x + w, x + o2 + w]), this.faces.push([x + a2, x + o2 + w, x + o2 + a2]);
              }
              x += o2;
            }
            if (i2) for (x += o2, a2 = 0; a2 < o2; ++a2) this.faces.push([x + a2, x + (a2 + 1) % o2, x + o2]);
          }
          S.default.prototype.cylinder = function() {
            var e3, t3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 50, r3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : t3, o2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 24, n2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 1, s2 = !(4 < arguments.length && void 0 !== arguments[4]) || arguments[4], i2 = !(5 < arguments.length && void 0 !== arguments[5]) || arguments[5], a2 = (this._assert3d("cylinder"), S.default._validateParameters("cylinder", arguments), "cylinder|".concat(o2, "|").concat(n2, "|").concat(s2, "|").concat(i2));
            return this._renderer.geometryInHash(a2) || (e3 = new S.default.Geometry(o2, n2), l.call(e3, 1, 1, 1, o2, n2, s2, i2), o2 <= 24 && n2 <= 16 ? e3._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on cylinder objects with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(a2, e3)), this._renderer.drawBuffersScaled(a2, t3, r3, t3), this;
          }, S.default.prototype.cone = function() {
            var e3, t3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 50, r3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : t3, o2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 24, n2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 1, s2 = !(4 < arguments.length && void 0 !== arguments[4]) || arguments[4], i2 = (this._assert3d("cone"), S.default._validateParameters("cone", arguments), "cone|".concat(o2, "|").concat(n2, "|").concat(s2));
            return this._renderer.geometryInHash(i2) || (e3 = new S.default.Geometry(o2, n2), l.call(e3, 1, 0, 1, o2, n2, s2, false), o2 <= 24 && n2 <= 16 ? e3._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on cone objects with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(i2, e3)), this._renderer.drawBuffersScaled(i2, t3, r3, t3), this;
          }, S.default.prototype.ellipsoid = function() {
            var e3, t3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 50, r3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : t3, o2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : t3, n2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 24, s2 = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 16, i2 = (this._assert3d("ellipsoid"), S.default._validateParameters("ellipsoid", arguments), "ellipsoid|".concat(n2, "|").concat(s2));
            return this._renderer.geometryInHash(i2) || ((e3 = new S.default.Geometry(n2, s2, function() {
              for (var e4 = 0; e4 <= this.detailY; e4++) for (var t4 = e4 / this.detailY, r4 = Math.PI * t4 - Math.PI / 2, o3 = Math.cos(r4), n3 = Math.sin(r4), s3 = 0; s3 <= this.detailX; s3++) {
                var i3 = s3 / this.detailX, a2 = 2 * Math.PI * i3, l2 = Math.cos(a2), a2 = Math.sin(a2), a2 = new S.default.Vector(o3 * a2, n3, o3 * l2);
                this.vertices.push(a2), this.vertexNormals.push(a2), this.uvs.push(i3, t4);
              }
            })).computeFaces(), n2 <= 24 && s2 <= 24 ? e3._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on ellipsoids with more than 24 detailX or 24 detailY"), this._renderer.createBuffers(i2, e3)), this._renderer.drawBuffersScaled(i2, t3, r3, o2), this;
          }, S.default.prototype.torus = function(e3, t3, r3, o2) {
            if (this._assert3d("torus"), S.default._validateParameters("torus", arguments), void 0 === e3) e3 = 50;
            else if (!e3) return;
            if (void 0 === t3) t3 = 10;
            else if (!t3) return;
            void 0 === r3 && (r3 = 24), void 0 === o2 && (o2 = 16);
            var n2, d = (t3 / e3).toPrecision(4), t3 = "torus|".concat(d, "|").concat(r3, "|").concat(o2);
            return this._renderer.geometryInHash(t3) || ((n2 = new S.default.Geometry(r3, o2, function() {
              for (var e4 = 0; e4 <= this.detailY; e4++) for (var t4 = e4 / this.detailY, r4 = 2 * Math.PI * t4, o3 = Math.cos(r4), n3 = Math.sin(r4), s2 = 1 + d * o3, i2 = 0; i2 <= this.detailX; i2++) {
                var a2 = i2 / this.detailX, l2 = 2 * Math.PI * a2, u2 = Math.cos(l2), l2 = Math.sin(l2), c = new S.default.Vector(s2 * u2, s2 * l2, d * n3), u2 = new S.default.Vector(o3 * u2, o3 * l2, n3);
                this.vertices.push(c), this.vertexNormals.push(u2), this.uvs.push(a2, t4);
              }
            })).computeFaces(), r3 <= 24 && o2 <= 16 ? n2._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw strokes on torus object with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(t3, n2)), this._renderer.drawBuffersScaled(t3, e3, e3, e3), this;
          }, S.default.RendererGL.prototype.point = function(e3, t3) {
            var r3 = [];
            return r3.push(new S.default.Vector(e3, t3, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0)), this._drawPoints(r3, this.immediateMode.buffers.point), this;
          }, S.default.RendererGL.prototype.triangle = function(e3) {
            var t3 = e3[0], r3 = e3[1], o2 = e3[2], n2 = e3[3], s2 = e3[4], e3 = e3[5], i2 = (this.geometryInHash("tri") || ((i2 = new S.default.Geometry(1, 1, function() {
              var e4 = [];
              e4.push(new S.default.Vector(0, 0, 0)), e4.push(new S.default.Vector(1, 0, 0)), e4.push(new S.default.Vector(0, 1, 0)), this.edges = [[0, 1], [1, 2], [2, 0]], this.vertices = e4, this.faces = [[0, 1, 2]], this.uvs = [0, 0, 1, 0, 1, 1];
            }))._edgesToVertices(), i2.computeNormals(), this.createBuffers("tri", i2)), this.uModelMatrix.copy());
            try {
              var a2 = Math.sign(t3 * n2 - o2 * r3 + o2 * e3 - s2 * n2 + s2 * r3 - t3 * e3), l2 = new S.default.Matrix([o2 - t3, n2 - r3, 0, 0, s2 - t3, e3 - r3, 0, 0, 0, 0, a2, 0, t3, r3, 0, 1]).mult(this.uModelMatrix);
              this.uModelMatrix = l2, this.drawBuffers("tri");
            } finally {
              this.uModelMatrix = i2;
            }
            return this;
          }, S.default.RendererGL.prototype.ellipse = function(e3) {
            this.arc(e3[0], e3[1], e3[2], e3[3], 0, j.TWO_PI, j.OPEN, e3[4]);
          }, S.default.RendererGL.prototype.arc = function() {
            var e3, t3 = arguments.length <= 0 ? void 0 : arguments[0], r3 = arguments.length <= 1 ? void 0 : arguments[1], o2 = arguments.length <= 2 ? void 0 : arguments[2], n2 = arguments.length <= 3 ? void 0 : arguments[3], s2 = arguments.length <= 4 ? void 0 : arguments[4], i2 = arguments.length <= 5 ? void 0 : arguments[5], a2 = arguments.length <= 6 ? void 0 : arguments[6], l2 = (arguments.length <= 7 ? void 0 : arguments[7]) || 25, u2 = (Math.abs(i2 - s2) >= j.TWO_PI ? "".concat(c = "ellipse", "|") : "".concat(c = "arc", "|").concat(s2, "|").concat(i2, "|").concat(a2, "|")).concat(l2, "|"), c = (this.geometryInHash(u2) || ((e3 = new S.default.Geometry(l2, 1, function() {
              if (s2.toFixed(10) !== i2.toFixed(10)) {
                a2 !== j.PIE && void 0 !== a2 || (this.vertices.push(new S.default.Vector(0.5, 0.5, 0)), this.uvs.push([0.5, 0.5]));
                for (var e4 = 0; e4 <= l2; e4++) {
                  var t4 = (i2 - s2) * (e4 / l2) + s2, r4 = 0.5 + Math.cos(t4) / 2, t4 = 0.5 + Math.sin(t4) / 2;
                  this.vertices.push(new S.default.Vector(r4, t4, 0)), this.uvs.push([r4, t4]), e4 < l2 - 1 && (this.faces.push([0, e4 + 1, e4 + 2]), this.edges.push([e4 + 1, e4 + 2]));
                }
                switch (a2) {
                  case j.PIE:
                    this.faces.push([0, this.vertices.length - 2, this.vertices.length - 1]), this.edges.push([0, 1]), this.edges.push([this.vertices.length - 2, this.vertices.length - 1]), this.edges.push([0, this.vertices.length - 1]);
                    break;
                  case j.CHORD:
                    this.edges.push([0, 1]), this.edges.push([0, this.vertices.length - 1]);
                    break;
                  case j.OPEN:
                    this.edges.push([0, 1]);
                    break;
                  default:
                    this.faces.push([0, this.vertices.length - 2, this.vertices.length - 1]), this.edges.push([this.vertices.length - 2, this.vertices.length - 1]);
                }
              }
            })).computeNormals(), l2 <= 50 ? e3._edgesToVertices(e3) : this._doStroke && console.log("Cannot apply a stroke to an ".concat(c, " with more than 50 detail")), this.createBuffers(u2, e3)), this.uModelMatrix.copy());
            try {
              this.uModelMatrix.translate([t3, r3, 0]), this.uModelMatrix.scale(o2, n2, 1), this.drawBuffers(u2);
            } finally {
              this.uModelMatrix = c;
            }
            return this;
          }, S.default.RendererGL.prototype.rect = function(e3) {
            var t3 = e3[0], r3 = e3[1], o2 = e3[2], n2 = e3[3];
            if (void 0 === e3[4]) {
              var s2 = this._pInst._glAttributes.perPixelLighting, i2 = e3[4] || (s2 ? 1 : 24), a2 = e3[5] || (s2 ? 1 : 16), s2 = "rect|".concat(i2, "|").concat(a2), l2 = (this.geometryInHash(s2) || ((l2 = new S.default.Geometry(i2, a2, function() {
                for (var e4 = 0; e4 <= this.detailY; e4++) for (var t4 = e4 / this.detailY, r4 = 0; r4 <= this.detailX; r4++) {
                  var o3 = r4 / this.detailX, n3 = new S.default.Vector(o3, t4, 0);
                  this.vertices.push(n3), this.uvs.push(o3, t4);
                }
                0 < i2 && 0 < a2 && (this.edges = [[0, i2], [i2, (i2 + 1) * (a2 + 1) - 1], [(i2 + 1) * (a2 + 1) - 1, (i2 + 1) * a2], [(i2 + 1) * a2, 0]]);
              })).computeFaces().computeNormals()._edgesToVertices(), this.createBuffers(s2, l2)), this.uModelMatrix.copy());
              try {
                this.uModelMatrix.translate([t3, r3, 0]), this.uModelMatrix.scale(o2, n2, 1), this.drawBuffers(s2);
              } finally {
                this.uModelMatrix = l2;
              }
            } else {
              var s2 = e3[4], l2 = void 0 === e3[5] ? s2 : e3[5], u2 = void 0 === e3[6] ? l2 : e3[6], e3 = void 0 === e3[7] ? u2 : e3[7], c = o2, d = n2, h = ((c += t3) < t3 && (h = t3, t3 = c, c = h), (d += r3) < r3 && (h = r3, r3 = d, d = h), Math.min((c - t3) / 2, (d - r3) / 2)), f = (h < s2 && (s2 = h), h < l2 && (l2 = h), h < u2 && (u2 = h), h < e3 && (e3 = h), t3), p = r3, h = c, t3 = d, m = (this.beginShape(), 0 !== l2 ? (this.vertex(h - l2, p), this.quadraticVertex(h, p, h, p + l2)) : this.vertex(h, p), 0 !== u2 ? (this.vertex(h, t3 - u2), this.quadraticVertex(h, t3, h - u2, t3)) : this.vertex(h, t3), 0 !== e3 ? (this.vertex(f + e3, t3), this.quadraticVertex(f, t3, f, t3 - e3)) : this.vertex(f, t3), 0 !== s2 ? (this.vertex(f, p + s2), this.quadraticVertex(f, p, f + s2, p)) : this.vertex(f, p), !(this.immediateMode.geometry.uvs.length = 0)), r3 = false, c = void 0;
              try {
                for (var y, g = this.immediateMode.geometry.vertices[Symbol.iterator](); !(m = (y = g.next()).done); m = true) {
                  var v = y.value, b = (v.x - f) / o2, _ = (v.y - p) / n2;
                  this.immediateMode.geometry.uvs.push(b, _);
                }
              } catch (e4) {
                r3 = true, c = e4;
              } finally {
                try {
                  m || null == g.return || g.return();
                } finally {
                  if (r3) throw c;
                }
              }
              this.endShape(j.CLOSE);
            }
            return this;
          }, S.default.RendererGL.prototype.quad = function(i2, a2, l2, u2, c, d, h, f, p, m, y, g) {
            var e3 = 12 < arguments.length && void 0 !== arguments[12] ? arguments[12] : 2, t3 = 13 < arguments.length && void 0 !== arguments[13] ? arguments[13] : 2, r3 = "quad|".concat(i2, "|").concat(a2, "|").concat(l2, "|").concat(u2, "|").concat(c, "|").concat(d, "|").concat(h, "|").concat(f, "|").concat(p, "|").concat(m, "|").concat(y, "|").concat(g, "|").concat(e3, "|").concat(t3);
            if (!this.geometryInHash(r3)) {
              var o2 = new S.default.Geometry(e3, t3, function() {
                for (var e4 = 1 / (this.detailX - 1), t4 = 1 / (this.detailY - 1), r4 = 0; r4 < this.detailY; r4++) for (var o3 = 0; o3 < this.detailX; o3++) {
                  var n3 = o3 * e4, s3 = r4 * t4;
                  this.vertices.push(new S.default.Vector((1 - n3) * ((1 - s3) * i2 + s3 * m) + n3 * ((1 - s3) * u2 + s3 * h), (1 - n3) * ((1 - s3) * a2 + s3 * y) + n3 * ((1 - s3) * c + s3 * f), (1 - n3) * ((1 - s3) * l2 + s3 * g) + n3 * ((1 - s3) * d + s3 * p))), this.uvs.push([n3, s3]);
                }
              });
              o2.faces = [];
              for (var n2 = 0; n2 < t3 - 1; n2++) for (var s2 = 0; s2 < e3 - 1; s2++) {
                var v = s2 + n2 * e3, b = s2 + 1 + (n2 + 1) * e3, _ = s2 + (n2 + 1) * e3;
                o2.faces.push([v, s2 + 1 + n2 * e3, b]), o2.faces.push([v, b, _]);
              }
              o2.computeNormals();
              for (var j2 = [o2.edges.length = 0, 2, 3, 1], x = 0; x < j2.length; x++) o2.edges.push([j2[x], j2[(x + 1) % j2.length]]);
              o2._edgesToVertices(), this.createBuffers(r3, o2);
            }
            return this.drawBuffers(r3), this;
          }, S.default.RendererGL.prototype.bezier = function(e3, t3, r3, o2, n2, s2, i2, a2, l2, u2, c, d) {
            8 === arguments.length && (c = a2, u2 = i2, a2 = s2, i2 = n2, n2 = o2, o2 = r3, r3 = s2 = l2 = d = 0);
            var h = this._pInst._bezierDetail || 20;
            this.beginShape();
            for (var f = 0; f <= h; f++) {
              var p = Math.pow(1 - f / h, 3), m = f / h * 3 * Math.pow(1 - f / h, 2), y = 3 * Math.pow(f / h, 2) * (1 - f / h), g = Math.pow(f / h, 3);
              this.vertex(e3 * p + o2 * m + i2 * y + u2 * g, t3 * p + n2 * m + a2 * y + c * g, r3 * p + s2 * m + l2 * y + d * g);
            }
            return this.endShape(), this;
          }, S.default.RendererGL.prototype.curve = function(e3, t3, r3, o2, n2, s2, i2, a2, l2, u2, c, d) {
            8 === arguments.length && (u2 = i2, c = a2, i2 = n2, a2 = o2, n2 = o2 = r3, r3 = s2 = l2 = d = 0);
            var h = this._pInst._curveDetail;
            this.beginShape();
            for (var f = 0; f <= h; f++) {
              var p = 0.5 * Math.pow(f / h, 3), m = 0.5 * Math.pow(f / h, 2), y = f / h * 0.5;
              this.vertex(p * (3 * o2 - e3 - 3 * i2 + u2) + m * (2 * e3 - 5 * o2 + 4 * i2 - u2) + y * (-e3 + i2) + 2 * o2 * 0.5, p * (3 * n2 - t3 - 3 * a2 + c) + m * (2 * t3 - 5 * n2 + 4 * a2 - c) + y * (-t3 + a2) + 2 * n2 * 0.5, p * (3 * s2 - r3 - 3 * l2 + d) + m * (2 * r3 - 5 * s2 + 4 * l2 - d) + y * (-r3 + l2) + 2 * s2 * 0.5);
            }
            return this.endShape(), this;
          }, S.default.RendererGL.prototype.line = function() {
            return 6 === arguments.length ? (this.beginShape(j.LINES), this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 2 ? void 0 : arguments[2]), this.vertex(arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 4 ? void 0 : arguments[4], arguments.length <= 5 ? void 0 : arguments[5]), this.endShape()) : 4 === arguments.length && (this.beginShape(j.LINES), this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], 0), this.vertex(arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 3 ? void 0 : arguments[3], 0), this.endShape()), this;
          }, S.default.RendererGL.prototype.bezierVertex = function() {
            if (0 === this.immediateMode._bezierVertex.length) throw Error("vertex() must be used once before calling bezierVertex()");
            var e3, t3, r3, o2, n2, s2, i2 = [], a2 = [], l2 = arguments.length;
            if (0 === this._lookUpTableBezier.length || this._lutBezierDetail !== this._pInst._curveDetail) {
              this._lookUpTableBezier = [], this._lutBezierDetail = this._pInst._curveDetail;
              for (var u2 = 1 / this._lutBezierDetail, c = u2, d = 1, h = 0; c < 1; ) {
                if (s2 = parseFloat(c.toFixed(6)), this._lookUpTableBezier[h] = this._bezierCoefficients(s2), d.toFixed(6) === u2.toFixed(6)) {
                  s2 = parseFloat(d.toFixed(6)) + parseFloat(c.toFixed(6)), ++h, this._lookUpTableBezier[h] = this._bezierCoefficients(s2);
                  break;
                }
                c += u2, d -= u2, ++h;
              }
            }
            for (var f = this._lookUpTableBezier.length, p = [], m = 0; m < 4; m++) p.push([]);
            p[0] = this.immediateMode.geometry.vertexColors.slice(-4), p[3] = this.curFillColor.slice();
            var y = [];
            for (m = 0; m < 4; m++) y.push([]);
            if (y[0] = this.immediateMode.geometry.vertexStrokeColors.slice(-4), y[3] = this.curStrokeColor.slice(), 6 === l2) {
              this.isBezier = true;
              var i2 = [this.immediateMode._bezierVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 4 ? void 0 : arguments[4]], a2 = [this.immediateMode._bezierVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 5 ? void 0 : arguments[5]], g = Math.hypot(i2[0] - i2[1], a2[0] - a2[1]), v = Math.hypot(i2[1] - i2[2], a2[1] - a2[2]), b = Math.hypot(i2[2] - i2[3], a2[2] - a2[3]), v = g + v + b;
              for (g /= v, b /= v, n2 = 0; n2 < 4; n2++) p[1].push(p[0][n2] * (1 - g) + p[3][n2] * g), p[2].push(p[0][n2] * b + p[3][n2] * (1 - b)), y[1].push(y[0][n2] * (1 - g) + y[3][n2] * g), y[2].push(y[0][n2] * b + y[3][n2] * (1 - b));
              for (o2 = 0; o2 < f; o2++) {
                for (this.curFillColor = [0, 0, 0, 0], this.curStrokeColor = [0, 0, 0, 0], m = e3 = t3 = 0; m < 4; m++) {
                  for (n2 = 0; n2 < 4; n2++) this.curFillColor[n2] += this._lookUpTableBezier[o2][m] * p[m][n2], this.curStrokeColor[n2] += this._lookUpTableBezier[o2][m] * y[m][n2];
                  e3 += i2[m] * this._lookUpTableBezier[o2][m], t3 += a2[m] * this._lookUpTableBezier[o2][m];
                }
                this.vertex(e3, t3);
              }
              this.curFillColor = p[3], this.curStrokeColor = y[3], this.immediateMode._bezierVertex[0] = arguments.length <= 4 ? void 0 : arguments[4], this.immediateMode._bezierVertex[1] = arguments.length <= 5 ? void 0 : arguments[5];
            } else if (9 === l2) {
              this.isBezier = true, i2 = [this.immediateMode._bezierVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 6 ? void 0 : arguments[6]], a2 = [this.immediateMode._bezierVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 4 ? void 0 : arguments[4], arguments.length <= 7 ? void 0 : arguments[7]];
              var _ = [this.immediateMode._bezierVertex[2], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 5 ? void 0 : arguments[5], arguments.length <= 8 ? void 0 : arguments[8]], j2 = Math.hypot(i2[0] - i2[1], a2[0] - a2[1], _[0] - _[1]), v = Math.hypot(i2[1] - i2[2], a2[1] - a2[2], _[1] - _[2]), x = Math.hypot(i2[2] - i2[3], a2[2] - a2[3], _[2] - _[3]), l2 = j2 + v + x;
              for (j2 /= l2, x /= l2, n2 = 0; n2 < 4; n2++) p[1].push(p[0][n2] * (1 - j2) + p[3][n2] * j2), p[2].push(p[0][n2] * x + p[3][n2] * (1 - x)), y[1].push(y[0][n2] * (1 - j2) + y[3][n2] * j2), y[2].push(y[0][n2] * x + y[3][n2] * (1 - x));
              for (o2 = 0; o2 < f; o2++) {
                for (this.curFillColor = [0, 0, 0, 0], this.curStrokeColor = [0, 0, 0, 0], m = e3 = t3 = r3 = 0; m < 4; m++) {
                  for (n2 = 0; n2 < 4; n2++) this.curFillColor[n2] += this._lookUpTableBezier[o2][m] * p[m][n2], this.curStrokeColor[n2] += this._lookUpTableBezier[o2][m] * y[m][n2];
                  e3 += i2[m] * this._lookUpTableBezier[o2][m], t3 += a2[m] * this._lookUpTableBezier[o2][m], r3 += _[m] * this._lookUpTableBezier[o2][m];
                }
                this.vertex(e3, t3, r3);
              }
              this.curFillColor = p[3], this.curStrokeColor = y[3], this.immediateMode._bezierVertex[0] = arguments.length <= 6 ? void 0 : arguments[6], this.immediateMode._bezierVertex[1] = arguments.length <= 7 ? void 0 : arguments[7], this.immediateMode._bezierVertex[2] = arguments.length <= 8 ? void 0 : arguments[8];
            }
          }, S.default.RendererGL.prototype.quadraticVertex = function() {
            if (0 === this.immediateMode._quadraticVertex.length) throw Error("vertex() must be used once before calling quadraticVertex()");
            var e3, t3, r3, o2, n2, s2, i2 = [], a2 = [], l2 = arguments.length;
            if (0 === this._lookUpTableQuadratic.length || this._lutQuadraticDetail !== this._pInst._curveDetail) {
              this._lookUpTableQuadratic = [], this._lutQuadraticDetail = this._pInst._curveDetail;
              for (var u2 = 1 / this._lutQuadraticDetail, c = u2, d = 1, h = 0; c < 1; ) {
                if (s2 = parseFloat(c.toFixed(6)), this._lookUpTableQuadratic[h] = this._quadraticCoefficients(s2), d.toFixed(6) === u2.toFixed(6)) {
                  s2 = parseFloat(d.toFixed(6)) + parseFloat(c.toFixed(6)), ++h, this._lookUpTableQuadratic[h] = this._quadraticCoefficients(s2);
                  break;
                }
                c += u2, d -= u2, ++h;
              }
            }
            for (var f = this._lookUpTableQuadratic.length, p = [], m = 0; m < 3; m++) p.push([]);
            p[0] = this.immediateMode.geometry.vertexColors.slice(-4), p[2] = this.curFillColor.slice();
            var y = [];
            for (m = 0; m < 3; m++) y.push([]);
            if (y[0] = this.immediateMode.geometry.vertexStrokeColors.slice(-4), y[2] = this.curStrokeColor.slice(), 4 === l2) {
              this.isQuadratic = true;
              var i2 = [this.immediateMode._quadraticVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 2 ? void 0 : arguments[2]], a2 = [this.immediateMode._quadraticVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 3 ? void 0 : arguments[3]], g = Math.hypot(i2[0] - i2[1], a2[0] - a2[1]);
              for (g /= g + Math.hypot(i2[1] - i2[2], a2[1] - a2[2]), n2 = 0; n2 < 4; n2++) p[1].push(p[0][n2] * (1 - g) + p[2][n2] * g), y[1].push(y[0][n2] * (1 - g) + y[2][n2] * g);
              for (o2 = 0; o2 < f; o2++) {
                for (this.curFillColor = [0, 0, 0, 0], this.curStrokeColor = [0, 0, 0, 0], m = e3 = t3 = 0; m < 3; m++) {
                  for (n2 = 0; n2 < 4; n2++) this.curFillColor[n2] += this._lookUpTableQuadratic[o2][m] * p[m][n2], this.curStrokeColor[n2] += this._lookUpTableQuadratic[o2][m] * y[m][n2];
                  e3 += i2[m] * this._lookUpTableQuadratic[o2][m], t3 += a2[m] * this._lookUpTableQuadratic[o2][m];
                }
                this.vertex(e3, t3);
              }
              this.curFillColor = p[2], this.curStrokeColor = y[2], this.immediateMode._quadraticVertex[0] = arguments.length <= 2 ? void 0 : arguments[2], this.immediateMode._quadraticVertex[1] = arguments.length <= 3 ? void 0 : arguments[3];
            } else if (6 === l2) {
              this.isQuadratic = true, i2 = [this.immediateMode._quadraticVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 3 ? void 0 : arguments[3]], a2 = [this.immediateMode._quadraticVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 4 ? void 0 : arguments[4]];
              var v = [this.immediateMode._quadraticVertex[2], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 5 ? void 0 : arguments[5]], b = Math.hypot(i2[0] - i2[1], a2[0] - a2[1], v[0] - v[1]);
              for (b /= b + Math.hypot(i2[1] - i2[2], a2[1] - a2[2], v[1] - v[2]), n2 = 0; n2 < 4; n2++) p[1].push(p[0][n2] * (1 - b) + p[2][n2] * b), y[1].push(y[0][n2] * (1 - b) + y[2][n2] * b);
              for (o2 = 0; o2 < f; o2++) {
                for (this.curFillColor = [0, 0, 0, 0], this.curStrokeColor = [0, 0, 0, 0], m = e3 = t3 = r3 = 0; m < 3; m++) {
                  for (n2 = 0; n2 < 4; n2++) this.curFillColor[n2] += this._lookUpTableQuadratic[o2][m] * p[m][n2], this.curStrokeColor[n2] += this._lookUpTableQuadratic[o2][m] * y[m][n2];
                  e3 += i2[m] * this._lookUpTableQuadratic[o2][m], t3 += a2[m] * this._lookUpTableQuadratic[o2][m], r3 += v[m] * this._lookUpTableQuadratic[o2][m];
                }
                this.vertex(e3, t3, r3);
              }
              this.curFillColor = p[2], this.curStrokeColor = y[2], this.immediateMode._quadraticVertex[0] = arguments.length <= 3 ? void 0 : arguments[3], this.immediateMode._quadraticVertex[1] = arguments.length <= 4 ? void 0 : arguments[4], this.immediateMode._quadraticVertex[2] = arguments.length <= 5 ? void 0 : arguments[5];
            }
          }, S.default.RendererGL.prototype.curveVertex = function() {
            var e3, t3, r3, o2, n2, s2, i2 = [], a2 = [], l2 = arguments.length;
            if (0 === this._lookUpTableBezier.length || this._lutBezierDetail !== this._pInst._curveDetail) {
              this._lookUpTableBezier = [], this._lutBezierDetail = this._pInst._curveDetail;
              for (var u2 = 1 / this._lutBezierDetail, c = u2, d = 1, h = 0; c < 1; ) {
                if (s2 = parseFloat(c.toFixed(6)), this._lookUpTableBezier[h] = this._bezierCoefficients(s2), d.toFixed(6) === u2.toFixed(6)) {
                  s2 = parseFloat(d.toFixed(6)) + parseFloat(c.toFixed(6)), ++h, this._lookUpTableBezier[h] = this._bezierCoefficients(s2);
                  break;
                }
                c += u2, d -= u2, ++h;
              }
            }
            var f = this._lookUpTableBezier.length;
            if (2 === l2) {
              if (this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]), this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]), 8 === this.immediateMode._curveVertex.length) {
                for (this.isCurve = true, i2 = this._bezierToCatmull([this.immediateMode._curveVertex[0], this.immediateMode._curveVertex[2], this.immediateMode._curveVertex[4], this.immediateMode._curveVertex[6]]), a2 = this._bezierToCatmull([this.immediateMode._curveVertex[1], this.immediateMode._curveVertex[3], this.immediateMode._curveVertex[5], this.immediateMode._curveVertex[7]]), n2 = 0; n2 < f; n2++) t3 = i2[0] * this._lookUpTableBezier[n2][0] + i2[1] * this._lookUpTableBezier[n2][1] + i2[2] * this._lookUpTableBezier[n2][2] + i2[3] * this._lookUpTableBezier[n2][3], r3 = a2[0] * this._lookUpTableBezier[n2][0] + a2[1] * this._lookUpTableBezier[n2][1] + a2[2] * this._lookUpTableBezier[n2][2] + a2[3] * this._lookUpTableBezier[n2][3], this.vertex(t3, r3);
                for (n2 = 0; n2 < l2; n2++) this.immediateMode._curveVertex.shift();
              }
            } else if (3 === l2 && (this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]), this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]), this.immediateMode._curveVertex.push(arguments.length <= 2 ? void 0 : arguments[2]), 12 === this.immediateMode._curveVertex.length)) {
              for (this.isCurve = true, i2 = this._bezierToCatmull([this.immediateMode._curveVertex[0], this.immediateMode._curveVertex[3], this.immediateMode._curveVertex[6], this.immediateMode._curveVertex[9]]), a2 = this._bezierToCatmull([this.immediateMode._curveVertex[1], this.immediateMode._curveVertex[4], this.immediateMode._curveVertex[7], this.immediateMode._curveVertex[10]]), e3 = this._bezierToCatmull([this.immediateMode._curveVertex[2], this.immediateMode._curveVertex[5], this.immediateMode._curveVertex[8], this.immediateMode._curveVertex[11]]), n2 = 0; n2 < f; n2++) t3 = i2[0] * this._lookUpTableBezier[n2][0] + i2[1] * this._lookUpTableBezier[n2][1] + i2[2] * this._lookUpTableBezier[n2][2] + i2[3] * this._lookUpTableBezier[n2][3], r3 = a2[0] * this._lookUpTableBezier[n2][0] + a2[1] * this._lookUpTableBezier[n2][1] + a2[2] * this._lookUpTableBezier[n2][2] + a2[3] * this._lookUpTableBezier[n2][3], o2 = e3[0] * this._lookUpTableBezier[n2][0] + e3[1] * this._lookUpTableBezier[n2][1] + e3[2] * this._lookUpTableBezier[n2][2] + e3[3] * this._lookUpTableBezier[n2][3], this.vertex(t3, r3, o2);
              for (n2 = 0; n2 < l2; n2++) this.immediateMode._curveVertex.shift();
            }
          }, S.default.RendererGL.prototype.image = function(e3, t3, r3, o2, n2, s2, i2, a2, l2) {
            this._isErasing && this.blendMode(this._cachedBlendMode), this._pInst.push(), this._pInst.noLights(), this._pInst.noStroke(), this._pInst.texture(e3), this._pInst.textureMode(j.NORMAL);
            var u2 = 0, c = (t3 <= e3.width && (u2 = t3 / e3.width), 1), t3 = (t3 + o2 <= e3.width && (c = (t3 + o2) / e3.width), 0), o2 = (r3 <= e3.height && (t3 = r3 / e3.height), 1);
            r3 + n2 <= e3.height && (o2 = (r3 + n2) / e3.height), this.beginShape(), this.vertex(s2, i2, 0, u2, t3), this.vertex(s2 + a2, i2, 0, c, t3), this.vertex(s2 + a2, i2 + l2, 0, c, o2), this.vertex(s2, i2 + l2, 0, u2, o2), this.endShape(j.CLOSE), this._pInst.pop(), this._isErasing && this.blendMode(j.REMOVE);
          };
          var n = S.default;
          r2.default = n;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "./p5.Geometry": 335,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.math.hypot": 176,
          "core-js/modules/es.math.sign": 178,
          "core-js/modules/es.number.to-fixed": 182,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        327: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.every"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.every"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.object.assign"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var n = (c = e2("../core/main")) && c.__esModule ? c : {
            default: c
          }, a = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = l();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function l() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), l = function() {
              return e3;
            }, e3);
          }
          function s2(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          function u2(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          var c = function() {
            function t3(e4) {
              if (!(this instanceof t3)) throw new TypeError("Cannot call a class as a function");
              (this.renderer = e4)._pInst.push(), this.identityMatrix = new n.default.Matrix(), e4.uModelMatrix = new n.default.Matrix(), this.geometry = new n.default.Geometry(), this.geometry.gid = "_p5_GeometryBuilder_".concat(t3.nextGeometryId), t3.nextGeometryId++, this.hasTransform = false;
            }
            var e3, r3, o2;
            return e3 = t3, (r3 = [{
              key: "transformVertices",
              value: function(e4) {
                var t4 = this;
                return this.hasTransform ? e4.map(function(e5) {
                  return t4.renderer.uModelMatrix.multiplyPoint(e5);
                }) : e4;
              }
            }, {
              key: "transformNormals",
              value: function(e4) {
                var t4 = this;
                return this.hasTransform ? e4.map(function(e5) {
                  return t4.renderer.uNMatrix.multiplyVec3(e5);
                }) : e4;
              }
            }, {
              key: "addGeometry",
              value: function(e4) {
                for (var t4, r4 = this, o3 = (this.hasTransform = !this.renderer.uModelMatrix.mat4.every(function(e5, t5) {
                  return e5 === r4.identityMatrix.mat4[t5];
                }), this.hasTransform && this.renderer.uNMatrix.inverseTranspose(this.renderer.uModelMatrix), this.geometry.vertices.length), n2 = ((t4 = this.geometry.vertices).push.apply(t4, s2(this.transformVertices(e4.vertices))), (t4 = this.geometry.vertexNormals).push.apply(t4, s2(this.transformNormals(e4.vertexNormals))), (t4 = this.geometry.uvs).push.apply(t4, s2(e4.uvs)), this.renderer._doFill && (t4 = this.geometry.faces).push.apply(t4, s2(e4.faces.map(function(e5) {
                  return e5.map(function(e6) {
                    return e6 + o3;
                  });
                }))), this.renderer._doStroke && (t4 = this.geometry.edges).push.apply(t4, s2(e4.edges.map(function(e5) {
                  return e5.map(function(e6) {
                    return e6 + o3;
                  });
                }))), s2(e4.vertexColors)); n2.length < 4 * e4.vertices.length; ) n2.push.apply(n2, s2(this.renderer.curFillColor));
                (t4 = this.geometry.vertexColors).push.apply(t4, s2(n2));
              }
            }, {
              key: "addImmediate",
              value: function() {
                var e4 = this.renderer.immediateMode.geometry, t4 = this.renderer.immediateMode.shapeMode, r4 = [];
                if (this.renderer._doFill) if (t4 === a.TRIANGLE_STRIP || t4 === a.QUAD_STRIP) for (var o3 = 2; o3 < e4.vertices.length; o3++) o3 % 2 == 0 ? r4.push([o3, o3 - 1, o3 - 2]) : r4.push([o3, o3 - 2, o3 - 1]);
                else if (t4 === a.TRIANGLE_FAN) for (var n2 = 2; n2 < e4.vertices.length; n2++) r4.push([0, n2 - 1, n2]);
                else for (var s3 = 0; s3 < e4.vertices.length; s3 += 3) r4.push([s3, s3 + 1, s3 + 2]);
                this.addGeometry(Object.assign({}, e4, {
                  faces: r4
                }));
              }
            }, {
              key: "addRetained",
              value: function(e4) {
                this.addGeometry(e4.model);
              }
            }, {
              key: "finish",
              value: function() {
                return this.renderer._pInst.pop(), this.geometry;
              }
            }]) && u2(e3.prototype, r3), o2 && u2(e3, o2), t3;
          }();
          c.nextGeometryId = 0, r2.default = c;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "core-js/modules/es.array.every": 155,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.object.assign": 183,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        328: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.math.hypot"), e2("core-js/modules/es.math.sign"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.math.hypot"), e2("core-js/modules/es.math.sign"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var g = (s2 = e2("../core/main")) && s2.__esModule ? s2 : {
            default: s2
          }, n = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== v(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = i();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function i() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), i = function() {
              return e3;
            }, e3);
          }
          function v(e3) {
            return (v = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          g.default.prototype.orbitControl = function(e3, t3, r3, o2) {
            var n2 = this, s3 = (this._assert3d("orbitControl"), g.default._validateParameters("orbitControl", arguments), this._renderer._curCamera);
            void 0 === e3 && (e3 = 1), void 0 === t3 && (t3 = e3), void 0 === r3 && (r3 = 1), "object" !== v(o2) && (o2 = {}), true !== this.contextMenuDisabled && (this.canvas.oncontextmenu = function() {
              return false;
            }, this._setProperty("contextMenuDisabled", true)), true !== this.wheelDefaultDisabled && (this.canvas.onwheel = function() {
              return false;
            }, this._setProperty("wheelDefaultDisabled", true));
            var i2 = o2.disableTouchActions;
            true === this.touchActionsDisabled || void 0 !== i2 && !i2 || (this.canvas.style["touch-action"] = "none", this._setProperty("touchActionsDisabled", true));
            var a, l, u2, i2 = o2.freeRotation, o2 = void 0 !== i2 && i2, c = [], i2 = (this.touches.forEach(function(t4) {
              n2._renderer.prevTouches.forEach(function(e4) {
                t4.id === e4.id && (e4 = {
                  x: t4.x,
                  y: t4.y,
                  px: e4.x,
                  py: e4.y
                }, c.push(e4));
              });
            }), this._renderer.prevTouches = this.touches, 0), d = 0, h = 0, f = 0, p = 0, m = this.height < this.width ? this.height : this.width, y = false;
            return 0 < c.length ? (y = 0 < c[0].x && c[0].x < this.width && 0 < c[0].y && c[0].y < this.height, 1 === c.length ? (d = -e3 * ((a = c[0]).x - a.px) / m, h = t3 * (a.y - a.py) / m) : (a = c[0], l = c[1], i2 = -(Math.hypot(a.x - l.x, a.y - l.y) - Math.hypot(a.px - l.px, a.py - l.py)) * r3 * 4e-4, f = 0.5 * (a.x + l.x) - 0.5 * (a.px + l.px), p = 0.5 * (a.y + l.y) - 0.5 * (a.py + l.py)), 0 < this.touches.length ? y && (this._renderer.executeRotateAndMove = true, this._renderer.executeZoom = true) : (this._renderer.executeRotateAndMove = false, this._renderer.executeZoom = false)) : (y = 0 < this.mouseX && this.mouseX < this.width && 0 < this.mouseY && this.mouseY < this.height, 0 !== this._mouseWheelDeltaY ? (i2 = Math.sign(this._mouseWheelDeltaY) * r3, i2 *= 0.01, this._mouseWheelDeltaY = 0, y && (this._renderer.executeZoom = true)) : this._renderer.executeZoom = false, this.mouseIsPressed ? (this.mouseButton === this.LEFT ? (d = -e3 * this.movedX / m, h = t3 * this.movedY / m) : this.mouseButton === this.RIGHT && (f = this.movedX, p = this.movedY * s3.yScale), y && (this._renderer.executeRotateAndMove = true)) : this._renderer.executeRotateAndMove = false), 0 !== i2 && this._renderer.executeZoom && (this._renderer.zoomVelocity += i2), 1e-3 < Math.abs(this._renderer.zoomVelocity) ? (o2 ? s3._orbitFree(0, 0, this._renderer.zoomVelocity) : s3._orbit(0, 0, this._renderer.zoomVelocity), 0 !== s3.projMatrix.mat4[15] && (s3.projMatrix.mat4[0] *= Math.pow(10, -this._renderer.zoomVelocity), s3.projMatrix.mat4[5] *= Math.pow(10, -this._renderer.zoomVelocity), this._renderer.uPMatrix.mat4[0] = s3.projMatrix.mat4[0], this._renderer.uPMatrix.mat4[5] = s3.projMatrix.mat4[5]), this._renderer.zoomVelocity *= 0.85) : this._renderer.zoomVelocity = 0, 0 === d && 0 === h || !this._renderer.executeRotateAndMove || this._renderer.rotateVelocity.add(0.6 * d, 0.6 * h), 1e-6 < this._renderer.rotateVelocity.magSq() ? (o2 ? s3._orbitFree(-this._renderer.rotateVelocity.x, this._renderer.rotateVelocity.y, 0) : s3._orbit(this._renderer.rotateVelocity.x, this._renderer.rotateVelocity.y, 0), this._renderer.rotateVelocity.mult(0.85)) : this._renderer.rotateVelocity.set(0, 0), 0 === f && 0 === p || !this._renderer.executeRotateAndMove || (a = 2 * f / this.width, l = 2 * -p / this.height, this._renderer.moveVelocity.add(0.15 * a, 0.15 * l)), 1e-6 < this._renderer.moveVelocity.magSq() ? (r3 = s3._getLocalAxes(), e3 = s3.eyeX - s3.centerX, t3 = s3.eyeY - s3.centerY, m = s3.eyeZ - s3.centerZ, y = Math.sqrt(e3 * e3 + t3 * t3 + m * m), i2 = new g.default.Vector(s3.centerX, s3.centerY, s3.centerZ), i2 = s3.cameraMatrix.multiplyPoint(i2), (i2 = this._renderer.uPMatrix.multiplyAndNormalizePoint(i2)).x -= this._renderer.moveVelocity.x, i2.y -= this._renderer.moveVelocity.y, h = 0 === (d = this._renderer.uPMatrix.mat4)[15] ? (u2 = (d[8] + i2.x) / d[0] * y, (d[9] + i2.y) / d[5] * y) : (u2 = (i2.x - d[12]) / d[0], (i2.y - d[13]) / d[5]), s3.setPosition(s3.eyeX + u2 * r3.x[0] + h * r3.y[0], s3.eyeY + u2 * r3.x[1] + h * r3.y[1], s3.eyeZ + u2 * r3.x[2] + h * r3.y[2]), this._renderer.moveVelocity.mult(0.85)) : this._renderer.moveVelocity.set(0, 0), this;
          }, g.default.prototype.debugMode = function() {
            this._assert3d("debugMode");
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            g.default._validateParameters("debugMode", t3);
            for (var o2 = this._registeredMethods.post.length - 1; 0 <= o2; o2--) this._registeredMethods.post[o2].toString() !== this._grid().toString() && this._registeredMethods.post[o2].toString() !== this._axesIcon().toString() || this._registeredMethods.post.splice(o2, 1);
            t3[0] === n.GRID ? this.registerMethod("post", this._grid(t3[1], t3[2], t3[3], t3[4], t3[5])) : t3[0] === n.AXES ? this.registerMethod("post", this._axesIcon(t3[1], t3[2], t3[3], t3[4])) : (this.registerMethod("post", this._grid(t3[0], t3[1], t3[2], t3[3], t3[4])), this.registerMethod("post", this._axesIcon(t3[5], t3[6], t3[7], t3[8])));
          }, g.default.prototype.noDebugMode = function() {
            this._assert3d("noDebugMode");
            for (var e3 = this._registeredMethods.post.length - 1; 0 <= e3; e3--) this._registeredMethods.post[e3].toString() !== this._grid().toString() && this._registeredMethods.post[e3].toString() !== this._axesIcon().toString() || this._registeredMethods.post.splice(e3, 1);
          }, g.default.prototype._grid = function(e3, r3, o2, n2, s3) {
            void 0 === e3 && (e3 = this.width / 2), void 0 === r3 && (r3 = Math.round(e3 / 30) < 4 ? 4 : Math.round(e3 / 30)), void 0 === o2 && (o2 = 0), void 0 === n2 && (n2 = 0), void 0 === s3 && (s3 = 0);
            var i2 = e3 / r3, a = e3 / 2;
            return function() {
              this.push(), this.stroke(255 * this._renderer.curStrokeColor[0], 255 * this._renderer.curStrokeColor[1], 255 * this._renderer.curStrokeColor[2]), this._renderer.uModelMatrix.reset();
              for (var e4 = 0; e4 <= r3; e4++) this.beginShape(this.LINES), this.vertex(-a + o2, n2, e4 * i2 - a + s3), this.vertex(a + o2, n2, e4 * i2 - a + s3), this.endShape();
              for (var t3 = 0; t3 <= r3; t3++) this.beginShape(this.LINES), this.vertex(t3 * i2 - a + o2, n2, -a + s3), this.vertex(t3 * i2 - a + o2, n2, a + s3), this.endShape();
              this.pop();
            };
          }, g.default.prototype._axesIcon = function(e3, t3, r3, o2) {
            return void 0 === e3 && (e3 = 40 < this.width / 20 ? this.width / 20 : 40), void 0 === t3 && (t3 = -this.width / 4), void 0 === r3 && (r3 = t3), void 0 === o2 && (o2 = t3), function() {
              this.push(), this._renderer.uModelMatrix.reset(), this.strokeWeight(2), this.stroke(255, 0, 0), this.beginShape(this.LINES), this.vertex(t3, r3, o2), this.vertex(t3 + e3, r3, o2), this.endShape(), this.stroke(0, 255, 0), this.beginShape(this.LINES), this.vertex(t3, r3, o2), this.vertex(t3, r3 + e3, o2), this.endShape(), this.stroke(0, 0, 255), this.beginShape(this.LINES), this.vertex(t3, r3, o2), this.vertex(t3, r3, o2 + e3), this.endShape(), this.pop();
            };
          };
          var s2 = g.default;
          r2.default = s2;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.splice": 171,
          "core-js/modules/es.math.hypot": 176,
          "core-js/modules/es.math.sign": 178,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.for-each": 245,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        329: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.filter"), e2("core-js/modules/es.array.filter"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var m = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          m.default.prototype.ambientLight = function(e3, t3, r3, o) {
            this._assert3d("ambientLight"), m.default._validateParameters("ambientLight", arguments);
            var n = this.color.apply(this, arguments);
            return this._renderer.ambientLightColors.push(n._array[0], n._array[1], n._array[2]), this._renderer._enableLighting = true, this;
          }, m.default.prototype.specularColor = function(e3, t3, r3) {
            this._assert3d("specularColor"), m.default._validateParameters("specularColor", arguments);
            var o = this.color.apply(this, arguments);
            return this._renderer.specularColors = [o._array[0], o._array[1], o._array[2]], this;
          }, m.default.prototype.directionalLight = function(e3, t3, r3, o, n, s2) {
            this._assert3d("directionalLight"), m.default._validateParameters("directionalLight", arguments), e3 = e3 instanceof m.default.Color ? e3 : this.color(e3, t3, r3);
            var i, a, t3 = arguments[arguments.length - 1], r3 = "number" == typeof t3 ? (i = arguments[arguments.length - 3], a = arguments[arguments.length - 2], arguments[arguments.length - 1]) : (i = t3.x, a = t3.y, t3.z), t3 = Math.sqrt(i * i + a * a + r3 * r3);
            return this._renderer.directionalLightDirections.push(i / t3, a / t3, r3 / t3), this._renderer.directionalLightDiffuseColors.push(e3._array[0], e3._array[1], e3._array[2]), Array.prototype.push.apply(this._renderer.directionalLightSpecularColors, this._renderer.specularColors), this._renderer._enableLighting = true, this;
          }, m.default.prototype.pointLight = function(e3, t3, r3, o, n, s2) {
            this._assert3d("pointLight"), m.default._validateParameters("pointLight", arguments), e3 = e3 instanceof m.default.Color ? e3 : this.color(e3, t3, r3);
            var i, a, t3 = arguments[arguments.length - 1], r3 = "number" == typeof t3 ? (i = arguments[arguments.length - 3], a = arguments[arguments.length - 2], arguments[arguments.length - 1]) : (i = t3.x, a = t3.y, t3.z);
            return this._renderer.pointLightPositions.push(i, a, r3), this._renderer.pointLightDiffuseColors.push(e3._array[0], e3._array[1], e3._array[2]), Array.prototype.push.apply(this._renderer.pointLightSpecularColors, this._renderer.specularColors), this._renderer._enableLighting = true, this;
          }, m.default.prototype.imageLight = function(e3) {
            this._renderer.activeImageLight = e3, this._renderer._enableLighting = true;
          }, m.default.prototype.panorama = function(e3) {
            this.filter(this._renderer._getSphereMapping(e3));
          }, m.default.prototype.lights = function() {
            this._assert3d("lights");
            var e3 = this.color("rgb(128,128,128)");
            return this.ambientLight(e3), this.directionalLight(e3, 0, 0, -1), this;
          }, m.default.prototype.lightFalloff = function(e3, t3, r3) {
            return this._assert3d("lightFalloff"), m.default._validateParameters("lightFalloff", arguments), e3 < 0 && (e3 = 0, console.warn("Value of constant argument in lightFalloff() should be never be negative. Set to 0.")), t3 < 0 && (t3 = 0, console.warn("Value of linear argument in lightFalloff() should be never be negative. Set to 0.")), r3 < 0 && (r3 = 0, console.warn("Value of quadratic argument in lightFalloff() should be never be negative. Set to 0.")), 0 === e3 && 0 === t3 && 0 === r3 && (e3 = 1, console.warn("Either one of the three arguments in lightFalloff() should be greater than zero. Set constant argument to 1.")), this._renderer.constantAttenuation = e3, this._renderer.linearAttenuation = t3, this._renderer.quadraticAttenuation = r3, this;
          }, m.default.prototype.spotLight = function(e3, t3, r3, o, n, s2, i, a, l, u2, c) {
            this._assert3d("spotLight"), m.default._validateParameters("spotLight", arguments);
            var d, h, f, p = arguments.length;
            switch (p) {
              case 11:
              case 10:
                d = this.color(e3, t3, r3), h = new m.default.Vector(o, n, s2), f = new m.default.Vector(i, a, l);
                break;
              case 9:
                e3 instanceof m.default.Color ? (d = e3, h = new m.default.Vector(t3, r3, o), f = new m.default.Vector(n, s2, i), u2 = a, c = l) : o instanceof m.default.Vector ? (d = this.color(e3, t3, r3), h = o, f = new m.default.Vector(n, s2, i), u2 = a, c = l) : i instanceof m.default.Vector ? (d = this.color(e3, t3, r3), h = new m.default.Vector(o, n, s2), f = i, u2 = a, c = l) : (d = this.color(e3, t3, r3), h = new m.default.Vector(o, n, s2), f = new m.default.Vector(i, a, l));
                break;
              case 8:
                u2 = (f = e3 instanceof m.default.Color ? (d = e3, h = new m.default.Vector(t3, r3, o), new m.default.Vector(n, s2, i)) : o instanceof m.default.Vector ? (d = this.color(e3, t3, r3), h = o, new m.default.Vector(n, s2, i)) : (d = this.color(e3, t3, r3), h = new m.default.Vector(o, n, s2), i), a);
                break;
              case 7:
                e3 instanceof m.default.Color && t3 instanceof m.default.Vector ? (d = e3, h = t3, f = new m.default.Vector(r3, o, n), u2 = s2, c = i) : e3 instanceof m.default.Color && n instanceof m.default.Vector ? (d = e3, h = new m.default.Vector(t3, r3, o), f = n, u2 = s2, c = i) : o instanceof m.default.Vector && n instanceof m.default.Vector ? (d = this.color(e3, t3, r3), h = o, f = n, u2 = s2, c = i) : f = e3 instanceof m.default.Color ? (d = e3, h = new m.default.Vector(t3, r3, o), new m.default.Vector(n, s2, i)) : o instanceof m.default.Vector ? (d = this.color(e3, t3, r3), h = o, new m.default.Vector(n, s2, i)) : (d = this.color(e3, t3, r3), h = new m.default.Vector(o, n, s2), i);
                break;
              case 6:
                o instanceof m.default.Vector && n instanceof m.default.Vector ? (d = this.color(e3, t3, r3), h = o, f = n, u2 = s2) : e3 instanceof m.default.Color && n instanceof m.default.Vector ? (d = e3, h = new m.default.Vector(t3, r3, o), f = n, u2 = s2) : e3 instanceof m.default.Color && t3 instanceof m.default.Vector && (d = e3, h = t3, f = new m.default.Vector(r3, o, n), u2 = s2);
                break;
              case 5:
                e3 instanceof m.default.Color && t3 instanceof m.default.Vector && r3 instanceof m.default.Vector ? (d = e3, h = t3, f = r3, u2 = o, c = n) : o instanceof m.default.Vector && n instanceof m.default.Vector ? (d = this.color(e3, t3, r3), h = o, f = n) : e3 instanceof m.default.Color && n instanceof m.default.Vector ? (d = e3, h = new m.default.Vector(t3, r3, o), f = n) : e3 instanceof m.default.Color && t3 instanceof m.default.Vector && (d = e3, h = t3, f = new m.default.Vector(r3, o, n));
                break;
              case 4:
                d = e3, h = t3, f = r3, u2 = o;
                break;
              case 3:
                d = e3, h = t3, f = r3;
                break;
              default:
                return console.warn("Sorry, input for spotlight() is not in prescribed format. Too ".concat(p < 3 ? "few" : "many", " arguments were provided")), this;
            }
            return this._renderer.spotLightDiffuseColors.push(d._array[0], d._array[1], d._array[2]), Array.prototype.push.apply(this._renderer.spotLightSpecularColors, this._renderer.specularColors), this._renderer.spotLightPositions.push(h.x, h.y, h.z), f.normalize(), this._renderer.spotLightDirections.push(f.x, f.y, f.z), void 0 === u2 && (u2 = Math.PI / 3), void 0 !== c && c < 1 ? (c = 1, console.warn("Value of concentration needs to be greater than 1. Setting it to 1")) : void 0 === c && (c = 100), u2 = this._renderer._pInst._toRadians(u2), this._renderer.spotLightAngle.push(Math.cos(u2)), this._renderer.spotLightConc.push(c), this._renderer._enableLighting = true, this;
          }, m.default.prototype.noLights = function() {
            this._assert3d("noLights");
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            return m.default._validateParameters("noLights", t3), this._renderer.activeImageLight = null, this._renderer._enableLighting = false, this._renderer.ambientLightColors.length = 0, this._renderer.specularColors = [1, 1, 1], this._renderer.directionalLightDirections.length = 0, this._renderer.directionalLightDiffuseColors.length = 0, this._renderer.directionalLightSpecularColors.length = 0, this._renderer.pointLightPositions.length = 0, this._renderer.pointLightDiffuseColors.length = 0, this._renderer.pointLightSpecularColors.length = 0, this._renderer.spotLightPositions.length = 0, this._renderer.spotLightDirections.length = 0, this._renderer.spotLightDiffuseColors.length = 0, this._renderer.spotLightSpecularColors.length = 0, this._renderer.spotLightAngle.length = 0, this._renderer.spotLightConc.length = 0, this._renderer.constantAttenuation = 1, this._renderer.linearAttenuation = 0, this._renderer.quadraticAttenuation = 0, this._renderer._useShininess = 1, this._renderer._useMetalness = 0, this;
          };
          e2 = m.default;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.filter": 157
        }],
        330: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.set"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.match"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.string.trim"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.splice"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.promise"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.set"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.match"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.string.trim"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0, e2("regenerator-runtime/runtime");
          var L = (n = e2("../core/main")) && n.__esModule ? n : {
            default: n
          };
          function f(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          function l(e3, t3, r3, o2, n2, s2, i) {
            try {
              var a = e3[s2](i), l2 = a.value;
            } catch (e4) {
              return void r3(e4);
            }
            a.done ? t3(l2) : Promise.resolve(l2).then(o2, n2);
          }
          function p(a) {
            return function() {
              var e3 = this, i = arguments;
              return new Promise(function(t3, r3) {
                var o2 = a.apply(e3, i);
                function n2(e4) {
                  l(o2, t3, r3, n2, s2, "next", e4);
                }
                function s2(e4) {
                  l(o2, t3, r3, n2, s2, "throw", e4);
                }
                n2(void 0);
              });
            };
          }
          function m(e3) {
            return (m = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          function y(e3, t3, r3) {
            for (var o2 = 2 < arguments.length && void 0 !== r3 ? r3 : {}, n2 = {
              v: [],
              vt: [],
              vn: []
            }, s2 = {}, i = null, a = /* @__PURE__ */ new Set(), l2 = false, u3 = false, c = 0; c < t3.length; ++c) {
              var d = t3[c].trim().split(/\b\s+/);
              if (0 < d.length) {
                if ("usemtl" === d[0]) i = d[1];
                else if ("v" === d[0] || "vn" === d[0]) {
                  var h = new L.default.Vector(parseFloat(d[1]), parseFloat(d[2]), parseFloat(d[3]));
                  n2[d[0]].push(h);
                } else if ("vt" === d[0]) {
                  h = [parseFloat(d[1]), 1 - parseFloat(d[2])];
                  n2[d[0]].push(h);
                } else if ("f" === d[0]) for (var f2 = 3; f2 < d.length; ++f2) {
                  for (var p2 = [], m2 = [1, f2 - 1, f2], y2 = 0; y2 < m2.length; ++y2) {
                    for (var g2, v = d[m2[y2]], b = v.split("/"), _ = 0; _ < b.length; _++) b[_] = parseInt(b[_]) - 1;
                    s2[v] || (s2[v] = {}), void 0 === s2[v][i] ? (g2 = e3.vertices.length, e3.vertices.push(n2.v[b[0]].copy()), e3.uvs.push(n2.vt[b[1]] ? n2.vt[b[1]].slice() : [0, 0]), e3.vertexNormals.push(n2.vn[b[2]] ? n2.vn[b[2]].copy() : new L.default.Vector()), s2[v][i] = g2, p2.push(g2), i && o2[i] && o2[i].diffuseColor && a.add(n2.v[b[0]])) : p2.push(s2[v][i]);
                  }
                  if (p2[0] !== p2[1] && p2[0] !== p2[2] && p2[1] !== p2[2]) if (e3.faces.push(p2), i && o2[i] && o2[i].diffuseColor) for (var l2 = l2 = true, j = o2[i].diffuseColor, x = 0; x < p2.length; x++) e3.vertexColors.push(j[0]), e3.vertexColors.push(j[1]), e3.vertexColors.push(j[2]);
                  else u3 = true;
                }
              }
            }
            if (0 === e3.vertexNormals.length && e3.computeNormals(), l2 === u3) throw new Error("Model coloring is inconsistent. Either all vertices should have colors or none should.");
          }
          function g(e3, t3) {
            if (function(e4) {
              for (var t4 = new DataView(e4), r4 = [115, 111, 108, 105, 100], o3 = 0; o3 < 5; o3++) if (function(e5, t5, r5) {
                for (var o4 = 0, n3 = e5.length; o4 < n3; o4++) if (e5[o4] !== t5.getUint8(r5 + o4, false)) return;
                return 1;
              }(r4, t4, o3)) return;
              return 1;
            }(t3)) {
              for (var r3, o2, n2, s2, i, a, l2, u3 = e3, c = new DataView(t3), d = c.getUint32(80, true), h = false, f2 = 0; f2 < 70; f2++) 1129270351 === c.getUint32(f2, false) && 82 === c.getUint8(f2 + 4) && 61 === c.getUint8(f2 + 5) && (h = true, s2 = [], i = c.getUint8(f2 + 6) / 255, a = c.getUint8(f2 + 7) / 255, l2 = c.getUint8(f2 + 8) / 255);
              for (var p2 = 0; p2 < d; p2++) {
                for (var m2, y2 = 84 + 50 * p2, g2 = c.getFloat32(y2, true), v = c.getFloat32(4 + y2, true), b = c.getFloat32(8 + y2, true), _ = (h && (m2 = c.getUint16(48 + y2, true), n2 = 0 == (32768 & m2) ? (r3 = (31 & m2) / 31, o2 = (m2 >> 5 & 31) / 31, (m2 >> 10 & 31) / 31) : (r3 = i, o2 = a, l2)), new L.default.Vector(g2, v, b)), j = 1; j <= 3; j++) {
                  var x = y2 + 12 * j, x = new L.default.Vector(c.getFloat32(x, true), c.getFloat32(4 + x, true), c.getFloat32(8 + x, true));
                  u3.vertices.push(x), u3.vertexNormals.push(_), h && s2.push(r3, o2, n2);
                }
                u3.faces.push([3 * p2, 3 * p2 + 1, 3 * p2 + 2]), u3.uvs.push([0, 0], [0, 0], [0, 0]);
              }
            } else {
              t3 = new DataView(t3);
              if ("TextDecoder" in window) for (var w, S, T = e3, E = new TextDecoder("utf-8").decode(t3).split("\n"), M = "", k = [], O = 0; O < E.length; ++O) {
                for (var C = E[O].trim(), A = C.split(" "), P = 0; P < A.length; ++P) "" === A[P] && A.splice(P, 1);
                if (0 !== A.length) switch (M) {
                  case "":
                    if ("solid" !== A[0]) return void (console.error(C), console.error('Invalid state "'.concat(A[0], '", should be "solid"')));
                    M = "solid";
                    break;
                  case "solid":
                    if ("facet" !== A[0] || "normal" !== A[1]) return void (console.error(C), console.error('Invalid state "'.concat(A[0], '", should be "facet normal"')));
                    w = new L.default.Vector(parseFloat(A[2]), parseFloat(A[3]), parseFloat(A[4])), T.vertexNormals.push(w, w, w), M = "facet normal";
                    break;
                  case "facet normal":
                    if ("outer" !== A[0] || "loop" !== A[1]) return void (console.error(C), console.error('Invalid state "'.concat(A[0], '", should be "outer loop"')));
                    M = "vertex";
                    break;
                  case "vertex":
                    if ("vertex" === A[0]) S = new L.default.Vector(parseFloat(A[1]), parseFloat(A[2]), parseFloat(A[3])), T.vertices.push(S), T.uvs.push([0, 0]), k.push(T.vertices.indexOf(S));
                    else {
                      if ("endloop" !== A[0]) return void (console.error(C), console.error('Invalid state "'.concat(A[0], '", should be "vertex" or "endloop"')));
                      T.faces.push(k), k = [], M = "endloop";
                    }
                    break;
                  case "endloop":
                    if ("endfacet" !== A[0]) return void (console.error(C), console.error('Invalid state "'.concat(A[0], '", should be "endfacet"')));
                    M = "endfacet";
                    break;
                  case "endfacet":
                    if ("endsolid" !== A[0]) {
                      if ("facet" !== A[0] || "normal" !== A[1]) return void (console.error(C), console.error('Invalid state "'.concat(A[0], '", should be "endsolid" or "facet normal"')));
                      w = new L.default.Vector(parseFloat(A[2]), parseFloat(A[3]), parseFloat(A[4])), T.vertexNormals.push(w, w, w), M = "facet normal";
                    }
                    break;
                  default:
                    console.error('Invalid state "'.concat(M, '"'));
                }
              }
              else console.warn("Sorry, ASCII STL loading only works in browsers that support TextDecoder (https://caniuse.com/#feat=textencoder)");
            }
          }
          e2("./p5.Geometry"), L.default.prototype.loadModel = function(i, e3) {
            L.default._validateParameters("loadModel", arguments);
            var o2, n2, s2 = false, a = false, l2 = false, t3 = i.slice(-4), u3 = (e3 && "object" === m(e3) ? (s2 = e3.normalize || false, o2 = e3.successCallback, n2 = e3.failureCallback, t3 = e3.fileType || t3, a = e3.flipU || false, l2 = e3.flipV || false) : "boolean" == typeof e3 ? (s2 = e3, o2 = arguments[2], n2 = arguments[3], void 0 !== arguments[4] && (t3 = arguments[4])) : (o2 = "function" == typeof e3 ? e3 : void 0, n2 = arguments[2], void 0 !== arguments[3] && (t3 = arguments[3])), new L.default.Geometry()), c = (u3.gid = "".concat(i, "|").concat(s2), this);
            function d() {
              return (d = p(regeneratorRuntime.mark(function e4(t4) {
                var r3, o3, n3, s3;
                return regeneratorRuntime.wrap(function(e5) {
                  for (; ; ) switch (e5.prev = e5.next) {
                    case 0:
                      for (r3 = [], o3 = 0; o3 < t4.length; o3++) (n3 = t4[o3].match(/^mtllib (.+)/)) && !function() {
                        var o4 = "", e6 = n3[1], t5 = i.split("/");
                        o4 = 1 < t5.length ? (t5.pop(), t5.join("/") + "/" + e6) : e6, r3.push(function() {
                          return h.apply(this, arguments);
                        }(o4).then(function(e7) {
                          return e7 ? (t6 = c, r4 = o4, new Promise(function(n4, e8) {
                            var s4 = null, i2 = {};
                            t6.loadStrings(r4, function(e9) {
                              for (var t7 = 0; t7 < e9.length; ++t7) {
                                var r5, o5 = e9[t7].trim().split(/\s+/);
                                "newmtl" === o5[0] ? (r5 = o5[1], i2[s4 = r5] = {}) : "Kd" === o5[0] ? i2[s4].diffuseColor = [parseFloat(o5[1]), parseFloat(o5[2]), parseFloat(o5[3])] : "Ka" === o5[0] ? i2[s4].ambientColor = [parseFloat(o5[1]), parseFloat(o5[2]), parseFloat(o5[3])] : "Ks" === o5[0] ? i2[s4].specularColor = [parseFloat(o5[1]), parseFloat(o5[2]), parseFloat(o5[3])] : "map_Kd" === o5[0] && (i2[s4].texturePath = o5[1]);
                              }
                              n4(i2);
                            }, e8);
                          })) : (console.warn("MTL file not found or error in parsing; proceeding without materials: ".concat(o4)), {});
                          var t6, r4;
                        }).catch(function(e7) {
                          return console.warn("Error loading MTL file: ".concat(o4), e7), {};
                        }));
                      }();
                      return e5.prev = 2, e5.next = 5, Promise.all(r3);
                    case 5:
                      return s3 = e5.sent, s3 = Object.assign.apply(Object, [{}].concat(f(s3))), e5.abrupt("return", s3);
                    case 10:
                      return e5.prev = 10, e5.t0 = e5.catch(2), e5.abrupt("return", {});
                    case 13:
                    case "end":
                      return e5.stop();
                  }
                }, e4, null, [[2, 10]]);
              }))).apply(this, arguments);
            }
            function h() {
              return (h = p(regeneratorRuntime.mark(function e4(t4) {
                var r3;
                return regeneratorRuntime.wrap(function(e5) {
                  for (; ; ) switch (e5.prev = e5.next) {
                    case 0:
                      return e5.prev = 0, e5.next = 3, fetch(t4, {
                        method: "HEAD"
                      });
                    case 3:
                      return r3 = e5.sent, e5.abrupt("return", r3.ok);
                    case 7:
                      return e5.prev = 7, e5.t0 = e5.catch(0), e5.abrupt("return", false);
                    case 10:
                    case "end":
                      return e5.stop();
                  }
                }, e4, null, [[0, 7]]);
              }))).apply(this, arguments);
            }
            return t3.match(/\.stl$/i) ? this.httpDo(i, "GET", "arrayBuffer", function(e4) {
              g(u3, e4), s2 && u3.normalize(), a && u3.flipU(), l2 && u3.flipV(), c._decrementPreload(), "function" == typeof o2 && o2(u3);
            }, n2) : t3.match(/\.obj$/i) ? this.loadStrings(i, function() {
              var t4 = p(regeneratorRuntime.mark(function e4(t5) {
                var r3;
                return regeneratorRuntime.wrap(function(e5) {
                  for (; ; ) switch (e5.prev = e5.next) {
                    case 0:
                      return e5.prev = 0, e5.next = 3, function() {
                        return d.apply(this, arguments);
                      }(t5);
                    case 3:
                      r3 = e5.sent, y(u3, t5, r3), e5.next = 11;
                      break;
                    case 7:
                      return e5.prev = 7, e5.t0 = e5.catch(0), n2 ? n2(e5.t0) : L.default._friendlyError("Error during parsing: " + e5.t0.message), e5.abrupt("return");
                    case 11:
                      return e5.prev = 11, s2 && u3.normalize(), a && u3.flipU(), l2 && u3.flipV(), u3._makeTriangleEdges(), c._decrementPreload(), "function" == typeof o2 && o2(u3), e5.finish(11);
                    case 19:
                    case "end":
                      return e5.stop();
                  }
                }, e4, null, [[0, 7, 11, 19]]);
              }));
              return function(e4) {
                return t4.apply(this, arguments);
              };
            }(), n2) : (L.default._friendlyFileLoadError(3, i), n2 ? n2() : L.default._friendlyError("Sorry, the file type is invalid. Only OBJ and STL files are supported.")), u3;
          }, L.default.prototype.model = function(e3) {
            this._assert3d("model"), L.default._validateParameters("model", arguments), 0 < e3.vertices.length && (this._renderer.geometryInHash(e3.gid) || (e3._edgesToVertices(), this._renderer.createBuffers(e3.gid, e3)), this._renderer.drawBuffers(e3.gid));
          };
          var u2 = 0, n = (L.default.prototype.createModel = function(e3) {
            var t3, r3, o2 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : " ", n2 = 2 < arguments.length ? arguments[2] : void 0, s2 = (L.default._validateParameters("createModel", arguments), false), i = false, a = false, n2 = (n2 && "object" === m(n2) ? (s2 = n2.normalize || false, t3 = n2.successCallback, r3 = n2.failureCallback, i = n2.flipU || false, a = n2.flipV || false) : r3 = "boolean" == typeof n2 ? (s2 = n2, t3 = arguments[3], arguments[4]) : (t3 = "function" == typeof arguments[2] ? arguments[2] : void 0, arguments[3]), new L.default.Geometry());
            if (n2.gid = "".concat(o2, "|").concat(s2, "|").concat(u2++), o2.match(/\.stl$/i)) try {
              g(n2, new TextEncoder().encode(e3).buffer);
            } catch (e4) {
              return void (r3 ? r3(e4) : L.default._friendlyError("Error during parsing: " + e4.message));
            }
            else if (o2.match(/\.obj$/i)) try {
              y(n2, e3.split("\n"));
            } catch (e4) {
              return void (r3 ? r3(e4) : L.default._friendlyError("Error during parsing: " + e4.message));
            }
            else L.default._friendlyFileLoadError(3, e3), r3 ? r3() : L.default._friendlyError("Sorry, the file type is invalid. Only OBJ and STL files are supported.");
            return s2 && n2.normalize(), i && n2.flipU(), a && n2.flipV(), n2._makeTriangleEdges(), "function" == typeof t3 && t3(n2), n2;
          }, L.default);
          r2.default = n;
        }, {
          "../core/main": 283,
          "./p5.Geometry": 335,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.array.splice": 171,
          "core-js/modules/es.object.assign": 183,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.promise": 191,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.set": 197,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.match": 201,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.string.trim": 209,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.iterator": 246,
          "regenerator-runtime/runtime": 260
        }],
        331: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.join"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var u2 = (s2 = e2("../core/main")) && s2.__esModule ? s2 : {
            default: s2
          }, n = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          e2("./p5.Texture"), u2.default.prototype.loadShader = function(e3, t3, r3, o2) {
            u2.default._validateParameters("loadShader", arguments), o2 = o2 || console.error;
            function n2() {
              i2._decrementPreload(), r3 && r3(s3);
            }
            var s3 = new u2.default.Shader(), i2 = this, a2 = false, l = false;
            return this.loadStrings(e3, function(e4) {
              s3._vertSrc = e4.join("\n"), l = true, a2 && n2();
            }, o2), this.loadStrings(t3, function(e4) {
              s3._fragSrc = e4.join("\n"), a2 = true, l && n2();
            }, o2), s3;
          }, u2.default.prototype.createShader = function(e3, t3, r3) {
            return u2.default._validateParameters("createShader", arguments), new u2.default.Shader(this._renderer, e3, t3, r3);
          }, u2.default.prototype.createFilterShader = function(e3) {
            u2.default._validateParameters("createFilterShader", arguments);
            var t3 = e3.includes("#version 300 es") ? "#version 300 es\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    in vec3 aPosition;\n    in vec2 aTexCoord;\n    out vec2 vTexCoord;\n\n    void main() {\n      // transferring texcoords for the frag shader\n      vTexCoord = aTexCoord;\n\n      // copy position with a fourth coordinate for projection (1.0 is normal)\n      vec4 positionVec4 = vec4(aPosition, 1.0);\n\n      // project to 3D space\n      gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n    }\n  " : "\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    attribute vec3 aPosition;\n    // texcoords only come from p5 to vertex shader\n    // so pass texcoords on to the fragment shader in a varying variable\n    attribute vec2 aTexCoord;\n    varying vec2 vTexCoord;\n\n    void main() {\n      // transferring texcoords for the frag shader\n      vTexCoord = aTexCoord;\n\n      // copy position with a fourth coordinate for projection (1.0 is normal)\n      vec4 positionVec4 = vec4(aPosition, 1.0);\n\n      // project to 3D space\n      gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n    }\n  ", t3 = new u2.default.Shader(this._renderer, t3, e3);
            return this._renderer.GL ? t3.ensureCompiledOnContext(this) : t3.ensureCompiledOnContext(this._renderer.getFilterGraphicsLayer()), t3;
          }, u2.default.prototype.shader = function(e3) {
            return this._assert3d("shader"), u2.default._validateParameters("shader", arguments), e3.ensureCompiledOnContext(this), e3.isStrokeShader() ? this._renderer.userStrokeShader = e3 : (this._renderer.userFillShader = e3, this._renderer._useNormalMaterial = false), e3.setDefaultUniforms(), this;
          }, u2.default.prototype.baseMaterialShader = function() {
            return this._assert3d("baseMaterialShader"), this._renderer.baseMaterialShader();
          }, u2.default.prototype.baseNormalShader = function() {
            return this._assert3d("baseNormalShader"), this._renderer.baseNormalShader();
          }, u2.default.prototype.baseColorShader = function() {
            return this._assert3d("baseColorShader"), this._renderer.baseColorShader();
          }, u2.default.prototype.baseStrokeShader = function() {
            return this._assert3d("baseStrokeShader"), this._renderer.baseStrokeShader();
          }, u2.default.prototype.resetShader = function() {
            return this._renderer.userFillShader = this._renderer.userStrokeShader = null, this;
          }, u2.default.prototype.texture = function(e3) {
            return this._assert3d("texture"), u2.default._validateParameters("texture", arguments), e3.gifProperties && e3._animateGif(this), this._renderer.drawMode = n.TEXTURE, this._renderer._useNormalMaterial = false, this._renderer._tex = e3, this._renderer._setProperty("_doFill", true), this;
          }, u2.default.prototype.textureMode = function(e3) {
            e3 !== n.IMAGE && e3 !== n.NORMAL ? console.warn("You tried to set ".concat(e3, " textureMode only supports IMAGE & NORMAL ")) : this._renderer.textureMode = e3;
          }, u2.default.prototype.textureWrap = function(e3) {
            var t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : e3, r3 = (this._renderer.textureWrapX = e3, this._renderer.textureWrapY = t3, true), o2 = false, n2 = void 0;
            try {
              for (var s3, i2 = this._renderer.textures.values()[Symbol.iterator](); !(r3 = (s3 = i2.next()).done); r3 = true) s3.value.setWrapMode(e3, t3);
            } catch (e4) {
              o2 = true, n2 = e4;
            } finally {
              try {
                r3 || null == i2.return || i2.return();
              } finally {
                if (o2) throw n2;
              }
            }
          }, u2.default.prototype.normalMaterial = function() {
            this._assert3d("normalMaterial");
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            return u2.default._validateParameters("normalMaterial", t3), this._renderer.drawMode = n.FILL, this._renderer._useSpecularMaterial = false, this._renderer._useEmissiveMaterial = false, this._renderer._useNormalMaterial = true, this._renderer.curFillColor = [1, 1, 1, 1], this._renderer._setProperty("_doFill", true), this.noStroke(), this;
          }, u2.default.prototype.ambientMaterial = function(e3, t3, r3) {
            this._assert3d("ambientMaterial"), u2.default._validateParameters("ambientMaterial", arguments);
            var o2 = u2.default.prototype.color.apply(this, arguments);
            return this._renderer._hasSetAmbient = true, this._renderer.curAmbientColor = o2._array, this._renderer._useNormalMaterial = false, this._renderer._enableLighting = true, this._renderer._setProperty("_doFill", true), this;
          }, u2.default.prototype.emissiveMaterial = function(e3, t3, r3, o2) {
            this._assert3d("emissiveMaterial"), u2.default._validateParameters("emissiveMaterial", arguments);
            var n2 = u2.default.prototype.color.apply(this, arguments);
            return this._renderer.curEmissiveColor = n2._array, this._renderer._useEmissiveMaterial = true, this._renderer._useNormalMaterial = false, this._renderer._enableLighting = true, this;
          }, u2.default.prototype.specularMaterial = function(e3, t3, r3, o2) {
            this._assert3d("specularMaterial"), u2.default._validateParameters("specularMaterial", arguments);
            var n2 = u2.default.prototype.color.apply(this, arguments);
            return this._renderer.curSpecularColor = n2._array, this._renderer._useSpecularMaterial = true, this._renderer._useNormalMaterial = false, this._renderer._enableLighting = true, this;
          }, u2.default.prototype.shininess = function(e3) {
            return this._assert3d("shininess"), u2.default._validateParameters("shininess", arguments), this._renderer._useShininess = e3 = e3 < 1 ? 1 : e3, this;
          }, u2.default.prototype.metalness = function(e3) {
            this._assert3d("metalness");
            e3 = 1 - Math.exp(-e3 / 100);
            return this._renderer._useMetalness = e3, this;
          }, u2.default.RendererGL.prototype._applyColorBlend = function(e3, t3) {
            var r3 = this.GL, o2 = this.drawMode === n.TEXTURE, t3 = t3 || this.userFillShader || this.userStrokeShader || this.userPointShader || o2 || this.curBlendMode !== n.BLEND || e3[e3.length - 1] < 1 || this._isErasing;
            return t3 !== this._isBlending && (t3 || this.curBlendMode !== n.BLEND && this.curBlendMode !== n.ADD ? r3.enable(r3.BLEND) : r3.disable(r3.BLEND), r3.depthMask(true), this._isBlending = t3), this._applyBlendMode(), e3;
          }, u2.default.RendererGL.prototype._applyBlendMode = function() {
            if (this._cachedBlendMode !== this.curBlendMode) {
              var e3 = this.GL;
              switch (this.curBlendMode) {
                case n.BLEND:
                  e3.blendEquation(e3.FUNC_ADD), e3.blendFunc(e3.ONE, e3.ONE_MINUS_SRC_ALPHA);
                  break;
                case n.ADD:
                  e3.blendEquation(e3.FUNC_ADD), e3.blendFunc(e3.ONE, e3.ONE);
                  break;
                case n.REMOVE:
                  e3.blendEquation(e3.FUNC_ADD), e3.blendFunc(e3.ZERO, e3.ONE_MINUS_SRC_ALPHA);
                  break;
                case n.MULTIPLY:
                  e3.blendEquation(e3.FUNC_ADD), e3.blendFunc(e3.DST_COLOR, e3.ONE_MINUS_SRC_ALPHA);
                  break;
                case n.SCREEN:
                  e3.blendEquation(e3.FUNC_ADD), e3.blendFunc(e3.ONE, e3.ONE_MINUS_SRC_COLOR);
                  break;
                case n.EXCLUSION:
                  e3.blendEquationSeparate(e3.FUNC_ADD, e3.FUNC_ADD), e3.blendFuncSeparate(e3.ONE_MINUS_DST_COLOR, e3.ONE_MINUS_SRC_COLOR, e3.ONE, e3.ONE);
                  break;
                case n.REPLACE:
                  e3.blendEquation(e3.FUNC_ADD), e3.blendFunc(e3.ONE, e3.ZERO);
                  break;
                case n.SUBTRACT:
                  e3.blendEquationSeparate(e3.FUNC_REVERSE_SUBTRACT, e3.FUNC_ADD), e3.blendFuncSeparate(e3.ONE, e3.ONE, e3.ONE, e3.ONE_MINUS_SRC_ALPHA);
                  break;
                case n.DARKEST:
                  this.blendExt ? (e3.blendEquationSeparate(this.blendExt.MIN || this.blendExt.MIN_EXT, e3.FUNC_ADD), e3.blendFuncSeparate(e3.ONE, e3.ONE, e3.ONE, e3.ONE)) : console.warn("blendMode(DARKEST) does not work in your browser in WEBGL mode.");
                  break;
                case n.LIGHTEST:
                  this.blendExt ? (e3.blendEquationSeparate(this.blendExt.MAX || this.blendExt.MAX_EXT, e3.FUNC_ADD), e3.blendFuncSeparate(e3.ONE, e3.ONE, e3.ONE, e3.ONE)) : console.warn("blendMode(LIGHTEST) does not work in your browser in WEBGL mode.");
                  break;
                default:
                  console.error("Oops! Somehow RendererGL set curBlendMode to an unsupported mode.");
              }
              this._isErasing || (this._cachedBlendMode = this.curBlendMode);
            }
          };
          var s2 = u2.default;
          r2.default = s2;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "./p5.Texture": 343,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.join": 166,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        332: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.math.hypot"), e2("core-js/modules/es.string.sub"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.math.hypot"), e2("core-js/modules/es.string.sub"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var j = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function n(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o = t3[r3];
              o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e3, o.key, o);
            }
          }
          j.default.prototype.camera = function() {
            var e3;
            this._assert3d("camera");
            for (var t3 = arguments.length, r3 = new Array(t3), o = 0; o < t3; o++) r3[o] = arguments[o];
            return j.default._validateParameters("camera", r3), (e3 = this._renderer._curCamera).camera.apply(e3, r3), this;
          }, j.default.prototype.perspective = function() {
            var e3;
            this._assert3d("perspective");
            for (var t3 = arguments.length, r3 = new Array(t3), o = 0; o < t3; o++) r3[o] = arguments[o];
            return j.default._validateParameters("perspective", r3), (e3 = this._renderer._curCamera).perspective.apply(e3, r3), this;
          }, j.default.prototype.linePerspective = function(e3) {
            if (j.default._validateParameters("linePerspective", arguments), !(this._renderer instanceof j.default.RendererGL)) throw new Error("linePerspective() must be called in WebGL mode.");
            if (void 0 === e3) return this._renderer._curCamera.useLinePerspective;
            this._renderer._curCamera.useLinePerspective = e3;
          }, j.default.prototype.ortho = function() {
            var e3;
            this._assert3d("ortho");
            for (var t3 = arguments.length, r3 = new Array(t3), o = 0; o < t3; o++) r3[o] = arguments[o];
            return j.default._validateParameters("ortho", r3), (e3 = this._renderer._curCamera).ortho.apply(e3, r3), this;
          }, j.default.prototype.frustum = function() {
            var e3;
            this._assert3d("frustum");
            for (var t3 = arguments.length, r3 = new Array(t3), o = 0; o < t3; o++) r3[o] = arguments[o];
            return j.default._validateParameters("frustum", r3), (e3 = this._renderer._curCamera).frustum.apply(e3, r3), this;
          }, j.default.prototype.createCamera = function() {
            this._assert3d("createCamera");
            var e3 = new j.default.Camera(this._renderer);
            return e3._computeCameraDefaultSettings(), e3._setDefaultCamera(), this._renderer._curCamera = e3;
          }, j.default.Camera = function() {
            function t3(e4) {
              if (!(this instanceof t3)) throw new TypeError("Cannot call a class as a function");
              this._renderer = e4, this.cameraType = "default", this.useLinePerspective = true, this.cameraMatrix = new j.default.Matrix(), this.projMatrix = new j.default.Matrix(), this.yScale = 1;
            }
            var e3, r3, o;
            return e3 = t3, (r3 = [{
              key: "perspective",
              value: function(e4, t4, r4, o2) {
                this.cameraType = 0 < arguments.length ? "custom" : "default", void 0 === e4 ? (e4 = this.defaultCameraFOV, this.cameraFOV = e4) : this.cameraFOV = this._renderer._pInst._toRadians(e4), void 0 === t4 && (t4 = this.defaultAspectRatio), void 0 === r4 && (r4 = this.defaultCameraNear), void 0 === o2 && (o2 = this.defaultCameraFar), r4 <= 1e-4 && (r4 = 0.01, console.log("Avoid perspective near plane values close to or below 0. Setting value to 0.01.")), o2 < r4 && console.log("Perspective far plane value is less than near plane value. Nothing will be shown."), this.aspectRatio = t4, this.cameraNear = r4, this.cameraFar = o2, this.projMatrix = j.default.Matrix.identity();
                var e4 = 1 / Math.tan(this.cameraFOV / 2), n2 = 1 / (this.cameraNear - this.cameraFar);
                this.projMatrix.set(e4 / t4, 0, 0, 0, 0, -e4 * this.yScale, 0, 0, 0, 0, (o2 + r4) * n2, -1, 0, 0, 2 * o2 * r4 * n2, 0), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix);
              }
            }, {
              key: "ortho",
              value: function(e4, t4, r4, o2, n2, s2) {
                var i = this.fbo || this._renderer, i = (void 0 === e4 && (e4 = -i.width / 2), void 0 === t4 && (t4 = +i.width / 2), void 0 === r4 && (r4 = -i.height / 2), void 0 === o2 && (o2 = +i.height / 2), void 0 === n2 && (n2 = 0), void 0 === s2 && (s2 = Math.max(i.width, i.height) + 800), this.cameraNear = n2, t4 - e4), a = o2 - r4, l = (this.cameraFar = s2) - n2, u2 = 2 / i, c = 2 / a * this.yScale, d = -2 / l, t4 = -(t4 + e4) / i, e4 = -(o2 + r4) / a, i = -(s2 + n2) / l;
                this.projMatrix = j.default.Matrix.identity(), this.projMatrix.set(u2, 0, 0, 0, 0, -c, 0, 0, 0, 0, d, 0, t4, e4, i, 1), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix), this.cameraType = "custom";
              }
            }, {
              key: "frustum",
              value: function(e4, t4, r4, o2, n2, s2) {
                void 0 === e4 && (e4 = 0.05 * -this._renderer.width), void 0 === t4 && (t4 = 0.05 * +this._renderer.width), void 0 === r4 && (r4 = 0.05 * +this._renderer.height), void 0 === o2 && (o2 = 0.05 * -this._renderer.height), void 0 === n2 && (n2 = this.defaultCameraNear), void 0 === s2 && (s2 = this.defaultCameraFar), this.cameraNear = n2;
                var i = t4 - e4, a = o2 - r4, l = (this.cameraFar = s2) - n2, u2 = 2 * n2 / i, c = 2 * n2 / a * this.yScale, d = -2 * s2 * n2 / l, t4 = (t4 + e4) / i, e4 = (o2 + r4) / a, i = -(s2 + n2) / l;
                this.projMatrix = j.default.Matrix.identity(), this.projMatrix.set(u2, 0, 0, 0, 0, -c, 0, 0, t4, e4, i, -1, 0, 0, d, 0), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix), this.cameraType = "custom";
              }
            }, {
              key: "_rotateView",
              value: function(e4, t4, r4, o2) {
                var n2 = this.centerX, s2 = this.centerY, i = this.centerZ, a = (n2 -= this.eyeX, s2 -= this.eyeY, i -= this.eyeZ, j.default.Matrix.identity(this._renderer._pInst)), e4 = (a.rotate(this._renderer._pInst._toRadians(e4), t4, r4, o2), [n2 * a.mat4[0] + s2 * a.mat4[4] + i * a.mat4[8], n2 * a.mat4[1] + s2 * a.mat4[5] + i * a.mat4[9], n2 * a.mat4[2] + s2 * a.mat4[6] + i * a.mat4[10]]);
                e4[0] += this.eyeX, e4[1] += this.eyeY, e4[2] += this.eyeZ, this.camera(this.eyeX, this.eyeY, this.eyeZ, e4[0], e4[1], e4[2], this.upX, this.upY, this.upZ);
              }
            }, {
              key: "roll",
              value: function(e4) {
                var t4 = this._getLocalAxes(), e4 = j.default.Quat.fromAxisAngle(this._renderer._pInst._toRadians(e4), t4.z[0], t4.z[1], t4.z[2]).rotateVector(new j.default.Vector(this.upX, this.upY, this.upZ));
                this.camera(this.eyeX, this.eyeY, this.eyeZ, this.centerX, this.centerY, this.centerZ, e4.x, e4.y, e4.z);
              }
            }, {
              key: "pan",
              value: function(e4) {
                var t4 = this._getLocalAxes();
                this._rotateView(e4, t4.y[0], t4.y[1], t4.y[2]);
              }
            }, {
              key: "tilt",
              value: function(e4) {
                var t4 = this._getLocalAxes();
                this._rotateView(e4, t4.x[0], t4.x[1], t4.x[2]);
              }
            }, {
              key: "lookAt",
              value: function(e4, t4, r4) {
                this.camera(this.eyeX, this.eyeY, this.eyeZ, e4, t4, r4, this.upX, this.upY, this.upZ);
              }
            }, {
              key: "camera",
              value: function(e4, t4, r4, o2, n2, s2, i, a, l) {
                void 0 === e4 && (e4 = this.defaultEyeX, t4 = this.defaultEyeY, r4 = this.defaultEyeZ, o2 = e4, n2 = t4, a = 1, l = i = s2 = 0), this.eyeX = e4, this.eyeY = t4, this.eyeZ = r4, void 0 !== o2 && (this.centerX = o2, this.centerY = n2, this.centerZ = s2), void 0 !== i && (this.upX = i, this.upY = a, this.upZ = l);
                o2 = this._getLocalAxes(), this.cameraMatrix.set(o2.x[0], o2.y[0], o2.z[0], 0, o2.x[1], o2.y[1], o2.z[1], 0, o2.x[2], o2.y[2], o2.z[2], 0, 0, 0, 0, 1), n2 = -e4;
                return this.cameraMatrix.translate([n2, -t4, -r4]), this._isActive() && this._renderer.uViewMatrix.set(this.cameraMatrix), this;
              }
            }, {
              key: "move",
              value: function(e4, t4, r4) {
                var o2 = this._getLocalAxes(), e4 = [o2.x[0] * e4, o2.x[1] * e4, o2.x[2] * e4], t4 = [o2.y[0] * t4, o2.y[1] * t4, o2.y[2] * t4], o2 = [o2.z[0] * r4, o2.z[1] * r4, o2.z[2] * r4];
                this.camera(this.eyeX + e4[0] + t4[0] + o2[0], this.eyeY + e4[1] + t4[1] + o2[1], this.eyeZ + e4[2] + t4[2] + o2[2], this.centerX + e4[0] + t4[0] + o2[0], this.centerY + e4[1] + t4[1] + o2[1], this.centerZ + e4[2] + t4[2] + o2[2], this.upX, this.upY, this.upZ);
              }
            }, {
              key: "setPosition",
              value: function(e4, t4, r4) {
                var o2 = e4 - this.eyeX, n2 = t4 - this.eyeY, s2 = r4 - this.eyeZ;
                this.camera(e4, t4, r4, this.centerX + o2, this.centerY + n2, this.centerZ + s2, this.upX, this.upY, this.upZ);
              }
            }, {
              key: "set",
              value: function(e4) {
                for (var t4 = 0, r4 = ["eyeX", "eyeY", "eyeZ", "centerX", "centerY", "centerZ", "upX", "upY", "upZ", "cameraFOV", "aspectRatio", "cameraNear", "cameraFar", "cameraType", "yScale", "useLinePerspective"]; t4 < r4.length; t4++) {
                  var o2 = r4[t4];
                  this[o2] = e4[o2];
                }
                this.cameraMatrix = e4.cameraMatrix.copy(), this.projMatrix = e4.projMatrix.copy(), this._isActive() && (this._renderer.uModelMatrix.reset(), this._renderer.uViewMatrix.set(this.cameraMatrix), this._renderer.uPMatrix.set(this.projMatrix));
              }
            }, {
              key: "slerp",
              value: function(e4, t4, r4) {
                var o2, n2, s2, i, a, l, u2, c, d, h, f, p, m, y, g, v, b, _;
                0 === r4 ? this.set(e4) : 1 === r4 ? this.set(t4) : (0 !== this.projMatrix.mat4[15] && (this.projMatrix.mat4[0] = e4.projMatrix.mat4[0] * Math.pow(t4.projMatrix.mat4[0] / e4.projMatrix.mat4[0], r4), this.projMatrix.mat4[5] = e4.projMatrix.mat4[5] * Math.pow(t4.projMatrix.mat4[5] / e4.projMatrix.mat4[5], r4), this._isActive() && (this._renderer.uPMatrix.mat4 = this.projMatrix.mat4.slice())), i = new j.default.Vector(e4.eyeX, e4.eyeY, e4.eyeZ), a = new j.default.Vector(t4.eyeX, t4.eyeY, t4.eyeZ), v = new j.default.Vector(e4.centerX, e4.centerY, e4.centerZ), _ = new j.default.Vector(t4.centerX, t4.centerY, t4.centerZ), s2 = j.default.Vector.dist(i, v), o2 = j.default.Vector.dist(a, _), o2 = s2 * Math.pow(o2 / s2, r4), s2 = j.default.Vector.sub(i, a), n2 = 1, 1e-6 < (b = (y = i.copy().sub(a).sub(v).add(_)).magSq()) && (n2 = j.default.Vector.dot(s2, y) / b, n2 = Math.max(0, Math.min(n2, 1))), s2 = j.default.Vector.lerp(j.default.Vector.lerp(i, v, n2), j.default.Vector.lerp(a, _, n2), r4), y = e4.cameraMatrix.createSubMatrix3x3(), b = t4.cameraMatrix.createSubMatrix3x3(), i = y.row(2), v = b.row(2), a = y.row(1), _ = b.row(1), e4 = new j.default.Vector(), t4 = new j.default.Vector(), l = new j.default.Vector(), u2 = new j.default.Vector(), 1 - (c = 0.5 * ((y = (b = b.mult3x3(y.copy().transpose3x3())).diagonal())[0] + y[1] + y[2] - 1)) < 1e-7 ? (e4.set(j.default.Vector.lerp(i, v, r4)).normalize(), l.set(e4).mult(n2 * o2).add(s2), u2.set(e4).mult((n2 - 1) * o2).add(s2), t4.set(j.default.Vector.lerp(a, _, r4)).normalize()) : (v = 1 / (1 - c), _ = Math.max(y[0], y[1], y[2]), p = b.mat3[1] + b.mat3[3], m = b.mat3[2] + b.mat3[6], g = b.mat3[5] + b.mat3[7], _ = _ === y[0] ? (h = 0.5 * p * (v /= d = Math.sqrt((y[0] - c) * v)), f = 0.5 * m * v, 0.5 * (b.mat3[7] - b.mat3[5]) / d) : _ === y[1] ? (f = 0.5 * g * (v /= h = Math.sqrt((y[1] - c) * v)), d = 0.5 * p * v, 0.5 * (b.mat3[2] - b.mat3[6]) / h) : (d = 0.5 * m * (v /= f = Math.sqrt((y[2] - c) * v)), h = 0.5 * g * v, 0.5 * (b.mat3[3] - b.mat3[1]) / f), p = r4 * Math.atan2(_, c), m = Math.cos(p), y = Math.sin(p), (_ = new j.default.Matrix("mat3", [m + (g = 1 - m) * d * d, g * (v = d * h) + y * f, g * (b = f * d) - y * h, g * v - y * f, m + g * h * h, g * (r4 = h * f) + y * d, g * b + y * h, g * r4 - y * d, m + g * f * f])).multiplyVec3(i, e4), l.set(e4).mult(n2 * o2).add(s2), u2.set(e4).mult((n2 - 1) * o2).add(s2), _.multiplyVec3(a, t4)), this.camera(l.x, l.y, l.z, u2.x, u2.y, u2.z, t4.x, t4.y, t4.z));
              }
            }, {
              key: "_computeCameraDefaultSettings",
              value: function() {
                this.defaultAspectRatio = this._renderer.width / this._renderer.height, this.defaultEyeX = 0, this.defaultEyeY = 0, this.defaultEyeZ = 800, this.defaultCameraFOV = 2 * Math.atan(this._renderer.height / 2 / this.defaultEyeZ), this.defaultCenterX = 0, this.defaultCenterY = 0, this.defaultCenterZ = 0, this.defaultCameraNear = 0.1 * this.defaultEyeZ, this.defaultCameraFar = 10 * this.defaultEyeZ;
              }
            }, {
              key: "_setDefaultCamera",
              value: function() {
                this.cameraFOV = this.defaultCameraFOV, this.aspectRatio = this.defaultAspectRatio, this.eyeX = this.defaultEyeX, this.eyeY = this.defaultEyeY, this.eyeZ = this.defaultEyeZ, this.centerX = this.defaultCenterX, this.centerY = this.defaultCenterY, this.centerZ = this.defaultCenterZ, this.upX = 0, this.upY = 1, this.upZ = 0, this.cameraNear = this.defaultCameraNear, this.cameraFar = this.defaultCameraFar, this.perspective(), this.camera(), this.cameraType = "default";
              }
            }, {
              key: "_resize",
              value: function() {
                "default" === this.cameraType && (this._computeCameraDefaultSettings(), this.cameraFOV = this.defaultCameraFOV, this.aspectRatio = this.defaultAspectRatio, this.perspective());
              }
            }, {
              key: "copy",
              value: function() {
                var e4 = new j.default.Camera(this._renderer);
                return e4.cameraFOV = this.cameraFOV, e4.aspectRatio = this.aspectRatio, e4.eyeX = this.eyeX, e4.eyeY = this.eyeY, e4.eyeZ = this.eyeZ, e4.centerX = this.centerX, e4.centerY = this.centerY, e4.centerZ = this.centerZ, e4.upX = this.upX, e4.upY = this.upY, e4.upZ = this.upZ, e4.cameraNear = this.cameraNear, e4.cameraFar = this.cameraFar, e4.cameraType = this.cameraType, e4.useLinePerspective = this.useLinePerspective, e4.cameraMatrix = this.cameraMatrix.copy(), e4.projMatrix = this.projMatrix.copy(), e4.yScale = this.yScale, e4;
              }
            }, {
              key: "_getLocalAxes",
              value: function() {
                var e4 = this.eyeX - this.centerX, t4 = this.eyeY - this.centerY, r4 = this.eyeZ - this.centerZ, o2 = Math.sqrt(e4 * e4 + t4 * t4 + r4 * r4), o2 = (0 !== o2 && (e4 /= o2, t4 /= o2, r4 /= o2), this.upX), n2 = (a = this.upY) * r4 - (l = this.upZ) * t4, s2 = -o2 * r4 + l * e4, i = o2 * t4 - a * e4, o2 = t4 * i - r4 * s2, a = -e4 * i + r4 * n2, l = e4 * s2 - t4 * n2, u2 = Math.sqrt(n2 * n2 + s2 * s2 + i * i), u2 = (0 !== u2 && (n2 /= u2, s2 /= u2, i /= u2), Math.sqrt(o2 * o2 + a * a + l * l));
                return 0 !== u2 && (o2 /= u2, a /= u2, l /= u2), {
                  x: [n2, s2, i],
                  y: [o2, a, l],
                  z: [e4, t4, r4]
                };
              }
            }, {
              key: "_orbit",
              value: function(e4, t4, r4) {
                var o2 = this.eyeX - this.centerX, n2 = this.eyeY - this.centerY, s2 = this.eyeZ - this.centerZ, i = Math.hypot(o2, n2, s2), o2 = new j.default.Vector(o2, n2, s2).normalize(), n2 = new j.default.Vector(this.upX, this.upY, this.upZ).normalize(), s2 = j.default.Vector.cross(n2, o2).normalize(), a = j.default.Vector.cross(s2, n2), r4 = ((i = (i *= Math.pow(10, r4)) < this.cameraNear ? this.cameraNear : i) > this.cameraFar && (i = this.cameraFar), Math.acos(Math.max(-1, Math.min(1, j.default.Vector.dot(o2, n2)))) + t4), t4 = e4;
                (r4 <= 0 || r4 >= Math.PI) && (this.upX *= -1, this.upY *= -1, this.upZ *= -1), n2.mult(Math.cos(r4)), a.mult(Math.cos(t4) * Math.sin(r4)), s2.mult(Math.sin(t4) * Math.sin(r4)), o2.set(n2).add(a).add(s2), this.eyeX = i * o2.x + this.centerX, this.eyeY = i * o2.y + this.centerY, this.eyeZ = i * o2.z + this.centerZ, this.camera(this.eyeX, this.eyeY, this.eyeZ, this.centerX, this.centerY, this.centerZ, this.upX, this.upY, this.upZ);
              }
            }, {
              key: "_orbitFree",
              value: function(e4, t4, r4) {
                var o2 = this.eyeX - this.centerX, n2 = this.eyeY - this.centerY, s2 = this.eyeZ - this.centerZ, i = Math.hypot(o2, n2, s2), o2 = new j.default.Vector(o2, n2, s2).normalize(), n2 = new j.default.Vector(this.upX, this.upY, this.upZ), s2 = j.default.Vector.cross(n2, o2).normalize(), a = j.default.Vector.cross(o2, s2), l = Math.atan2(t4, e4), l = (a.mult(Math.sin(l)), s2.mult(Math.cos(l)).add(a), Math.sqrt(e4 * e4 + t4 * t4)), a = j.default.Vector.cross(o2, s2), e4 = ((i = (i *= Math.pow(10, r4)) < this.cameraNear ? this.cameraNear : i) > this.cameraFar && (i = this.cameraFar), Math.cos(l)), t4 = Math.sin(l), r4 = n2.dot(o2), l = n2.dot(s2), u2 = r4 * e4 + l * t4, r4 = -r4 * t4 + l * e4, l = n2.dot(a);
                n2.x = u2 * o2.x + r4 * s2.x + l * a.x, n2.y = u2 * o2.y + r4 * s2.y + l * a.y, n2.z = u2 * o2.z + r4 * s2.z + l * a.z, s2.mult(-t4), o2.mult(e4).add(s2).mult(i), this.camera(o2.x + this.centerX, o2.y + this.centerY, o2.z + this.centerZ, this.centerX, this.centerY, this.centerZ, n2.x, n2.y, n2.z);
              }
            }, {
              key: "_isActive",
              value: function() {
                return this === this._renderer._curCamera;
              }
            }]) && n(e3.prototype, r3), o && n(e3, o), t3;
          }(), j.default.prototype.setCamera = function(e3) {
            this._renderer._curCamera = e3, this._renderer.uPMatrix.set(e3.projMatrix), this._renderer.uViewMatrix.set(e3.cameraMatrix);
          };
          e2 = j.default.Camera;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.math.hypot": 176,
          "core-js/modules/es.string.sub": 208
        }],
        333: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.math.log2"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.typed-array.float32-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.math.log2"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.typed-array.float32-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function n(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o = t3[r3];
              o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e3, o.key, o);
            }
          }
          e2.default.DataArray = function() {
            function o() {
              var e4 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 128, t4 = this, r4 = o;
              if (!(t4 instanceof r4)) throw new TypeError("Cannot call a class as a function");
              this.length = 0, this.data = new Float32Array(e4), this.initialLength = e4;
            }
            var e3, t3, r3;
            return e3 = o, (t3 = [{
              key: "dataArray",
              value: function() {
                return this.subArray(0, this.length);
              }
            }, {
              key: "clear",
              value: function() {
                this.length = 0;
              }
            }, {
              key: "rescale",
              value: function() {
                var e4;
                this.length < this.data.length / 2 && (e4 = 1 << Math.ceil(Math.log2(this.length)), (e4 = new Float32Array(e4)).set(this.data.subarray(0, this.length), 0), this.data = e4);
              }
            }, {
              key: "reset",
              value: function() {
                this.clear(), this.data = new Float32Array(this.initialLength);
              }
            }, {
              key: "push",
              value: function() {
                for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
                this.ensureLength(this.length + t4.length), this.data.set(t4, this.length), this.length += t4.length;
              }
            }, {
              key: "slice",
              value: function(e4, t4) {
                return this.data.slice(e4, Math.min(t4, this.length));
              }
            }, {
              key: "subArray",
              value: function(e4, t4) {
                return this.data.subarray(e4, Math.min(t4, this.length));
              }
            }, {
              key: "ensureLength",
              value: function(e4) {
                for (; this.data.length < e4; ) {
                  var t4 = new Float32Array(2 * this.data.length);
                  t4.set(this.data, 0), this.data = t4;
                }
              }
            }]) && n(e3.prototype, t3), r3 && n(e3, r3), o;
          }();
          e2 = e2.default.DataArray;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.math.log2": 177,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.float32-array": 219,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239
        }],
        334: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.reflect.construct"), e2("core-js/modules/es.reflect.get"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.typed-array.float32-array"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.uint8-clamped-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.typed-array.float32-array"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.uint8-clamped-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var f = (j = e2("../core/main")) && j.__esModule ? j : {
            default: j
          }, a = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = l();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants")), n = e2("./p5.Texture"), p = e2("./p5.RendererGL");
          function l() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), l = function() {
              return e3;
            }, e3);
          }
          function u2(e3, t3) {
            return function(e4) {
              if (Array.isArray(e4)) return e4;
            }(e3) || function(e4, t4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) {
                var r3 = [], o2 = true, n2 = false, s3 = void 0;
                try {
                  for (var i2, a2 = e4[Symbol.iterator](); !(o2 = (i2 = a2.next()).done) && (r3.push(i2.value), !t4 || r3.length !== t4); o2 = true) ;
                } catch (e5) {
                  n2 = true, s3 = e5;
                } finally {
                  try {
                    o2 || null == a2.return || a2.return();
                  } finally {
                    if (n2) throw s3;
                  }
                }
                return r3;
              }
            }(e3, t3) || function() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }();
          }
          function c(e3, t3, r3) {
            return t3 in e3 ? Object.defineProperty(e3, t3, {
              value: r3,
              enumerable: true,
              configurable: true,
              writable: true
            }) : e3[t3] = r3, e3;
          }
          function d(e3, t3) {
            if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
          }
          function s2(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          function h(e3, t3, r3) {
            t3 && s2(e3.prototype, t3), r3 && s2(e3, r3);
          }
          function m(e3, t3, r3) {
            return (m = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(e4, t4, r4) {
              var e4 = function(e5, t5) {
                for (; !Object.prototype.hasOwnProperty.call(e5, t5) && null !== (e5 = v(e5)); ) ;
                return e5;
              }(e4, t4);
              if (e4) return (e4 = Object.getOwnPropertyDescriptor(e4, t4)).get ? e4.get.call(r4) : e4.value;
            })(e3, t3, r3 || e3);
          }
          function y(e3, t3) {
            return (y = Object.setPrototypeOf || function(e4, t4) {
              return e4.__proto__ = t4, e4;
            })(e3, t3);
          }
          function g(r3) {
            return function() {
              var e3, t3 = v(r3), t3 = (e3 = function() {
                if ("undefined" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {
                  if ("function" == typeof Proxy) return 1;
                  try {
                    return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                    })), 1;
                  } catch (e4) {
                  }
                }
              }() ? (e3 = v(this).constructor, Reflect.construct(t3, arguments, e3)) : t3.apply(this, arguments), this);
              if (!e3 || "object" !== i(e3) && "function" != typeof e3) {
                if (void 0 !== t3) return t3;
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return e3;
            };
          }
          function v(e3) {
            return (v = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            })(e3);
          }
          var b = function(e3) {
            var t3 = o2;
            if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
            t3.prototype = Object.create(e3 && e3.prototype, {
              constructor: {
                value: t3,
                writable: true,
                configurable: true
              }
            }), e3 && y(t3, e3);
            var r3 = g(o2);
            function o2(e4) {
              var t4;
              return d(this, o2), (t4 = r3.call(this, e4.target._renderer)).fbo = e4, t4.yScale = -1, t4;
            }
            return h(o2, [{
              key: "_computeCameraDefaultSettings",
              value: function() {
                m(v(o2.prototype), "_computeCameraDefaultSettings", this).call(this), this.defaultAspectRatio = this.fbo.width / this.fbo.height, this.defaultCameraFOV = 2 * Math.atan(this.fbo.height / 2 / this.defaultEyeZ);
              }
            }]), o2;
          }(f.default.Camera), _ = (f.default.FramebufferCamera = b, function() {
            function r3(e3, t3) {
              d(this, r3), this.framebuffer = e3, this.property = t3;
            }
            return h(r3, [{
              key: "rawTexture",
              value: function() {
                return this.framebuffer[this.property];
              }
            }, {
              key: "width",
              get: function() {
                return this.framebuffer.width * this.framebuffer.density;
              }
            }, {
              key: "height",
              get: function() {
                return this.framebuffer.height * this.framebuffer.density;
              }
            }]), r3;
          }()), j = (f.default.FramebufferTexture = _, function() {
            function s3(e3) {
              var t3 = this, r3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}, o2 = (d(this, s3), this.target = e3, this.target._renderer.framebuffers.add(this), this._isClipApplied = false, this.pixels = [], this.format = r3.format || a.UNSIGNED_BYTE, this.channels = r3.channels || (e3._renderer._pInst._glAttributes.alpha ? a.RGBA : a.RGB), this.useDepth = void 0 === r3.depth || r3.depth, this.depthFormat = r3.depthFormat || a.FLOAT, this.textureFiltering = r3.textureFiltering || a.LINEAR, void 0 === r3.antialias ? this.antialiasSamples = e3._renderer._pInst._glAttributes.antialias ? 2 : 0 : "number" == typeof r3.antialias ? this.antialiasSamples = r3.antialias : this.antialiasSamples = r3.antialias ? 2 : 0, this.antialias = 0 < this.antialiasSamples, this.antialias && e3.webglVersion !== a.WEBGL2 && (console.warn("Antialiasing is unsupported in a WebGL 1 context"), this.antialias = false), this.density = r3.density || e3.pixelDensity(), e3._renderer.GL);
              if (this.gl = o2, r3.width && r3.height ? (n2 = e3._renderer._adjustDimensions(r3.width, r3.height), this.width = n2.adjustedWidth, this.height = n2.adjustedHeight, this._autoSized = false) : (void 0 === r3.width != (void 0 === r3.height) && console.warn("Please supply both width and height for a framebuffer to give it a size. Only one was given, so the framebuffer will match the size of its canvas."), this.width = e3.width, this.height = e3.height, this._autoSized = true), this._checkIfFormatsAvailable(), r3.stencil && !this.useDepth && console.warn("A stencil buffer can only be used if also using depth. Since the framebuffer has no depth buffer, the stencil buffer will be ignored."), this.useStencil = this.useDepth && (void 0 === r3.stencil || r3.stencil), this.framebuffer = o2.createFramebuffer(), !this.framebuffer) throw new Error("Unable to create a framebuffer");
              if (this.antialias && (this.aaFramebuffer = o2.createFramebuffer(), !this.aaFramebuffer)) throw new Error("Unable to create a framebuffer for antialiasing");
              this._recreateTextures();
              var n2 = this.target._renderer._curCamera;
              this.defaultCamera = this.createCamera(), this.filterCamera = this.createCamera(), this.target._renderer._curCamera = n2, this.draw(function() {
                return t3.target.clear();
              });
            }
            return h(s3, [{
              key: "resize",
              value: function(e3, t3) {
                this._autoSized = false;
                var r3 = this.target._renderer._adjustDimensions(e3, t3);
                e3 = r3.adjustedWidth, t3 = r3.adjustedHeight, this.width = e3, this.height = t3, this._handleResize();
              }
            }, {
              key: "pixelDensity",
              value: function(e3) {
                if (!e3) return this.density;
                this._autoSized = false, this.density = e3, this._handleResize();
              }
            }, {
              key: "autoSized",
              value: function(e3) {
                if (void 0 === e3) return this._autoSized;
                this._autoSized = e3, this._handleResize();
              }
            }, {
              key: "_checkIfFormatsAvailable",
              value: function() {
                var e3 = this.gl, e3 = (this.useDepth && this.target.webglVersion === a.WEBGL && !e3.getExtension("WEBGL_depth_texture") && (console.warn("Unable to create depth textures in this environment. Falling back to a framebuffer without depth."), this.useDepth = false), this.useDepth && this.target.webglVersion === a.WEBGL && this.depthFormat === a.FLOAT && (console.warn("FLOAT depth format is unavailable in WebGL 1. Defaulting to UNSIGNED_INT."), this.depthFormat = a.UNSIGNED_INT), [a.UNSIGNED_BYTE, a.FLOAT, a.HALF_FLOAT].includes(this.format) || (console.warn("Unknown Framebuffer format. Please use UNSIGNED_BYTE, FLOAT, or HALF_FLOAT. Defaulting to UNSIGNED_BYTE."), this.format = a.UNSIGNED_BYTE), this.useDepth && ![a.UNSIGNED_INT, a.FLOAT].includes(this.depthFormat) && (console.warn("Unknown Framebuffer depth format. Please use UNSIGNED_INT or FLOAT. Defaulting to FLOAT."), this.depthFormat = a.FLOAT), (0, n.checkWebGLCapabilities)(this.target._renderer));
                e3.float || this.format !== a.FLOAT || (console.warn("This environment does not support FLOAT textures. Falling back to UNSIGNED_BYTE."), this.format = a.UNSIGNED_BYTE), this.useDepth && !e3.float && this.depthFormat === a.FLOAT && (console.warn("This environment does not support FLOAT depth textures. Falling back to UNSIGNED_INT."), this.depthFormat = a.UNSIGNED_INT), e3.halfFloat || this.format !== a.HALF_FLOAT || (console.warn("This environment does not support HALF_FLOAT textures. Falling back to UNSIGNED_BYTE."), this.format = a.UNSIGNED_BYTE), this.channels === a.RGB && [a.FLOAT, a.HALF_FLOAT].includes(this.format) && (console.warn("FLOAT and HALF_FLOAT formats do not work cross-platform with only RGB channels. Falling back to RGBA."), this.channels = a.RGBA);
              }
            }, {
              key: "_recreateTextures",
              value: function() {
                var e3 = this.gl, t3 = (this._updateSize(), e3.getParameter(e3.TEXTURE_BINDING_2D)), r3 = e3.getParameter(e3.FRAMEBUFFER_BINDING), o2 = e3.createTexture();
                if (!o2) throw new Error("Unable to create color texture");
                e3.bindTexture(e3.TEXTURE_2D, o2);
                var n2 = this._glColorFormat();
                if (e3.texImage2D(e3.TEXTURE_2D, 0, n2.internalFormat, this.width * this.density, this.height * this.density, 0, n2.format, n2.type, null), this.colorTexture = o2, e3.bindFramebuffer(e3.FRAMEBUFFER, this.framebuffer), e3.framebufferTexture2D(e3.FRAMEBUFFER, e3.COLOR_ATTACHMENT0, e3.TEXTURE_2D, o2, 0), this.useDepth) {
                  var o2 = e3.createTexture();
                  if (!o2) throw new Error("Unable to create depth texture");
                  var s4 = this._glDepthFormat();
                  e3.bindTexture(e3.TEXTURE_2D, o2), e3.texImage2D(e3.TEXTURE_2D, 0, s4.internalFormat, this.width * this.density, this.height * this.density, 0, s4.format, s4.type, null), e3.framebufferTexture2D(e3.FRAMEBUFFER, this.useStencil ? e3.DEPTH_STENCIL_ATTACHMENT : e3.DEPTH_ATTACHMENT, e3.TEXTURE_2D, o2, 0), this.depthTexture = o2;
                }
                this.antialias && (this.colorRenderbuffer = e3.createRenderbuffer(), e3.bindRenderbuffer(e3.RENDERBUFFER, this.colorRenderbuffer), e3.renderbufferStorageMultisample(e3.RENDERBUFFER, Math.max(0, Math.min(this.antialiasSamples, e3.getParameter(e3.MAX_SAMPLES))), n2.internalFormat, this.width * this.density, this.height * this.density), this.useDepth && (s4 = this._glDepthFormat(), this.depthRenderbuffer = e3.createRenderbuffer(), e3.bindRenderbuffer(e3.RENDERBUFFER, this.depthRenderbuffer), e3.renderbufferStorageMultisample(e3.RENDERBUFFER, Math.max(0, Math.min(this.antialiasSamples, e3.getParameter(e3.MAX_SAMPLES))), s4.internalFormat, this.width * this.density, this.height * this.density)), e3.bindFramebuffer(e3.FRAMEBUFFER, this.aaFramebuffer), e3.framebufferRenderbuffer(e3.FRAMEBUFFER, e3.COLOR_ATTACHMENT0, e3.RENDERBUFFER, this.colorRenderbuffer), this.useDepth && e3.framebufferRenderbuffer(e3.FRAMEBUFFER, this.useStencil ? e3.DEPTH_STENCIL_ATTACHMENT : e3.DEPTH_ATTACHMENT, e3.RENDERBUFFER, this.depthRenderbuffer)), this.useDepth && (this.depth = new _(this, "depthTexture"), o2 = e3.NEAREST, this.depthP5Texture = new f.default.Texture(this.target._renderer, this.depth, {
                  minFilter: o2,
                  magFilter: o2
                }), this.target._renderer.textures.set(this.depth, this.depthP5Texture)), this.color = new _(this, "colorTexture");
                n2 = this.textureFiltering === a.LINEAR ? e3.LINEAR : e3.NEAREST;
                this.colorP5Texture = new f.default.Texture(this.target._renderer, this.color, {
                  minFilter: n2,
                  magFilter: n2
                }), this.target._renderer.textures.set(this.color, this.colorP5Texture), e3.bindTexture(e3.TEXTURE_2D, t3), e3.bindFramebuffer(e3.FRAMEBUFFER, r3);
              }
            }, {
              key: "_glColorFormat",
              value: function() {
                var e3, t3, r3 = this.gl, o2 = this.format === a.FLOAT ? r3.FLOAT : this.format === a.HALF_FLOAT ? this.target.webglVersion === a.WEBGL2 ? r3.HALF_FLOAT : r3.getExtension("OES_texture_half_float").HALF_FLOAT_OES : r3.UNSIGNED_BYTE, n2 = this.channels === a.RGBA ? r3.RGBA : r3.RGB;
                return {
                  internalFormat: this.target.webglVersion === a.WEBGL2 ? (c(t3 = {}, r3.FLOAT, c({}, r3.RGBA, r3.RGBA32F)), c(t3, r3.HALF_FLOAT, c({}, r3.RGBA, r3.RGBA16F)), c(t3, r3.UNSIGNED_BYTE, (c(e3 = {}, r3.RGBA, r3.RGBA8), c(e3, r3.RGB, r3.RGB8), e3)), t3[o2][n2]) : this.format === a.HALF_FLOAT ? r3.RGBA : n2,
                  format: n2,
                  type: o2
                };
              }
            }, {
              key: "_glDepthFormat",
              value: function() {
                var e3 = this.gl, t3 = this.useStencil ? this.depthFormat === a.FLOAT ? e3.FLOAT_32_UNSIGNED_INT_24_8_REV : this.target.webglVersion === a.WEBGL2 ? e3.UNSIGNED_INT_24_8 : e3.getExtension("WEBGL_depth_texture").UNSIGNED_INT_24_8_WEBGL : this.depthFormat === a.FLOAT ? e3.FLOAT : e3.UNSIGNED_INT, r3 = this.useStencil ? e3.DEPTH_STENCIL : e3.DEPTH_COMPONENT, e3 = this.useStencil ? this.depthFormat === a.FLOAT ? e3.DEPTH32F_STENCIL8 : this.target.webglVersion === a.WEBGL2 ? e3.DEPTH24_STENCIL8 : e3.DEPTH_STENCIL : this.target.webglVersion === a.WEBGL2 ? this.depthFormat === a.FLOAT ? e3.DEPTH_COMPONENT32F : e3.DEPTH_COMPONENT24 : e3.DEPTH_COMPONENT;
                return {
                  internalFormat: e3,
                  format: r3,
                  type: t3
                };
              }
            }, {
              key: "_updateSize",
              value: function() {
                this._autoSized && (this.width = this.target.width, this.height = this.target.height, this.density = this.target.pixelDensity());
              }
            }, {
              key: "_canvasSizeChanged",
              value: function() {
                this._autoSized && this._handleResize();
              }
            }, {
              key: "_handleResize",
              value: function() {
                var e3 = this.color, t3 = this.depth, r3 = this.colorRenderbuffer, o2 = this.depthRenderbuffer, e3 = (this._deleteTexture(e3), t3 && this._deleteTexture(t3), this.gl);
                r3 && e3.deleteRenderbuffer(r3), o2 && e3.deleteRenderbuffer(o2), this._recreateTextures(), this.defaultCamera._resize();
              }
            }, {
              key: "createCamera",
              value: function() {
                var e3 = new b(this);
                return e3._computeCameraDefaultSettings(), e3._setDefaultCamera(), this.target._renderer._curCamera = e3;
              }
            }, {
              key: "_deleteTexture",
              value: function(e3) {
                this.gl.deleteTexture(e3.rawTexture()), this.target._renderer.textures.delete(e3);
              }
            }, {
              key: "remove",
              value: function() {
                var e3 = this.gl;
                this._deleteTexture(this.color), this.depth && this._deleteTexture(this.depth), e3.deleteFramebuffer(this.framebuffer), this.aaFramebuffer && e3.deleteFramebuffer(this.aaFramebuffer), this.depthRenderbuffer && e3.deleteRenderbuffer(this.depthRenderbuffer), this.colorRenderbuffer && e3.deleteRenderbuffer(this.colorRenderbuffer), this.target._renderer.framebuffers.delete(this);
              }
            }, {
              key: "begin",
              value: function() {
                this.prevFramebuffer = this.target._renderer.activeFramebuffer(), this.prevFramebuffer && this.prevFramebuffer._beforeEnd(), this.target._renderer.activeFramebuffers.push(this), this._beforeBegin(), this.target.push(), this.target.setCamera(this.defaultCamera), this.target.resetMatrix(), this.target._renderer.uViewMatrix.set(this.target._renderer._curCamera.cameraMatrix), this.target._renderer.uModelMatrix.reset(), this.target._renderer._applyStencilTestIfClipping();
              }
            }, {
              key: "_framebufferToBind",
              value: function() {
                return this.antialias ? this.aaFramebuffer : this.framebuffer;
              }
            }, {
              key: "_beforeBegin",
              value: function() {
                var e3 = this.gl;
                e3.bindFramebuffer(e3.FRAMEBUFFER, this._framebufferToBind()), this.target._renderer.viewport(this.width * this.density, this.height * this.density);
              }
            }, {
              key: "_beforeEnd",
              value: function() {
                if (this.antialias) {
                  var e3 = this.gl, t3 = (e3.bindFramebuffer(e3.READ_FRAMEBUFFER, this.aaFramebuffer), e3.bindFramebuffer(e3.DRAW_FRAMEBUFFER, this.framebuffer), [[e3.COLOR_BUFFER_BIT, this.colorP5Texture.glMagFilter]]);
                  this.useDepth && t3.push([e3.DEPTH_BUFFER_BIT, this.depthP5Texture.glMagFilter]);
                  for (var r3 = 0, o2 = t3; r3 < o2.length; r3++) {
                    var n2 = u2(o2[r3], 2), s4 = n2[0], n2 = n2[1];
                    e3.blitFramebuffer(0, 0, this.width * this.density, this.height * this.density, 0, 0, this.width * this.density, this.height * this.density, s4, n2);
                  }
                }
              }
            }, {
              key: "end",
              value: function() {
                var e3 = this.gl;
                if (this.target.pop(), this.target._renderer.activeFramebuffers.pop() !== this) throw new Error("It looks like you've called end() while another Framebuffer is active.");
                this._beforeEnd(), this.prevFramebuffer ? this.prevFramebuffer._beforeBegin() : (e3.bindFramebuffer(e3.FRAMEBUFFER, null), this.target._renderer.viewport(this.target._renderer._origViewport.width, this.target._renderer._origViewport.height)), this.target._renderer._applyStencilTestIfClipping();
              }
            }, {
              key: "draw",
              value: function(e3) {
                this.begin(), e3(), this.end();
              }
            }, {
              key: "loadPixels",
              value: function() {
                var e3 = this.gl, t3 = this.target._renderer.activeFramebuffer(), r3 = (e3.bindFramebuffer(e3.FRAMEBUFFER, this.framebuffer), this._glColorFormat());
                this.pixels = (0, p.readPixelsWebGL)(this.pixels, e3, this.framebuffer, 0, 0, this.width * this.density, this.height * this.density, r3.format, r3.type), t3 ? e3.bindFramebuffer(e3.FRAMEBUFFER, t3._framebufferToBind()) : e3.bindFramebuffer(e3.FRAMEBUFFER, null);
              }
            }, {
              key: "get",
              value: function(e3, t3, r3, o2) {
                f.default._validateParameters("p5.Framebuffer.get", arguments);
                var n2 = this._glColorFormat();
                if (void 0 === e3 && void 0 === t3) t3 = e3 = 0, r3 = this.width, o2 = this.height;
                else if (void 0 === r3 && void 0 === o2) return (e3 < 0 || t3 < 0 || e3 >= this.width || t3 >= this.height) && (console.warn("The x and y values passed to p5.Framebuffer.get are outside of its range and will be clamped."), e3 = this.target.constrain(e3, 0, this.width - 1), t3 = this.target.constrain(t3, 0, this.height - 1)), (0, p.readPixelWebGL)(this.gl, this.framebuffer, e3 * this.density, t3 * this.density, n2.format, n2.type);
                e3 = this.target.constrain(e3, 0, this.width - 1), t3 = this.target.constrain(t3, 0, this.height - 1), r3 = this.target.constrain(r3, 1, this.width - e3), o2 = this.target.constrain(o2, 1, this.height - t3);
                for (var s4 = (0, p.readPixelsWebGL)(void 0, this.gl, this.framebuffer, e3 * this.density, t3 * this.density, r3 * this.density, o2 * this.density, n2.format, n2.type), i2 = new Uint8ClampedArray(r3 * o2 * this.density * this.density * 4), a2 = (i2.fill(255), n2.type === this.gl.RGB ? 3 : 4), l2 = 0; l2 < o2 * this.density; l2++) for (var u3 = 0; u3 < r3 * this.density; u3++) for (var c2 = 0; c2 < 4; c2++) {
                  var d2, h2 = 4 * (l2 * r3 * this.density + u3) + c2;
                  c2 < a2 && (d2 = 4 == a2 ? h2 : (l2 * r3 * this.density + u3) * a2 + c2, i2[h2] = s4[d2]);
                }
                e3 = new f.default.Image(r3 * this.density, o2 * this.density);
                return e3.imageData = e3.canvas.getContext("2d").createImageData(e3.width, e3.height), e3.imageData.data.set(i2), e3.pixels = e3.imageData.data, e3.updatePixels(), 1 !== this.density && e3.resize(r3, o2), e3;
              }
            }, {
              key: "updatePixels",
              value: function() {
                var e3 = this.gl, t3 = (this.colorP5Texture.bindTexture(), this._glColorFormat()), r3 = t3.format === e3.RGBA ? 4 : 3, r3 = this.width * this.height * this.density * this.density * r3, o2 = t3.type === e3.UNSIGNED_BYTE ? Uint8Array : Float32Array;
                if (!(this.pixels instanceof o2) || this.pixels.length !== r3) throw new Error("The pixels array has not been set correctly. Please call loadPixels() before updatePixels().");
                e3.texImage2D(e3.TEXTURE_2D, 0, t3.internalFormat, this.width * this.density, this.height * this.density, 0, t3.format, t3.type, this.pixels), this.colorP5Texture.unbindTexture();
                o2 = this.target._renderer.activeFramebuffer();
                this.antialias ? (this.begin(), this.target.push(), this.target.imageMode(this.target.CENTER), this.target.resetMatrix(), this.target.noStroke(), this.target.clear(), this.target.image(this, 0, 0), this.target.pop(), this.useDepth && (e3.clearDepth(1), e3.clear(e3.DEPTH_BUFFER_BIT)), this.end()) : (e3.bindFramebuffer(e3.FRAMEBUFFER, this.framebuffer), this.useDepth && (e3.clearDepth(1), e3.clear(e3.DEPTH_BUFFER_BIT)), o2 ? e3.bindFramebuffer(e3.FRAMEBUFFER, o2._framebufferToBind()) : e3.bindFramebuffer(e3.FRAMEBUFFER, null));
              }
            }]), s3;
          }()), e2 = f.default.Framebuffer = j;
          r2.default = e2;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "./p5.RendererGL": 341,
          "./p5.Texture": 343,
          "core-js/modules/es.array.fill": 156,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.get-prototype-of": 188,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.reflect.construct": 192,
          "core-js/modules/es.reflect.get": 193,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.float32-array": 219,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239,
          "core-js/modules/es.typed-array.uint8-array": 242,
          "core-js/modules/es.typed-array.uint8-clamped-array": 243,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        335: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.flat"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.last-index-of"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.unscopables.flat"), e2("core-js/modules/es.array-buffer.constructor"), e2("core-js/modules/es.map"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.entries"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.set"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.sub"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.flat"), e2("core-js/modules/es.array.for-each"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.last-index-of"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.unscopables.flat"), e2("core-js/modules/es.array-buffer.constructor"), e2("core-js/modules/es.map"), e2("core-js/modules/es.number.constructor"), e2("core-js/modules/es.object.entries"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.set"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.sub"), e2("core-js/modules/web.dom-collections.for-each"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var F = (s2 = e2("../core/main")) && s2.__esModule ? s2 : {
            default: s2
          }, m = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          function c(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          function U(e3, t3) {
            return function(e4) {
              if (Array.isArray(e4)) return e4;
            }(e3) || function(e4, t4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) {
                var r3 = [], o2 = true, n2 = false, s3 = void 0;
                try {
                  for (var i2, a2 = e4[Symbol.iterator](); !(o2 = (i2 = a2.next()).done) && (r3.push(i2.value), !t4 || r3.length !== t4); o2 = true) ;
                } catch (e5) {
                  n2 = true, s3 = e5;
                } finally {
                  try {
                    o2 || null == a2.return || a2.return();
                  } finally {
                    if (n2) throw s3;
                  }
                }
                return r3;
              }
            }(e3, t3) || function() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }();
          }
          function n(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          F.default.Geometry = function() {
            function o2(e4, t4, r4) {
              if (!(this instanceof o2)) throw new TypeError("Cannot call a class as a function");
              this.vertices = [], this.boundingBoxCache = null, this.lineVertices = new F.default.DataArray(), this.lineTangentsIn = new F.default.DataArray(), this.lineTangentsOut = new F.default.DataArray(), this.lineSides = new F.default.DataArray(), this.vertexNormals = [], this.faces = [], this.uvs = [], this.edges = [], this.vertexColors = [], this.vertexStrokeColors = [], this.lineVertexColors = new F.default.DataArray(), this.detailX = void 0 !== e4 ? e4 : 1, this.detailY = void 0 !== t4 ? t4 : 1, this.dirtyFlags = {}, this._hasFillTransparency = void 0, this._hasStrokeTransparency = void 0, r4 instanceof Function && r4.call(this);
            }
            var e3, t3, r3;
            return e3 = o2, (t3 = [{
              key: "calculateBoundingBox",
              value: function() {
                if (!this.boundingBoxCache) {
                  for (var e4 = new F.default.Vector(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), t4 = new F.default.Vector(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE), r4 = 0; r4 < this.vertices.length; r4++) {
                    var o3 = this.vertices[r4];
                    e4.x = Math.min(e4.x, o3.x), e4.y = Math.min(e4.y, o3.y), e4.z = Math.min(e4.z, o3.z), t4.x = Math.max(t4.x, o3.x), t4.y = Math.max(t4.y, o3.y), t4.z = Math.max(t4.z, o3.z);
                  }
                  var n2 = new F.default.Vector(t4.x - e4.x, t4.y - e4.y, t4.z - e4.z), s3 = new F.default.Vector((e4.x + t4.x) / 2, (e4.y + t4.y) / 2, (e4.z + t4.z) / 2);
                  this.boundingBoxCache = {
                    min: e4,
                    max: t4,
                    size: n2,
                    offset: s3
                  };
                }
                return this.boundingBoxCache;
              }
            }, {
              key: "reset",
              value: function() {
                this._hasFillTransparency = void 0, this._hasStrokeTransparency = void 0, this.lineVertices.clear(), this.lineTangentsIn.clear(), this.lineTangentsOut.clear(), this.lineSides.clear(), this.vertices.length = 0, this.edges.length = 0, this.vertexColors.length = 0, this.vertexStrokeColors.length = 0, this.lineVertexColors.clear(), this.vertexNormals.length = 0, this.uvs.length = 0, this.dirtyFlags = {};
              }
            }, {
              key: "hasFillTransparency",
              value: function() {
                if (void 0 === this._hasFillTransparency) {
                  this._hasFillTransparency = false;
                  for (var e4 = 0; e4 < this.vertexColors.length; e4 += 4) if (this.vertexColors[e4 + 3] < 1) {
                    this._hasFillTransparency = true;
                    break;
                  }
                }
                return this._hasFillTransparency;
              }
            }, {
              key: "hasStrokeTransparency",
              value: function() {
                if (void 0 === this._hasStrokeTransparency) {
                  this._hasStrokeTransparency = false;
                  for (var e4 = 0; e4 < this.lineVertexColors.length; e4 += 4) if (this.lineVertexColors[e4 + 3] < 1) {
                    this._hasStrokeTransparency = true;
                    break;
                  }
                }
                return this._hasStrokeTransparency;
              }
            }, {
              key: "clearColors",
              value: function() {
                return this.vertexColors = [], this;
              }
            }, {
              key: "saveObj",
              value: function() {
                var r4 = this, e4 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "model.obj", o3 = "";
                if (this.vertices.forEach(function(e5) {
                  o3 += "v ".concat(e5.x, " ").concat(e5.y, " ").concat(e5.z, "\n");
                }), this.uvs && 0 < this.uvs.length) for (var t4 = 0; t4 < this.uvs.length; t4 += 2) o3 += "vt ".concat(this.uvs[t4], " ").concat(this.uvs[t4 + 1], "\n");
                this.vertexNormals && 0 < this.vertexNormals.length && this.vertexNormals.forEach(function(e5) {
                  o3 += "vn ".concat(e5.x, " ").concat(e5.y, " ").concat(e5.z, "\n");
                }), this.faces.forEach(function(e5) {
                  var t5 = "f";
                  e5.forEach(function(e6) {
                    t5 = t5 + " " + (e6 + 1), (0 < r4.vertexNormals.length || 0 < r4.uvs.length) && (t5 += "/", 0 < r4.uvs.length && (t5 += e6 + 1), t5 += "/", 0 < r4.vertexNormals.length && (t5 += e6 + 1));
                  }), o3 += t5 + "\n";
                });
                var n2 = new Blob([o3], {
                  type: "text/plain"
                });
                F.default.prototype.downloadFile(n2, e4, "obj");
              }
            }, {
              key: "saveStl",
              value: function() {
                var e4 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "model.stl", t4 = (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}).binary, t4 = void 0 !== t4 && t4, r4 = e4.substring(0, e4.lastIndexOf(".")), o3 = [], n2 = true, s3 = false, i2 = void 0;
                try {
                  for (var a2, l = this.faces[Symbol.iterator](); !(n2 = (a2 = l.next()).done); n2 = true) {
                    var u2 = a2.value, c2 = F.default.Vector.sub(this.vertices[u2[1]], this.vertices[u2[0]]), d = F.default.Vector.sub(this.vertices[u2[2]], this.vertices[u2[0]]), h = c2.y * d.z - c2.z * d.y, f = c2.z * d.x - c2.x * d.z, p = c2.x * d.y - c2.y * d.x;
                    o3.push(new F.default.Vector(h, f, p).normalize());
                  }
                } catch (e5) {
                  s3 = true, i2 = e5;
                } finally {
                  try {
                    n2 || null == l.return || l.return();
                  } finally {
                    if (s3) throw i2;
                  }
                }
                if (t4) {
                  var m2, y = 80, s3 = 2 * this.faces.length + 3 * this.faces.length * 4 * 4 + 80 + 4, i2 = new ArrayBuffer(s3);
                  (m2 = new DataView(i2)).setUint32(y, this.faces.length, true), y += 4;
                  for (var g = 0, v = Object.entries(this.faces); g < v.length; g++) {
                    var b = U(v[g], 2), _ = b[0], b = b[1], _ = o3[_], j = (m2.setFloat32(y, _.x, true), y += 4, m2.setFloat32(y, _.y, true), y += 4, m2.setFloat32(y, _.z, true), y += 4, true), _ = false, x = void 0;
                    try {
                      for (var w, S = b[Symbol.iterator](); !(j = (w = S.next()).done); j = true) {
                        var I = w.value, T = this.vertices[I];
                        m2.setFloat32(y, T.x, true), y += 4, m2.setFloat32(y, T.y, true), y += 4, m2.setFloat32(y, T.z, true), y += 4;
                      }
                    } catch (e5) {
                      _ = true, x = e5;
                    } finally {
                      try {
                        j || null == S.return || S.return();
                      } finally {
                        if (_) throw x;
                      }
                    }
                    m2.setUint16(y, 0, true), y += 2;
                  }
                } else {
                  m2 = "solid " + r4 + "\n";
                  for (var E = 0, M = Object.entries(this.faces); E < M.length; E++) {
                    var k = U(M[E], 2), O = k[0], k = k[1], O = o3[O], C = (m2 = m2 + (" facet norm " + O.x + " " + O.y + " " + O.z + "\n") + "  outer loop\n", true), O = false, A = void 0;
                    try {
                      for (var P, L = k[Symbol.iterator](); !(C = (P = L.next()).done); C = true) {
                        var D = P.value, R = this.vertices[D];
                        m2 += "   vertex " + R.x + " " + R.y + " " + R.z + "\n";
                      }
                    } catch (e5) {
                      O = true, A = e5;
                    } finally {
                      try {
                        C || null == L.return || L.return();
                      } finally {
                        if (O) throw A;
                      }
                    }
                    m2 = m2 + "  endloop\n endfacet\n";
                  }
                  m2 += "endsolid " + r4 + "\n";
                }
                t4 = new Blob([m2], {
                  type: "text/plain"
                });
                F.default.prototype.downloadFile(t4, e4, "stl");
              }
            }, {
              key: "flipU",
              value: function() {
                this.uvs = this.uvs.flat().map(function(e4, t4) {
                  return t4 % 2 == 0 ? 1 - e4 : e4;
                });
              }
            }, {
              key: "flipV",
              value: function() {
                this.uvs = this.uvs.flat().map(function(e4, t4) {
                  return t4 % 2 == 0 ? e4 : 1 - e4;
                });
              }
            }, {
              key: "computeFaces",
              value: function() {
                this.faces.length = 0;
                for (var e4, t4, r4, o3 = this.detailX + 1, n2 = 0; n2 < this.detailY; n2++) for (var s3 = 0; s3 < this.detailX; s3++) t4 = (n2 + 1) * o3 + s3 + 1, this.faces.push([n2 * o3 + s3, e4 = n2 * o3 + s3 + 1, r4 = (n2 + 1) * o3 + s3]), this.faces.push([r4, e4, t4]);
                return this;
              }
            }, {
              key: "_getFaceNormal",
              value: function(e4) {
                var e4 = this.faces[e4], t4 = this.vertices[e4[0]], r4 = this.vertices[e4[1]], e4 = this.vertices[e4[2]], r4 = F.default.Vector.sub(r4, t4), e4 = F.default.Vector.sub(e4, t4), t4 = F.default.Vector.cross(r4, e4), o3 = F.default.Vector.mag(t4), r4 = o3 / (F.default.Vector.mag(r4) * F.default.Vector.mag(e4));
                return 0 === r4 || isNaN(r4) ? (console.warn("p5.Geometry.prototype._getFaceNormal:", "face has colinear sides or a repeated vertex"), t4) : (1 < r4 && (r4 = 1), t4.mult(Math.asin(r4) / o3));
              }
            }, {
              key: "computeNormals",
              value: function() {
                var e4, s3 = this, t4 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : m.FLAT, r4 = (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}).roundToPrecision, i2 = this.vertexNormals, o3 = this.vertices, n2 = this.faces;
                if (t4 === m.SMOOTH) {
                  for (var a2 = {}, l = [], u2 = Math.pow(10, void 0 === r4 ? 3 : r4), c2 = function(e5) {
                    return Math.round(e5 * u2) / u2;
                  }, d = function(e5) {
                    return "".concat(c2(e5.x), ",").concat(c2(e5.y), ",").concat(c2(e5.z));
                  }, h = 0; h < o3.length; h++) {
                    var f = o3[h], p = d(f);
                    void 0 === a2[p] && (a2[p] = l.length, l.push(f));
                  }
                  n2.forEach(function(e5) {
                    for (var t5 = 0; t5 < 3; ++t5) {
                      var r5 = e5[t5], r5 = o3[r5], r5 = d(r5);
                      e5[t5] = a2[r5];
                    }
                  }), this.edges.forEach(function(e5) {
                    for (var t5 = 0; t5 < 2; ++t5) {
                      var r5 = e5[t5], r5 = o3[r5], r5 = d(r5);
                      e5[t5] = a2[r5];
                    }
                  }), this.vertices = o3 = l;
                }
                for (e4 = i2.length = 0; e4 < o3.length; ++e4) i2.push(new F.default.Vector());
                for (n2.forEach(function(e5, t5) {
                  for (var r5 = s3._getFaceNormal(t5), o4 = 0; o4 < 3; ++o4) {
                    var n3 = e5[o4];
                    i2[n3].add(r5);
                  }
                }), e4 = 0; e4 < o3.length; ++e4) i2[e4].normalize();
                return this;
              }
            }, {
              key: "averageNormals",
              value: function() {
                for (var e4 = 0; e4 <= this.detailY; e4++) {
                  var t4 = this.detailX + 1, r4 = F.default.Vector.add(this.vertexNormals[e4 * t4], this.vertexNormals[e4 * t4 + this.detailX]), r4 = F.default.Vector.div(r4, 2);
                  this.vertexNormals[e4 * t4] = r4, this.vertexNormals[e4 * t4 + this.detailX] = r4;
                }
                return this;
              }
            }, {
              key: "averagePoleNormals",
              value: function() {
                for (var e4 = new F.default.Vector(0, 0, 0), t4 = 0; t4 < this.detailX; t4++) e4.add(this.vertexNormals[t4]);
                for (var e4 = F.default.Vector.div(e4, this.detailX), r4 = 0; r4 < this.detailX; r4++) this.vertexNormals[r4] = e4;
                e4 = new F.default.Vector(0, 0, 0);
                for (var o3 = this.vertices.length - 1; o3 > this.vertices.length - 1 - this.detailX; o3--) e4.add(this.vertexNormals[o3]);
                e4 = F.default.Vector.div(e4, this.detailX);
                for (var n2 = this.vertices.length - 1; n2 > this.vertices.length - 1 - this.detailX; n2--) this.vertexNormals[n2] = e4;
                return this;
              }
            }, {
              key: "_makeTriangleEdges",
              value: function() {
                for (var e4 = this.edges.length = 0; e4 < this.faces.length; e4++) this.edges.push([this.faces[e4][0], this.faces[e4][1]]), this.edges.push([this.faces[e4][1], this.faces[e4][2]]), this.edges.push([this.faces[e4][2], this.faces[e4][0]]);
                return this;
              }
            }, {
              key: "_edgesToVertices",
              value: function() {
                this.lineVertices.clear(), this.lineTangentsIn.clear(), this.lineTangentsOut.clear(), this.lineSides.clear();
                for (var e4, t4 = /* @__PURE__ */ new Map(), r4 = /* @__PURE__ */ new Set(), o3 = 0; o3 < this.edges.length; o3++) {
                  var n2, s3 = this.edges[o3 - 1], i2 = this.edges[o3], a2 = this.vertices[i2[0]], l = this.vertices[i2[1]], u2 = 0 < this.vertexStrokeColors.length && s3 ? this.vertexStrokeColors.slice(4 * s3[1], 4 * (s3[1] + 1)) : [0, 0, 0, 0], c2 = 0 < this.vertexStrokeColors.length ? this.vertexStrokeColors.slice(4 * i2[0], 4 * (i2[0] + 1)) : [0, 0, 0, 0], d = 0 < this.vertexStrokeColors.length ? this.vertexStrokeColors.slice(4 * i2[1], 4 * (i2[1] + 1)) : [0, 0, 0, 0], h = l.copy().sub(a2).normalize(), f = 0 < h.magSq();
                  f && this._addSegment(a2, l, c2, d, h), 0 < o3 && s3[1] === i2[0] ? r4.has(i2[0]) || (r4.add(i2[0]), t4.delete(i2[0]), e4 && f && h.dot(e4) < 1 - 1e-8 && this._addJoin(a2, e4, h, c2)) : (f && !r4.has(i2[0]) && ((n2 = t4.get(i2[0])) ? (this._addJoin(a2, n2.dir, h, c2), t4.delete(i2[0]), r4.add(i2[0])) : t4.set(i2[0], {
                    point: a2,
                    dir: h.copy().mult(-1),
                    color: c2
                  })), e4 && !r4.has(s3[1]) && ((n2 = t4.get(s3[1])) ? (this._addJoin(this.vertices[s3[1]], e4, n2.dir.copy().mult(-1), u2), t4.delete(s3[1]), r4.add(s3[1])) : t4.set(s3[1], {
                    point: this.vertices[s3[1]],
                    dir: e4,
                    color: u2
                  }), e4 = void 0)), o3 !== this.edges.length - 1 || r4.has(i2[1]) || ((a2 = t4.get(i2[1])) ? (this._addJoin(l, h, a2.dir.copy().mult(-1), d), t4.delete(i2[1]), r4.add(i2[1])) : t4.set(i2[1], {
                    point: l,
                    dir: h,
                    color: d
                  })), f && (e4 = h);
                }
                var p = true, m2 = false, y = void 0;
                try {
                  for (var g, v = t4.values()[Symbol.iterator](); !(p = (g = v.next()).done); p = true) {
                    var b = g.value, _ = b.point, j = b.dir, x = b.color;
                    this._addCap(_, j, x);
                  }
                } catch (e5) {
                  m2 = true, y = e5;
                } finally {
                  try {
                    p || null == v.return || v.return();
                  } finally {
                    if (m2) throw y;
                  }
                }
                return this;
              }
            }, {
              key: "_addSegment",
              value: function(e4, t4, r4, o3, n2) {
                var e4 = e4.array(), t4 = t4.array(), s3 = n2.array();
                this.lineSides.push(1, 1, -1, 1, -1, -1);
                for (var i2 = 0, a2 = [this.lineTangentsIn, this.lineTangentsOut]; i2 < a2.length; i2++) for (var l = a2[i2], u2 = 0; u2 < 6; u2++) l.push.apply(l, c(s3));
                return (n2 = this.lineVertices).push.apply(n2, c(e4).concat(c(t4), c(e4), c(t4), c(t4), c(e4))), (n2 = this.lineVertexColors).push.apply(n2, c(r4).concat(c(o3), c(r4), c(o3), c(o3), c(r4))), this;
              }
            }, {
              key: "_addCap",
              value: function(e4, t4, r4) {
                for (var o3, n2 = e4.array(), s3 = t4.array(), i2 = [0, 0, 0], a2 = 0; a2 < 6; a2++) (o3 = this.lineVertices).push.apply(o3, c(n2)), (o3 = this.lineTangentsIn).push.apply(o3, c(s3)), (o3 = this.lineTangentsOut).push.apply(o3, i2), (o3 = this.lineVertexColors).push.apply(o3, c(r4));
                return this.lineSides.push(-1, 2, -2, 1, 2, -1), this;
              }
            }, {
              key: "_addJoin",
              value: function(e4, t4, r4, o3) {
                for (var n2, s3 = e4.array(), i2 = t4.array(), a2 = r4.array(), l = 0; l < 12; l++) (n2 = this.lineVertices).push.apply(n2, c(s3)), (n2 = this.lineTangentsIn).push.apply(n2, c(i2)), (n2 = this.lineTangentsOut).push.apply(n2, c(a2)), (n2 = this.lineVertexColors).push.apply(n2, c(o3));
                return this.lineSides.push(-1, -3, -2, -1, 0, -3), this.lineSides.push(3, 1, 2, 3, 0, 1), this;
              }
            }, {
              key: "normalize",
              value: function() {
                if (0 < this.vertices.length) {
                  for (var e4 = this.vertices[0].copy(), t4 = this.vertices[0].copy(), r4 = 0; r4 < this.vertices.length; r4++) e4.x = Math.max(e4.x, this.vertices[r4].x), t4.x = Math.min(t4.x, this.vertices[r4].x), e4.y = Math.max(e4.y, this.vertices[r4].y), t4.y = Math.min(t4.y, this.vertices[r4].y), e4.z = Math.max(e4.z, this.vertices[r4].z), t4.z = Math.min(t4.z, this.vertices[r4].z);
                  for (var o3 = F.default.Vector.lerp(e4, t4, 0.5), n2 = F.default.Vector.sub(e4, t4), s3 = 200 / Math.max(Math.max(n2.x, n2.y), n2.z), i2 = 0; i2 < this.vertices.length; i2++) this.vertices[i2].sub(o3), this.vertices[i2].mult(s3);
                }
                return this;
              }
            }]) && n(e3.prototype, t3), r3 && n(e3, r3), o2;
          }();
          var s2 = F.default.Geometry;
          r2.default = s2;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "core-js/modules/es.array-buffer.constructor": 152,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.flat": 160,
          "core-js/modules/es.array.for-each": 161,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.last-index-of": 167,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.array.unscopables.flat": 173,
          "core-js/modules/es.map": 175,
          "core-js/modules/es.number.constructor": 179,
          "core-js/modules/es.object.entries": 184,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.set": 197,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.sub": 208,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.for-each": 245,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        336: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.typed-array.float32-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.typed-array.float32-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var O = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function n(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o = t3[r3];
              o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e3, o.key, o);
            }
          }
          var s2 = Array, C = function(e3) {
            return Array.isArray(e3);
          }, e2 = ("undefined" != typeof Float32Array && (s2 = Float32Array, C = function(e3) {
            return Array.isArray(e3) || e3 instanceof Float32Array;
          }), O.default.Matrix = function() {
            function r3() {
              var e4 = this, t4 = r3;
              if (e4 instanceof t4) return arguments.length && ((e4 = arguments.length - 1) < 0 || arguments.length <= e4 ? void 0 : arguments[e4]) instanceof O.default && (this.p5 = (t4 = arguments.length - 1) < 0 || arguments.length <= t4 ? void 0 : arguments[t4]), "mat3" === (arguments.length <= 0 ? void 0 : arguments[0]) ? this.mat3 = Array.isArray(arguments.length <= 1 ? void 0 : arguments[1]) ? arguments.length <= 1 ? void 0 : arguments[1] : new s2([1, 0, 0, 0, 1, 0, 0, 0, 1]) : this.mat4 = Array.isArray(arguments.length <= 0 ? void 0 : arguments[0]) ? arguments.length <= 0 ? void 0 : arguments[0] : new s2([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]), this;
              throw new TypeError("Cannot call a class as a function");
            }
            var e3, t3, o;
            return e3 = r3, o = [{
              key: "identity",
              value: function(e4) {
                return new O.default.Matrix(e4);
              }
            }], (t3 = [{
              key: "reset",
              value: function() {
                return this.mat3 ? this.mat3.set([1, 0, 0, 0, 1, 0, 0, 0, 1]) : this.mat4 && this.mat4.set([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]), this;
              }
            }, {
              key: "set",
              value: function(e4) {
                var t4 = arguments;
                if (e4 instanceof O.default.Matrix ? t4 = e4.mat4 : C(e4) && (t4 = e4), 16 !== t4.length) O.default._friendlyError("Expected 16 values but received ".concat(t4.length, "."), "p5.Matrix.set");
                else for (var r4 = 0; r4 < 16; r4++) this.mat4[r4] = t4[r4];
                return this;
              }
            }, {
              key: "get",
              value: function() {
                return new O.default.Matrix(this.mat4, this.p5);
              }
            }, {
              key: "copy",
              value: function() {
                var e4;
                return void 0 !== this.mat3 ? ((e4 = new O.default.Matrix("mat3", this.p5)).mat3[0] = this.mat3[0], e4.mat3[1] = this.mat3[1], e4.mat3[2] = this.mat3[2], e4.mat3[3] = this.mat3[3], e4.mat3[4] = this.mat3[4], e4.mat3[5] = this.mat3[5], e4.mat3[6] = this.mat3[6], e4.mat3[7] = this.mat3[7], e4.mat3[8] = this.mat3[8]) : ((e4 = new O.default.Matrix(this.p5)).mat4[0] = this.mat4[0], e4.mat4[1] = this.mat4[1], e4.mat4[2] = this.mat4[2], e4.mat4[3] = this.mat4[3], e4.mat4[4] = this.mat4[4], e4.mat4[5] = this.mat4[5], e4.mat4[6] = this.mat4[6], e4.mat4[7] = this.mat4[7], e4.mat4[8] = this.mat4[8], e4.mat4[9] = this.mat4[9], e4.mat4[10] = this.mat4[10], e4.mat4[11] = this.mat4[11], e4.mat4[12] = this.mat4[12], e4.mat4[13] = this.mat4[13], e4.mat4[14] = this.mat4[14], e4.mat4[15] = this.mat4[15]), e4;
              }
            }, {
              key: "transpose",
              value: function(e4) {
                var t4, r4, o2, n2, s3, i;
                return e4 instanceof O.default.Matrix ? (t4 = e4.mat4[1], r4 = e4.mat4[2], o2 = e4.mat4[3], n2 = e4.mat4[6], s3 = e4.mat4[7], i = e4.mat4[11], this.mat4[0] = e4.mat4[0], this.mat4[1] = e4.mat4[4], this.mat4[2] = e4.mat4[8], this.mat4[3] = e4.mat4[12], this.mat4[4] = t4, this.mat4[5] = e4.mat4[5], this.mat4[6] = e4.mat4[9], this.mat4[7] = e4.mat4[13], this.mat4[8] = r4, this.mat4[9] = n2, this.mat4[10] = e4.mat4[10], this.mat4[11] = e4.mat4[14], this.mat4[12] = o2, this.mat4[13] = s3, this.mat4[14] = i, this.mat4[15] = e4.mat4[15]) : C(e4) && (t4 = e4[1], r4 = e4[2], o2 = e4[3], n2 = e4[6], s3 = e4[7], i = e4[11], this.mat4[0] = e4[0], this.mat4[1] = e4[4], this.mat4[2] = e4[8], this.mat4[3] = e4[12], this.mat4[4] = t4, this.mat4[5] = e4[5], this.mat4[6] = e4[9], this.mat4[7] = e4[13], this.mat4[8] = r4, this.mat4[9] = n2, this.mat4[10] = e4[10], this.mat4[11] = e4[14], this.mat4[12] = o2, this.mat4[13] = s3, this.mat4[14] = i, this.mat4[15] = e4[15]), this;
              }
            }, {
              key: "invert",
              value: function(e4) {
                e4 instanceof O.default.Matrix ? (t4 = e4.mat4[0], r4 = e4.mat4[1], o2 = e4.mat4[2], n2 = e4.mat4[3], s3 = e4.mat4[4], i = e4.mat4[5], a = e4.mat4[6], l = e4.mat4[7], u2 = e4.mat4[8], c = e4.mat4[9], d = e4.mat4[10], h = e4.mat4[11], f = e4.mat4[12], p = e4.mat4[13], m = e4.mat4[14], y = e4.mat4[15]) : C(e4) && (t4 = e4[0], r4 = e4[1], o2 = e4[2], n2 = e4[3], s3 = e4[4], i = e4[5], a = e4[6], l = e4[7], u2 = e4[8], c = e4[9], d = e4[10], h = e4[11], f = e4[12], p = e4[13], m = e4[14], y = e4[15]);
                var t4, r4, o2, n2, s3, i, a, l, u2, c, d, h, f, p, m, y, e4 = t4 * i - r4 * s3, g = t4 * a - o2 * s3, v = t4 * l - n2 * s3, b = r4 * a - o2 * i, _ = r4 * l - n2 * i, j = o2 * l - n2 * a, x = u2 * p - c * f, w = u2 * m - d * f, S = u2 * y - h * f, T = c * m - d * p, E = c * y - h * p, M = d * y - h * m, k = e4 * M - g * E + v * T + b * S - _ * w + j * x;
                return k ? (this.mat4[0] = (i * M - a * E + l * T) * (k = 1 / k), this.mat4[1] = (o2 * E - r4 * M - n2 * T) * k, this.mat4[2] = (p * j - m * _ + y * b) * k, this.mat4[3] = (d * _ - c * j - h * b) * k, this.mat4[4] = (a * S - s3 * M - l * w) * k, this.mat4[5] = (t4 * M - o2 * S + n2 * w) * k, this.mat4[6] = (m * v - f * j - y * g) * k, this.mat4[7] = (u2 * j - d * v + h * g) * k, this.mat4[8] = (s3 * E - i * S + l * x) * k, this.mat4[9] = (r4 * S - t4 * E - n2 * x) * k, this.mat4[10] = (f * _ - p * v + y * e4) * k, this.mat4[11] = (c * v - u2 * _ - h * e4) * k, this.mat4[12] = (i * w - s3 * T - a * x) * k, this.mat4[13] = (t4 * T - r4 * w + o2 * x) * k, this.mat4[14] = (p * g - f * b - m * e4) * k, this.mat4[15] = (u2 * b - c * g + d * e4) * k, this) : null;
              }
            }, {
              key: "invert3x3",
              value: function() {
                var e4 = this.mat3[0], t4 = this.mat3[1], r4 = this.mat3[2], o2 = this.mat3[3], n2 = this.mat3[4], s3 = this.mat3[5], i = this.mat3[6], a = this.mat3[7], l = this.mat3[8], u2 = l * n2 - s3 * a, c = -l * o2 + s3 * i, d = a * o2 - n2 * i, h = e4 * u2 + t4 * c + r4 * d;
                return h ? (this.mat3[0] = u2 * (h = 1 / h), this.mat3[1] = (-l * t4 + r4 * a) * h, this.mat3[2] = (s3 * t4 - r4 * n2) * h, this.mat3[3] = c * h, this.mat3[4] = (l * e4 - r4 * i) * h, this.mat3[5] = (-s3 * e4 + r4 * o2) * h, this.mat3[6] = d * h, this.mat3[7] = (-a * e4 + t4 * i) * h, this.mat3[8] = (n2 * e4 - t4 * o2) * h, this) : null;
              }
            }, {
              key: "transpose3x3",
              value: function(e4) {
                var t4 = (e4 = void 0 === e4 ? this.mat3 : e4)[1], r4 = e4[2], o2 = e4[5];
                return this.mat3[0] = e4[0], this.mat3[1] = e4[3], this.mat3[2] = e4[6], this.mat3[3] = t4, this.mat3[4] = e4[4], this.mat3[5] = e4[7], this.mat3[6] = r4, this.mat3[7] = o2, this.mat3[8] = e4[8], this;
              }
            }, {
              key: "inverseTranspose",
              value: function(e4) {
                e4 = e4.mat4, void 0 === this.mat3 ? O.default._friendlyError("sorry, this function only works with mat3") : (this.mat3[0] = e4[0], this.mat3[1] = e4[1], this.mat3[2] = e4[2], this.mat3[3] = e4[4], this.mat3[4] = e4[5], this.mat3[5] = e4[6], this.mat3[6] = e4[8], this.mat3[7] = e4[9], this.mat3[8] = e4[10]), e4 = this.invert3x3();
                if (e4) e4.transpose3x3(this.mat3);
                else for (var t4 = 0; t4 < 9; t4++) this.mat3[t4] = 0;
                return this;
              }
            }, {
              key: "determinant",
              value: function() {
                var e4 = this.mat4[0] * this.mat4[5] - this.mat4[1] * this.mat4[4], t4 = this.mat4[0] * this.mat4[6] - this.mat4[2] * this.mat4[4], r4 = this.mat4[0] * this.mat4[7] - this.mat4[3] * this.mat4[4], o2 = this.mat4[1] * this.mat4[6] - this.mat4[2] * this.mat4[5], n2 = this.mat4[1] * this.mat4[7] - this.mat4[3] * this.mat4[5], s3 = this.mat4[2] * this.mat4[7] - this.mat4[3] * this.mat4[6], i = this.mat4[8] * this.mat4[13] - this.mat4[9] * this.mat4[12], a = this.mat4[8] * this.mat4[14] - this.mat4[10] * this.mat4[12], l = this.mat4[8] * this.mat4[15] - this.mat4[11] * this.mat4[12], u2 = this.mat4[9] * this.mat4[14] - this.mat4[10] * this.mat4[13], c = this.mat4[9] * this.mat4[15] - this.mat4[11] * this.mat4[13];
                return e4 * (this.mat4[10] * this.mat4[15] - this.mat4[11] * this.mat4[14]) - t4 * c + r4 * u2 + o2 * l - n2 * a + s3 * i;
              }
            }, {
              key: "mult",
              value: function(e4) {
                var t4;
                if (e4 === this || e4 === this.mat4) t4 = this.copy().mat4;
                else if (e4 instanceof O.default.Matrix) t4 = e4.mat4;
                else if (C(e4)) t4 = e4;
                else {
                  if (16 !== arguments.length) return;
                  t4 = arguments;
                }
                var e4 = this.mat4[0], r4 = this.mat4[1], o2 = this.mat4[2], n2 = this.mat4[3];
                return this.mat4[0] = e4 * t4[0] + r4 * t4[4] + o2 * t4[8] + n2 * t4[12], this.mat4[1] = e4 * t4[1] + r4 * t4[5] + o2 * t4[9] + n2 * t4[13], this.mat4[2] = e4 * t4[2] + r4 * t4[6] + o2 * t4[10] + n2 * t4[14], this.mat4[3] = e4 * t4[3] + r4 * t4[7] + o2 * t4[11] + n2 * t4[15], e4 = this.mat4[4], r4 = this.mat4[5], o2 = this.mat4[6], n2 = this.mat4[7], this.mat4[4] = e4 * t4[0] + r4 * t4[4] + o2 * t4[8] + n2 * t4[12], this.mat4[5] = e4 * t4[1] + r4 * t4[5] + o2 * t4[9] + n2 * t4[13], this.mat4[6] = e4 * t4[2] + r4 * t4[6] + o2 * t4[10] + n2 * t4[14], this.mat4[7] = e4 * t4[3] + r4 * t4[7] + o2 * t4[11] + n2 * t4[15], e4 = this.mat4[8], r4 = this.mat4[9], o2 = this.mat4[10], n2 = this.mat4[11], this.mat4[8] = e4 * t4[0] + r4 * t4[4] + o2 * t4[8] + n2 * t4[12], this.mat4[9] = e4 * t4[1] + r4 * t4[5] + o2 * t4[9] + n2 * t4[13], this.mat4[10] = e4 * t4[2] + r4 * t4[6] + o2 * t4[10] + n2 * t4[14], this.mat4[11] = e4 * t4[3] + r4 * t4[7] + o2 * t4[11] + n2 * t4[15], e4 = this.mat4[12], r4 = this.mat4[13], o2 = this.mat4[14], n2 = this.mat4[15], this.mat4[12] = e4 * t4[0] + r4 * t4[4] + o2 * t4[8] + n2 * t4[12], this.mat4[13] = e4 * t4[1] + r4 * t4[5] + o2 * t4[9] + n2 * t4[13], this.mat4[14] = e4 * t4[2] + r4 * t4[6] + o2 * t4[10] + n2 * t4[14], this.mat4[15] = e4 * t4[3] + r4 * t4[7] + o2 * t4[11] + n2 * t4[15], this;
              }
            }, {
              key: "apply",
              value: function(e4) {
                var t4;
                if (e4 === this || e4 === this.mat4) t4 = this.copy().mat4;
                else if (e4 instanceof O.default.Matrix) t4 = e4.mat4;
                else if (C(e4)) t4 = e4;
                else {
                  if (16 !== arguments.length) return;
                  t4 = arguments;
                }
                var e4 = this.mat4, r4 = e4[0], o2 = e4[4], n2 = e4[8], s3 = e4[12], r4 = (e4[0] = t4[0] * r4 + t4[1] * o2 + t4[2] * n2 + t4[3] * s3, e4[4] = t4[4] * r4 + t4[5] * o2 + t4[6] * n2 + t4[7] * s3, e4[8] = t4[8] * r4 + t4[9] * o2 + t4[10] * n2 + t4[11] * s3, e4[12] = t4[12] * r4 + t4[13] * o2 + t4[14] * n2 + t4[15] * s3, e4[1]), o2 = e4[5], n2 = e4[9], s3 = e4[13], r4 = (e4[1] = t4[0] * r4 + t4[1] * o2 + t4[2] * n2 + t4[3] * s3, e4[5] = t4[4] * r4 + t4[5] * o2 + t4[6] * n2 + t4[7] * s3, e4[9] = t4[8] * r4 + t4[9] * o2 + t4[10] * n2 + t4[11] * s3, e4[13] = t4[12] * r4 + t4[13] * o2 + t4[14] * n2 + t4[15] * s3, e4[2]), o2 = e4[6], n2 = e4[10], s3 = e4[14], r4 = (e4[2] = t4[0] * r4 + t4[1] * o2 + t4[2] * n2 + t4[3] * s3, e4[6] = t4[4] * r4 + t4[5] * o2 + t4[6] * n2 + t4[7] * s3, e4[10] = t4[8] * r4 + t4[9] * o2 + t4[10] * n2 + t4[11] * s3, e4[14] = t4[12] * r4 + t4[13] * o2 + t4[14] * n2 + t4[15] * s3, e4[3]), o2 = e4[7], n2 = e4[11], s3 = e4[15];
                return e4[3] = t4[0] * r4 + t4[1] * o2 + t4[2] * n2 + t4[3] * s3, e4[7] = t4[4] * r4 + t4[5] * o2 + t4[6] * n2 + t4[7] * s3, e4[11] = t4[8] * r4 + t4[9] * o2 + t4[10] * n2 + t4[11] * s3, e4[15] = t4[12] * r4 + t4[13] * o2 + t4[14] * n2 + t4[15] * s3, this;
              }
            }, {
              key: "scale",
              value: function(e4, t4, r4) {
                return e4 instanceof O.default.Vector ? (t4 = e4.y, r4 = e4.z, e4 = e4.x) : e4 instanceof Array && (t4 = e4[1], r4 = e4[2], e4 = e4[0]), this.mat4[0] *= e4, this.mat4[1] *= e4, this.mat4[2] *= e4, this.mat4[3] *= e4, this.mat4[4] *= t4, this.mat4[5] *= t4, this.mat4[6] *= t4, this.mat4[7] *= t4, this.mat4[8] *= r4, this.mat4[9] *= r4, this.mat4[10] *= r4, this.mat4[11] *= r4, this;
              }
            }, {
              key: "rotate",
              value: function(e4, t4, r4, o2) {
                t4 instanceof O.default.Vector ? (r4 = t4.y, o2 = t4.z, t4 = t4.x) : t4 instanceof Array && (r4 = t4[1], o2 = t4[2], t4 = t4[0]);
                var n2 = Math.sqrt(t4 * t4 + r4 * r4 + o2 * o2), n2 = (t4 *= 1 / n2, r4 *= 1 / n2, o2 *= 1 / n2, this.mat4[0]), s3 = this.mat4[1], i = this.mat4[2], a = this.mat4[3], l = this.mat4[4], u2 = this.mat4[5], c = this.mat4[6], d = this.mat4[7], h = this.mat4[8], f = this.mat4[9], p = this.mat4[10], m = this.mat4[11], y = Math.sin(e4), e4 = Math.cos(e4), g = 1 - e4, v = t4 * t4 * g + e4, b = r4 * t4 * g + o2 * y, _ = o2 * t4 * g - r4 * y, j = t4 * r4 * g - o2 * y, x = r4 * r4 * g + e4, w = o2 * r4 * g + t4 * y, S = t4 * o2 * g + r4 * y, r4 = r4 * o2 * g - t4 * y, t4 = o2 * o2 * g + e4;
                return this.mat4[0] = n2 * v + l * b + h * _, this.mat4[1] = s3 * v + u2 * b + f * _, this.mat4[2] = i * v + c * b + p * _, this.mat4[3] = a * v + d * b + m * _, this.mat4[4] = n2 * j + l * x + h * w, this.mat4[5] = s3 * j + u2 * x + f * w, this.mat4[6] = i * j + c * x + p * w, this.mat4[7] = a * j + d * x + m * w, this.mat4[8] = n2 * S + l * r4 + h * t4, this.mat4[9] = s3 * S + u2 * r4 + f * t4, this.mat4[10] = i * S + c * r4 + p * t4, this.mat4[11] = a * S + d * r4 + m * t4, this;
              }
            }, {
              key: "translate",
              value: function(e4) {
                var t4 = e4[0], r4 = e4[1], e4 = e4[2] || 0;
                this.mat4[12] += this.mat4[0] * t4 + this.mat4[4] * r4 + this.mat4[8] * e4, this.mat4[13] += this.mat4[1] * t4 + this.mat4[5] * r4 + this.mat4[9] * e4, this.mat4[14] += this.mat4[2] * t4 + this.mat4[6] * r4 + this.mat4[10] * e4, this.mat4[15] += this.mat4[3] * t4 + this.mat4[7] * r4 + this.mat4[11] * e4;
              }
            }, {
              key: "rotateX",
              value: function(e4) {
                this.rotate(e4, 1, 0, 0);
              }
            }, {
              key: "rotateY",
              value: function(e4) {
                this.rotate(e4, 0, 1, 0);
              }
            }, {
              key: "rotateZ",
              value: function(e4) {
                this.rotate(e4, 0, 0, 1);
              }
            }, {
              key: "perspective",
              value: function(e4, t4, r4, o2) {
                var e4 = 1 / Math.tan(e4 / 2), n2 = 1 / (r4 - o2);
                return this.mat4[0] = e4 / t4, this.mat4[1] = 0, this.mat4[2] = 0, this.mat4[3] = 0, this.mat4[4] = 0, this.mat4[5] = e4, this.mat4[6] = 0, this.mat4[7] = 0, this.mat4[8] = 0, this.mat4[9] = 0, this.mat4[10] = (o2 + r4) * n2, this.mat4[11] = -1, this.mat4[12] = 0, this.mat4[13] = 0, this.mat4[14] = 2 * o2 * r4 * n2, this.mat4[15] = 0, this;
              }
            }, {
              key: "ortho",
              value: function(e4, t4, r4, o2, n2, s3) {
                var i = 1 / (e4 - t4), a = 1 / (r4 - o2), l = 1 / (n2 - s3);
                return this.mat4[0] = -2 * i, this.mat4[1] = 0, this.mat4[2] = 0, this.mat4[3] = 0, this.mat4[4] = 0, this.mat4[5] = -2 * a, this.mat4[6] = 0, this.mat4[7] = 0, this.mat4[8] = 0, this.mat4[9] = 0, this.mat4[10] = 2 * l, this.mat4[11] = 0, this.mat4[12] = (e4 + t4) * i, this.mat4[13] = (o2 + r4) * a, this.mat4[14] = (s3 + n2) * l, this.mat4[15] = 1, this;
              }
            }, {
              key: "multiplyVec4",
              value: function(e4, t4, r4, o2) {
                var n2 = new Array(4), s3 = this.mat4;
                return n2[0] = s3[0] * e4 + s3[4] * t4 + s3[8] * r4 + s3[12] * o2, n2[1] = s3[1] * e4 + s3[5] * t4 + s3[9] * r4 + s3[13] * o2, n2[2] = s3[2] * e4 + s3[6] * t4 + s3[10] * r4 + s3[14] * o2, n2[3] = s3[3] * e4 + s3[7] * t4 + s3[11] * r4 + s3[15] * o2, n2;
              }
            }, {
              key: "multiplyPoint",
              value: function(e4) {
                var t4 = e4.x, r4 = e4.y, e4 = e4.z, t4 = this.multiplyVec4(t4, r4, e4, 1);
                return new O.default.Vector(t4[0], t4[1], t4[2]);
              }
            }, {
              key: "multiplyAndNormalizePoint",
              value: function(e4) {
                var t4 = e4.x, r4 = e4.y, e4 = e4.z, t4 = this.multiplyVec4(t4, r4, e4, 1);
                return t4[0] /= t4[3], t4[1] /= t4[3], t4[2] /= t4[3], new O.default.Vector(t4[0], t4[1], t4[2]);
              }
            }, {
              key: "multiplyDirection",
              value: function(e4) {
                var t4 = e4.x, r4 = e4.y, e4 = e4.z, t4 = this.multiplyVec4(t4, r4, e4, 0);
                return new O.default.Vector(t4[0], t4[1], t4[2]);
              }
            }, {
              key: "mult3x3",
              value: function(e4) {
                var t4;
                if (e4 === this || e4 === this.mat3) t4 = this.copy().mat3;
                else if (e4 instanceof O.default.Matrix) t4 = e4.mat3;
                else if (C(e4)) t4 = e4;
                else {
                  if (9 !== arguments.length) return;
                  t4 = arguments;
                }
                var e4 = this.mat3[0], r4 = this.mat3[1], o2 = this.mat3[2];
                return this.mat3[0] = e4 * t4[0] + r4 * t4[3] + o2 * t4[6], this.mat3[1] = e4 * t4[1] + r4 * t4[4] + o2 * t4[7], this.mat3[2] = e4 * t4[2] + r4 * t4[5] + o2 * t4[8], e4 = this.mat3[3], r4 = this.mat3[4], o2 = this.mat3[5], this.mat3[3] = e4 * t4[0] + r4 * t4[3] + o2 * t4[6], this.mat3[4] = e4 * t4[1] + r4 * t4[4] + o2 * t4[7], this.mat3[5] = e4 * t4[2] + r4 * t4[5] + o2 * t4[8], e4 = this.mat3[6], r4 = this.mat3[7], o2 = this.mat3[8], this.mat3[6] = e4 * t4[0] + r4 * t4[3] + o2 * t4[6], this.mat3[7] = e4 * t4[1] + r4 * t4[4] + o2 * t4[7], this.mat3[8] = e4 * t4[2] + r4 * t4[5] + o2 * t4[8], this;
              }
            }, {
              key: "column",
              value: function(e4) {
                return new O.default.Vector(this.mat3[3 * e4], this.mat3[3 * e4 + 1], this.mat3[3 * e4 + 2]);
              }
            }, {
              key: "row",
              value: function(e4) {
                return new O.default.Vector(this.mat3[e4], this.mat3[e4 + 3], this.mat3[e4 + 6]);
              }
            }, {
              key: "diagonal",
              value: function() {
                return void 0 !== this.mat3 ? [this.mat3[0], this.mat3[4], this.mat3[8]] : [this.mat4[0], this.mat4[5], this.mat4[10], this.mat4[15]];
              }
            }, {
              key: "multiplyVec3",
              value: function(e4, t4) {
                return (t4 = void 0 === t4 ? e4.copy() : t4).x = this.row(0).dot(e4), t4.y = this.row(1).dot(e4), t4.z = this.row(2).dot(e4), t4;
              }
            }, {
              key: "createSubMatrix3x3",
              value: function() {
                var e4 = new O.default.Matrix("mat3");
                return e4.mat3[0] = this.mat4[0], e4.mat3[1] = this.mat4[1], e4.mat3[2] = this.mat4[2], e4.mat3[3] = this.mat4[4], e4.mat3[4] = this.mat4[5], e4.mat3[5] = this.mat4[6], e4.mat3[6] = this.mat4[8], e4.mat3[7] = this.mat4[9], e4.mat3[8] = this.mat4[10], e4;
              }
            }]) && n(e3.prototype, t3), o && n(e3, o), r3;
          }(), O.default.Matrix);
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.float32-array": 219,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239
        }],
        337: [function(e2, t2, r2) {
          "use strict";
          Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var s2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function o(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          s2.default.Quat = function() {
            function n(e4, t4, r4, o2) {
              if (!(this instanceof n)) throw new TypeError("Cannot call a class as a function");
              this.w = e4, this.vec = new s2.default.Vector(t4, r4, o2);
            }
            var e3, t3, r3;
            return e3 = n, r3 = [{
              key: "fromAxisAngle",
              value: function(e4, t4, r4, o2) {
                var n2 = Math.cos(e4 / 2), t4 = new s2.default.Vector(t4, r4, o2).normalize().mult(Math.sin(e4 / 2));
                return new s2.default.Quat(n2, t4.x, t4.y, t4.z);
              }
            }], (t3 = [{
              key: "conjugate",
              value: function() {
                return new s2.default.Quat(this.w, -this.vec.x, -this.vec.y, -this.vec.z);
              }
            }, {
              key: "multiply",
              value: function(e4) {
                return new s2.default.Quat(this.w * e4.w - this.vec.x * e4.vec.x - this.vec.y * e4.vec.y - this.vec.z - e4.vec.z, this.w * e4.vec.x + this.vec.x * e4.w + this.vec.y * e4.vec.z - this.vec.z * e4.vec.y, this.w * e4.vec.y - this.vec.x * e4.vec.z + this.vec.y * e4.w + this.vec.z * e4.vec.x, this.w * e4.vec.z + this.vec.x * e4.vec.y - this.vec.y * e4.vec.x + this.vec.z * e4.w);
              }
            }, {
              key: "rotateVector",
              value: function(e4) {
                return new s2.default.Vector.mult(e4, this.w * this.w - this.vec.dot(this.vec)).add(s2.default.Vector.mult(this.vec, 2 * e4.dot(this.vec))).add(s2.default.Vector.mult(this.vec, 2 * this.w).cross(e4)).clampToZero();
              }
            }, {
              key: "rotateBy",
              value: function(e4) {
                return e4.multiply(this).multiply(e4.conjugate()).vec.clampToZero();
              }
            }]) && o(e3.prototype, t3), r3 && o(e3, r3), n;
          }();
          e2 = s2.default.Quat;
          r2.default = e2;
        }, {
          "../core/main": 283
        }],
        338: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.map"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          e2 = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function o(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          e2.default.RenderBuffer = function() {
            function i(e4, t4, r4, o2, n, s2) {
              if (!(this instanceof i)) throw new TypeError("Cannot call a class as a function");
              this.size = e4, this.src = t4, this.dst = r4, this.attr = o2, this._renderer = n, this.map = s2;
            }
            var e3, t3, r3;
            return e3 = i, (t3 = [{
              key: "_prepareBuffer",
              value: function(e4, t4) {
                var r4, o2, n, s2 = t4.attributes, i2 = this._renderer.GL, a = e4.model || e4, s2 = s2[this.attr];
                s2 && (r4 = e4[this.dst], 0 < (o2 = a[this.src]).length ? ((n = !r4) && (e4[this.dst] = r4 = i2.createBuffer()), i2.bindBuffer(i2.ARRAY_BUFFER, r4), !n && false === a.dirtyFlags[this.src] || (n = (e4 = this.map) ? e4(o2) : o2, this._renderer._bindBuffer(r4, i2.ARRAY_BUFFER, n), a.dirtyFlags[this.src] = false), t4.enableAttrib(s2, this.size)) : -1 !== (e4 = s2.location) && this._renderer.registerEnabled.has(e4) && (i2.disableVertexAttribArray(e4), this._renderer.registerEnabled.delete(e4)));
              }
            }]) && o(e3.prototype, t3), r3 && o(e3, r3), i;
          }();
          e2 = e2.default.RenderBuffer;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.map": 168
        }],
        339: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.find-index"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.map"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.find-index"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.map"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var l = (n = e2("../core/main")) && n.__esModule ? n : {
            default: n
          }, h = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s2;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r3, s2) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          function f(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          e2("./p5.RenderBuffer"), l.default.RendererGL.prototype.beginShape = function(e3) {
            return this.immediateMode.shapeMode = void 0 !== e3 ? e3 : h.TESS, this.immediateMode.geometry.reset(), this.immediateMode.contourIndices = [], this;
          };
          var u2 = {
            vertices: 1,
            vertexNormals: 1,
            vertexColors: 4,
            vertexStrokeColors: 4,
            uvs: 2
          }, n = (l.default.RendererGL.prototype.beginContour = function() {
            if (this.immediateMode.shapeMode !== h.TESS) throw new Error("WebGL mode can only use contours with beginShape(TESS).");
            this.immediateMode.contourIndices.push(this.immediateMode.geometry.vertices.length);
          }, l.default.RendererGL.prototype.vertex = function(e3, t3) {
            if (this.immediateMode.shapeMode === h.QUADS && this.immediateMode.geometry.vertices.length % 6 == 3) for (var r3 in u2) {
              var o2 = u2[r3], r3 = this.immediateMode.geometry[r3];
              r3.push.apply(r3, f(r3.slice(r3.length - 3 * o2, r3.length - 2 * o2)).concat(f(r3.slice(r3.length - o2, r3.length))));
            }
            var n2, s2, i2 = n2 = s2 = 0, a2 = (3 === arguments.length ? i2 = arguments[2] : 4 === arguments.length ? (n2 = arguments[2], s2 = arguments[3]) : 5 === arguments.length && (i2 = arguments[2], n2 = arguments[3], s2 = arguments[4]), new l.default.Vector(e3, t3, i2)), a2 = (this.immediateMode.geometry.vertices.push(a2), this.immediateMode.geometry.vertexNormals.push(this._currentNormal), this.curFillColor || [0.5, 0.5, 0.5, 1]), a2 = (this.immediateMode.geometry.vertexColors.push(a2[0], a2[1], a2[2], a2[3]), this.curStrokeColor || [0.5, 0.5, 0.5, 1]);
            return this.immediateMode.geometry.vertexStrokeColors.push(a2[0], a2[1], a2[2], a2[3]), this.textureMode !== h.IMAGE || this.isProcessingVertices || (null !== this._tex ? 0 < this._tex.width && 0 < this._tex.height && (n2 /= this._tex.width, s2 /= this._tex.height) : void 0 === this.userFillShader && void 0 === this.userStrokeShader && void 0 === this.userPointShader && null === this._tex && 4 <= arguments.length && console.warn("You must first call texture() before using vertex() with image based u and v coordinates")), this.immediateMode.geometry.uvs.push(n2, s2), this.immediateMode._bezierVertex[0] = e3, this.immediateMode._bezierVertex[1] = t3, this.immediateMode._bezierVertex[2] = i2, this.immediateMode._quadraticVertex[0] = e3, this.immediateMode._quadraticVertex[1] = t3, this.immediateMode._quadraticVertex[2] = i2, this;
          }, l.default.RendererGL.prototype.normal = function(e3, t3, r3) {
            return e3 instanceof l.default.Vector ? this._currentNormal = e3 : this._currentNormal = new l.default.Vector(e3, t3, r3), this;
          }, l.default.RendererGL.prototype.endShape = function(e3, t3, r3, o2, n2, s2) {
            var i2, a2 = 6 < arguments.length && void 0 !== arguments[6] ? arguments[6] : 1;
            return this.immediateMode.shapeMode === h.POINTS ? this._drawPoints(this.immediateMode.geometry.vertices, this.immediateMode.buffers.point) : (3 === this.immediateMode.geometry.vertices.length && this.immediateMode.shapeMode === h.TESS && (this.immediateMode.shapeMode = h.TRIANGLES), this.isProcessingVertices = true, this._processVertices.apply(this, arguments), i2 = this.isProcessingVertices = false, this.immediateMode.shapeMode !== h.LINE_STRIP && this.immediateMode.shapeMode !== h.LINES || (this.immediateMode.shapeMode = h.TRIANGLE_FAN, i2 = true), this.immediateMode.shapeMode === h.QUADS ? this.immediateMode.shapeMode = h.TRIANGLES : this.immediateMode.shapeMode === h.QUAD_STRIP && (this.immediateMode.shapeMode = h.TRIANGLE_STRIP), this._doFill && !i2 && !this.geometryBuilder && 3 <= this.immediateMode.geometry.vertices.length && this._drawImmediateFill(a2), this._doStroke && !this.geometryBuilder && 1 <= this.immediateMode.geometry.lineVertices.length && this._drawImmediateStroke(), this.geometryBuilder && this.geometryBuilder.addImmediate(), this.isBezier = false, this.isQuadratic = false, this.isCurve = false, this.immediateMode._bezierVertex.length = 0, this.immediateMode._quadraticVertex.length = 0, this.immediateMode._curveVertex.length = 0), this;
          }, l.default.RendererGL.prototype._processVertices = function(e3) {
            var t3;
            0 !== this.immediateMode.geometry.vertices.length && (t3 = this._doStroke, e3 = e3 === h.CLOSE, t3 && (this.immediateMode.geometry.edges = this._calculateEdges(this.immediateMode.shapeMode, this.immediateMode.geometry.vertices, e3), this.geometryBuilder || this.immediateMode.geometry._edgesToVertices()), t3 = this.immediateMode.shapeMode === h.TESS, e3 = 0 < this.immediateMode.contourIndices.length, this._doFill && (this.isBezier || this.isQuadratic || this.isCurve || t3 || e3) && this.immediateMode.shapeMode !== h.LINES && this._tesselateShape());
          }, l.default.RendererGL.prototype._calculateEdges = function(e3, t3, r3) {
            var o2 = [], n2 = 0, s2 = this.immediateMode.contourIndices.slice(), i2 = 0;
            switch (e3) {
              case h.TRIANGLE_STRIP:
                for (n2 = 0; n2 < t3.length - 2; n2++) o2.push([n2, n2 + 1]), o2.push([n2, n2 + 2]);
                o2.push([n2, n2 + 1]);
                break;
              case h.TRIANGLE_FAN:
                for (n2 = 1; n2 < t3.length - 1; n2++) o2.push([0, n2]), o2.push([n2, n2 + 1]);
                o2.push([0, t3.length - 1]);
                break;
              case h.TRIANGLES:
                for (n2 = 0; n2 < t3.length - 2; n2 += 3) o2.push([n2, n2 + 1]), o2.push([n2 + 1, n2 + 2]), o2.push([n2 + 2, n2]);
                break;
              case h.LINES:
                for (n2 = 0; n2 < t3.length - 1; n2 += 2) o2.push([n2, n2 + 1]);
                break;
              case h.QUADS:
                for (n2 = 0; n2 < t3.length - 5; n2 += 6) o2.push([n2, n2 + 1]), o2.push([n2 + 1, n2 + 2]), o2.push([n2 + 3, n2 + 5]), o2.push([n2 + 4, n2 + 5]);
                break;
              case h.QUAD_STRIP:
                for (n2 = 0; n2 < t3.length - 2; n2 += 2) o2.push([n2, n2 + 1]), o2.push([n2, n2 + 2]), o2.push([n2 + 1, n2 + 3]);
                o2.push([n2, n2 + 1]);
                break;
              default:
                for (n2 = 0; n2 < t3.length; n2++) n2 + 1 < t3.length && n2 + 1 !== s2[0] ? o2.push([n2, n2 + 1]) : ((r3 || i2) && o2.push([n2, i2]), 0 < s2.length && (i2 = s2.shift()));
            }
            return e3 !== h.TESS && r3 && o2.push([t3.length - 1, 0]), o2;
          }, l.default.RendererGL.prototype._tesselateShape = function() {
            for (var u3 = this, e3 = (this.immediateMode.shapeMode = h.TRIANGLES, [[]]), t3 = 0; t3 < this.immediateMode.geometry.vertices.length; t3++) 0 < this.immediateMode.contourIndices.length && this.immediateMode.contourIndices[0] === t3 && (this.immediateMode.contourIndices.shift(), e3.push([])), e3[e3.length - 1].push(this.immediateMode.geometry.vertices[t3].x, this.immediateMode.geometry.vertices[t3].y, this.immediateMode.geometry.vertices[t3].z, this.immediateMode.geometry.uvs[2 * t3], this.immediateMode.geometry.uvs[2 * t3 + 1], this.immediateMode.geometry.vertexColors[4 * t3], this.immediateMode.geometry.vertexColors[4 * t3 + 1], this.immediateMode.geometry.vertexColors[4 * t3 + 2], this.immediateMode.geometry.vertexColors[4 * t3 + 3], this.immediateMode.geometry.vertexNormals[t3].x, this.immediateMode.geometry.vertexNormals[t3].y, this.immediateMode.geometry.vertexNormals[t3].z);
            for (var c, r3 = this._triangulate(e3), d = this.immediateMode.geometry.vertices, o2 = (this.immediateMode.geometry.vertices = [], this.immediateMode.geometry.vertexNormals = [], this.immediateMode.geometry.uvs = [], []), n2 = 0, s2 = r3.length; n2 < s2; n2 += l.default.RendererGL.prototype.tessyVertexSize) o2.push.apply(o2, f(r3.slice(n2 + 5, n2 + 9))), this.normal.apply(this, f(r3.slice(n2 + 9, n2 + 12))), this.vertex.apply(this, f(r3.slice(n2, n2 + 5)));
            this.geometryBuilder && (c = /* @__PURE__ */ new Map(), this.immediateMode.geometry.edges = this.immediateMode.geometry.edges.map(function(e4) {
              return e4.map(function(e5) {
                if (!c.has(e5)) {
                  var t4 = d[e5], r4 = u3.immediateMode.geometry.vertices.findIndex(function(e6) {
                    return t4.x === e6.x && t4.y === e6.y && t4.z === e6.z;
                  });
                  if (-1 === r4) {
                    for (var o3 = 1 / 0, n3 = 0, s3 = 0; s3 < u3.immediateMode.geometry.vertices.length; s3++) {
                      var i2 = u3.immediateMode.geometry.vertices[s3], a2 = t4.x - i2.x, l2 = t4.y - i2.y, i2 = t4.z - i2.z, a2 = a2 * a2 + l2 * l2 + i2 * i2;
                      a2 < o3 && (o3 = a2, n3 = s3);
                    }
                    r4 = n3;
                  }
                  c.set(e5, r4);
                }
                return c.get(e5);
              });
            })), this.immediateMode.geometry.vertexColors = o2;
          }, l.default.RendererGL.prototype._drawImmediateFill = function() {
            var e3, t3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 1, r3 = this.GL, o2 = (this._useVertexColor = 0 < this.immediateMode.geometry.vertexColors.length, e3 = this._getImmediateFillShader(), this._setFillUniforms(e3), true), n2 = false, s2 = void 0;
            try {
              for (var i2, a2 = this.immediateMode.buffers.fill[Symbol.iterator](); !(o2 = (i2 = a2.next()).done); o2 = true) i2.value._prepareBuffer(this.immediateMode.geometry, e3);
            } catch (e4) {
              n2 = true, s2 = e4;
            } finally {
              try {
                o2 || null == a2.return || a2.return();
              } finally {
                if (n2) throw s2;
              }
            }
            if (e3.disableRemainingAttributes(), this._applyColorBlend(this.curFillColor, this.immediateMode.geometry.hasFillTransparency()), 1 === t3) r3.drawArrays(this.immediateMode.shapeMode, 0, this.immediateMode.geometry.vertices.length);
            else try {
              r3.drawArraysInstanced(this.immediateMode.shapeMode, 0, this.immediateMode.geometry.vertices.length, t3);
            } catch (e4) {
              console.log("\u{1F338} p5.js says: Instancing is only supported in WebGL2 mode");
            }
            e3.unbindShader();
          }, l.default.RendererGL.prototype._drawImmediateStroke = function() {
            var e3 = this.GL, t3 = (this._useLineColor = 0 < this.immediateMode.geometry.vertexStrokeColors.length, this._getImmediateStrokeShader()), r3 = (this._setStrokeUniforms(t3), true), o2 = false, n2 = void 0;
            try {
              for (var s2, i2 = this.immediateMode.buffers.stroke[Symbol.iterator](); !(r3 = (s2 = i2.next()).done); r3 = true) s2.value._prepareBuffer(this.immediateMode.geometry, t3);
            } catch (e4) {
              o2 = true, n2 = e4;
            } finally {
              try {
                r3 || null == i2.return || i2.return();
              } finally {
                if (o2) throw n2;
              }
            }
            t3.disableRemainingAttributes(), this._applyColorBlend(this.curStrokeColor, this.immediateMode.geometry.hasFillTransparency()), e3.drawArrays(e3.TRIANGLES, 0, this.immediateMode.geometry.lineVertices.length / 3), t3.unbindShader();
          }, l.default.RendererGL);
          r2.default = n;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "./p5.RenderBuffer": 338,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.fill": 156,
          "core-js/modules/es.array.find-index": 158,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.map": 175,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        340: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.some"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.typed-array.float32-array"), e2("core-js/modules/es.typed-array.uint16-array"), e2("core-js/modules/es.typed-array.uint32-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.some"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.typed-array.float32-array"), e2("core-js/modules/es.typed-array.uint16-array"), e2("core-js/modules/es.typed-array.uint32-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var a = (s2 = e2("../core/main")) && s2.__esModule ? s2 : {
            default: s2
          }, n = (e2("./p5.RendererGL"), e2("./p5.RenderBuffer"), function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = l();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants")));
          function l() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), l = function() {
              return e3;
            }, e3);
          }
          a.default.RendererGL.prototype.freeGeometry = function(e3) {
            e3.gid ? this._freeBuffers(e3.gid) : console.warn("The model you passed to freeGeometry does not have an id!");
          }, a.default.RendererGL.prototype._initBufferDefaults = function(e3) {
            var t3;
            return this._freeBuffers(e3), 1e3 < Object.keys(this.retainedMode.geometry).length && (t3 = Object.keys(this.retainedMode.geometry)[0], this._freeBuffers(t3)), this.retainedMode.geometry[e3] = {};
          }, a.default.RendererGL.prototype._freeBuffers = function(e3) {
            var a2, l2 = this.retainedMode.geometry[e3];
            function t3(e4) {
              var t4 = true, r3 = false, o2 = void 0;
              try {
                for (var n2, s3 = e4[Symbol.iterator](); !(t4 = (n2 = s3.next()).done); t4 = true) {
                  var i2 = n2.value;
                  l2[i2.dst] && (a2.deleteBuffer(l2[i2.dst]), l2[i2.dst] = null);
                }
              } catch (e5) {
                r3 = true, o2 = e5;
              } finally {
                try {
                  t4 || null == s3.return || s3.return();
                } finally {
                  if (r3) throw o2;
                }
              }
            }
            l2 && (delete this.retainedMode.geometry[e3], a2 = this.GL, l2.indexBuffer && a2.deleteBuffer(l2.indexBuffer), t3(this.retainedMode.buffers.stroke), t3(this.retainedMode.buffers.fill));
          }, a.default.RendererGL.prototype.createBuffers = function(e3, t3) {
            var r3, o2, n2, s3 = this.GL, e3 = this._initBufferDefaults(e3), i2 = (e3.model = t3, e3.indexBuffer);
            return t3.faces.length ? (i2 = i2 || (e3.indexBuffer = s3.createBuffer()), n2 = (o2 = (r3 = a.default.RendererGL.prototype._flatten(t3.faces)).some(function(e4) {
              return 65535 < e4;
            })) ? Uint32Array : Uint16Array, this._bindBuffer(i2, s3.ELEMENT_ARRAY_BUFFER, r3, n2), e3.indexBufferType = o2 ? s3.UNSIGNED_INT : s3.UNSIGNED_SHORT, e3.vertexCount = 3 * t3.faces.length) : (i2 && (s3.deleteBuffer(i2), e3.indexBuffer = null), e3.vertexCount = t3.vertices ? t3.vertices.length : 0), e3.lineVertexCount = t3.lineVertices ? t3.lineVertices.length / 3 : 0, e3;
          }, a.default.RendererGL.prototype.drawBuffers = function(e3) {
            var t3 = this.GL, r3 = this.retainedMode.geometry[e3];
            if (!this.geometryBuilder && this._doFill && 0 < this.retainedMode.geometry[e3].vertexCount) {
              this._useVertexColor = 0 < r3.model.vertexColors.length;
              var o2 = this._getRetainedFillShader(), n2 = (this._setFillUniforms(o2), true), s3 = false, i2 = void 0;
              try {
                for (var a2, l2 = this.retainedMode.buffers.fill[Symbol.iterator](); !(n2 = (a2 = l2.next()).done); n2 = true) a2.value._prepareBuffer(r3, o2);
              } catch (e4) {
                s3 = true, i2 = e4;
              } finally {
                try {
                  n2 || null == l2.return || l2.return();
                } finally {
                  if (s3) throw i2;
                }
              }
              o2.disableRemainingAttributes(), r3.indexBuffer && this._bindBuffer(r3.indexBuffer, t3.ELEMENT_ARRAY_BUFFER), this._applyColorBlend(this.curFillColor, r3.model.hasFillTransparency()), this._drawElements(t3.TRIANGLES, e3), o2.unbindShader();
            }
            if (!this.geometryBuilder && this._doStroke && 0 < r3.lineVertexCount) {
              this._useLineColor = 0 < r3.model.vertexStrokeColors.length;
              var u2 = this._getRetainedStrokeShader(), c = (this._setStrokeUniforms(u2), true), s3 = false, i2 = void 0;
              try {
                for (var d, h = this.retainedMode.buffers.stroke[Symbol.iterator](); !(c = (d = h.next()).done); c = true) d.value._prepareBuffer(r3, u2);
              } catch (e4) {
                s3 = true, i2 = e4;
              } finally {
                try {
                  c || null == h.return || h.return();
                } finally {
                  if (s3) throw i2;
                }
              }
              u2.disableRemainingAttributes(), this._applyColorBlend(this.curStrokeColor, r3.model.hasStrokeTransparency()), this._drawArrays(t3.TRIANGLES, e3), u2.unbindShader();
            }
            return this.geometryBuilder && this.geometryBuilder.addRetained(r3), this;
          }, a.default.RendererGL.prototype.drawBuffersScaled = function(e3, t3, r3, o2) {
            var n2 = this.uModelMatrix.copy();
            try {
              this.uModelMatrix.scale(t3, r3, o2), this.drawBuffers(e3);
            } finally {
              this.uModelMatrix = n2;
            }
          }, a.default.RendererGL.prototype._drawArrays = function(e3, t3) {
            return this.GL.drawArrays(e3, 0, this.retainedMode.geometry[t3].lineVertexCount), this;
          }, a.default.RendererGL.prototype._drawElements = function(e3, t3) {
            var t3 = this.retainedMode.geometry[t3], r3 = this.GL;
            if (t3.indexBuffer) {
              if (this._pInst.webglVersion !== n.WEBGL2 && t3.indexBufferType === r3.UNSIGNED_INT && !r3.getExtension("OES_element_index_uint")) throw new Error("Unable to render a 3d model with > 65535 triangles. Your web browser does not support the WebGL Extension OES_element_index_uint.");
              r3.drawElements(r3.TRIANGLES, t3.vertexCount, t3.indexBufferType, 0);
            } else r3.drawArrays(e3 || r3.TRIANGLES, 0, t3.vertexCount);
          }, a.default.RendererGL.prototype._drawPoints = function(e3, t3) {
            var r3 = this.GL, o2 = this._getImmediatePointShader();
            this._setPointUniforms(o2), this._bindBuffer(t3, r3.ARRAY_BUFFER, this._vToNArray(e3), Float32Array, r3.STATIC_DRAW), o2.enableAttrib(o2.attributes.aPosition, 3), this._applyColorBlend(this.curStrokeColor), r3.drawArrays(r3.Points, 0, e3.length), o2.unbindShader();
          };
          var s2 = a.default.RendererGL;
          r2.default = s2;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "./p5.RenderBuffer": 338,
          "./p5.RendererGL": 341,
          "core-js/modules/es.array.fill": 156,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.some": 170,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.keys": 189,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.float32-array": 219,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239,
          "core-js/modules/es.typed-array.uint16-array": 240,
          "core-js/modules/es.typed-array.uint32-array": 241,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        341: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.copy-within"), e2("core-js/modules/es.array.every"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.flat"), e2("core-js/modules/es.array.flat-map"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.some"), e2("core-js/modules/es.array.unscopables.flat"), e2("core-js/modules/es.array.unscopables.flat-map"), e2("core-js/modules/es.map"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.reflect.construct"), e2("core-js/modules/es.reflect.get"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.set"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.typed-array.float32-array"), e2("core-js/modules/es.typed-array.float64-array"), e2("core-js/modules/es.typed-array.int16-array"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.uint16-array"), e2("core-js/modules/es.typed-array.uint32-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.copy-within"), e2("core-js/modules/es.array.every"), e2("core-js/modules/es.array.fill"), e2("core-js/modules/es.array.flat"), e2("core-js/modules/es.array.flat-map"), e2("core-js/modules/es.array.from"), e2("core-js/modules/es.array.includes"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.map"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.some"), e2("core-js/modules/es.array.unscopables.flat"), e2("core-js/modules/es.array.unscopables.flat-map"), e2("core-js/modules/es.map"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.set"), e2("core-js/modules/es.string.includes"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.typed-array.float32-array"), e2("core-js/modules/es.typed-array.float64-array"), e2("core-js/modules/es.typed-array.int16-array"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.uint16-array"), e2("core-js/modules/es.typed-array.uint32-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.readPixelsWebGL = O, r2.readPixelWebGL = C, r2.default = void 0;
          var g = n(e2("../core/main")), l = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = d();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants")), a = n(e2("./GeometryBuilder")), u2 = n(e2("libtess")), c = (e2("./p5.Shader"), e2("./p5.Camera"), e2("../core/p5.Renderer"), e2("./p5.Matrix"), e2("./p5.Framebuffer"), e2("path"), e2("./p5.Texture"));
          function d() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), d = function() {
              return e3;
            }, e3);
          }
          function n(e3) {
            return e3 && e3.__esModule ? e3 : {
              default: e3
            };
          }
          function h(e3) {
            return function(e4) {
              if (Array.isArray(e4)) {
                for (var t3 = 0, r3 = new Array(e4.length); t3 < e4.length; t3++) r3[t3] = e4[t3];
                return r3;
              }
            }(e3) || function(e4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) return Array.from(e4);
            }(e3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          function f(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          function p(e3, t3, r3) {
            return (p = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(e4, t4, r4) {
              var e4 = function(e5, t5) {
                for (; !Object.prototype.hasOwnProperty.call(e5, t5) && null !== (e5 = b(e5)); ) ;
                return e5;
              }(e4, t4);
              if (e4) return (e4 = Object.getOwnPropertyDescriptor(e4, t4)).get ? e4.get.call(r4) : e4.value;
            })(e3, t3, r3 || e3);
          }
          function m(e3, t3) {
            return (m = Object.setPrototypeOf || function(e4, t4) {
              return e4.__proto__ = t4, e4;
            })(e3, t3);
          }
          function y(o2) {
            return function() {
              var e3, t3, r3 = b(o2);
              return e3 = function() {
                if ("undefined" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {
                  if ("function" == typeof Proxy) return 1;
                  try {
                    return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                    })), 1;
                  } catch (e4) {
                  }
                }
              }() ? (e3 = b(this).constructor, Reflect.construct(r3, arguments, e3)) : r3.apply(this, arguments), r3 = this, !(t3 = e3) || "object" !== i(t3) && "function" != typeof t3 ? v(r3) : t3;
            };
          }
          function v(e3) {
            if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e3;
          }
          function b(e3) {
            return (b = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            })(e3);
          }
          function _(e3, t3, r3) {
            t3 in e3 ? Object.defineProperty(e3, t3, {
              value: r3,
              enumerable: true,
              configurable: true,
              writable: true
            }) : e3[t3] = r3;
          }
          function s2(e3, t3) {
            T += "#define STROKE_CAP_".concat(e3, " ").concat(t3, "\n"), w[l[e3]] = t3;
          }
          function j(e3, t3) {
            T += "#define STROKE_JOIN_".concat(e3, " ").concat(t3, "\n"), S[l[e3]] = t3;
          }
          var x, w = {}, S = {}, T = "", e2 = (s2("ROUND", 0), s2("PROJECT", 1), s2("SQUARE", 2), j("ROUND", 0), j("MITER", 1), j("BEVEL", 2), '#define PI 3.141592\n\nprecision highp float;\nprecision highp int;\n\nuniform mat4 uViewMatrix;\n\nuniform bool uUseLighting;\n\nuniform int uAmbientLightCount;\nuniform vec3 uAmbientColor[5];\nuniform mat3 uCameraRotation;\nuniform int uDirectionalLightCount;\nuniform vec3 uLightingDirection[5];\nuniform vec3 uDirectionalDiffuseColors[5];\nuniform vec3 uDirectionalSpecularColors[5];\n\nuniform int uPointLightCount;\nuniform vec3 uPointLightLocation[5];\nuniform vec3 uPointLightDiffuseColors[5];	\nuniform vec3 uPointLightSpecularColors[5];\n\nuniform int uSpotLightCount;\nuniform float uSpotLightAngle[5];\nuniform float uSpotLightConc[5];\nuniform vec3 uSpotLightDiffuseColors[5];\nuniform vec3 uSpotLightSpecularColors[5];\nuniform vec3 uSpotLightLocation[5];\nuniform vec3 uSpotLightDirection[5];\n\nuniform bool uSpecular;\nuniform float uShininess;\nuniform float uMetallic;\n\nuniform float uConstantAttenuation;\nuniform float uLinearAttenuation;\nuniform float uQuadraticAttenuation;\n\n// setting from  _setImageLightUniforms()\n// boolean to initiate the calculateImageDiffuse and calculateImageSpecular\nuniform bool uUseImageLight;\n// texture for use in calculateImageDiffuse\nuniform sampler2D environmentMapDiffused;\n// texture for use in calculateImageSpecular\nuniform sampler2D environmentMapSpecular;\n\nconst float specularFactor = 2.0;\nconst float diffuseFactor = 0.73;\n\nstruct LightResult {\n  float specular;\n  float diffuse;\n};\n\nfloat _phongSpecular(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n\n  vec3 R = reflect(lightDirection, surfaceNormal);\n  return pow(max(0.0, dot(R, viewDirection)), shininess);\n}\n\nfloat _lambertDiffuse(vec3 lightDirection, vec3 surfaceNormal) {\n  return max(0.0, dot(-lightDirection, surfaceNormal));\n}\n\nLightResult _light(vec3 viewDirection, vec3 normal, vec3 lightVector, float shininess, float metallic) {\n\n  vec3 lightDir = normalize(lightVector);\n\n  //compute our diffuse & specular terms\n  LightResult lr;\n  float specularIntensity = mix(1.0, 0.4, metallic);\n  float diffuseIntensity = mix(1.0, 0.1, metallic);\n  if (uSpecular)\n    lr.specular = (_phongSpecular(lightDir, viewDirection, normal, shininess)) * specularIntensity;\n    lr.diffuse = _lambertDiffuse(lightDir, normal) * diffuseIntensity;\n  return lr;\n}\n\n// converts the range of "value" from [min1 to max1] to [min2 to max2]\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec2 mapTextureToNormal( vec3 v ){\n  // x = r sin(phi) cos(theta)   \n  // y = r cos(phi)  \n  // z = r sin(phi) sin(theta)\n  float phi = acos( v.y );\n  // if phi is 0, then there are no x, z components\n  float theta = 0.0;\n  // else \n  theta = acos(v.x / sin(phi));\n  float sinTheta = v.z / sin(phi);\n  if (sinTheta < 0.0) {\n    // Turn it into -theta, but in the 0-2PI range\n    theta = 2.0 * PI - theta;\n  }\n  theta = theta / (2.0 * 3.14159);\n  phi = phi / 3.14159 ;\n  \n  vec2 angles = vec2( fract(theta + 0.25), 1.0 - phi );\n  return angles;\n}\n\n\nvec3 calculateImageDiffuse(vec3 vNormal, vec3 vViewPosition, float metallic){\n  // make 2 seperate builds \n  vec3 worldCameraPosition =  vec3(0.0, 0.0, 0.0);  // hardcoded world camera position\n  vec3 worldNormal = normalize(vNormal * uCameraRotation);\n  vec2 newTexCoor = mapTextureToNormal( worldNormal );\n  vec4 texture = TEXTURE( environmentMapDiffused, newTexCoor );\n  // this is to make the darker sections more dark\n  // png and jpg usually flatten the brightness so it is to reverse that\n  return mix(smoothstep(vec3(0.0), vec3(1.0), texture.xyz), vec3(0.0), metallic);\n}\n\nvec3 calculateImageSpecular(vec3 vNormal, vec3 vViewPosition, float shininess, float metallic){\n  vec3 worldCameraPosition =  vec3(0.0, 0.0, 0.0);\n  vec3 worldNormal = normalize(vNormal);\n  vec3 lightDirection = normalize( vViewPosition - worldCameraPosition );\n  vec3 R = reflect(lightDirection, worldNormal) * uCameraRotation;\n  vec2 newTexCoor = mapTextureToNormal( R );\n#ifdef WEBGL2\n  // In p5js the range of shininess is >= 1,\n  // Therefore roughness range will be ([0,1]*8)*20 or [0, 160]\n  // The factor of 8 is because currently the getSpecularTexture\n  // only calculated 8 different levels of roughness\n  // The factor of 20 is just to spread up this range so that,\n  // [1, max] of shininess is converted to [0,160] of roughness\n  float roughness = 20. / shininess;\n  vec4 outColor = textureLod(environmentMapSpecular, newTexCoor, roughness * 8.);\n#else\n  vec4 outColor = TEXTURE(environmentMapSpecular, newTexCoor);\n#endif\n  // this is to make the darker sections more dark\n  // png and jpg usually flatten the brightness so it is to reverse that\n  return mix(\n    pow(outColor.xyz, vec3(10)),\n    pow(outColor.xyz, vec3(1.2)),\n    metallic \n  );\n}\n\nvoid totalLight(\n  vec3 modelPosition,\n  vec3 normal,\n  float shininess,\n  float metallic,\n  out vec3 totalDiffuse,\n  out vec3 totalSpecular\n) {\n\n  totalSpecular = vec3(0.0);\n\n  if (!uUseLighting) {\n    totalDiffuse = vec3(1.0);\n    return;\n  }\n\n  totalDiffuse = vec3(0.0);\n\n  vec3 viewDirection = normalize(-modelPosition);\n\n  for (int j = 0; j < 5; j++) {\n    if (j < uDirectionalLightCount) {\n      vec3 lightVector = (uViewMatrix * vec4(uLightingDirection[j], 0.0)).xyz;\n      vec3 lightColor = uDirectionalDiffuseColors[j];\n      vec3 specularColor = uDirectionalSpecularColors[j];\n      LightResult result = _light(viewDirection, normal, lightVector, shininess, metallic);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if (j < uPointLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uPointLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n      //calculate attenuation\n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n      vec3 lightColor = lightFalloff * uPointLightDiffuseColors[j];\n      vec3 specularColor = lightFalloff * uPointLightSpecularColors[j];\n\n      LightResult result = _light(viewDirection, normal, lightVector, shininess, metallic);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if(j < uSpotLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uSpotLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n\n      vec3 lightDirection = (uViewMatrix * vec4(uSpotLightDirection[j], 0.0)).xyz;\n      float spotDot = dot(normalize(lightVector), normalize(lightDirection));\n      float spotFalloff;\n      if(spotDot < uSpotLightAngle[j]) {\n        spotFalloff = 0.0;\n      }\n      else {\n        spotFalloff = pow(spotDot, uSpotLightConc[j]);\n      }\n      lightFalloff *= spotFalloff;\n\n      vec3 lightColor = uSpotLightDiffuseColors[j];\n      vec3 specularColor = uSpotLightSpecularColors[j];\n     \n      LightResult result = _light(viewDirection, normal, lightVector, shininess, metallic);\n      \n      totalDiffuse += result.diffuse * lightColor * lightFalloff;\n      totalSpecular += result.specular * lightColor * specularColor * lightFalloff;\n    }\n  }\n\n  if( uUseImageLight ){\n    totalDiffuse += calculateImageDiffuse(normal, modelPosition, metallic);\n    totalSpecular += calculateImageSpecular(normal, modelPosition, shininess, metallic);\n  }\n\n  totalDiffuse *= diffuseFactor;\n  totalSpecular *= specularFactor;\n}\n'), E = {
            sphereMappingFrag: "#define PI 3.141592\n\nprecision highp float;\n  \nuniform sampler2D uSampler;\nuniform mat3 uNewNormalMatrix;\nuniform float uFovY;\nuniform float uAspect;\n\nvarying vec2 vTexCoord;\n  \nvoid main() {\n    float uFovX = uFovY * uAspect; \n    vec4 newTexColor = texture2D(uSampler, vTexCoord);\n    float angleY = mix(uFovY/2.0,  -uFovY/2.0, vTexCoord.y);\n    float angleX = mix(uFovX/2.0, -uFovX/2.0, vTexCoord.x);\n    vec3 rotatedNormal = vec3( angleX, angleY, 1.0 );\n    rotatedNormal = uNewNormalMatrix * normalize(rotatedNormal);\n    float temp = rotatedNormal.z;\n    rotatedNormal.z = rotatedNormal.x;\n    rotatedNormal.x = -temp;\n    vec2 suv;\n    suv.y = 0.5 + 0.5 * (-rotatedNormal.y);\n    suv.x = atan(rotatedNormal.z, rotatedNormal.x) / (2.0 * PI) + 0.5;\n    newTexColor = texture2D(uSampler, suv.xy);\n    gl_FragColor = newTexColor;\n}\n",
            immediateVert: "IN vec3 aPosition;\nIN vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uResolution;\nuniform float uPointSize;\n\nOUT vec4 vColor;\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n  gl_PointSize = uPointSize;\n}\n",
            vertexColorVert: "IN vec3 aPosition;\nIN vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nOUT vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n}\n",
            vertexColorFrag: "IN vec4 vColor;\nvoid main(void) {\n  OUT_COLOR = vec4(vColor.rgb, 1.) * vColor.a;\n}\n",
            normalVert: "IN vec3 aPosition;\nIN vec3 aNormal;\nIN vec2 aTexCoord;\nIN vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nuniform vec4 uMaterialColor;\nuniform bool uUseVertexColor;\n\nOUT vec3 vVertexNormal;\nOUT highp vec2 vVertTexCoord;\nOUT vec4 vColor;\n\nvoid main(void) {\n  HOOK_beforeVertex();\n  vec4 positionVec4 = vec4(HOOK_getWorldPosition(\n    (uModelViewMatrix * vec4(HOOK_getLocalPosition(aPosition), 1.0)).xyz\n  ), 1.);\n\n  gl_Position = uProjectionMatrix * positionVec4;\n\n  vVertexNormal = HOOK_getWorldNormal(normalize(uNormalMatrix * HOOK_getLocalNormal(aNormal)));\n  vVertTexCoord = HOOK_getUV(aTexCoord);\n  vColor = HOOK_getVertexColor(uUseVertexColor ? aVertexColor : uMaterialColor);\n  HOOK_afterVertex();\n}\n",
            normalFrag: "IN vec3 vVertexNormal;\nvoid main(void) {\n  HOOK_beforeFragment();\n  OUT_COLOR = HOOK_getFinalColor(vec4(vVertexNormal, 1.0));\n  HOOK_afterFragment();\n}\n",
            basicFrag: "IN vec4 vColor;\nvoid main(void) {\n  HOOK_beforeFragment();\n  OUT_COLOR = HOOK_getFinalColor(vec4(vColor.rgb, 1.) * vColor.a);\n  HOOK_afterFragment();\n}\n",
            lightVert: e2 + "// include lighting.glgl\n\nIN vec3 aPosition;\nIN vec3 aNormal;\nIN vec2 aTexCoord;\nIN vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nuniform bool uUseVertexColor;\nuniform vec4 uMaterialColor;\n\nOUT highp vec2 vVertTexCoord;\nOUT vec3 vDiffuseColor;\nOUT vec3 vSpecularColor;\nOUT vec4 vColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * viewModelPosition;\n\n  vec3 vertexNormal = normalize(uNormalMatrix * aNormal);\n  vVertTexCoord = aTexCoord;\n\n  totalLight(viewModelPosition.xyz, vertexNormal, vDiffuseColor, vSpecularColor);\n\n  for (int i = 0; i < 8; i++) {\n    if (i < uAmbientLightCount) {\n      vDiffuseColor += uAmbientColor[i];\n    }\n  }\n  \n  vColor = (uUseVertexColor ? aVertexColor : uMaterialColor);\n}\n",
            lightTextureFrag: "uniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uEmissive;\n\nIN highp vec2 vVertTexCoord;\nIN vec3 vDiffuseColor;\nIN vec3 vSpecularColor;\nIN vec4 vColor;\n\nvoid main(void) {\n  if(uEmissive && !isTexture) {\n    OUT_COLOR = vColor;\n  }\n  else {\n    vec4 baseColor = isTexture\n      // Textures come in with premultiplied alpha. To apply tint and still have\n      // premultiplied alpha output, we need to multiply the RGB channels by the\n      // tint RGB, and all channels by the tint alpha.\n      ? TEXTURE(uSampler, vVertTexCoord) * vec4(uTint.rgb/255., 1.) * (uTint.a/255.)\n      // Colors come in with unmultiplied alpha, so we need to multiply the RGB\n      // channels by alpha to convert it to premultiplied alpha.\n      : vec4(vColor.rgb * vColor.a, vColor.a);\n    OUT_COLOR = vec4(baseColor.rgb * vDiffuseColor + vSpecularColor, baseColor.a);\n  }\n}\n",
            phongVert: "precision highp int;\n\nIN vec3 aPosition;\nIN vec3 aNormal;\nIN vec2 aTexCoord;\nIN vec4 aVertexColor;\n\nuniform vec3 uAmbientColor[5];\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\nuniform int uAmbientLightCount;\n\nuniform bool uUseVertexColor;\nuniform vec4 uMaterialColor;\n\nOUT vec3 vNormal;\nOUT vec2 vTexCoord;\nOUT vec3 vViewPosition;\nOUT vec3 vAmbientColor;\nOUT vec4 vColor;\n\nvoid main(void) {\n  HOOK_beforeVertex();\n  vec4 viewModelPosition = vec4(HOOK_getWorldPosition(\n    (uModelViewMatrix * vec4(HOOK_getLocalPosition(aPosition), 1.0)).xyz\n  ), 1.);\n\n  // Pass varyings to fragment shader\n  vViewPosition = viewModelPosition.xyz;\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n\n  vNormal = HOOK_getWorldNormal(uNormalMatrix * HOOK_getLocalNormal(aNormal));\n  vTexCoord = HOOK_getUV(aTexCoord);\n\n  // TODO: this should be a uniform\n  vAmbientColor = vec3(0.0);\n  for (int i = 0; i < 5; i++) {\n    if (i < uAmbientLightCount) {\n      vAmbientColor += uAmbientColor[i];\n    }\n  }\n  \n  vColor = HOOK_getVertexColor((uUseVertexColor ? aVertexColor : uMaterialColor));\n  HOOK_afterVertex();\n}\n",
            phongFrag: e2 + "// include lighting.glsl\nprecision highp int;\n\nuniform bool uHasSetAmbient;\nuniform vec4 uSpecularMatColor;\nuniform vec4 uAmbientMatColor;\nuniform vec4 uEmissiveMatColor;\n\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\n\nIN vec3 vNormal;\nIN vec2 vTexCoord;\nIN vec3 vViewPosition;\nIN vec3 vAmbientColor;\nIN vec4 vColor;\n\nstruct ColorComponents {\n  vec3 baseColor;\n  float opacity;\n  vec3 ambientColor;\n  vec3 specularColor;\n  vec3 diffuse;\n  vec3 ambient;\n  vec3 specular;\n  vec3 emissive;\n};\n\nstruct Inputs {\n  vec3 normal;\n  vec2 texCoord;\n  vec3 ambientLight;\n  vec3 ambientMaterial;\n  vec3 specularMaterial;\n  vec3 emissiveMaterial;\n  vec4 color;\n  float shininess;\n  float metalness;\n};\n\nvoid main(void) {\n  HOOK_beforeFragment();\n\n  Inputs inputs;\n  inputs.normal = normalize(vNormal);\n  inputs.texCoord = vTexCoord;\n  inputs.ambientLight = vAmbientColor;\n  inputs.color = isTexture\n      // Textures come in with premultiplied alpha. To apply tint and still have\n      // premultiplied alpha output, we need to multiply the RGB channels by the\n      // tint RGB, and all channels by the tint alpha.\n      ? TEXTURE(uSampler, vTexCoord) * vec4(uTint.rgb/255., 1.) * (uTint.a/255.)\n      // Colors come in with unmultiplied alpha, so we need to multiply the RGB\n      // channels by alpha to convert it to premultiplied alpha.\n      : vec4(vColor.rgb * vColor.a, vColor.a);\n  inputs.shininess = uShininess;\n  inputs.metalness = uMetallic;\n  inputs.ambientMaterial = uHasSetAmbient ? uAmbientMatColor.rgb : inputs.color.rgb;\n  inputs.specularMaterial = uSpecularMatColor.rgb;\n  inputs.emissiveMaterial = uEmissiveMatColor.rgb;\n  inputs = HOOK_getPixelInputs(inputs);\n\n  vec3 diffuse;\n  vec3 specular;\n  totalLight(vViewPosition, inputs.normal, inputs.shininess, inputs.metalness, diffuse, specular);\n\n  // Calculating final color as result of all lights (plus emissive term).\n\n  vec2 texCoord = inputs.texCoord;\n  vec4 baseColor = inputs.color;\n  ColorComponents c;\n  c.opacity = baseColor.a;\n  c.baseColor = baseColor.rgb;\n  c.ambientColor = inputs.ambientMaterial;\n  c.specularColor = inputs.specularMaterial;\n  c.diffuse = diffuse;\n  c.ambient = inputs.ambientLight;\n  c.specular = specular;\n  c.emissive = inputs.emissiveMaterial;\n  OUT_COLOR = HOOK_getFinalColor(HOOK_combineColors(c));\n  HOOK_afterFragment();\n}\n",
            fontVert: "IN vec3 aPosition;\nIN vec2 aTexCoord;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nuniform vec4 uGlyphRect;\nuniform float uGlyphOffset;\n\nOUT vec2 vTexCoord;\nOUT float w;\n\nvoid main() {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  // scale by the size of the glyph's rectangle\n  positionVec4.xy *= uGlyphRect.zw - uGlyphRect.xy;\n\n  // Expand glyph bounding boxes by 1px on each side to give a bit of room\n  // for antialiasing\n  vec3 newOrigin = (uModelViewMatrix * vec4(0., 0., 0., 1.)).xyz;\n  vec3 newDX = (uModelViewMatrix * vec4(1., 0., 0., 1.)).xyz;\n  vec3 newDY = (uModelViewMatrix * vec4(0., 1., 0., 1.)).xyz;\n  vec2 pixelScale = vec2(\n    1. / length(newOrigin - newDX),\n    1. / length(newOrigin - newDY)\n  );\n  vec2 offset = pixelScale * normalize(aTexCoord - vec2(0.5, 0.5)) * vec2(1., -1.);\n  vec2 textureOffset = offset * (1. / vec2(\n    uGlyphRect.z - uGlyphRect.x,\n    uGlyphRect.w - uGlyphRect.y\n  ));\n\n  // move to the corner of the glyph\n  positionVec4.xy += uGlyphRect.xy;\n\n  // move to the letter's line offset\n  positionVec4.x += uGlyphOffset;\n\n  positionVec4.xy += offset;\n  \n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vTexCoord = aTexCoord + textureOffset;\n  w = gl_Position.w;\n}\n",
            fontFrag: "#ifndef WEBGL2\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#if 0\n  // simulate integer math using floats\n	#define int float\n	#define ivec2 vec2\n	#define INT(x) float(x)\n\n	int ifloor(float v) { return floor(v); }\n	ivec2 ifloor(vec2 v) { return floor(v); }\n\n#else\n  // use native integer math\n	precision highp int;\n	#define INT(x) x\n\n	int ifloor(float v) { return int(v); }\n	int ifloor(int v) { return v; }\n	ivec2 ifloor(vec2 v) { return ivec2(v); }\n\n#endif\n\nuniform sampler2D uSamplerStrokes;\nuniform sampler2D uSamplerRowStrokes;\nuniform sampler2D uSamplerRows;\nuniform sampler2D uSamplerColStrokes;\nuniform sampler2D uSamplerCols;\n\nuniform ivec2 uStrokeImageSize;\nuniform ivec2 uCellsImageSize;\nuniform ivec2 uGridImageSize;\n\nuniform ivec2 uGridOffset;\nuniform ivec2 uGridSize;\nuniform vec4 uMaterialColor;\n\nIN vec2 vTexCoord;\n\n// some helper functions\nint ROUND(float v) { return ifloor(v + 0.5); }\nivec2 ROUND(vec2 v) { return ifloor(v + 0.5); }\nfloat saturate(float v) { return clamp(v, 0.0, 1.0); }\nvec2 saturate(vec2 v) { return clamp(v, 0.0, 1.0); }\n\nint mul(float v1, int v2) {\n  return ifloor(v1 * float(v2));\n}\n\nivec2 mul(vec2 v1, ivec2 v2) {\n  return ifloor(v1 * vec2(v2) + 0.5);\n}\n\n// unpack a 16-bit integer from a float vec2\nint getInt16(vec2 v) {\n  ivec2 iv = ROUND(v * 255.0);\n  return iv.x * INT(128) + iv.y;\n}\n\nvec2 pixelScale;\nvec2 coverage = vec2(0.0);\nvec2 weight = vec2(0.5);\nconst float minDistance = 1.0/8192.0;\nconst float hardness = 1.05; // amount of antialias\n\n// the maximum number of curves in a glyph\nconst int N = INT(250);\n\n// retrieves an indexed pixel from a sampler\nvec4 getTexel(sampler2D sampler, int pos, ivec2 size) {\n  int width = size.x;\n  int y = ifloor(pos / width);\n  int x = pos - y * width;  // pos % width\n\n  return TEXTURE(sampler, (vec2(x, y) + 0.5) / vec2(size));\n}\n\nvoid calulateCrossings(vec2 p0, vec2 p1, vec2 p2, out vec2 C1, out vec2 C2) {\n\n  // get the coefficients of the quadratic in t\n  vec2 a = p0 - p1 * 2.0 + p2;\n  vec2 b = p0 - p1;\n  vec2 c = p0 - vTexCoord;\n\n  // found out which values of 't' it crosses the axes\n  vec2 surd = sqrt(max(vec2(0.0), b * b - a * c));\n  vec2 t1 = ((b - surd) / a).yx;\n  vec2 t2 = ((b + surd) / a).yx;\n\n  // approximate straight lines to avoid rounding errors\n  if (abs(a.y) < 0.001)\n    t1.x = t2.x = c.y / (2.0 * b.y);\n\n  if (abs(a.x) < 0.001)\n    t1.y = t2.y = c.x / (2.0 * b.x);\n\n  // plug into quadratic formula to find the corrdinates of the crossings\n  C1 = ((a * t1 - b * 2.0) * t1 + c) * pixelScale;\n  C2 = ((a * t2 - b * 2.0) * t2 + c) * pixelScale;\n}\n\nvoid coverageX(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  // determine on which side of the x-axis the points lie\n  bool y0 = p0.y > vTexCoord.y;\n  bool y1 = p1.y > vTexCoord.y;\n  bool y2 = p2.y > vTexCoord.y;\n\n  // could web be under the curve (after t1)?\n  if (y1 ? !y2 : y0) {\n    // add the coverage for t1\n    coverage.x += saturate(C1.x + 0.5);\n    // calculate the anti-aliasing for t1\n    weight.x = min(weight.x, abs(C1.x));\n  }\n\n  // are we outside the curve (after t2)?\n  if (y1 ? !y0 : y2) {\n    // subtract the coverage for t2\n    coverage.x -= saturate(C2.x + 0.5);\n    // calculate the anti-aliasing for t2\n    weight.x = min(weight.x, abs(C2.x));\n  }\n}\n\n// this is essentially the same as coverageX, but with the axes swapped\nvoid coverageY(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  bool x0 = p0.x > vTexCoord.x;\n  bool x1 = p1.x > vTexCoord.x;\n  bool x2 = p2.x > vTexCoord.x;\n\n  if (x1 ? !x2 : x0) {\n    coverage.y -= saturate(C1.y + 0.5);\n    weight.y = min(weight.y, abs(C1.y));\n  }\n\n  if (x1 ? !x0 : x2) {\n    coverage.y += saturate(C2.y + 0.5);\n    weight.y = min(weight.y, abs(C2.y));\n  }\n}\n\nvoid main() {\n\n  // calculate the pixel scale based on screen-coordinates\n  pixelScale = hardness / fwidth(vTexCoord);\n\n  // which grid cell is this pixel in?\n  ivec2 gridCoord = ifloor(vTexCoord * vec2(uGridSize));\n\n  // intersect curves in this row\n  {\n    // the index into the row info bitmap\n    int rowIndex = gridCoord.y + uGridOffset.y;\n    // fetch the info texel\n    vec4 rowInfo = getTexel(uSamplerRows, rowIndex, uGridImageSize);\n    // unpack the rowInfo\n    int rowStrokeIndex = getInt16(rowInfo.xy);\n    int rowStrokeCount = getInt16(rowInfo.zw);\n\n    for (int iRowStroke = INT(0); iRowStroke < N; iRowStroke++) {\n      if (iRowStroke >= rowStrokeCount)\n        break;\n\n      // each stroke is made up of 3 points: the start and control point\n      // and the start of the next curve.\n      // fetch the indices of this pair of strokes:\n      vec4 strokeIndices = getTexel(uSamplerRowStrokes, rowStrokeIndex++, uCellsImageSize);\n\n      // unpack the stroke index\n      int strokePos = getInt16(strokeIndices.xy);\n\n      // fetch the two strokes\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n\n      // calculate the coverage\n      coverageX(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  // intersect curves in this column\n  {\n    int colIndex = gridCoord.x + uGridOffset.x;\n    vec4 colInfo = getTexel(uSamplerCols, colIndex, uGridImageSize);\n    int colStrokeIndex = getInt16(colInfo.xy);\n    int colStrokeCount = getInt16(colInfo.zw);\n    \n    for (int iColStroke = INT(0); iColStroke < N; iColStroke++) {\n      if (iColStroke >= colStrokeCount)\n        break;\n\n      vec4 strokeIndices = getTexel(uSamplerColStrokes, colStrokeIndex++, uCellsImageSize);\n\n      int strokePos = getInt16(strokeIndices.xy);\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n      coverageY(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  weight = saturate(1.0 - weight * 2.0);\n  float distance = max(weight.x + weight.y, minDistance); // manhattan approx.\n  float antialias = abs(dot(coverage, weight) / distance);\n  float cover = min(abs(coverage.x), abs(coverage.y));\n  OUT_COLOR = vec4(uMaterialColor.rgb, 1.) * uMaterialColor.a;\n  OUT_COLOR *= saturate(max(antialias, cover));\n}\n",
            lineVert: T + "/*\n  Part of the Processing project - http://processing.org\n  Copyright (c) 2012-15 The Processing Foundation\n  Copyright (c) 2004-12 Ben Fry and Casey Reas\n  Copyright (c) 2001-04 Massachusetts Institute of Technology\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation, version 2.1.\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#define PROCESSING_LINE_SHADER\n\nprecision mediump int;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uStrokeWeight;\n\nuniform bool uUseLineColor;\nuniform vec4 uMaterialColor;\n\nuniform vec4 uViewport;\nuniform int uPerspective;\nuniform int uStrokeJoin;\n\nIN vec4 aPosition;\nIN vec3 aTangentIn;\nIN vec3 aTangentOut;\nIN float aSide;\nIN vec4 aVertexColor;\n\nOUT vec4 vColor;\nOUT vec2 vTangent;\nOUT vec2 vCenter;\nOUT vec2 vPosition;\nOUT float vMaxDist;\nOUT float vCap;\nOUT float vJoin;\nOUT float vStrokeWeight;\n\nvec2 lineIntersection(vec2 aPoint, vec2 aDir, vec2 bPoint, vec2 bDir) {\n  // Rotate and translate so a starts at the origin and goes out to the right\n  bPoint -= aPoint;\n  vec2 rotatedBFrom = vec2(\n    bPoint.x*aDir.x + bPoint.y*aDir.y,\n    bPoint.y*aDir.x - bPoint.x*aDir.y\n  );\n  vec2 bTo = bPoint + bDir;\n  vec2 rotatedBTo = vec2(\n    bTo.x*aDir.x + bTo.y*aDir.y,\n    bTo.y*aDir.x - bTo.x*aDir.y\n  );\n  float intersectionDistance =\n    rotatedBTo.x + (rotatedBFrom.x - rotatedBTo.x) * rotatedBTo.y /\n    (rotatedBTo.y - rotatedBFrom.y);\n  return aPoint + aDir * intersectionDistance;\n}\n\nvoid main() {\n  HOOK_beforeVertex();\n  // Caps have one of either the in or out tangent set to 0\n  vCap = (aTangentIn == vec3(0.)) != (aTangentOut == (vec3(0.)))\n    ? 1. : 0.;\n\n  // Joins have two unique, defined tangents\n  vJoin = (\n    aTangentIn != vec3(0.) &&\n    aTangentOut != vec3(0.) &&\n    aTangentIn != aTangentOut\n  ) ? 1. : 0.;\n\n  vec4 localPosition = vec4(HOOK_getLocalPosition(aPosition.xyz), 1.);\n  vec4 posp = vec4(HOOK_getWorldPosition((uModelViewMatrix * localPosition).xyz), 1.);\n  vec4 posqIn = posp + uModelViewMatrix * vec4(aTangentIn, 0);\n  vec4 posqOut = posp + uModelViewMatrix * vec4(aTangentOut, 0);\n  float strokeWeight = HOOK_getStrokeWeight(uStrokeWeight);\n  vStrokeWeight = strokeWeight;\n\n  float facingCamera = pow(\n    // The word space tangent's z value is 0 if it's facing the camera\n    abs(normalize(posqIn-posp).z),\n\n    // Using pow() here to ramp `facingCamera` up from 0 to 1 really quickly\n    // so most lines get scaled and don't get clipped\n    0.25\n  );\n\n  // Moving vertices slightly toward the camera\n  // to avoid depth-fighting with the fill triangles.\n  // A mix of scaling and offsetting is used based on distance\n  // Discussion here:\n  // https://github.com/processing/p5.js/issues/7200 \n\n  // using a scale <1 moves the lines towards nearby camera\n  // in order to prevent popping effects due to half of\n  // the line disappearing behind the geometry faces.\n  float zDistance = -posp.z; \n  float distanceFactor = smoothstep(0.0, 800.0, zDistance); \n  \n  // Discussed here:\n  // http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=252848  \n  float scale = mix(1., 0.995, facingCamera);\n  float dynamicScale = mix(scale, 1.0, distanceFactor); // Closer = more scale, farther = less\n\n  posp.xyz = posp.xyz * dynamicScale;\n  posqIn.xyz = posqIn.xyz * dynamicScale;\n  posqOut.xyz = posqOut.xyz * dynamicScale;\n\n  // Moving vertices slightly toward camera when far away \n  // https://github.com/processing/p5.js/issues/6956 \n  float zOffset = mix(-0.00045, -1., facingCamera);\n  float dynamicZAdjustment = mix(0.0, zOffset, distanceFactor); // Closer = less zAdjustment, farther = more\n\n  posp.z -= dynamicZAdjustment;\n  posqIn.z -= dynamicZAdjustment;\n  posqOut.z -= dynamicZAdjustment;\n  \n  vec4 p = uProjectionMatrix * posp;\n  vec4 qIn = uProjectionMatrix * posqIn;\n  vec4 qOut = uProjectionMatrix * posqOut;\n  vCenter = HOOK_getLineCenter(p.xy);\n\n  // formula to convert from clip space (range -1..1) to screen space (range 0..[width or height])\n  // screen_p = (p.xy/p.w + <1,1>) * 0.5 * uViewport.zw\n\n  // prevent division by W by transforming the tangent formula (div by 0 causes\n  // the line to disappear, see https://github.com/processing/processing/issues/5183)\n  // t = screen_q - screen_p\n  //\n  // tangent is normalized and we don't care which aDirection it points to (+-)\n  // t = +- normalize( screen_q - screen_p )\n  // t = +- normalize( (q.xy/q.w+<1,1>)*0.5*uViewport.zw - (p.xy/p.w+<1,1>)*0.5*uViewport.zw )\n  //\n  // extract common factor, <1,1> - <1,1> cancels out\n  // t = +- normalize( (q.xy/q.w - p.xy/p.w) * 0.5 * uViewport.zw )\n  //\n  // convert to common divisor\n  // t = +- normalize( ((q.xy*p.w - p.xy*q.w) / (p.w*q.w)) * 0.5 * uViewport.zw )\n  //\n  // remove the common scalar divisor/factor, not needed due to normalize and +-\n  // (keep uViewport - can't remove because it has different components for x and y\n  //  and corrects for aspect ratio, see https://github.com/processing/processing/issues/5181)\n  // t = +- normalize( (q.xy*p.w - p.xy*q.w) * uViewport.zw )\n\n  vec2 tangentIn = normalize((qIn.xy*p.w - p.xy*qIn.w) * uViewport.zw);\n  vec2 tangentOut = normalize((qOut.xy*p.w - p.xy*qOut.w) * uViewport.zw);\n\n  vec2 curPerspScale;\n  if(uPerspective == 1) {\n    // Perspective ---\n    // convert from world to clip by multiplying with projection scaling factor\n    // to get the right thickness (see https://github.com/processing/processing/issues/5182)\n\n    // The y value of the projection matrix may be flipped if rendering to a Framebuffer.\n    // Multiplying again by its sign here negates the flip to get just the scale.\n    curPerspScale = (uProjectionMatrix * vec4(1, sign(uProjectionMatrix[1][1]), 0, 0)).xy;\n  } else {\n    // No Perspective ---\n    // multiply by W (to cancel out division by W later in the pipeline) and\n    // convert from screen to clip (derived from clip to screen above)\n    curPerspScale = p.w / (0.5 * uViewport.zw);\n  }\n\n  vec2 offset;\n  if (vJoin == 1.) {\n    vTangent = normalize(tangentIn + tangentOut);\n    vec2 normalIn = vec2(-tangentIn.y, tangentIn.x);\n    vec2 normalOut = vec2(-tangentOut.y, tangentOut.x);\n    float side = sign(aSide);\n    float sideEnum = abs(aSide);\n\n    // We generate vertices for joins on either side of the centerline, but\n    // the \"elbow\" side is the only one needing a join. By not setting the\n    // offset for the other side, all its vertices will end up in the same\n    // spot and not render, effectively discarding it.\n    if (sign(dot(tangentOut, vec2(-tangentIn.y, tangentIn.x))) != side) {\n      // Side enums:\n      //   1: the side going into the join\n      //   2: the middle of the join\n      //   3: the side going out of the join\n      if (sideEnum == 2.) {\n        // Calculate the position + tangent on either side of the join, and\n        // find where the lines intersect to find the elbow of the join\n        vec2 c = (posp.xy/posp.w + vec2(1.,1.)) * 0.5 * uViewport.zw;\n        vec2 intersection = lineIntersection(\n          c + (side * normalIn * strokeWeight / 2.),\n          tangentIn,\n          c + (side * normalOut * strokeWeight / 2.),\n          tangentOut\n        );\n        offset = (intersection - c);\n\n        // When lines are thick and the angle of the join approaches 180, the\n        // elbow might be really far from the center. We'll apply a limit to\n        // the magnitude to avoid lines going across the whole screen when this\n        // happens.\n        float mag = length(offset);\n        float maxMag = 3. * strokeWeight;\n        if (mag > maxMag) {\n          offset *= maxMag / mag;\n        }\n      } else if (sideEnum == 1.) {\n        offset = side * normalIn * strokeWeight / 2.;\n      } else if (sideEnum == 3.) {\n        offset = side * normalOut * strokeWeight / 2.;\n      }\n    }\n    if (uStrokeJoin == STROKE_JOIN_BEVEL) {\n      vec2 avgNormal = vec2(-vTangent.y, vTangent.x);\n      vMaxDist = abs(dot(avgNormal, normalIn * strokeWeight / 2.));\n    } else {\n      vMaxDist = strokeWeight / 2.;\n    }\n  } else {\n    vec2 tangent = aTangentIn == vec3(0.) ? tangentOut : tangentIn;\n    vTangent = tangent;\n    vec2 normal = vec2(-tangent.y, tangent.x);\n\n    float normalOffset = sign(aSide);\n    // Caps will have side values of -2 or 2 on the edge of the cap that\n    // extends out from the line\n    float tangentOffset = abs(aSide) - 1.;\n    offset = (normal * normalOffset + tangent * tangentOffset) *\n      strokeWeight * 0.5;\n    vMaxDist = strokeWeight / 2.;\n  }\n  vPosition = HOOK_getLinePosition(vCenter + offset);\n\n  gl_Position.xy = p.xy + offset.xy * curPerspScale;\n  gl_Position.zw = p.zw;\n  \n  vColor = HOOK_getVertexColor(uUseLineColor ? aVertexColor : uMaterialColor);\n  HOOK_afterVertex();\n}\n",
            lineFrag: T + "precision mediump int;\n\nuniform vec4 uMaterialColor;\nuniform int uStrokeCap;\nuniform int uStrokeJoin;\n\nIN vec4 vColor;\nIN vec2 vTangent;\nIN vec2 vCenter;\nIN vec2 vPosition;\nIN float vStrokeWeight;\nIN float vMaxDist;\nIN float vCap;\nIN float vJoin;\n\nfloat distSquared(vec2 a, vec2 b) {\n  vec2 aToB = b - a;\n  return dot(aToB, aToB);\n}\n\nstruct Inputs {\n  vec4 color;\n  vec2 tangent;\n  vec2 center;\n  vec2 position;\n  float strokeWeight;\n};\n\nvoid main() {\n  HOOK_beforeFragment();\n\n  Inputs inputs;\n  inputs.color = vColor;\n  inputs.tangent = vTangent;\n  inputs.center = vCenter;\n  inputs.position = vPosition;\n  inputs.strokeWeight = vStrokeWeight;\n  inputs = HOOK_getPixelInputs(inputs);\n\n  if (vCap > 0.) {\n    if (\n      uStrokeCap == STROKE_CAP_ROUND &&\n      HOOK_shouldDiscard(distSquared(inputs.position, inputs.center) > inputs.strokeWeight * inputs.strokeWeight * 0.25)\n    ) {\n      discard;\n    } else if (\n      uStrokeCap == STROKE_CAP_SQUARE &&\n      HOOK_shouldDiscard(dot(inputs.position - inputs.center, inputs.tangent) > 0.)\n    ) {\n      discard;\n    // Use full area for PROJECT\n    } else if (HOOK_shouldDiscard(false)) {\n      discard;\n    }\n  } else if (vJoin > 0.) {\n    if (\n      uStrokeJoin == STROKE_JOIN_ROUND &&\n      HOOK_shouldDiscard(distSquared(inputs.position, inputs.center) > inputs.strokeWeight * inputs.strokeWeight * 0.25)\n    ) {\n      discard;\n    } else if (uStrokeJoin == STROKE_JOIN_BEVEL) {\n      vec2 normal = vec2(-inputs.tangent.y, inputs.tangent.x);\n      if (HOOK_shouldDiscard(abs(dot(inputs.position - inputs.center, normal)) > vMaxDist)) {\n        discard;\n      }\n    // Use full area for MITER\n    } else if (HOOK_shouldDiscard(false)) {\n      discard;\n    }\n  }\n  OUT_COLOR = HOOK_getFinalColor(vec4(inputs.color.rgb, 1.) * inputs.color.a);\n  HOOK_afterFragment();\n}\n",
            pointVert: "IN vec3 aPosition;\nuniform float uPointSize;\nOUT float vStrokeWeight;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvoid main() {\n  HOOK_beforeVertex();\n  vec4 viewModelPosition = vec4(HOOK_getWorldPosition(\n    (uModelViewMatrix * vec4(HOOK_getLocalPosition(aPosition), 1.0)).xyz\n  ), 1.);\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n\n  float pointSize = HOOK_getPointSize(uPointSize);\n\n	gl_PointSize = pointSize;\n	vStrokeWeight = pointSize;\n  HOOK_afterVertex();\n}\n",
            pointFrag: "precision mediump int;\nuniform vec4 uMaterialColor;\nIN float vStrokeWeight;\n\nvoid main(){\n  HOOK_beforeFragment();\n  float mask = 0.0;\n\n  // make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\n  // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\n\n  mask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\n\n  // if strokeWeight is 1 or less lets just draw a square\n  // this prevents weird artifacting from carving circles when our points are really small\n  // if strokeWeight is larger than 1, we just use it as is\n\n  mask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\n\n  // throw away the borders of the mask\n  // otherwise we get weird alpha blending issues\n\n  if(HOOK_shouldDiscard(mask > 0.98)){\n    discard;\n  }\n\n  OUT_COLOR = HOOK_getFinalColor(vec4(uMaterialColor.rgb, 1.) * uMaterialColor.a);\n  HOOK_afterFragment();\n}\n",
            imageLightVert: "precision highp float;\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nvarying vec3 localPos;\nvarying vec3 vWorldNormal;\nvarying vec3 vWorldPosition;\nvarying vec2 vTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvoid main() {\n  // Multiply the position by the matrix.\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n  \n  // orient the normals and pass to the fragment shader\n  vWorldNormal = uNormalMatrix * aNormal;\n  \n  // send the view position to the fragment shader\n  vWorldPosition = (uModelViewMatrix * vec4(aPosition, 1.0)).xyz;\n  \n  localPos = vWorldPosition;\n  vTexCoord = aTexCoord;\n}\n\n\n/*\nin the vertex shader we'll compute the world position and world oriented normal of the vertices and pass those to the fragment shader as varyings.\n*/\n",
            imageLightDiffusedFrag: "precision highp float;\nvarying vec3 localPos;\n\n// the HDR cubemap converted (can be from an equirectangular environment map.)\nuniform sampler2D environmentMap;\nvarying vec2 vTexCoord;\n\nconst float PI = 3.14159265359;\n\nvec2 nTOE( vec3 v ){\n  // x = r sin(phi) cos(theta)   \n  // y = r cos(phi)  \n  // z = r sin(phi) sin(theta)\n  float phi = acos( v.y );\n  // if phi is 0, then there are no x, z components\n  float theta = 0.0;\n  // else \n  theta = acos(v.x / sin(phi));\n  float sinTheta = v.z / sin(phi);\n  if (sinTheta < 0.0) {\n    // Turn it into -theta, but in the 0-2PI range\n    theta = 2.0 * PI - theta;\n  }\n  theta = theta / (2.0 * 3.14159);\n  phi = phi / 3.14159 ;\n  \n  vec2 angles = vec2( phi, theta );\n  return angles;\n}\n\nfloat random(vec2 p) {\n  vec3 p3  = fract(vec3(p.xyx) * .1031);\n  p3 += dot(p3, p3.yzx + 33.33);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid main()\n{   	 \n	// the sample direction equals the hemisphere's orientation\n  float phi = vTexCoord.x * 2.0 * PI;\n  float theta = vTexCoord.y * PI;\n  float x = sin(theta) * cos(phi);\n  float y = sin(theta) * sin(phi);\n  float z = cos(theta);\n  vec3 normal = vec3( x, y, z);\n\n	// Discretely sampling the hemisphere given the integral's\n  // spherical coordinates translates to the following fragment code:\n	vec3 irradiance = vec3(0.0);  \n	vec3 up	= vec3(0.0, 1.0, 0.0);\n	vec3 right = normalize(cross(up, normal));\n	up = normalize(cross(normal, right));\n\n	//  We specify a fixed sampleDelta delta value to traverse\n  // the hemisphere; decreasing or increasing the sample delta\n  // will increase or decrease the accuracy respectively.\n	const float sampleDelta = 0.100;\n	float nrSamples = 0.0;\n  float randomOffset = random(gl_FragCoord.xy) * sampleDelta;\n	for(float rawPhi = 0.0; rawPhi < 2.0 * PI; rawPhi += sampleDelta)\n	{\n    float phi = rawPhi + randomOffset;\n    for(float rawTheta = 0.0; rawTheta < ( 0.5 ) * PI; rawTheta += sampleDelta)\n    {\n      float theta = rawTheta + randomOffset;\n      // spherical to cartesian (in tangent space) // tangent space to world // add each sample result to irradiance\n      float x = sin(theta) * cos(phi);\n      float y = sin(theta) * sin(phi);\n      float z = cos(theta);\n      vec3 tangentSample = vec3( x, y, z);\n      \n      vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal;\n        irradiance += (texture2D(environmentMap, nTOE(sampleVec)).xyz) * cos(theta) * sin(theta);\n      nrSamples++;\n    }\n	}\n	// divide by the total number of samples taken, giving us the average sampled irradiance.\n	irradiance = PI * irradiance * (1.0 / float(nrSamples )) ;\n  \n \n	gl_FragColor = vec4(irradiance, 1.0);\n}",
            imageLightSpecularFrag: "precision highp float;\r\nvarying vec3 localPos;\r\nvarying vec2 vTexCoord;\r\n\r\n// our texture\r\nuniform sampler2D environmentMap;\r\nuniform float roughness;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nfloat VanDerCorput(int bits);\r\nvec2 HammersleyNoBitOps(int i, int N);\r\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness);\r\n\r\n\r\nvec2 nTOE( vec3 v ){\r\n  // x = r sin(phi) cos(theta)   \r\n  // y = r cos(phi)  \r\n  // z = r sin(phi) sin(theta)\r\n  float phi = acos( v.y );\r\n  // if phi is 0, then there are no x, z components\r\n  float theta = 0.0;\r\n  // else \r\n  theta = acos(v.x / sin(phi));\r\n  float sinTheta = v.z / sin(phi);\r\n  if (sinTheta < 0.0) {\r\n    // Turn it into -theta, but in the 0-2PI range\r\n    theta = 2.0 * PI - theta;\r\n  }\r\n  theta = theta / (2.0 * 3.14159);\r\n  phi = phi / 3.14159 ;\r\n  \r\n  vec2 angles = vec2( phi, theta );\r\n  return angles;\r\n}\r\n\r\n\r\nvoid main(){\r\n  const int SAMPLE_COUNT = 400; // 4096\r\n  int lowRoughnessLimit = int(pow(2.0,(roughness+0.1)*20.0));\r\n  float totalWeight = 0.0;\r\n  vec3 prefilteredColor = vec3(0.0);\r\n  float phi = vTexCoord.x * 2.0 * PI;\r\n  float theta = vTexCoord.y * PI;\r\n  float x = sin(theta) * cos(phi);\r\n  float y = sin(theta) * sin(phi);\r\n  float z = cos(theta);\r\n  vec3 N = vec3(x,y,z);\r\n  vec3 V = N;\r\n  for (int i = 0; i < SAMPLE_COUNT; ++i)\r\n  {\r\n    // break at smaller sample numbers for low roughness levels\r\n    if(i == lowRoughnessLimit)\r\n    {\r\n      break;\r\n    }\r\n    vec2 Xi = HammersleyNoBitOps(i, SAMPLE_COUNT);\r\n    vec3 H = ImportanceSampleGGX(Xi, N, roughness);\r\n    vec3 L = normalize(2.0 * dot(V, H) * H - V);\r\n\r\n    float NdotL = max(dot(N, L), 0.0);\r\n    if (NdotL > 0.0)\r\n    {\r\n      prefilteredColor += texture2D(environmentMap, nTOE(L)).xyz * NdotL;\r\n      totalWeight += NdotL;\r\n    }\r\n  }\r\n  prefilteredColor = prefilteredColor / totalWeight;\r\n\r\n  gl_FragColor = vec4(prefilteredColor, 1.0);\r\n}\r\n\r\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness){\r\n  float a = roughness * roughness;\r\n\r\n  float phi = 2.0 * PI * Xi.x;\r\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\r\n  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\r\n  // from spherical coordinates to cartesian coordinates\r\n  vec3 H;\r\n  H.x = cos(phi) * sinTheta;\r\n  H.y = sin(phi) * sinTheta;\r\n  H.z = cosTheta;\r\n\r\n  // from tangent-space vector to world-space sample vector\r\n  vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\r\n  vec3 tangent = normalize(cross(up, N));\r\n  vec3 bitangent = cross(N, tangent);\r\n\r\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\r\n  return normalize(sampleVec);\r\n}\r\n\r\n\r\nfloat VanDerCorput(int n, int base)\r\n{\r\n#ifdef WEBGL2\r\n\r\n    uint bits = uint(n);\r\n    bits = (bits << 16u) | (bits >> 16u);\r\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\r\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\r\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\r\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\r\n    return float(bits) * 2.3283064365386963e-10; // / 0x100000000\r\n\r\n#else\r\n\r\n  float invBase = 1.0 / float(base);\r\n  float denom = 1.0;\r\n  float result = 0.0;\r\n\r\n\r\n  for (int i = 0; i < 32; ++i)\r\n  {\r\n        if (n > 0)\r\n        {\r\n        denom = mod(float(n), 2.0);\r\n        result += denom * invBase;\r\n        invBase = invBase / 2.0;\r\n        n = int(float(n) / 2.0);\r\n        }\r\n  }\r\n\r\n\r\n  return result;\r\n\r\n#endif\r\n}\r\n\r\nvec2 HammersleyNoBitOps(int i, int N)\r\n{\r\n  return vec2(float(i) / float(N), VanDerCorput(i, 2));\r\n}\r\n"
          }, M = E.sphereMappingFrag;
          for (x in E) E[x] = "#ifdef WEBGL2\n\n#define IN in\n#define OUT out\n\n#ifdef FRAGMENT_SHADER\nout vec4 outColor;\n#define OUT_COLOR outColor\n#endif\n#define TEXTURE texture\n\n#else\n\n#ifdef FRAGMENT_SHADER\n#define IN varying\n#else\n#define IN attribute\n#endif\n#define OUT varying\n#define TEXTURE texture2D\n\n#ifdef FRAGMENT_SHADER\n#define OUT_COLOR gl_FragColor\n#endif\n\n#endif\n" + E[x];
          _(e2 = {}, l.GRAY, "precision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\n\nfloat luma(vec3 color) {\n  // weighted grayscale with luminance values\n  return dot(color, vec3(0.2126, 0.7152, 0.0722));\n}\n\nvoid main() {\n  vec4 tex = texture2D(tex0, vTexCoord);\n  float gray = luma(tex.rgb);\n  gl_FragColor = vec4(gray, gray, gray, tex.a);\n}\n"), _(e2, l.ERODE, "// Reduces the bright areas in an image\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\nuniform vec2 texelSize;\n\nfloat luma(vec3 color) {\n  // weighted grayscale with luminance values\n  // weights 77, 151, 28 taken from src/image/filters.js\n  return dot(color, vec3(0.300781, 0.589844, 0.109375));\n}\n\nvoid main() {\n  vec4 color = texture2D(tex0, vTexCoord);\n  float lum = luma(color.rgb);\n\n  // set current color as the darkest neighbor color\n\n  vec4 neighbors[4];\n  neighbors[0] = texture2D(tex0, vTexCoord + vec2( texelSize.x, 0.0));\n  neighbors[1] = texture2D(tex0, vTexCoord + vec2(-texelSize.x, 0.0));\n  neighbors[2] = texture2D(tex0, vTexCoord + vec2(0.0,  texelSize.y));\n  neighbors[3] = texture2D(tex0, vTexCoord + vec2(0.0, -texelSize.y));\n\n  for (int i = 0; i < 4; i++) {\n    vec4 neighborColor = neighbors[i];\n    float neighborLum = luma(neighborColor.rgb);\n\n    if (neighborLum < lum) {\n      color = neighborColor;\n      lum = neighborLum;\n    }\n  }\n\n  gl_FragColor = color;\n}\n"), _(e2, l.DILATE, "// Increase the bright areas in an image\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\nuniform vec2 texelSize;\n\nfloat luma(vec3 color) {\n  // weighted grayscale with luminance values\n  // weights 77, 151, 28 taken from src/image/filters.js\n  return dot(color, vec3(0.300781, 0.589844, 0.109375));\n}\n\nvoid main() {\n  vec4 color = texture2D(tex0, vTexCoord);\n  float lum = luma(color.rgb);\n\n  // set current color as the brightest neighbor color\n\n  vec4 neighbors[4];\n  neighbors[0] = texture2D(tex0, vTexCoord + vec2( texelSize.x, 0.0));\n  neighbors[1] = texture2D(tex0, vTexCoord + vec2(-texelSize.x, 0.0));\n  neighbors[2] = texture2D(tex0, vTexCoord + vec2(0.0,  texelSize.y));\n  neighbors[3] = texture2D(tex0, vTexCoord + vec2(0.0, -texelSize.y));\n\n  for (int i = 0; i < 4; i++) {\n    vec4 neighborColor = neighbors[i];\n    float neighborLum = luma(neighborColor.rgb);\n\n    if (neighborLum > lum) {\n      color = neighborColor;\n      lum = neighborLum;\n    }\n  }\n\n  gl_FragColor = color;\n}\n"), _(e2, l.BLUR, "precision highp float;\n\n// Two-pass blur filter, unweighted kernel.\n// See also a similar blur at Adam Ferriss' repo of shader examples:\n// https://github.com/aferriss/p5jsShaderExamples/blob/gh-pages/4_image-effects/4-9_single-pass-blur/effect.frag\n\n\nuniform sampler2D tex0;\nvarying vec2 vTexCoord;\nuniform vec2 direction;\nuniform vec2 canvasSize;\nuniform float radius;\n\nfloat random(vec2 p) {\n  vec3 p3  = fract(vec3(p.xyx) * .1031);\n  p3 += dot(p3, p3.yzx + 33.33);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\n// This isn't a real Gaussian weight, it's a quadratic weight. It's what the\n// CPU mode's blur uses though, so we also use it here to match.\nfloat quadWeight(float x, float e) {\n  return pow(e-abs(x), 2.);\n}\n\nvoid main(){\n  vec2 uv = vTexCoord;\n\n  // A reasonable maximum number of samples\n  const float maxSamples = 64.0;\n\n  float numSamples = floor(7. * radius);\n  if (fract(numSamples / 2.) == 0.) {\n    numSamples++;\n  }\n  vec4 avg = vec4(0.0);\n  float total = 0.0;\n\n  // Calculate the spacing to avoid skewing if numSamples > maxSamples\n  float spacing = 1.0;\n  if (numSamples > maxSamples) {\n    spacing = numSamples / maxSamples;\n    numSamples = maxSamples;\n  }\n\n  float randomOffset = (spacing - 1.0) * mix(-0.5, 0.5, random(gl_FragCoord.xy));\n  for (float i = 0.0; i < maxSamples; i++) {\n    if (i >= numSamples) break;\n\n    float sample = i * spacing - (numSamples - 1.0) * 0.5 * spacing + randomOffset;\n    vec2 sampleCoord = uv + vec2(sample, sample) / canvasSize * direction;\n    float weight = quadWeight(sample, (numSamples - 1.0) * 0.5 * spacing);\n\n    avg += weight * texture2D(tex0, sampleCoord);\n    total += weight;\n  }\n\n  avg /= total;\n  gl_FragColor = avg;\n}\n"), _(e2, l.POSTERIZE, "// Limit color space for a stylized cartoon / poster effect\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\nuniform float filterParameter;\n\nvec3 quantize(vec3 color, float n) {\n  // restrict values to N options/bins\n  // and floor each channel to nearest value\n  //\n  // eg. when N = 5, values = 0.0, 0.25, 0.50, 0.75, 1.0\n  // then quantize (0.1, 0.7, 0.9) -> (0.0, 0.5, 1.0)\n\n  color = color * n;\n  color = floor(color);\n  color = color / (n - 1.0);\n  return color;\n}\n\nvoid main() {\n  vec4 color = texture2D(tex0, vTexCoord);\n\n  vec3 restrictedColor = quantize(color.rgb / color.a, filterParameter);\n\n  gl_FragColor = vec4(restrictedColor.rgb * color.a, color.a);\n}\n"), _(e2, l.OPAQUE, "// Set alpha channel to entirely opaque\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\n\nvoid main() {\n  vec4 color = texture2D(tex0, vTexCoord);\n  gl_FragColor = vec4(color.rgb / color.a, 1.0);\n}\n"), _(e2, l.INVERT, "// Set each pixel to inverse value\n// Note that original INVERT does not change the opacity, so this follows suit\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\n\nvoid main() {\nvec4 color = texture2D(tex0, vTexCoord);\nvec3 origColor = color.rgb / color.a;\nvec3 invertedColor = vec3(1.0) - origColor;\ngl_FragColor = vec4(invertedColor * color.a, color.a);\n}\n"), _(e2, l.THRESHOLD, "// Convert pixels to either white or black, \n// depending on if their luma is above or below filterParameter\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\nuniform float filterParameter;\n\nfloat luma(vec3 color) {\n  // weighted grayscale with luminance values\n  return dot(color, vec3(0.2126, 0.7152, 0.0722));\n}\n\nvoid main() {\n  vec4 color = texture2D(tex0, vTexCoord);\n  float gray = luma(color.rgb / color.a);\n  // floor() used to match src/image/filters.js\n  float threshold = floor(filterParameter * 255.0) / 255.0;\n  float blackOrWhite = step(threshold, gray);\n  gl_FragColor = vec4(vec3(blackOrWhite) * color.a, color.a);\n}\n");
          var k = e2;
          function O(e3, t3, r3, o2, n2, s3, i2, a2, l2, u3) {
            var c2 = t3.getParameter(t3.FRAMEBUFFER_BINDING), r3 = (t3.bindFramebuffer(t3.FRAMEBUFFER, r3), a2 === t3.RGBA ? 4 : 3), d2 = s3 * i2 * r3, h2 = l2 === t3.UNSIGNED_BYTE ? Uint8Array : Float32Array;
            if (e3 instanceof h2 && e3.length === d2 || (e3 = new h2(d2)), t3.readPixels(o2, u3 ? u3 - n2 - i2 : n2, s3, i2, a2, l2, e3), t3.bindFramebuffer(t3.FRAMEBUFFER, c2), u3) for (var f2 = Math.floor(i2 / 2), p2 = new h2(s3 * r3), m2 = 0; m2 < f2; m2++) {
              var y2 = m2 * s3 * 4, g2 = (i2 - m2 - 1) * s3 * 4;
              p2.set(e3.subarray(y2, y2 + 4 * s3)), e3.copyWithin(y2, g2, g2 + 4 * s3), e3.set(p2, g2);
            }
            return e3;
          }
          function C(e3, t3, r3, o2, n2, s3, i2) {
            var a2 = e3.getParameter(e3.FRAMEBUFFER_BINDING), t3 = (e3.bindFramebuffer(e3.FRAMEBUFFER, t3), n2 === e3.RGBA ? 4 : 3), t3 = new (s3 === e3.UNSIGNED_BYTE ? Uint8Array : Float32Array)(t3);
            return e3.readPixels(r3, i2 ? i2 - o2 - 1 : o2, 1, 1, n2, s3, t3), e3.bindFramebuffer(e3.FRAMEBUFFER, a2), Array.from(t3);
          }
          g.default.prototype.setAttributes = function(e3, t3) {
            if (void 0 === this._glAttributes) console.log("You are trying to use setAttributes on a p5.Graphics object that does not use a WEBGL renderer.");
            else {
              var r3 = true;
              if (void 0 !== t3 ? (null === this._glAttributes && (this._glAttributes = {}), this._glAttributes[e3] !== t3 && (this._glAttributes[e3] = t3, r3 = false)) : e3 instanceof Object && this._glAttributes !== e3 && (this._glAttributes = e3, r3 = false), this._renderer.isP3D && !r3) {
                if (!this._setupDone) {
                  for (var o2 in this._renderer.retainedMode.geometry) if (this._renderer.retainedMode.geometry.hasOwnProperty(o2)) return void g.default._friendlyError("Sorry, Could not set the attributes, you need to call setAttributes() before calling the other drawing methods in setup()");
                }
                this.push(), this._renderer._resetContext(), this.pop(), this._renderer._curCamera && (this._renderer._curCamera._renderer = this._renderer);
              }
            }
          }, g.default.RendererGL = function(e3) {
            var t3 = s3;
            if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
            t3.prototype = Object.create(e3 && e3.prototype, {
              constructor: {
                value: t3,
                writable: true,
                configurable: true
              }
            }), e3 && m(t3, e3);
            var r3, n2 = y(s3);
            function s3(e4, t4, r4, o2) {
              if (this instanceof s3) return (e4 = n2.call(this, e4, t4, r4))._setAttributeDefaults(t4), e4._initContext(), e4.isP3D = true, e4.geometryBuilder = void 0, e4.GL = e4.drawingContext, e4._pInst._setProperty("drawingContext", e4.drawingContext), e4._isErasing = false, e4._clipDepths = [], e4._isClipApplied = false, e4._stencilTestOn = false, e4._enableLighting = false, e4.ambientLightColors = [], e4.mixedAmbientLight = [], e4.mixedSpecularColor = [], e4.specularColors = [1, 1, 1], e4.directionalLightDirections = [], e4.directionalLightDiffuseColors = [], e4.directionalLightSpecularColors = [], e4.pointLightPositions = [], e4.pointLightDiffuseColors = [], e4.pointLightSpecularColors = [], e4.spotLightPositions = [], e4.spotLightDirections = [], e4.spotLightDiffuseColors = [], e4.spotLightSpecularColors = [], e4.spotLightAngle = [], e4.spotLightConc = [], e4.activeImageLight = null, e4.diffusedTextures = /* @__PURE__ */ new Map(), e4.specularTextures = /* @__PURE__ */ new Map(), e4.drawMode = l.FILL, e4.curFillColor = e4._cachedFillStyle = [1, 1, 1, 1], e4.curAmbientColor = e4._cachedFillStyle = [1, 1, 1, 1], e4.curSpecularColor = e4._cachedFillStyle = [0, 0, 0, 0], e4.curEmissiveColor = e4._cachedFillStyle = [0, 0, 0, 0], e4.curStrokeColor = e4._cachedStrokeStyle = [0, 0, 0, 1], e4.curBlendMode = l.BLEND, e4.preEraseBlend = void 0, e4._cachedBlendMode = void 0, e4.webglVersion === l.WEBGL2 ? e4.blendExt = e4.GL : e4.blendExt = e4.GL.getExtension("EXT_blend_minmax"), e4._isBlending = false, e4._hasSetAmbient = false, e4._useSpecularMaterial = false, e4._useEmissiveMaterial = false, e4._useNormalMaterial = false, e4._useShininess = 1, e4._useMetalness = 0, e4._useLineColor = false, e4._useVertexColor = false, e4.registerEnabled = /* @__PURE__ */ new Set(), e4._tint = [255, 255, 255, 255], e4.constantAttenuation = 1, e4.linearAttenuation = 0, e4.quadraticAttenuation = 0, e4.uModelMatrix = new g.default.Matrix(), e4.uViewMatrix = new g.default.Matrix(), e4.uMVMatrix = new g.default.Matrix(), e4.uPMatrix = new g.default.Matrix(), e4.uNMatrix = new g.default.Matrix("mat3"), e4.curMatrix = new g.default.Matrix("mat3"), e4._currentNormal = new g.default.Vector(0, 0, 1), e4._curCamera = new g.default.Camera(v(e4)), e4._curCamera._computeCameraDefaultSettings(), e4._curCamera._setDefaultCamera(), e4.filterCamera = new g.default.Camera(v(e4)), e4.filterCamera._computeCameraDefaultSettings(), e4.filterCamera._setDefaultCamera(), e4.prevTouches = [], e4.zoomVelocity = 0, e4.rotateVelocity = new g.default.Vector(0, 0), e4.moveVelocity = new g.default.Vector(0, 0), e4.executeZoom = false, e4.executeRotateAndMove = false, e4.specularShader = void 0, e4.sphereMapping = void 0, e4.diffusedShader = void 0, e4._defaultLightShader = void 0, e4._defaultImmediateModeShader = void 0, e4._defaultNormalShader = void 0, e4._defaultColorShader = void 0, e4._defaultPointShader = void 0, e4.userFillShader = void 0, e4.userStrokeShader = void 0, e4.userPointShader = void 0, e4.retainedMode = {
                geometry: {},
                buffers: {
                  stroke: [new g.default.RenderBuffer(4, "lineVertexColors", "lineColorBuffer", "aVertexColor", v(e4)), new g.default.RenderBuffer(3, "lineVertices", "lineVerticesBuffer", "aPosition", v(e4)), new g.default.RenderBuffer(3, "lineTangentsIn", "lineTangentsInBuffer", "aTangentIn", v(e4)), new g.default.RenderBuffer(3, "lineTangentsOut", "lineTangentsOutBuffer", "aTangentOut", v(e4)), new g.default.RenderBuffer(1, "lineSides", "lineSidesBuffer", "aSide", v(e4))],
                  fill: [new g.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", v(e4), e4._vToNArray), new g.default.RenderBuffer(3, "vertexNormals", "normalBuffer", "aNormal", v(e4), e4._vToNArray), new g.default.RenderBuffer(4, "vertexColors", "colorBuffer", "aVertexColor", v(e4)), new g.default.RenderBuffer(3, "vertexAmbients", "ambientBuffer", "aAmbientColor", v(e4)), new g.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", v(e4), e4._flatten)],
                  text: [new g.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", v(e4), e4._vToNArray), new g.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", v(e4), e4._flatten)]
                }
              }, e4.immediateMode = {
                geometry: new g.default.Geometry(),
                shapeMode: l.TRIANGLE_FAN,
                contourIndices: [],
                _bezierVertex: [],
                _quadraticVertex: [],
                _curveVertex: [],
                buffers: {
                  fill: [new g.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", v(e4), e4._vToNArray), new g.default.RenderBuffer(3, "vertexNormals", "normalBuffer", "aNormal", v(e4), e4._vToNArray), new g.default.RenderBuffer(4, "vertexColors", "colorBuffer", "aVertexColor", v(e4)), new g.default.RenderBuffer(3, "vertexAmbients", "ambientBuffer", "aAmbientColor", v(e4)), new g.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", v(e4), e4._flatten)],
                  stroke: [new g.default.RenderBuffer(4, "lineVertexColors", "lineColorBuffer", "aVertexColor", v(e4)), new g.default.RenderBuffer(3, "lineVertices", "lineVerticesBuffer", "aPosition", v(e4)), new g.default.RenderBuffer(3, "lineTangentsIn", "lineTangentsInBuffer", "aTangentIn", v(e4)), new g.default.RenderBuffer(3, "lineTangentsOut", "lineTangentsOutBuffer", "aTangentOut", v(e4)), new g.default.RenderBuffer(1, "lineSides", "lineSidesBuffer", "aSide", v(e4))],
                  point: e4.GL.createBuffer()
                }
              }, e4.pointSize = 5, e4.curStrokeWeight = 1, e4.curStrokeCap = l.ROUND, e4.curStrokeJoin = l.ROUND, e4.textures = /* @__PURE__ */ new Map(), e4.framebuffers = /* @__PURE__ */ new Set(), e4.activeFramebuffers = [], e4.filterShader = void 0, e4.filterLayer = void 0, e4.filterLayerTemp = void 0, e4.defaultFilterShaders = {}, e4.textureMode = l.IMAGE, e4.textureWrapX = l.CLAMP, e4.textureWrapY = l.CLAMP, e4._tex = null, e4._curveTightness = 6, e4._lookUpTableBezier = [], e4._lookUpTableQuadratic = [], e4._lutBezierDetail = 0, e4._lutQuadraticDetail = 0, e4.isProcessingVertices = false, e4._tessy = e4._initTessy(), e4.fontInfos = {}, e4._curShader = void 0, e4;
              throw new TypeError("Cannot call a class as a function");
            }
            return t3 = s3, (e3 = [{
              key: "beginGeometry",
              value: function() {
                if (this.geometryBuilder) throw new Error("It looks like `beginGeometry()` is being called while another p5.Geometry is already being build.");
                this.geometryBuilder = new a.default(this);
              }
            }, {
              key: "endGeometry",
              value: function() {
                var e4;
                if (this.geometryBuilder) return e4 = this.geometryBuilder.finish(), this.geometryBuilder = void 0, e4;
                throw new Error("Make sure you call beginGeometry() before endGeometry()!");
              }
            }, {
              key: "buildGeometry",
              value: function(e4) {
                return this.beginGeometry(), e4(), this.endGeometry();
              }
            }, {
              key: "_setAttributeDefaults",
              value: function(e4) {
                var t4 = {
                  alpha: true,
                  depth: true,
                  stencil: true,
                  antialias: navigator.userAgent.toLowerCase().includes("safari"),
                  premultipliedAlpha: true,
                  preserveDrawingBuffer: true,
                  perPixelLighting: true,
                  version: 2
                };
                null === e4._glAttributes ? e4._glAttributes = t4 : e4._glAttributes = Object.assign(t4, e4._glAttributes);
              }
            }, {
              key: "_initContext",
              value: function() {
                if (1 !== this._pInst._glAttributes.version && (this.drawingContext = this.canvas.getContext("webgl2", this._pInst._glAttributes)), this.webglVersion = this.drawingContext ? l.WEBGL2 : l.WEBGL, this._pInst._setProperty("webglVersion", this.webglVersion), this.drawingContext || (this.drawingContext = this.canvas.getContext("webgl", this._pInst._glAttributes) || this.canvas.getContext("experimental-webgl", this._pInst._glAttributes)), null === this.drawingContext) throw new Error("Error creating webgl context");
                var e4 = this.drawingContext;
                e4.enable(e4.DEPTH_TEST), e4.depthFunc(e4.LEQUAL), e4.viewport(0, 0, e4.drawingBufferWidth, e4.drawingBufferHeight), e4.pixelStorei(e4.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true), this._viewport = this.drawingContext.getParameter(this.drawingContext.VIEWPORT);
              }
            }, {
              key: "_getParam",
              value: function() {
                var e4 = this.drawingContext;
                return e4.getParameter(e4.MAX_TEXTURE_SIZE);
              }
            }, {
              key: "_adjustDimensions",
              value: function(e4, t4) {
                this._maxTextureSize || (this._maxTextureSize = this._getParam());
                var r4 = this._maxTextureSize, r4 = (g.default.prototype._maxAllowedPixelDimensions, Math.floor(r4 / this.pixelDensity())), o2 = Math.min(e4, r4), r4 = Math.min(t4, r4);
                return o2 === e4 && r4 === t4 || console.warn("Warning: The requested width/height exceeds hardware limits. " + "Adjusting dimensions to width: ".concat(o2, ", height: ").concat(r4, ".")), {
                  adjustedWidth: o2,
                  adjustedHeight: r4
                };
              }
            }, {
              key: "_resetContext",
              value: function(e4, t4) {
                var r4, o2 = this.width, n3 = this.height, s4 = this.canvas.id, i2 = this._pInst instanceof g.default.Graphics, s4 = (i2 ? ((r4 = this._pInst).canvas.parentNode.removeChild(r4.canvas), r4.canvas = document.createElement("canvas"), (r4._pInst._userNode || document.body).appendChild(r4.canvas), g.default.Element.call(r4, r4.canvas, r4._pInst), r4.width = o2, r4.height = n3) : ((r4 = this.canvas) && r4.parentNode.removeChild(r4), (r4 = document.createElement("canvas")).id = s4, (this._pInst._userNode || document.body).appendChild(r4), this._pInst.canvas = r4, this.canvas = r4), new g.default.RendererGL(this._pInst.canvas, this._pInst, !i2));
                this._pInst._setProperty("_renderer", s4), s4.resize(o2, n3), s4._applyDefaults(), i2 || this._pInst._elements.push(s4), "function" == typeof t4 && setTimeout(function() {
                  t4.apply(window._renderer, e4);
                }, 0);
              }
            }, {
              key: "_update",
              value: function() {
                this.uModelMatrix.reset(), this.uViewMatrix.set(this._curCamera.cameraMatrix), this.ambientLightColors.length = 0, this.specularColors = [1, 1, 1], this.directionalLightDirections.length = 0, this.directionalLightDiffuseColors.length = 0, this.directionalLightSpecularColors.length = 0, this.pointLightPositions.length = 0, this.pointLightDiffuseColors.length = 0, this.pointLightSpecularColors.length = 0, this.spotLightPositions.length = 0, this.spotLightDirections.length = 0, this.spotLightDiffuseColors.length = 0, this.spotLightSpecularColors.length = 0, this.spotLightAngle.length = 0, this.spotLightConc.length = 0, this._enableLighting = false, this._tint = [255, 255, 255, 255], this.GL.clearStencil(0), this.GL.clear(this.GL.DEPTH_BUFFER_BIT | this.GL.STENCIL_BUFFER_BIT), this.GL.disable(this.GL.STENCIL_TEST);
              }
            }, {
              key: "background",
              value: function() {
                var e4 = (e4 = this._pInst).color.apply(e4, arguments), t4 = e4.levels[0] / 255, r4 = e4.levels[1] / 255, o2 = e4.levels[2] / 255, e4 = e4.levels[3] / 255;
                this.clear(t4, r4, o2, e4);
              }
            }, {
              key: "fill",
              value: function(e4, t4, r4, o2) {
                var n3 = g.default.prototype.color.apply(this._pInst, arguments);
                this.curFillColor = n3._array, this.drawMode = l.FILL, this._useNormalMaterial = false, this._tex = null;
              }
            }, {
              key: "stroke",
              value: function(e4, t4, r4, o2) {
                var n3 = g.default.prototype.color.apply(this._pInst, arguments);
                this.curStrokeColor = n3._array;
              }
            }, {
              key: "strokeCap",
              value: function(e4) {
                this.curStrokeCap = e4;
              }
            }, {
              key: "strokeJoin",
              value: function(e4) {
                this.curStrokeJoin = e4;
              }
            }, {
              key: "getFilterLayer",
              value: function() {
                return this.filterLayer || (this.filterLayer = this._pInst.createFramebuffer()), this.filterLayer;
              }
            }, {
              key: "getFilterLayerTemp",
              value: function() {
                return this.filterLayerTemp || (this.filterLayerTemp = this._pInst.createFramebuffer()), this.filterLayerTemp;
              }
            }, {
              key: "matchSize",
              value: function(e4, t4) {
                e4.width === t4.width && e4.height === t4.height || e4.resize(t4.width, t4.height), e4.pixelDensity() !== t4.pixelDensity() && e4.pixelDensity(t4.pixelDensity());
              }
            }, {
              key: "filter",
              value: function() {
                var e4, t4, r4 = this, o2 = this.getFilterLayer(), n3 = void 0, s4 = void 0, i2 = ("string" == typeof (arguments.length <= 0 ? void 0 : arguments[0]) ? (s4 = arguments.length <= 0 ? void 0 : arguments[0], _(e4 = {}, l.BLUR, 3), _(e4, l.POSTERIZE, 4), _(e4, l.THRESHOLD, 0.5), n3 = s4 in (e4 = e4) && void 0 === (arguments.length <= 1 ? void 0 : arguments[1]) ? e4[s4] : arguments.length <= 1 ? void 0 : arguments[1], s4 in this.defaultFilterShaders || (this.defaultFilterShaders[s4] = new g.default.Shader(o2._renderer, "uniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nattribute vec3 aPosition;\n// texcoords only come from p5 to vertex shader\n// so pass texcoords on to the fragment shader in a varying variable\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n  // transferring texcoords for the frag shader\n  vTexCoord = aTexCoord;\n\n  // copy position with a fourth coordinate for projection (1.0 is normal)\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n}\n", k[s4])), this.filterShader = this.defaultFilterShaders[s4]) : this.filterShader = arguments.length <= 0 ? void 0 : arguments[0], this.activeFramebuffer() || this), a2 = (this.matchSize(o2, i2), o2.draw(function() {
                  return r4._pInst.clear();
                }), [1 / (i2.width * i2.pixelDensity()), 1 / (i2.height * i2.pixelDensity())]);
                s4 === l.BLUR ? (t4 = this.getFilterLayerTemp(), this.matchSize(t4, i2), this._pInst.push(), this._pInst.noStroke(), this._pInst.blendMode(l.BLEND), this._pInst.shader(this.filterShader), this.filterShader.setUniform("texelSize", a2), this.filterShader.setUniform("canvasSize", [i2.width, i2.height]), this.filterShader.setUniform("radius", Math.max(1, n3)), t4.draw(function() {
                  r4.filterShader.setUniform("direction", [1, 0]), r4.filterShader.setUniform("tex0", i2), r4._pInst.clear(), r4._pInst.shader(r4.filterShader), r4._pInst.noLights(), r4._pInst.plane(i2.width, i2.height);
                }), o2.draw(function() {
                  r4.filterShader.setUniform("direction", [0, 1]), r4.filterShader.setUniform("tex0", t4), r4._pInst.clear(), r4._pInst.shader(r4.filterShader), r4._pInst.noLights(), r4._pInst.plane(i2.width, i2.height);
                }), this._pInst.pop()) : o2.draw(function() {
                  r4._pInst.noStroke(), r4._pInst.blendMode(l.BLEND), r4._pInst.shader(r4.filterShader), r4.filterShader.setUniform("tex0", i2), r4.filterShader.setUniform("texelSize", a2), r4.filterShader.setUniform("canvasSize", [i2.width, i2.height]), r4.filterShader.setUniform("filterParameter", n3), r4._pInst.noLights(), r4._pInst.plane(i2.width, i2.height);
                }), this._pInst.push(), this._pInst.noStroke(), this.clear(), this._pInst.push(), this._pInst.imageMode(l.CORNER), this._pInst.blendMode(l.BLEND), i2.filterCamera._resize(), this._pInst.setCamera(i2.filterCamera), this._pInst.resetMatrix(), this._pInst.image(o2, -i2.width / 2, -i2.height / 2, i2.width, i2.height), this._pInst.clearDepth(), this._pInst.pop(), this._pInst.pop();
              }
            }, {
              key: "pixelDensity",
              value: function(e4) {
                return e4 ? this._pInst.pixelDensity(e4) : this._pInst.pixelDensity();
              }
            }, {
              key: "blendMode",
              value: function(e4) {
                e4 === l.DARKEST || e4 === l.LIGHTEST || e4 === l.ADD || e4 === l.BLEND || e4 === l.SUBTRACT || e4 === l.SCREEN || e4 === l.EXCLUSION || e4 === l.REPLACE || e4 === l.MULTIPLY || e4 === l.REMOVE ? this.curBlendMode = e4 : e4 !== l.BURN && e4 !== l.OVERLAY && e4 !== l.HARD_LIGHT && e4 !== l.SOFT_LIGHT && e4 !== l.DODGE || console.warn("BURN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, and DODGE only work for blendMode in 2D mode.");
              }
            }, {
              key: "erase",
              value: function(e4, t4) {
                this._isErasing || (this.preEraseBlend = this.curBlendMode, this._isErasing = true, this.blendMode(l.REMOVE), this._cachedFillStyle = this.curFillColor.slice(), this.curFillColor = [1, 1, 1, e4 / 255], this._cachedStrokeStyle = this.curStrokeColor.slice(), this.curStrokeColor = [1, 1, 1, t4 / 255]);
              }
            }, {
              key: "noErase",
              value: function() {
                this._isErasing && (this.curFillColor = this._cachedFillStyle.slice(), this.curStrokeColor = this._cachedStrokeStyle.slice(), this.curBlendMode = this.preEraseBlend, this.blendMode(this.preEraseBlend), this._isErasing = false, this._applyBlendMode());
              }
            }, {
              key: "drawTarget",
              value: function() {
                return this.activeFramebuffers[this.activeFramebuffers.length - 1] || this;
              }
            }, {
              key: "beginClip",
              value: function() {
                var e4 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, e4 = (p(b(s3.prototype), "beginClip", this).call(this, e4), this.drawTarget()._isClipApplied = true, this.GL);
                e4.clearStencil(0), e4.clear(e4.STENCIL_BUFFER_BIT), e4.enable(e4.STENCIL_TEST), this._stencilTestOn = true, e4.stencilFunc(e4.ALWAYS, 1, 255), e4.stencilOp(e4.KEEP, e4.KEEP, e4.REPLACE), e4.disable(e4.DEPTH_TEST), this._pInst.push(), this._pInst.resetShader(), this._doFill && this._pInst.fill(0, 0), this._doStroke && this._pInst.stroke(0, 0);
              }
            }, {
              key: "endClip",
              value: function() {
                this._pInst.pop();
                var e4 = this.GL;
                e4.stencilOp(e4.KEEP, e4.KEEP, e4.KEEP), e4.stencilFunc(this._clipInvert ? e4.EQUAL : e4.NOTEQUAL, 0, 255), e4.enable(e4.DEPTH_TEST), this._clipDepths.push(this._pushPopDepth), p(b(s3.prototype), "endClip", this).call(this);
              }
            }, {
              key: "_clearClip",
              value: function() {
                this.GL.clearStencil(1), this.GL.clear(this.GL.STENCIL_BUFFER_BIT), 0 < this._clipDepths.length && this._clipDepths.pop(), this.drawTarget()._isClipApplied = false;
              }
            }, {
              key: "strokeWeight",
              value: function(e4) {
                this.curStrokeWeight !== e4 && (this.pointSize = e4, this.curStrokeWeight = e4);
              }
            }, {
              key: "_getPixel",
              value: function(e4, t4) {
                var r4 = this.GL;
                return C(r4, null, e4, t4, r4.RGBA, r4.UNSIGNED_BYTE, this._pInst.height * this._pInst.pixelDensity());
              }
            }, {
              key: "loadPixels",
              value: function() {
                var e4, t4, r4 = this._pixelsState;
                true !== this._pInst._glAttributes.preserveDrawingBuffer ? console.log("loadPixels only works in WebGL when preserveDrawingBuffer is true.") : (e4 = this._pInst._pixelDensity, t4 = this.GL, r4._setProperty("pixels", O(r4.pixels, t4, null, 0, 0, this.width * e4, this.height * e4, t4.RGBA, t4.UNSIGNED_BYTE, this.height * e4)));
              }
            }, {
              key: "updatePixels",
              value: function() {
                var e4 = this._getTempFramebuffer();
                e4.pixels = this._pixelsState.pixels, e4.updatePixels(), this._pInst.push(), this._pInst.resetMatrix(), this._pInst.clear(), this._pInst.imageMode(l.CENTER), this._pInst.image(e4, 0, 0), this._pInst.pop(), this.GL.clearDepth(1), this.GL.clear(this.GL.DEPTH_BUFFER_BIT);
              }
            }, {
              key: "_getTempFramebuffer",
              value: function() {
                return this._tempFramebuffer || (this._tempFramebuffer = this._pInst.createFramebuffer({
                  format: l.UNSIGNED_BYTE,
                  useDepth: this._pInst._glAttributes.depth,
                  depthFormat: l.UNSIGNED_INT,
                  antialias: this._pInst._glAttributes.antialias
                })), this._tempFramebuffer;
              }
            }, {
              key: "geometryInHash",
              value: function(e4) {
                return void 0 !== this.retainedMode.geometry[e4];
              }
            }, {
              key: "viewport",
              value: function(e4, t4) {
                this._viewport = [0, 0, e4, t4], this.GL.viewport(0, 0, e4, t4);
              }
            }, {
              key: "resize",
              value: function(t4, r4) {
                g.default.Renderer.prototype.resize.call(this, t4, r4), this._origViewport = {
                  width: this.GL.drawingBufferWidth,
                  height: this.GL.drawingBufferHeight
                }, this.viewport(this._origViewport.width, this._origViewport.height), this._curCamera._resize();
                var t4 = this._pixelsState, e4 = (void 0 !== t4.pixels && t4._setProperty("pixels", new Uint8Array(this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4)), true), r4 = false, t4 = void 0;
                try {
                  for (var o2, n3 = this.framebuffers[Symbol.iterator](); !(e4 = (o2 = n3.next()).done); e4 = true) o2.value._canvasSizeChanged();
                } catch (e5) {
                  r4 = true, t4 = e5;
                } finally {
                  try {
                    e4 || null == n3.return || n3.return();
                  } finally {
                    if (r4) throw t4;
                  }
                }
              }
            }, {
              key: "clear",
              value: function() {
                var e4 = (arguments.length <= 0 ? void 0 : arguments[0]) || 0, t4 = (arguments.length <= 1 ? void 0 : arguments[1]) || 0, r4 = (arguments.length <= 2 ? void 0 : arguments[2]) || 0, o2 = (arguments.length <= 3 ? void 0 : arguments[3]) || 0, n3 = this.activeFramebuffer();
                n3 && n3.format === l.UNSIGNED_BYTE && !n3.antialias && 0 === o2 && (o2 = 1e-10), this.GL.clearColor(e4 * o2, t4 * o2, r4 * o2, o2), this.GL.clearDepth(1), this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);
              }
            }, {
              key: "clearDepth",
              value: function() {
                this.GL.clearDepth(0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 1), this.GL.clear(this.GL.DEPTH_BUFFER_BIT);
              }
            }, {
              key: "applyMatrix",
              value: function(e4, t4, r4, o2, n3, s4) {
                16 === arguments.length ? g.default.Matrix.prototype.apply.apply(this.uModelMatrix, arguments) : this.uModelMatrix.apply([e4, t4, 0, 0, r4, o2, 0, 0, 0, 0, 1, 0, n3, s4, 0, 1]);
              }
            }, {
              key: "translate",
              value: function(e4, t4, r4) {
                return e4 instanceof g.default.Vector && (r4 = e4.z, t4 = e4.y, e4 = e4.x), this.uModelMatrix.translate([e4, t4, r4]), this;
              }
            }, {
              key: "scale",
              value: function(e4, t4, r4) {
                return this.uModelMatrix.scale(e4, t4, r4), this;
              }
            }, {
              key: "rotate",
              value: function(e4, t4) {
                return void 0 === t4 ? this.rotateZ(e4) : (g.default.Matrix.prototype.rotate.apply(this.uModelMatrix, arguments), this);
              }
            }, {
              key: "rotateX",
              value: function(e4) {
                return this.rotate(e4, 1, 0, 0), this;
              }
            }, {
              key: "rotateY",
              value: function(e4) {
                return this.rotate(e4, 0, 1, 0), this;
              }
            }, {
              key: "rotateZ",
              value: function(e4) {
                return this.rotate(e4, 0, 0, 1), this;
              }
            }, {
              key: "push",
              value: function() {
                var e4 = g.default.Renderer.prototype.push.apply(this), t4 = e4.properties;
                return t4.uModelMatrix = this.uModelMatrix.copy(), t4.uViewMatrix = this.uViewMatrix.copy(), t4.uPMatrix = this.uPMatrix.copy(), t4._curCamera = this._curCamera, this._curCamera = this._curCamera.copy(), t4.ambientLightColors = this.ambientLightColors.slice(), t4.specularColors = this.specularColors.slice(), t4.directionalLightDirections = this.directionalLightDirections.slice(), t4.directionalLightDiffuseColors = this.directionalLightDiffuseColors.slice(), t4.directionalLightSpecularColors = this.directionalLightSpecularColors.slice(), t4.pointLightPositions = this.pointLightPositions.slice(), t4.pointLightDiffuseColors = this.pointLightDiffuseColors.slice(), t4.pointLightSpecularColors = this.pointLightSpecularColors.slice(), t4.spotLightPositions = this.spotLightPositions.slice(), t4.spotLightDirections = this.spotLightDirections.slice(), t4.spotLightDiffuseColors = this.spotLightDiffuseColors.slice(), t4.spotLightSpecularColors = this.spotLightSpecularColors.slice(), t4.spotLightAngle = this.spotLightAngle.slice(), t4.spotLightConc = this.spotLightConc.slice(), t4.userFillShader = this.userFillShader, t4.userStrokeShader = this.userStrokeShader, t4.userPointShader = this.userPointShader, t4.pointSize = this.pointSize, t4.curStrokeWeight = this.curStrokeWeight, t4.curStrokeColor = this.curStrokeColor, t4.curFillColor = this.curFillColor, t4.curAmbientColor = this.curAmbientColor, t4.curSpecularColor = this.curSpecularColor, t4.curEmissiveColor = this.curEmissiveColor, t4._hasSetAmbient = this._hasSetAmbient, t4._useSpecularMaterial = this._useSpecularMaterial, t4._useEmissiveMaterial = this._useEmissiveMaterial, t4._useShininess = this._useShininess, t4._useMetalness = this._useMetalness, t4.constantAttenuation = this.constantAttenuation, t4.linearAttenuation = this.linearAttenuation, t4.quadraticAttenuation = this.quadraticAttenuation, t4._enableLighting = this._enableLighting, t4._useNormalMaterial = this._useNormalMaterial, t4._tex = this._tex, t4.drawMode = this.drawMode, t4._currentNormal = this._currentNormal, t4.curBlendMode = this.curBlendMode, t4.activeImageLight = this.activeImageLight, t4.textureMode = this.textureMode, e4;
              }
            }, {
              key: "pop",
              value: function() {
                var e4;
                0 < this._clipDepths.length && this._pushPopDepth === this._clipDepths[this._clipDepths.length - 1] && this._clearClip();
                for (var t4 = arguments.length, r4 = new Array(t4), o2 = 0; o2 < t4; o2++) r4[o2] = arguments[o2];
                (e4 = p(b(s3.prototype), "pop", this)).call.apply(e4, [this].concat(r4)), this._applyStencilTestIfClipping();
              }
            }, {
              key: "_applyStencilTestIfClipping",
              value: function() {
                var e4 = this.drawTarget();
                e4._isClipApplied !== this._stencilTestOn && (e4._isClipApplied ? (this.GL.enable(this.GL.STENCIL_TEST), this._stencilTestOn = true) : (this.GL.disable(this.GL.STENCIL_TEST), this._stencilTestOn = false));
              }
            }, {
              key: "resetMatrix",
              value: function() {
                return this.uModelMatrix.reset(), this.uViewMatrix.set(this._curCamera.cameraMatrix), this;
              }
            }, {
              key: "_getImmediateStrokeShader",
              value: function() {
                var e4 = this.userStrokeShader;
                return e4 && e4.isStrokeShader() ? e4 : this._getLineShader();
              }
            }, {
              key: "_getRetainedStrokeShader",
              value: function() {
                return this._getImmediateStrokeShader();
              }
            }, {
              key: "_getSphereMapping",
              value: function(e4) {
                return this.sphereMapping || (this.sphereMapping = this._pInst.createFilterShader(M)), this.uNMatrix.inverseTranspose(this.uViewMatrix), this.uNMatrix.invert3x3(this.uNMatrix), this.sphereMapping.setUniform("uFovY", this._curCamera.cameraFOV), this.sphereMapping.setUniform("uAspect", this._curCamera.aspectRatio), this.sphereMapping.setUniform("uNewNormalMatrix", this.uNMatrix.mat3), this.sphereMapping.setUniform("uSampler", e4), this.sphereMapping;
              }
            }, {
              key: "_getImmediateFillShader",
              value: function() {
                var e4 = this.userFillShader;
                if (this._useNormalMaterial && (!e4 || !e4.isNormalShader())) return this._getNormalShader();
                if (this._enableLighting) {
                  if (!e4 || !e4.isLightShader()) return this._getLightShader();
                } else if (this._tex) {
                  if (!e4 || !e4.isTextureShader()) return this._getLightShader();
                } else if (!e4) return this._getImmediateModeShader();
                return e4;
              }
            }, {
              key: "_getRetainedFillShader",
              value: function() {
                if (this._useNormalMaterial) return this._getNormalShader();
                var e4 = this.userFillShader;
                if (this._enableLighting) {
                  if (!e4 || !e4.isLightShader()) return this._getLightShader();
                } else if (this._tex) {
                  if (!e4 || !e4.isTextureShader()) return this._getLightShader();
                } else if (!e4) return this._getColorShader();
                return e4;
              }
            }, {
              key: "_getImmediatePointShader",
              value: function() {
                var e4 = this.userPointShader;
                return e4 && e4.isPointShader() ? e4 : this._getPointShader();
              }
            }, {
              key: "_getRetainedLineShader",
              value: function() {
                return this._getImmediateLineShader();
              }
            }, {
              key: "baseMaterialShader",
              value: function() {
                if (this._pInst._glAttributes.perPixelLighting) return this._getLightShader();
                throw new Error("The material shader does not support hooks without perPixelLighting. Try turning it back on.");
              }
            }, {
              key: "_getLightShader",
              value: function() {
                return this._defaultLightShader || (this._pInst._glAttributes.perPixelLighting ? this._defaultLightShader = new g.default.Shader(this, this._webGL2CompatibilityPrefix("vert", "highp") + E.phongVert, this._webGL2CompatibilityPrefix("frag", "highp") + E.phongFrag, {
                  vertex: {
                    "void beforeVertex": "() {}",
                    "vec3 getLocalPosition": "(vec3 position) { return position; }",
                    "vec3 getWorldPosition": "(vec3 position) { return position; }",
                    "vec3 getLocalNormal": "(vec3 normal) { return normal; }",
                    "vec3 getWorldNormal": "(vec3 normal) { return normal; }",
                    "vec2 getUV": "(vec2 uv) { return uv; }",
                    "vec4 getVertexColor": "(vec4 color) { return color; }",
                    "void afterVertex": "() {}"
                  },
                  fragment: {
                    "void beforeFragment": "() {}",
                    "Inputs getPixelInputs": "(Inputs inputs) { return inputs; }",
                    "vec4 combineColors": "(ColorComponents components) {\n                vec4 color = vec4(0.);\n                color.rgb += components.diffuse * components.baseColor;\n                color.rgb += components.ambient * components.ambientColor;\n                color.rgb += components.specular * components.specularColor;\n                color.rgb += components.emissive;\n                color.a = components.opacity;\n                return color;\n              }",
                    "vec4 getFinalColor": "(vec4 color) { return color; }",
                    "void afterFragment": "() {}"
                  }
                }) : this._defaultLightShader = new g.default.Shader(this, this._webGL2CompatibilityPrefix("vert", "highp") + E.lightVert, this._webGL2CompatibilityPrefix("frag", "highp") + E.lightTextureFrag)), this._defaultLightShader;
              }
            }, {
              key: "_getImmediateModeShader",
              value: function() {
                return this._defaultImmediateModeShader || (this._defaultImmediateModeShader = new g.default.Shader(this, this._webGL2CompatibilityPrefix("vert", "mediump") + E.immediateVert, this._webGL2CompatibilityPrefix("frag", "mediump") + E.vertexColorFrag)), this._defaultImmediateModeShader;
              }
            }, {
              key: "baseNormalShader",
              value: function() {
                return this._getNormalShader();
              }
            }, {
              key: "_getNormalShader",
              value: function() {
                return this._defaultNormalShader || (this._defaultNormalShader = new g.default.Shader(this, this._webGL2CompatibilityPrefix("vert", "mediump") + E.normalVert, this._webGL2CompatibilityPrefix("frag", "mediump") + E.normalFrag, {
                  vertex: {
                    "void beforeVertex": "() {}",
                    "vec3 getLocalPosition": "(vec3 position) { return position; }",
                    "vec3 getWorldPosition": "(vec3 position) { return position; }",
                    "vec3 getLocalNormal": "(vec3 normal) { return normal; }",
                    "vec3 getWorldNormal": "(vec3 normal) { return normal; }",
                    "vec2 getUV": "(vec2 uv) { return uv; }",
                    "vec4 getVertexColor": "(vec4 color) { return color; }",
                    "void afterVertex": "() {}"
                  },
                  fragment: {
                    "void beforeFragment": "() {}",
                    "vec4 getFinalColor": "(vec4 color) { return color; }",
                    "void afterFragment": "() {}"
                  }
                })), this._defaultNormalShader;
              }
            }, {
              key: "baseColorShader",
              value: function() {
                return this._getColorShader();
              }
            }, {
              key: "_getColorShader",
              value: function() {
                return this._defaultColorShader || (this._defaultColorShader = new g.default.Shader(this, this._webGL2CompatibilityPrefix("vert", "mediump") + E.normalVert, this._webGL2CompatibilityPrefix("frag", "mediump") + E.basicFrag, {
                  vertex: {
                    "void beforeVertex": "() {}",
                    "vec3 getLocalPosition": "(vec3 position) { return position; }",
                    "vec3 getWorldPosition": "(vec3 position) { return position; }",
                    "vec3 getLocalNormal": "(vec3 normal) { return normal; }",
                    "vec3 getWorldNormal": "(vec3 normal) { return normal; }",
                    "vec2 getUV": "(vec2 uv) { return uv; }",
                    "vec4 getVertexColor": "(vec4 color) { return color; }",
                    "void afterVertex": "() {}"
                  },
                  fragment: {
                    "void beforeFragment": "() {}",
                    "vec4 getFinalColor": "(vec4 color) { return color; }",
                    "void afterFragment": "() {}"
                  }
                })), this._defaultColorShader;
              }
            }, {
              key: "pointShader",
              value: function() {
                return this._getPointShader();
              }
            }, {
              key: "_getPointShader",
              value: function() {
                return this._defaultPointShader || (this._defaultPointShader = new g.default.Shader(this, this._webGL2CompatibilityPrefix("vert", "mediump") + E.pointVert, this._webGL2CompatibilityPrefix("frag", "mediump") + E.pointFrag, {
                  vertex: {
                    "void beforeVertex": "() {}",
                    "vec3 getLocalPosition": "(vec3 position) { return position; }",
                    "vec3 getWorldPosition": "(vec3 position) { return position; }",
                    "float getPointSize": "(float size) { return size; }",
                    "void afterVertex": "() {}"
                  },
                  fragment: {
                    "void beforeFragment": "() {}",
                    "vec4 getFinalColor": "(vec4 color) { return color; }",
                    "bool shouldDiscard": "(bool outside) { return outside; }",
                    "void afterFragment": "() {}"
                  }
                })), this._defaultPointShader;
              }
            }, {
              key: "baseStrokeShader",
              value: function() {
                return this._getLineShader();
              }
            }, {
              key: "_getLineShader",
              value: function() {
                return this._defaultLineShader || (this._defaultLineShader = new g.default.Shader(this, this._webGL2CompatibilityPrefix("vert", "mediump") + E.lineVert, this._webGL2CompatibilityPrefix("frag", "mediump") + E.lineFrag, {
                  vertex: {
                    "void beforeVertex": "() {}",
                    "vec3 getLocalPosition": "(vec3 position) { return position; }",
                    "vec3 getWorldPosition": "(vec3 position) { return position; }",
                    "float getStrokeWeight": "(float weight) { return weight; }",
                    "vec2 getLineCenter": "(vec2 center) { return center; }",
                    "vec2 getLinePosition": "(vec2 position) { return position; }",
                    "vec4 getVertexColor": "(vec4 color) { return color; }",
                    "void afterVertex": "() {}"
                  },
                  fragment: {
                    "void beforeFragment": "() {}",
                    "Inputs getPixelInputs": "(Inputs inputs) { return inputs; }",
                    "vec4 getFinalColor": "(vec4 color) { return color; }",
                    "bool shouldDiscard": "(bool outside) { return outside; }",
                    "void afterFragment": "() {}"
                  }
                })), this._defaultLineShader;
              }
            }, {
              key: "_getFontShader",
              value: function() {
                return this._defaultFontShader || (this.webglVersion === l.WEBGL && this.GL.getExtension("OES_standard_derivatives"), this._defaultFontShader = new g.default.Shader(this, this._webGL2CompatibilityPrefix("vert", "highp") + E.fontVert, this._webGL2CompatibilityPrefix("frag", "highp") + E.fontFrag)), this._defaultFontShader;
              }
            }, {
              key: "_webGL2CompatibilityPrefix",
              value: function(e4, t4) {
                var r4 = "";
                return this.webglVersion === l.WEBGL2 && (r4 += "#version 300 es\n#define WEBGL2\n"), "vert" === e4 ? r4 += "#define VERTEX_SHADER\n" : "frag" === e4 && (r4 += "#define FRAGMENT_SHADER\n"), t4 && (r4 += "precision ".concat(t4, " float;\n")), r4;
              }
            }, {
              key: "_getEmptyTexture",
              value: function() {
                var e4;
                return this._emptyTexture || ((e4 = new g.default.Image(1, 1)).set(0, 0, 255), this._emptyTexture = new g.default.Texture(this, e4)), this._emptyTexture;
              }
            }, {
              key: "getTexture",
              value: function(e4) {
                e4 instanceof g.default.Framebuffer && (e4 = e4.color);
                var t4 = this.textures.get(e4);
                return t4 || (t4 = new g.default.Texture(this, e4), this.textures.set(e4, t4), t4);
              }
            }, {
              key: "getDiffusedTexture",
              value: function(e4) {
                var t4, r4, o2 = this;
                return null != this.diffusedTextures.get(e4) ? this.diffusedTextures.get(e4) : (0, t4 = Math.floor(e4.height / e4.width * 200), r4 = this._pInst.createFramebuffer({
                  width: 200,
                  height: t4,
                  density: 1
                }), this.diffusedShader || (this.diffusedShader = this._pInst.createShader(E.imageLightVert, E.imageLightDiffusedFrag)), r4.draw(function() {
                  o2._pInst.shader(o2.diffusedShader), o2.diffusedShader.setUniform("environmentMap", e4), o2._pInst.noStroke(), o2._pInst.rectMode(l.CENTER), o2._pInst.noLights(), o2._pInst.rect(0, 0, 200, t4);
                }), this.diffusedTextures.set(e4, r4), r4);
              }
            }, {
              key: "getSpecularTexture",
              value: function(r4) {
                var o2 = this;
                if (null != this.specularTextures.get(r4)) return this.specularTextures.get(r4);
                for (var e4, n3 = [], s4 = this._pInst.createFramebuffer({
                  width: 512,
                  height: 512,
                  density: 1
                }), i2 = Math.log(512) / Math.log(2), t4 = (this.specularShader || (this.specularShader = this._pInst.createShader(E.imageLightVert, E.imageLightSpecularFrag)), 512); 1 <= t4; t4 /= 2) !function(e5) {
                  s4.resize(e5, e5);
                  var t5 = 1 - Math.log(e5) / Math.log(2) / i2;
                  s4.draw(function() {
                    o2._pInst.shader(o2.specularShader), o2._pInst.clear(), o2.specularShader.setUniform("environmentMap", r4), o2.specularShader.setUniform("roughness", t5), o2._pInst.noStroke(), o2._pInst.noLights(), o2._pInst.plane(e5, e5);
                  }), n3.push(s4.get().drawingContext.getImageData(0, 0, e5, e5));
                }(t4);
                return s4.remove(), e4 = new c.MipmapTexture(this, n3, {}), this.specularTextures.set(r4, e4), e4;
              }
            }, {
              key: "activeFramebuffer",
              value: function() {
                return this.activeFramebuffers[this.activeFramebuffers.length - 1] || null;
              }
            }, {
              key: "createFramebuffer",
              value: function(e4) {
                return new g.default.Framebuffer(this, e4);
              }
            }, {
              key: "_setStrokeUniforms",
              value: function(e4) {
                e4.bindShader(), e4.setUniform("uUseLineColor", this._useLineColor), e4.setUniform("uMaterialColor", this.curStrokeColor), e4.setUniform("uStrokeWeight", this.curStrokeWeight), e4.setUniform("uStrokeCap", w[this.curStrokeCap]), e4.setUniform("uStrokeJoin", S[this.curStrokeJoin]);
              }
            }, {
              key: "_setFillUniforms",
              value: function(e4) {
                var r4 = this, t4 = (e4.bindShader(), this.mixedSpecularColor = h(this.curSpecularColor), 0 < this._useMetalness && (this.mixedSpecularColor = this.mixedSpecularColor.map(function(e5, t5) {
                  return r4.curFillColor[t5] * r4._useMetalness + e5 * (1 - r4._useMetalness);
                })), e4.setUniform("uUseVertexColor", this._useVertexColor), e4.setUniform("uMaterialColor", this.curFillColor), e4.setUniform("isTexture", !!this._tex), this._tex && e4.setUniform("uSampler", this._tex), e4.setUniform("uTint", this._tint), e4.setUniform("uHasSetAmbient", this._hasSetAmbient), e4.setUniform("uAmbientMatColor", this.curAmbientColor), e4.setUniform("uSpecularMatColor", this.mixedSpecularColor), e4.setUniform("uEmissiveMatColor", this.curEmissiveColor), e4.setUniform("uSpecular", this._useSpecularMaterial), e4.setUniform("uEmissive", this._useEmissiveMaterial), e4.setUniform("uShininess", this._useShininess), e4.setUniform("uMetallic", this._useMetalness), this._setImageLightUniforms(e4), e4.setUniform("uUseLighting", this._enableLighting), this.pointLightDiffuseColors.length / 3), t4 = (e4.setUniform("uPointLightCount", t4), e4.setUniform("uPointLightLocation", this.pointLightPositions), e4.setUniform("uPointLightDiffuseColors", this.pointLightDiffuseColors), e4.setUniform("uPointLightSpecularColors", this.pointLightSpecularColors), this.directionalLightDiffuseColors.length / 3), t4 = (e4.setUniform("uDirectionalLightCount", t4), e4.setUniform("uLightingDirection", this.directionalLightDirections), e4.setUniform("uDirectionalDiffuseColors", this.directionalLightDiffuseColors), e4.setUniform("uDirectionalSpecularColors", this.directionalLightSpecularColors), this.ambientLightColors.length / 3), t4 = (this.mixedAmbientLight = h(this.ambientLightColors), 0 < this._useMetalness && (this.mixedAmbientLight = this.mixedAmbientLight.map(function(e5) {
                  e5 -= r4._useMetalness;
                  return Math.max(0, e5);
                })), e4.setUniform("uAmbientLightCount", t4), e4.setUniform("uAmbientColor", this.mixedAmbientLight), this.spotLightDiffuseColors.length / 3);
                e4.setUniform("uSpotLightCount", t4), e4.setUniform("uSpotLightAngle", this.spotLightAngle), e4.setUniform("uSpotLightConc", this.spotLightConc), e4.setUniform("uSpotLightDiffuseColors", this.spotLightDiffuseColors), e4.setUniform("uSpotLightSpecularColors", this.spotLightSpecularColors), e4.setUniform("uSpotLightLocation", this.spotLightPositions), e4.setUniform("uSpotLightDirection", this.spotLightDirections), e4.setUniform("uConstantAttenuation", this.constantAttenuation), e4.setUniform("uLinearAttenuation", this.linearAttenuation), e4.setUniform("uQuadraticAttenuation", this.quadraticAttenuation), e4.bindTextures();
              }
            }, {
              key: "_setImageLightUniforms",
              value: function(e4) {
                var t4;
                e4.setUniform("uUseImageLight", null != this.activeImageLight), this.activeImageLight && (t4 = this.getDiffusedTexture(this.activeImageLight), e4.setUniform("environmentMapDiffused", t4), t4 = this.getSpecularTexture(this.activeImageLight), e4.setUniform("environmentMapSpecular", t4));
              }
            }, {
              key: "_setPointUniforms",
              value: function(e4) {
                e4.bindShader(), e4.setUniform("uMaterialColor", this.curStrokeColor), e4.setUniform("uPointSize", this.pointSize * this._pInst._pixelDensity);
              }
            }, {
              key: "_bindBuffer",
              value: function(e4, t4, r4, o2, n3) {
                t4 = t4 || this.GL.ARRAY_BUFFER, this.GL.bindBuffer(t4, e4), void 0 !== r4 && ((e4 = r4) instanceof g.default.DataArray ? e4 = r4.dataArray() : e4 instanceof (o2 || Float32Array) || (e4 = new (o2 || Float32Array)(e4)), this.GL.bufferData(t4, e4, n3 || this.GL.STATIC_DRAW));
              }
            }, {
              key: "_arraysEqual",
              value: function(e4, r4) {
                return e4.length === r4.length && e4.every(function(e5, t4) {
                  return e5 === r4[t4];
                });
              }
            }, {
              key: "_isTypedArray",
              value: function(t4) {
                return [Float32Array, Float64Array, Int16Array, Uint16Array, Uint32Array].some(function(e4) {
                  return t4 instanceof e4;
                });
              }
            }, {
              key: "_flatten",
              value: function(e4) {
                return e4.flat();
              }
            }, {
              key: "_vToNArray",
              value: function(e4) {
                return e4.flatMap(function(e5) {
                  return [e5.x, e5.y, e5.z];
                });
              }
            }, {
              key: "_bezierCoefficients",
              value: function(e4) {
                var t4 = e4 * e4, r4 = 1 - e4, o2 = r4 * r4;
                return [o2 * r4, 3 * o2 * e4, 3 * r4 * t4, t4 * e4];
              }
            }, {
              key: "_quadraticCoefficients",
              value: function(e4) {
                var t4 = 1 - e4;
                return [t4 * t4, 2 * t4 * e4, e4 * e4];
              }
            }, {
              key: "_bezierToCatmull",
              value: function(e4) {
                return [e4[1], e4[1] + (e4[2] - e4[0]) / this._curveTightness, e4[2] - (e4[3] - e4[1]) / this._curveTightness, e4[2]];
              }
            }, {
              key: "_initTessy",
              value: function() {
                var e4 = new u2.default.GluTesselator();
                return e4.gluTessCallback(u2.default.gluEnum.GLU_TESS_VERTEX_DATA, function(e5, t4) {
                  var r4 = true, o2 = false, n3 = void 0;
                  try {
                    for (var s4, i2 = e5[Symbol.iterator](); !(r4 = (s4 = i2.next()).done); r4 = true) {
                      var a2 = s4.value;
                      t4.push(a2);
                    }
                  } catch (e6) {
                    o2 = true, n3 = e6;
                  } finally {
                    try {
                      r4 || null == i2.return || i2.return();
                    } finally {
                      if (o2) throw n3;
                    }
                  }
                }), e4.gluTessCallback(u2.default.gluEnum.GLU_TESS_BEGIN, function(e5) {
                  e5 !== u2.default.primitiveType.GL_TRIANGLES && console.log("expected TRIANGLES but got type: ".concat(e5));
                }), e4.gluTessCallback(u2.default.gluEnum.GLU_TESS_ERROR, function(e5) {
                  console.log("error callback"), console.log("error number: ".concat(e5));
                }), e4.gluTessCallback(u2.default.gluEnum.GLU_TESS_COMBINE, function(e5, t4, r4) {
                  for (var o2 = new Array(g.default.RendererGL.prototype.tessyVertexSize).fill(0), n3 = 0; n3 < r4.length; n3++) for (var s4 = 0; s4 < o2.length; s4++) 0 !== r4[n3] && t4[n3] && (o2[s4] += t4[n3][s4] * r4[n3]);
                  return o2;
                }), e4.gluTessCallback(u2.default.gluEnum.GLU_TESS_EDGE_FLAG, function(e5) {
                }), e4.gluTessProperty(u2.default.gluEnum.GLU_TESS_WINDING_RULE, u2.default.windingRule.GLU_TESS_WINDING_NONZERO), e4;
              }
            }, {
              key: "_triangulate",
              value: function(e4) {
                var t4 = e4[0] ? e4[0][2] : void 0, r4 = true, o2 = true, n3 = false, s4 = void 0;
                try {
                  for (var i2, a2 = e4[Symbol.iterator](); !(o2 = (i2 = a2.next()).done); o2 = true) for (var l2 = i2.value, u3 = 0; u3 < l2.length; u3 += g.default.RendererGL.prototype.tessyVertexSize) if (l2[u3 + 2] !== t4) {
                    r4 = false;
                    break;
                  }
                } catch (e5) {
                  n3 = true, s4 = e5;
                } finally {
                  try {
                    o2 || null == a2.return || a2.return();
                  } finally {
                    if (n3) throw s4;
                  }
                }
                r4 ? this._tessy.gluTessNormal(0, 0, 1) : this._tessy.gluTessNormal(0, 0, 0);
                var n3 = [], c2 = (this._tessy.gluTessBeginPolygon(n3), true), s4 = false, d2 = void 0;
                try {
                  for (var h2, f2 = e4[Symbol.iterator](); !(c2 = (h2 = f2.next()).done); c2 = true) {
                    var p2 = h2.value;
                    this._tessy.gluTessBeginContour();
                    for (var m2 = 0; m2 < p2.length; m2 += g.default.RendererGL.prototype.tessyVertexSize) {
                      var y2 = p2.slice(m2, m2 + g.default.RendererGL.prototype.tessyVertexSize);
                      this._tessy.gluTessVertex(y2, y2);
                    }
                    this._tessy.gluTessEndContour();
                  }
                } catch (e5) {
                  s4 = true, d2 = e5;
                } finally {
                  try {
                    c2 || null == f2.return || f2.return();
                  } finally {
                    if (s4) throw d2;
                  }
                }
                return this._tessy.gluTessEndPolygon(), n3;
              }
            }]) && f(t3.prototype, e3), r3 && f(t3, r3), s3;
          }(g.default.Renderer), g.default.prototype._assert3d = function(e3) {
            if (!this._renderer.isP3D) throw new Error("".concat(e3, "() is only supported in WEBGL mode. If you'd like to use 3D graphics and WebGL, see  https://p5js.org/examples/form-3d-primitives.html for more information."));
          }, g.default.RendererGL.prototype.tessyVertexSize = 12;
          e2 = g.default.RendererGL;
          r2.default = e2;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "../core/p5.Renderer": 286,
          "./GeometryBuilder": 327,
          "./p5.Camera": 332,
          "./p5.Framebuffer": 334,
          "./p5.Matrix": 336,
          "./p5.Shader": 342,
          "./p5.Texture": 343,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.copy-within": 154,
          "core-js/modules/es.array.every": 155,
          "core-js/modules/es.array.fill": 156,
          "core-js/modules/es.array.flat": 160,
          "core-js/modules/es.array.flat-map": 159,
          "core-js/modules/es.array.from": 162,
          "core-js/modules/es.array.includes": 163,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.map": 168,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.array.some": 170,
          "core-js/modules/es.array.unscopables.flat": 173,
          "core-js/modules/es.array.unscopables.flat-map": 172,
          "core-js/modules/es.map": 175,
          "core-js/modules/es.object.assign": 183,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.get-prototype-of": 188,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.reflect.construct": 192,
          "core-js/modules/es.reflect.get": 193,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.set": 197,
          "core-js/modules/es.string.includes": 199,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.float32-array": 219,
          "core-js/modules/es.typed-array.float64-array": 220,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.int16-array": 224,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239,
          "core-js/modules/es.typed-array.uint16-array": 240,
          "core-js/modules/es.typed-array.uint32-array": 241,
          "core-js/modules/es.typed-array.uint8-array": 242,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246,
          libtess: 255,
          path: 258
        }],
        342: [function(e2, t2, r2) {
          "use strict";
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.some"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.split"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.concat"), e2("core-js/modules/es.array.index-of"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.array.slice"), e2("core-js/modules/es.array.some"), e2("core-js/modules/es.function.name"), e2("core-js/modules/es.object.assign"), e2("core-js/modules/es.object.keys"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.split"), e2("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.default = void 0;
          var a = (e2 = e2("../core/main")) && e2.__esModule ? e2 : {
            default: e2
          };
          function u2(e3, t3) {
            return function(e4) {
              if (Array.isArray(e4)) return e4;
            }(e3) || function(e4, t4) {
              if (Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)) {
                var r3 = [], o2 = true, n = false, s2 = void 0;
                try {
                  for (var i, a2 = e4[Symbol.iterator](); !(o2 = (i = a2.next()).done) && (r3.push(i.value), !t4 || r3.length !== t4); o2 = true) ;
                } catch (e5) {
                  n = true, s2 = e5;
                } finally {
                  try {
                    o2 || null == a2.return || a2.return();
                  } finally {
                    if (n) throw s2;
                  }
                }
                return r3;
              }
            }(e3, t3) || function() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }();
          }
          function o(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          a.default.Shader = function() {
            function i(e4, t4, r4) {
              var o2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {}, n = this, s2 = i;
              if (!(n instanceof s2)) throw new TypeError("Cannot call a class as a function");
              this._renderer = e4, this._vertSrc = t4, this._fragSrc = r4, this._vertShader = -1, this._fragShader = -1, this._glProgram = 0, this._loadedAttributes = false, this.attributes = {}, this._loadedUniforms = false, this.uniforms = {}, this._bound = false, this.samplers = [], this.hooks = {
                uniforms: o2.uniforms || {},
                declarations: o2.declarations,
                helpers: o2.helpers || {},
                vertex: o2.vertex || {},
                fragment: o2.fragment || {},
                modified: {
                  vertex: o2.modified && o2.modified.vertex || {},
                  fragment: o2.modified && o2.modified.fragment || {}
                }
              };
            }
            var e3, t3, r3;
            return e3 = i, (t3 = [{
              key: "shaderSrc",
              value: function(e4, t4) {
                var r4, o2, n, s2, i2, e4 = u2(e4.split("void main"), 2), a2 = e4[0], e4 = e4[1], l = "";
                for (r4 in this.hooks.uniforms) l += "uniform ".concat(r4, ";\n");
                for (o2 in this.hooks.declarations && (l += this.hooks.declarations + "\n"), this.hooks[t4].declarations && (l += this.hooks[t4].declarations + "\n"), this.hooks.helpers) l += "".concat(o2).concat(this.hooks.helpers[o2], "\n");
                for (n in this.hooks[t4]) "declarations" !== n && (s2 = (i2 = u2(n.split(" "), 2))[0], i2 = i2[1], this.hooks.modified[t4][n] && (l += "#define AUGMENTED_HOOK_" + i2 + "\n"), l += s2 + " HOOK_" + i2 + this.hooks[t4][n] + "\n");
                return a2 + l + "void main" + e4;
              }
            }, {
              key: "version",
              value: function() {
                var e4 = /#version (.+)$/.exec(this.vertSrc());
                return e4 ? e4[1] : "100 es";
              }
            }, {
              key: "vertSrc",
              value: function() {
                return this.shaderSrc(this._vertSrc, "vertex");
              }
            }, {
              key: "fragSrc",
              value: function() {
                return this.shaderSrc(this._fragSrc, "fragment");
              }
            }, {
              key: "inspectHooks",
              value: function() {
                for (var e4 in console.log("==== Vertex shader hooks: ===="), this.hooks.vertex) console.log((this.hooks.modified.vertex[e4] ? "[MODIFIED] " : "") + e4 + this.hooks.vertex[e4]);
                for (var t4 in console.log(""), console.log("==== Fragment shader hooks: ===="), this.hooks.fragment) console.log((this.hooks.modified.fragment[t4] ? "[MODIFIED] " : "") + t4 + this.hooks.fragment[t4]);
                for (var r4 in console.log(""), console.log("==== Helper functions: ===="), this.hooks.helpers) console.log(r4 + this.hooks.helpers[r4]);
              }
            }, {
              key: "modify",
              value: function(e4) {
                a.default._validateParameters("p5.Shader.modify", arguments);
                var t4, r4 = {
                  vertex: {},
                  fragment: {},
                  helpers: {}
                };
                for (t4 in e4) "declarations" !== t4 && "uniforms" !== t4 && ("vertexDeclarations" === t4 ? r4.vertex.declarations = (r4.vertex.declarations || "") + "\n" + e4[t4] : "fragmentDeclarations" === t4 ? r4.fragment.declarations = (r4.fragment.declarations || "") + "\n" + e4[t4] : this.hooks.vertex[t4] ? r4.vertex[t4] = e4[t4] : this.hooks.fragment[t4] ? r4.fragment[t4] = e4[t4] : r4.helpers[t4] = e4[t4]);
                var o2, n, s2 = Object.assign({}, this.hooks.modified.vertex), i2 = Object.assign({}, this.hooks.modified.fragment);
                for (o2 in r4.vertex || {}) "declarations" !== o2 && (s2[o2] = true);
                for (n in r4.fragment || {}) "declarations" !== n && (i2[n] = true);
                return new a.default.Shader(this._renderer, this._vertSrc, this._fragSrc, {
                  declarations: (this.hooks.declarations || "") + "\n" + (e4.declarations || ""),
                  uniforms: Object.assign({}, this.hooks.uniforms, e4.uniforms || {}),
                  fragment: Object.assign({}, this.hooks.fragment, r4.fragment || {}),
                  vertex: Object.assign({}, this.hooks.vertex, r4.vertex || {}),
                  helpers: Object.assign({}, this.hooks.helpers, r4.helpers || {}),
                  modified: {
                    vertex: s2,
                    fragment: i2
                  }
                });
              }
            }, {
              key: "init",
              value: function() {
                if (0 === this._glProgram) {
                  var e4, t4 = this._renderer.GL;
                  if (this._vertShader = t4.createShader(t4.VERTEX_SHADER), t4.shaderSource(this._vertShader, this.vertSrc()), t4.compileShader(this._vertShader), !t4.getShaderParameter(this._vertShader, t4.COMPILE_STATUS)) return e4 = t4.getShaderInfoLog(this._vertShader), console.error(e4), null;
                  if (this._fragShader = t4.createShader(t4.FRAGMENT_SHADER), t4.shaderSource(this._fragShader, this.fragSrc()), t4.compileShader(this._fragShader), !t4.getShaderParameter(this._fragShader, t4.COMPILE_STATUS)) return e4 = t4.getShaderInfoLog(this._fragShader), console.error(e4), null;
                  this._glProgram = t4.createProgram(), t4.attachShader(this._glProgram, this._vertShader), t4.attachShader(this._glProgram, this._fragShader), t4.linkProgram(this._glProgram), t4.getProgramParameter(this._glProgram, t4.LINK_STATUS) || a.default._friendlyError("Snap! Error linking shader program: ".concat(t4.getProgramInfoLog(this._glProgram))), this._loadAttributes(), this._loadUniforms();
                }
                return this;
              }
            }, {
              key: "setDefaultUniforms",
              value: function() {
                for (var e4 in this.hooks.uniforms) {
                  var t4 = u2(e4.split(" "), 2)[1], e4 = this.hooks.uniforms[e4], r4 = void 0;
                  null != (r4 = e4 instanceof Function ? e4() : e4) && this.setUniform(t4, r4);
                }
              }
            }, {
              key: "copyToContext",
              value: function(e4) {
                var t4 = new a.default.Shader(e4._renderer, this._vertSrc, this._fragSrc);
                return t4.ensureCompiledOnContext(e4), t4;
              }
            }, {
              key: "ensureCompiledOnContext",
              value: function(e4) {
                if (0 !== this._glProgram && this._renderer !== e4._renderer) throw new Error("The shader being run is attached to a different context. Do you need to copy it to this context first with .copyToContext()?");
                0 === this._glProgram && (this._renderer = e4._renderer, this.init());
              }
            }, {
              key: "_loadAttributes",
              value: function() {
                if (!this._loadedAttributes) {
                  this.attributes = {};
                  for (var e4 = this._renderer.GL, t4 = e4.getProgramParameter(this._glProgram, e4.ACTIVE_ATTRIBUTES), r4 = 0; r4 < t4; ++r4) {
                    var o2 = e4.getActiveAttrib(this._glProgram, r4), n = o2.name, s2 = e4.getAttribLocation(this._glProgram, n), i2 = {};
                    i2.name = n, i2.location = s2, i2.index = r4, i2.type = o2.type, i2.size = o2.size, this.attributes[n] = i2;
                  }
                  this._loadedAttributes = true;
                }
              }
            }, {
              key: "_loadUniforms",
              value: function() {
                if (!this._loadedUniforms) {
                  for (var e4 = this._renderer.GL, t4 = e4.getProgramParameter(this._glProgram, e4.ACTIVE_UNIFORMS), r4 = 0, o2 = 0; o2 < t4; ++o2) {
                    var n = e4.getActiveUniform(this._glProgram, o2), s2 = {}, i2 = (s2.location = e4.getUniformLocation(this._glProgram, n.name), s2.size = n.size, n.name);
                    1 < n.size && (i2 = i2.substring(0, i2.indexOf("[0]"))), s2.name = i2, s2.type = n.type, s2._cachedData = void 0, s2.type === e4.SAMPLER_2D && (s2.samplerIndex = r4, r4++, this.samplers.push(s2)), s2.isArray = 1 < n.size || s2.type === e4.FLOAT_MAT3 || s2.type === e4.FLOAT_MAT4 || s2.type === e4.FLOAT_VEC2 || s2.type === e4.FLOAT_VEC3 || s2.type === e4.FLOAT_VEC4 || s2.type === e4.INT_VEC2 || s2.type === e4.INT_VEC4 || s2.type === e4.INT_VEC3, this.uniforms[i2] = s2;
                  }
                  this._loadedUniforms = true;
                }
              }
            }, {
              key: "compile",
              value: function() {
              }
            }, {
              key: "bindShader",
              value: function() {
                this.init(), this._bound || (this.useProgram(), this._bound = true, this._setMatrixUniforms(), this.setUniform("uViewport", this._renderer._viewport));
              }
            }, {
              key: "unbindShader",
              value: function() {
                return this._bound && (this.unbindTextures(), this._bound = false), this;
              }
            }, {
              key: "bindTextures",
              value: function() {
                var e4 = this._renderer.GL, t4 = true, r4 = false, o2 = void 0;
                try {
                  for (var n, s2 = this.samplers[Symbol.iterator](); !(t4 = (n = s2.next()).done); t4 = true) {
                    var i2 = n.value, a2 = i2.texture;
                    void 0 === a2 && (a2 = this._renderer._getEmptyTexture()), e4.activeTexture(e4.TEXTURE0 + i2.samplerIndex), a2.bindTexture(), a2.update(), e4.uniform1i(i2.location, i2.samplerIndex);
                  }
                } catch (e5) {
                  r4 = true, o2 = e5;
                } finally {
                  try {
                    t4 || null == s2.return || s2.return();
                  } finally {
                    if (r4) throw o2;
                  }
                }
              }
            }, {
              key: "updateTextures",
              value: function() {
                var e4 = true, t4 = false, r4 = void 0;
                try {
                  for (var o2, n = this.samplers[Symbol.iterator](); !(e4 = (o2 = n.next()).done); e4 = true) {
                    var s2 = o2.value.texture;
                    s2 && s2.update();
                  }
                } catch (e5) {
                  t4 = true, r4 = e5;
                } finally {
                  try {
                    e4 || null == n.return || n.return();
                  } finally {
                    if (t4) throw r4;
                  }
                }
              }
            }, {
              key: "unbindTextures",
              value: function() {
                var e4 = true, t4 = false, r4 = void 0;
                try {
                  for (var o2, n = this.samplers[Symbol.iterator](); !(e4 = (o2 = n.next()).done); e4 = true) {
                    var s2 = o2.value;
                    this.setUniform(s2.name, this._renderer._getEmptyTexture());
                  }
                } catch (e5) {
                  t4 = true, r4 = e5;
                } finally {
                  try {
                    e4 || null == n.return || n.return();
                  } finally {
                    if (t4) throw r4;
                  }
                }
              }
            }, {
              key: "_setMatrixUniforms",
              value: function() {
                var e4 = this._renderer.uModelMatrix, t4 = this._renderer.uViewMatrix, r4 = this._renderer.uPMatrix, o2 = e4.copy().mult(t4), n = (this._renderer.uMVMatrix = o2).copy();
                n.mult(r4), this.isStrokeShader() && this.setUniform("uPerspective", this._renderer._curCamera.useLinePerspective ? 1 : 0), this.setUniform("uViewMatrix", t4.mat4), this.setUniform("uProjectionMatrix", r4.mat4), this.setUniform("uModelMatrix", e4.mat4), this.setUniform("uModelViewMatrix", o2.mat4), this.setUniform("uModelViewProjectionMatrix", n.mat4), this.uniforms.uNormalMatrix && (this._renderer.uNMatrix.inverseTranspose(this._renderer.uMVMatrix), this.setUniform("uNormalMatrix", this._renderer.uNMatrix.mat3)), this.uniforms.uCameraRotation && (this._renderer.curMatrix.inverseTranspose(this._renderer.uViewMatrix), this.setUniform("uCameraRotation", this._renderer.curMatrix.mat3));
              }
            }, {
              key: "useProgram",
              value: function() {
                var e4 = this._renderer.GL;
                return this._renderer._curShader !== this && (e4.useProgram(this._glProgram), this._renderer._curShader = this), this;
              }
            }, {
              key: "setUniform",
              value: function(e4, t4) {
                var r4 = this.uniforms[e4];
                if (r4) {
                  var o2 = this._renderer.GL;
                  if (r4.isArray) {
                    if (r4._cachedData && this._renderer._arraysEqual(r4._cachedData, t4)) return;
                    r4._cachedData = t4.slice(0);
                  } else {
                    if (r4._cachedData && r4._cachedData === t4) return;
                    Array.isArray(t4) ? r4._cachedData = t4.slice(0) : r4._cachedData = t4;
                  }
                  var n = r4.location;
                  switch (this.useProgram(), r4.type) {
                    case o2.BOOL:
                      true === t4 ? o2.uniform1i(n, 1) : o2.uniform1i(n, 0);
                      break;
                    case o2.INT:
                      1 < r4.size ? t4.length && o2.uniform1iv(n, t4) : o2.uniform1i(n, t4);
                      break;
                    case o2.FLOAT:
                      1 < r4.size ? t4.length && o2.uniform1fv(n, t4) : o2.uniform1f(n, t4);
                      break;
                    case o2.FLOAT_MAT3:
                      o2.uniformMatrix3fv(n, false, t4);
                      break;
                    case o2.FLOAT_MAT4:
                      o2.uniformMatrix4fv(n, false, t4);
                      break;
                    case o2.FLOAT_VEC2:
                      1 < r4.size ? t4.length && o2.uniform2fv(n, t4) : o2.uniform2f(n, t4[0], t4[1]);
                      break;
                    case o2.FLOAT_VEC3:
                      1 < r4.size ? t4.length && o2.uniform3fv(n, t4) : o2.uniform3f(n, t4[0], t4[1], t4[2]);
                      break;
                    case o2.FLOAT_VEC4:
                      1 < r4.size ? t4.length && o2.uniform4fv(n, t4) : o2.uniform4f(n, t4[0], t4[1], t4[2], t4[3]);
                      break;
                    case o2.INT_VEC2:
                      1 < r4.size ? t4.length && o2.uniform2iv(n, t4) : o2.uniform2i(n, t4[0], t4[1]);
                      break;
                    case o2.INT_VEC3:
                      1 < r4.size ? t4.length && o2.uniform3iv(n, t4) : o2.uniform3i(n, t4[0], t4[1], t4[2]);
                      break;
                    case o2.INT_VEC4:
                      1 < r4.size ? t4.length && o2.uniform4iv(n, t4) : o2.uniform4i(n, t4[0], t4[1], t4[2], t4[3]);
                      break;
                    case o2.SAMPLER_2D:
                      if ("number" == typeof t4) {
                        if (t4 < o2.TEXTURE0 || t4 > o2.TEXTURE31 || t4 !== Math.ceil(t4)) return console.log("\u{1F338} p5.js says: You're trying to use a number as the data for a texture.Please use a texture."), this;
                        o2.activeTexture(t4), o2.uniform1i(n, t4);
                      } else o2.activeTexture(o2.TEXTURE0 + r4.samplerIndex), r4.texture = t4 instanceof a.default.Texture ? t4 : this._renderer.getTexture(t4), o2.uniform1i(n, r4.samplerIndex), r4.texture.src.gifProperties && r4.texture.src._animateGif(this._renderer._pInst);
                      break;
                    case o2.SAMPLER_CUBE:
                    case o2.SAMPLER_3D:
                    case o2.SAMPLER_2D_SHADOW:
                    case o2.SAMPLER_2D_ARRAY:
                    case o2.SAMPLER_2D_ARRAY_SHADOW:
                    case o2.SAMPLER_CUBE_SHADOW:
                    case o2.INT_SAMPLER_2D:
                    case o2.INT_SAMPLER_3D:
                    case o2.INT_SAMPLER_CUBE:
                    case o2.INT_SAMPLER_2D_ARRAY:
                    case o2.UNSIGNED_INT_SAMPLER_2D:
                    case o2.UNSIGNED_INT_SAMPLER_3D:
                    case o2.UNSIGNED_INT_SAMPLER_CUBE:
                    case o2.UNSIGNED_INT_SAMPLER_2D_ARRAY:
                      "number" == typeof t4 && (t4 < o2.TEXTURE0 || t4 > o2.TEXTURE31 || t4 !== Math.ceil(t4) ? console.log("\u{1F338} p5.js says: You're trying to use a number as the data for a texture.Please use a texture.") : (o2.activeTexture(t4), o2.uniform1i(n, t4)));
                  }
                  return this;
                }
              }
            }, {
              key: "isLightShader",
              value: function() {
                return [this.attributes.aNormal, this.uniforms.uUseLighting, this.uniforms.uAmbientLightCount, this.uniforms.uDirectionalLightCount, this.uniforms.uPointLightCount, this.uniforms.uAmbientColor, this.uniforms.uDirectionalDiffuseColors, this.uniforms.uDirectionalSpecularColors, this.uniforms.uPointLightLocation, this.uniforms.uPointLightDiffuseColors, this.uniforms.uPointLightSpecularColors, this.uniforms.uLightingDirection, this.uniforms.uSpecular].some(function(e4) {
                  return void 0 !== e4;
                });
              }
            }, {
              key: "isNormalShader",
              value: function() {
                return void 0 !== this.attributes.aNormal;
              }
            }, {
              key: "isTextureShader",
              value: function() {
                return 0 < this.samplers.length;
              }
            }, {
              key: "isColorShader",
              value: function() {
                return void 0 !== this.attributes.aVertexColor || void 0 !== this.uniforms.uMaterialColor;
              }
            }, {
              key: "isTexLightShader",
              value: function() {
                return this.isLightShader() && this.isTextureShader();
              }
            }, {
              key: "isStrokeShader",
              value: function() {
                return void 0 !== this.uniforms.uStrokeWeight;
              }
            }, {
              key: "enableAttrib",
              value: function(e4, t4, r4, o2, n, s2) {
                var i2;
                return e4 && -1 !== (e4 = e4.location) && (i2 = this._renderer.GL, this._renderer.registerEnabled.has(e4) || (i2.enableVertexAttribArray(e4), this._renderer.registerEnabled.add(e4)), this._renderer.GL.vertexAttribPointer(e4, t4, r4 || i2.FLOAT, o2 || false, n || 0, s2 || 0)), this;
              }
            }, {
              key: "disableRemainingAttributes",
              value: function() {
                var r4 = this, e4 = true, t4 = false, o2 = void 0;
                try {
                  for (var n, s2 = this._renderer.registerEnabled.values()[Symbol.iterator](); !(e4 = (n = s2.next()).done); e4 = true) !function() {
                    var t5 = n.value;
                    Object.keys(r4.attributes).some(function(e5) {
                      return r4.attributes[e5].location === t5;
                    }) || (r4._renderer.GL.disableVertexAttribArray(t5), r4._renderer.registerEnabled.delete(t5));
                  }();
                } catch (e5) {
                  t4 = true, o2 = e5;
                } finally {
                  try {
                    e4 || null == s2.return || s2.return();
                  } finally {
                    if (t4) throw o2;
                  }
                }
              }
            }]) && o(e3.prototype, t3), r3 && o(e3, r3), i;
          }();
          e2 = a.default.Shader;
          r2.default = e2;
        }, {
          "../core/main": 283,
          "core-js/modules/es.array.concat": 153,
          "core-js/modules/es.array.index-of": 164,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.array.slice": 169,
          "core-js/modules/es.array.some": 170,
          "core-js/modules/es.function.name": 174,
          "core-js/modules/es.object.assign": 183,
          "core-js/modules/es.object.keys": 189,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        343: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.get-prototype-of"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.reflect.construct"), e2("core-js/modules/es.regexp.to-string"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.typed-array.uint8-array"), e2("core-js/modules/es.typed-array.copy-within"), e2("core-js/modules/es.typed-array.every"), e2("core-js/modules/es.typed-array.fill"), e2("core-js/modules/es.typed-array.filter"), e2("core-js/modules/es.typed-array.find"), e2("core-js/modules/es.typed-array.find-index"), e2("core-js/modules/es.typed-array.for-each"), e2("core-js/modules/es.typed-array.includes"), e2("core-js/modules/es.typed-array.index-of"), e2("core-js/modules/es.typed-array.iterator"), e2("core-js/modules/es.typed-array.join"), e2("core-js/modules/es.typed-array.last-index-of"), e2("core-js/modules/es.typed-array.map"), e2("core-js/modules/es.typed-array.reduce"), e2("core-js/modules/es.typed-array.reduce-right"), e2("core-js/modules/es.typed-array.reverse"), e2("core-js/modules/es.typed-array.set"), e2("core-js/modules/es.typed-array.slice"), e2("core-js/modules/es.typed-array.some"), e2("core-js/modules/es.typed-array.sort"), e2("core-js/modules/es.typed-array.subarray"), e2("core-js/modules/es.typed-array.to-locale-string"), e2("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r2, "__esModule", {
            value: true
          }), r2.checkWebGLCapabilities = m, r2.default = r2.MipmapTexture = void 0;
          var s2 = (p = e2("../core/main")) && p.__esModule ? p : {
            default: p
          }, a = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = l();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function l() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), l = function() {
              return e3;
            }, e3);
          }
          function u2(e3, t3) {
            return (u2 = Object.setPrototypeOf || function(e4, t4) {
              return e4.__proto__ = t4, e4;
            })(e3, t3);
          }
          function c(r3) {
            return function() {
              var e3, t3 = n(r3), t3 = (e3 = function() {
                if ("undefined" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {
                  if ("function" == typeof Proxy) return 1;
                  try {
                    return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                    })), 1;
                  } catch (e4) {
                  }
                }
              }() ? (e3 = n(this).constructor, Reflect.construct(t3, arguments, e3)) : t3.apply(this, arguments), this);
              if (!e3 || "object" !== i(e3) && "function" != typeof e3) {
                if (void 0 !== t3) return t3;
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return e3;
            };
          }
          function n(e3) {
            return (n = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            })(e3);
          }
          function d(e3, t3) {
            if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
          }
          function h(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          function f(e3, t3, r3) {
            t3 && h(e3.prototype, t3), r3 && h(e3, r3);
          }
          s2.default.Texture = function() {
            function n2(e3, t3, r3) {
              d(this, n2), this._renderer = e3;
              var o2 = this._renderer.GL, r3 = (r3 = r3 || {}, this.src = t3, this.glTex = void 0, this.glTarget = o2.TEXTURE_2D, this.glFormat = r3.format || o2.RGBA, this.mipmaps = false, this.glMinFilter = r3.minFilter || o2.LINEAR, this.glMagFilter = r3.magFilter || o2.LINEAR, this.glWrapS = r3.wrapS || o2.CLAMP_TO_EDGE, this.glWrapT = r3.wrapT || o2.CLAMP_TO_EDGE, this.glDataType = r3.dataType || o2.UNSIGNED_BYTE, m(e3)), e3 = (this.glFormat !== o2.HALF_FLOAT || r3.halfFloat || (console.log("This device does not support dataType HALF_FLOAT. Falling back to FLOAT."), this.glDataType = o2.FLOAT), this.glFormat !== o2.HALF_FLOAT || this.glMinFilter !== o2.LINEAR && this.glMagFilter !== o2.LINEAR || r3.halfFloatLinear || (console.log("This device does not support linear filtering for dataType FLOAT. Falling back to NEAREST."), this.glMinFilter === o2.LINEAR && (this.glMinFilter = o2.NEAREST), this.glMagFilter === o2.LINEAR && (this.glMagFilter = o2.NEAREST)), this.glFormat !== o2.FLOAT || r3.float || (console.log("This device does not support dataType FLOAT. Falling back to UNSIGNED_BYTE."), this.glDataType = o2.UNSIGNED_BYTE), this.glFormat !== o2.FLOAT || this.glMinFilter !== o2.LINEAR && this.glMagFilter !== o2.LINEAR || r3.floatLinear || (console.log("This device does not support linear filtering for dataType FLOAT. Falling back to NEAREST."), this.glMinFilter === o2.LINEAR && (this.glMinFilter = o2.NEAREST), this.glMagFilter === o2.LINEAR && (this.glMagFilter = o2.NEAREST)), this.isSrcMediaElement = void 0 !== s2.default.MediaElement && t3 instanceof s2.default.MediaElement, this._videoPrevUpdateTime = 0, this.isSrcHTMLElement = void 0 !== s2.default.Element && t3 instanceof s2.default.Element && !(t3 instanceof s2.default.Graphics) && !(t3 instanceof s2.default.Renderer), this.isSrcP5Image = t3 instanceof s2.default.Image, this.isSrcP5Graphics = t3 instanceof s2.default.Graphics, this.isSrcP5Renderer = t3 instanceof s2.default.Renderer, this.isImageData = "undefined" != typeof ImageData && t3 instanceof ImageData, this.isFramebufferTexture = t3 instanceof s2.default.FramebufferTexture, this._getTextureDataFromSource());
              return this.width = e3.width, this.height = e3.height, this.init(e3), this;
            }
            return f(n2, [{
              key: "_getTextureDataFromSource",
              value: function() {
                var e3;
                return this.isFramebufferTexture ? e3 = this.src.rawTexture() : this.isSrcP5Image ? e3 = this.src.canvas : this.isSrcMediaElement || this.isSrcP5Graphics || this.isSrcP5Renderer || this.isSrcHTMLElement ? (this.src._ensureCanvas && this.src._ensureCanvas(), e3 = this.src.canvas || this.src.elt) : this.isImageData && (e3 = this.src), e3;
              }
            }, {
              key: "init",
              value: function(e3) {
                var t3, r3 = this._renderer.GL;
                this.isFramebufferTexture || (this.glTex = r3.createTexture()), this.glWrapS = this._renderer.textureWrapX, this.glWrapT = this._renderer.textureWrapY, this.setWrapMode(this.glWrapS, this.glWrapT), this.bindTexture(), r3.texParameteri(r3.TEXTURE_2D, r3.TEXTURE_MAG_FILTER, this.glMagFilter), r3.texParameteri(r3.TEXTURE_2D, r3.TEXTURE_MIN_FILTER, this.glMinFilter), this.isFramebufferTexture || (0 === this.width || 0 === this.height || this.isSrcMediaElement && !this.src.loadedmetadata ? (t3 = new Uint8Array([1, 1, 1, 1]), r3.texImage2D(this.glTarget, 0, r3.RGBA, 1, 1, 0, this.glFormat, this.glDataType, t3)) : r3.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, this.glDataType, e3));
              }
            }, {
              key: "update",
              value: function() {
                var e3, t3, r3, o2 = this.src;
                return 0 !== o2.width && 0 !== o2.height && !this.isFramebufferTexture && (e3 = this._getTextureDataFromSource(), t3 = false, r3 = this._renderer.GL, e3.width !== this.width || e3.height !== this.height ? (t3 = true, this.width = e3.width || o2.width, this.height = e3.height || o2.height, this.isSrcP5Image ? o2.setModified(false) : (this.isSrcMediaElement || this.isSrcHTMLElement) && o2.setModified(true)) : this.isSrcP5Image ? o2.isModified() && o2.setModified(!(t3 = true)) : this.isSrcMediaElement ? o2.isModified() ? o2.setModified(!(t3 = true)) : o2.loadedmetadata && this._videoPrevUpdateTime !== o2.time() && (this._videoPrevUpdateTime = o2.time(), t3 = true) : this.isImageData ? o2._dirty && (t3 = !(o2._dirty = false)) : t3 = true, t3 && (this.bindTexture(), r3.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, this.glDataType, e3)), t3);
              }
            }, {
              key: "bindTexture",
              value: function() {
                return this._renderer.GL.bindTexture(this.glTarget, this.getTexture()), this;
              }
            }, {
              key: "unbindTexture",
              value: function() {
                this._renderer.GL.bindTexture(this.glTarget, null);
              }
            }, {
              key: "getTexture",
              value: function() {
                return this.isFramebufferTexture ? this.src.rawTexture() : this.glTex;
              }
            }, {
              key: "setInterpolation",
              value: function(e3, t3) {
                var r3 = this._renderer.GL;
                this.glMinFilter = this.glFilter(e3), this.glMagFilter = this.glFilter(t3), this.bindTexture(), r3.texParameteri(r3.TEXTURE_2D, r3.TEXTURE_MIN_FILTER, this.glMinFilter), r3.texParameteri(r3.TEXTURE_2D, r3.TEXTURE_MAG_FILTER, this.glMagFilter), this.unbindTexture();
              }
            }, {
              key: "glFilter",
              value: function(e3) {
                var t3 = this._renderer.GL;
                return e3 === a.NEAREST ? t3.NEAREST : t3.LINEAR;
              }
            }, {
              key: "setWrapMode",
              value: function(e3, t3) {
                function r3(e4) {
                  return 0 == (e4 & e4 - 1);
                }
                var o2 = this._renderer.GL, n3 = this._getTextureDataFromSource(), n3 = n3.naturalWidth && n3.naturalHeight ? (s3 = n3.naturalWidth, n3.naturalHeight) : (s3 = this.width, this.height), s3 = r3(s3), n3 = r3(n3);
                e3 === a.REPEAT ? this._renderer.webglVersion === a.WEBGL2 || s3 && n3 ? this.glWrapS = o2.REPEAT : (console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapS = o2.CLAMP_TO_EDGE) : e3 === a.MIRROR ? this._renderer.webglVersion === a.WEBGL2 || s3 && n3 ? this.glWrapS = o2.MIRRORED_REPEAT : (console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapS = o2.CLAMP_TO_EDGE) : this.glWrapS = o2.CLAMP_TO_EDGE, t3 === a.REPEAT ? this._renderer.webglVersion === a.WEBGL2 || s3 && n3 ? this.glWrapT = o2.REPEAT : (console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapT = o2.CLAMP_TO_EDGE) : t3 === a.MIRROR ? this._renderer.webglVersion === a.WEBGL2 || s3 && n3 ? this.glWrapT = o2.MIRRORED_REPEAT : (console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapT = o2.CLAMP_TO_EDGE) : this.glWrapT = o2.CLAMP_TO_EDGE, this.bindTexture(), o2.texParameteri(o2.TEXTURE_2D, o2.TEXTURE_WRAP_S, this.glWrapS), o2.texParameteri(o2.TEXTURE_2D, o2.TEXTURE_WRAP_T, this.glWrapT), this.unbindTexture();
              }
            }]), n2;
          }();
          var p = function(e3) {
            var t3 = n2;
            if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
            t3.prototype = Object.create(e3 && e3.prototype, {
              constructor: {
                value: t3,
                writable: true,
                configurable: true
              }
            }), e3 && u2(t3, e3);
            var o2 = c(n2);
            function n2(e4, t4, r3) {
              d(this, n2);
              t4 = (e4 = o2.call(this, e4, t4, r3))._renderer.GL;
              return e4.glMinFilter === t4.LINEAR && (e4.glMinFilter = t4.LINEAR_MIPMAP_LINEAR), e4;
            }
            return f(n2, [{
              key: "glFilter",
              value: function(e4) {
                return this._renderer.GL.LINEAR_MIPMAP_LINEAR;
              }
            }, {
              key: "_getTextureDataFromSource",
              value: function() {
                return this.src;
              }
            }, {
              key: "init",
              value: function(e4) {
                var t4 = this._renderer.GL;
                this.glTex = t4.createTexture(), this.bindTexture();
                for (var r3 = 0; r3 < e4.length; r3++) t4.texImage2D(this.glTarget, r3, this.glFormat, this.glFormat, this.glDataType, e4[r3]);
                this.glMinFilter = t4.LINEAR_MIPMAP_LINEAR, t4.texParameteri(t4.TEXTURE_2D, t4.TEXTURE_MAG_FILTER, this.glMagFilter), t4.texParameteri(t4.TEXTURE_2D, t4.TEXTURE_MIN_FILTER, this.glMinFilter), this.unbindTexture();
              }
            }, {
              key: "update",
              value: function() {
              }
            }]), n2;
          }(s2.default.Texture);
          function m(e3) {
            var t3 = e3.GL, e3 = e3.webglVersion, r3 = e3 === a.WEBGL2 ? t3.getExtension("EXT_color_buffer_float") && t3.getExtension("EXT_float_blend") : t3.getExtension("OES_texture_float"), o2 = r3 && t3.getExtension("OES_texture_float_linear"), e3 = e3 === a.WEBGL2 ? t3.getExtension("EXT_color_buffer_float") : t3.getExtension("OES_texture_half_float");
            return {
              float: r3,
              floatLinear: o2,
              halfFloat: e3,
              halfFloatLinear: e3 && t3.getExtension("OES_texture_half_float_linear")
            };
          }
          r2.MipmapTexture = p;
          e2 = s2.default.Texture;
          r2.default = e2;
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.get-prototype-of": 188,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.reflect.construct": 192,
          "core-js/modules/es.regexp.to-string": 196,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.typed-array.copy-within": 213,
          "core-js/modules/es.typed-array.every": 214,
          "core-js/modules/es.typed-array.fill": 215,
          "core-js/modules/es.typed-array.filter": 216,
          "core-js/modules/es.typed-array.find": 218,
          "core-js/modules/es.typed-array.find-index": 217,
          "core-js/modules/es.typed-array.for-each": 221,
          "core-js/modules/es.typed-array.includes": 222,
          "core-js/modules/es.typed-array.index-of": 223,
          "core-js/modules/es.typed-array.iterator": 226,
          "core-js/modules/es.typed-array.join": 227,
          "core-js/modules/es.typed-array.last-index-of": 228,
          "core-js/modules/es.typed-array.map": 229,
          "core-js/modules/es.typed-array.reduce": 231,
          "core-js/modules/es.typed-array.reduce-right": 230,
          "core-js/modules/es.typed-array.reverse": 232,
          "core-js/modules/es.typed-array.set": 233,
          "core-js/modules/es.typed-array.slice": 234,
          "core-js/modules/es.typed-array.some": 235,
          "core-js/modules/es.typed-array.sort": 236,
          "core-js/modules/es.typed-array.subarray": 237,
          "core-js/modules/es.typed-array.to-locale-string": 238,
          "core-js/modules/es.typed-array.to-string": 239,
          "core-js/modules/es.typed-array.uint8-array": 242,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }],
        344: [function(e2, t2, r2) {
          "use strict";
          function o(e3) {
            return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            })(e3);
          }
          function i(e3) {
            return (i = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e4) {
              return o(e4);
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : o(e4);
            })(e3);
          }
          e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.get-own-property-descriptor"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.string.sub"), e2("core-js/modules/es.weak-map"), e2("core-js/modules/web.dom-collections.iterator"), e2("core-js/modules/es.symbol"), e2("core-js/modules/es.symbol.description"), e2("core-js/modules/es.symbol.iterator"), e2("core-js/modules/es.array.iterator"), e2("core-js/modules/es.object.to-string"), e2("core-js/modules/es.regexp.exec"), e2("core-js/modules/es.string.iterator"), e2("core-js/modules/es.string.split"), e2("core-js/modules/es.string.sub"), e2("core-js/modules/web.dom-collections.iterator");
          var n, B = (n = e2("../core/main")) && n.__esModule ? n : {
            default: n
          }, E = function(e3) {
            if (e3 && e3.__esModule) return e3;
            if (null === e3 || "object" !== i(e3) && "function" != typeof e3) return {
              default: e3
            };
            var t3 = a();
            if (t3 && t3.has(e3)) return t3.get(e3);
            var r3, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (r3 in e3) {
              var s3;
              Object.prototype.hasOwnProperty.call(e3, r3) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e3, r3) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r3, s3) : o2[r3] = e3[r3]);
            }
            o2.default = e3, t3 && t3.set(e3, o2);
            return o2;
          }(e2("../core/constants"));
          function a() {
            var e3;
            return "function" != typeof WeakMap ? null : (e3 = /* @__PURE__ */ new WeakMap(), a = function() {
              return e3;
            }, e3);
          }
          function G(e3, t3) {
            if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
          }
          function s2(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var o2 = t3[r3];
              o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, o2.key, o2);
            }
          }
          function V(e3, t3, r3) {
            t3 && s2(e3.prototype, t3), r3 && s2(e3, r3);
          }
          e2("./p5.Shader"), e2("./p5.RendererGL.Retained"), B.default.RendererGL.prototype._applyTextProperties = function() {
            this._setProperty("_textAscent", null), this._setProperty("_textDescent", null);
          }, B.default.RendererGL.prototype.textWidth = function(e3) {
            return this._isOpenType() ? this._textFont._textWidth(e3, this._textSize) : 0;
          };
          var l = function() {
            function r3(e3, t3) {
              G(this, r3), this.width = e3, this.height = t3, this.infos = [];
            }
            return V(r3, [{
              key: "findImage",
              value: function(e3) {
                var t3, r4, o2 = this.width * this.height;
                if (o2 < e3) throw new Error("font is too complex to render in 3D");
                for (var n2 = this.infos.length - 1; 0 <= n2; --n2) {
                  var s3 = this.infos[n2];
                  if (s3.index + e3 < o2) {
                    r4 = (t3 = s3).imageData;
                    break;
                  }
                }
                if (!t3) {
                  try {
                    r4 = new ImageData(this.width, this.height);
                  } catch (e4) {
                    var i2 = document.getElementsByTagName("canvas")[0], a2 = !i2, l2 = (i2 || ((i2 = document.createElement("canvas")).style.display = "none", document.body.appendChild(i2)), i2.getContext("2d"));
                    l2 && (r4 = l2.createImageData(this.width, this.height)), a2 && document.body.removeChild(i2);
                  }
                  this.infos.push(t3 = {
                    index: 0,
                    imageData: r4
                  });
                }
                l2 = t3.index;
                return t3.index += e3, r4._dirty = true, {
                  imageData: r4,
                  index: l2
                };
              }
            }]), r3;
          }();
          function z(e3, t3, r3, o2, n2) {
            var s3 = e3.imageData.data, e3 = 4 * e3.index++;
            s3[e3++] = t3, s3[e3++] = r3, s3[e3++] = o2, s3[+e3] = n2;
          }
          var H = Math.sqrt(3), M = function() {
            function t3(e3) {
              G(this, t3), this.font = e3, this.strokeImageInfos = new l(64, 64), this.colDimImageInfos = new l(64, 64), this.rowDimImageInfos = new l(64, 64), this.colCellImageInfos = new l(64, 64), this.rowCellImageInfos = new l(64, 64), this.glyphInfos = {};
            }
            return V(t3, [{
              key: "getGlyphInfo",
              value: function(e3) {
                var t4 = this.glyphInfos[e3.index];
                if (!t4) {
                  var r3 = e3.getBoundingBox(), o2 = r3.x1, n2 = r3.y1, s3 = r3.x2 - o2, i2 = r3.y2 - n2, a2 = e3.path.commands;
                  if (0 == s3 || 0 == i2 || !a2.length) return this.glyphInfos[e3.index] = {};
                  for (var u2 = [], c = [], d = [], l2 = 8; 0 <= l2; --l2) d.push([]);
                  for (l2 = 8; 0 <= l2; --l2) c.push([]);
                  var h, f, p, m, D = function() {
                    function n3(e4, t5, r4, o3) {
                      G(this, n3), this.p0 = e4, this.c0 = t5, this.c1 = r4, this.p1 = o3;
                    }
                    return V(n3, [{
                      key: "toQuadratic",
                      value: function() {
                        return {
                          x: this.p0.x,
                          y: this.p0.y,
                          x1: this.p1.x,
                          y1: this.p1.y,
                          cx: (3 * (this.c0.x + this.c1.x) - (this.p0.x + this.p1.x)) / 4,
                          cy: (3 * (this.c0.y + this.c1.y) - (this.p0.y + this.p1.y)) / 4
                        };
                      }
                    }, {
                      key: "quadError",
                      value: function() {
                        return B.default.Vector.sub(B.default.Vector.sub(this.p1, this.p0), B.default.Vector.mult(B.default.Vector.sub(this.c1, this.c0), 3)).mag() / 2;
                      }
                    }, {
                      key: "split",
                      value: function(e4) {
                        var t5 = B.default.Vector.lerp(this.p0, this.c0, e4), r4 = B.default.Vector.lerp(this.c0, this.c1, e4), o3 = B.default.Vector.lerp(t5, r4, e4), r4 = (this.c1 = B.default.Vector.lerp(this.c1, this.p1, e4), this.c0 = B.default.Vector.lerp(r4, this.c1, e4), B.default.Vector.lerp(o3, this.c0, e4)), e4 = new n3(this.p0, t5, o3, r4);
                        return this.p0 = r4, e4;
                      }
                    }, {
                      key: "splitInflections",
                      value: function() {
                        var e4 = B.default.Vector.sub(this.c0, this.p0), t5 = B.default.Vector.sub(B.default.Vector.sub(this.c1, this.c0), e4), r4 = B.default.Vector.sub(B.default.Vector.sub(B.default.Vector.sub(this.p1, this.c1), e4), B.default.Vector.mult(t5, 2)), o3 = [], n4 = t5.x * r4.y - t5.y * r4.x;
                        return 0 !== n4 && 0 <= (e4 = (r4 = e4.x * r4.y - e4.y * r4.x) * r4 - 4 * n4 * (e4.x * t5.y - e4.y * t5.x)) && (n4 < 0 && (n4 = -n4, r4 = -r4, 0), e4 = (-r4 + (t5 = Math.sqrt(e4))) / (2 * n4), 0 < (r4 = (-r4 - t5) / (2 * n4)) && r4 < 1 && (o3.push(this.split(r4)), e4 = 1 - (1 - e4) / (1 - r4)), 0 < e4 && e4 < 1 && o3.push(this.split(e4))), o3.push(this), o3;
                      }
                    }]), n3;
                  }(), y = true, g = false, v = void 0;
                  try {
                    for (var b, _ = a2[Symbol.iterator](); !(y = (b = _.next()).done); y = true) {
                      var j = b.value, x = (j.x - o2) / s3, w = (j.y - n2) / i2;
                      if (!U(h, f, x, w)) {
                        switch (j.type) {
                          case "M":
                            p = x, m = w;
                            break;
                          case "L":
                            I(h, f, x, w);
                            break;
                          case "Q":
                            var S = (j.x1 - o2) / s3, T = (j.y1 - n2) / i2;
                            L([h, x, S], [f, w, T], {
                              x: h,
                              y: f,
                              cx: S,
                              cy: T
                            });
                            break;
                          case "Z":
                            U(h, f, p, m) ? u2.push({
                              x: h,
                              y: f
                            }) : (I(h, f, p, m), u2.push({
                              x: p,
                              y: m
                            }));
                            break;
                          case "C":
                            for (var E2 = function(e4, t5, r4, o3, n3, s4, i3, a3) {
                              var e4 = new D(new B.default.Vector(e4, t5), new B.default.Vector(r4, o3), new B.default.Vector(n3, s4), new B.default.Vector(i3, a3)).splitInflections(), l3 = [], u3 = 30 / H, c2 = true, t5 = false, r4 = void 0;
                              try {
                                for (var d2, h2 = e4[Symbol.iterator](); !(c2 = (d2 = h2.next()).done); c2 = true) {
                                  for (var f2 = d2.value, p2 = [], m2 = void 0; !(0.125 <= (m2 = u3 / f2.quadError())); ) {
                                    var y2 = Math.pow(m2, 1 / 3), g2 = f2.split(y2), v2 = f2.split(1 - y2 / (1 - y2));
                                    l3.push(g2), p2.push(f2), f2 = v2;
                                  }
                                  m2 < 1 && l3.push(f2.split(0.5)), l3.push(f2), Array.prototype.push.apply(l3, p2.reverse());
                                }
                              } catch (e5) {
                                t5 = true, r4 = e5;
                              } finally {
                                try {
                                  c2 || null == h2.return || h2.return();
                                } finally {
                                  if (t5) throw r4;
                                }
                              }
                              return l3;
                            }(h, f, (j.x1 - o2) / s3, (j.y1 - n2) / i2, (j.x2 - o2) / s3, (j.y2 - n2) / i2, x, w), M2 = 0; M2 < E2.length; M2++) {
                              var k = E2[M2].toQuadratic();
                              L([k.x, k.x1, k.cx], [k.y, k.y1, k.cy], k);
                            }
                            break;
                          default:
                            throw new Error("unknown command type: ".concat(j.type));
                        }
                        h = x, f = w;
                      }
                    }
                  } catch (e4) {
                    g = true, v = e4;
                  } finally {
                    try {
                      y || null == _.return || _.return();
                    } finally {
                      if (g) throw v;
                    }
                  }
                  for (var O = u2.length, C = this.strokeImageInfos.findImage(O), F = C.index, A = 0; A < O; ++A) {
                    var P = u2[A];
                    z(C, R(P.x), R(P.y), R(P.cx), R(P.cy));
                  }
                  (t4 = this.glyphInfos[e3.index] = {
                    glyph: e3,
                    uGlyphRect: [r3.x1, -r3.y1, r3.x2, -r3.y2],
                    strokeImageInfo: C,
                    strokes: u2,
                    colInfo: N(d, this.colDimImageInfos, this.colCellImageInfos),
                    rowInfo: N(c, this.rowDimImageInfos, this.rowCellImageInfos)
                  }).uGridOffset = [t4.colInfo.dimOffset, t4.rowInfo.dimOffset];
                }
                return t4;
                function L(e4, t5, r4) {
                  var o3 = u2.length;
                  function n3(e5, t6, r5) {
                    for (var o4 = e5.length; 0 < o4--; ) {
                      var n4 = e5[o4];
                      n4 < t6 && (t6 = n4), r5 < n4 && (r5 = n4);
                    }
                    return {
                      min: t6,
                      max: r5
                    };
                  }
                  u2.push(r4);
                  for (var r4 = n3(e4, 1, 0), e4 = Math.max(Math.floor(9 * r4.min - 0.5), 0), s4 = Math.min(Math.ceil(9 * r4.max + 0.5), 9), i3 = e4; i3 < s4; ++i3) d[i3].push(o3);
                  for (var r4 = n3(t5, 1, 0), e4 = Math.max(Math.floor(9 * r4.min - 0.5), 0), a3 = Math.min(Math.ceil(9 * r4.max + 0.5), 9), l3 = e4; l3 < a3; ++l3) c[l3].push(o3);
                }
                function R(e4) {
                  return (e4 = (r4 = 255) * e4) < (t5 = 0) ? t5 : r4 < e4 ? r4 : e4;
                  var t5, r4;
                }
                function I(e4, t5, r4, o3) {
                  L([e4, r4], [t5, o3], {
                    x: e4,
                    y: t5,
                    cx: (e4 + r4) / 2,
                    cy: (t5 + o3) / 2
                  });
                }
                function U(e4, t5, r4, o3) {
                  return Math.abs(r4 - e4) < 1e-5 && Math.abs(o3 - t5) < 1e-5;
                }
                function N(e4, t5, r4) {
                  for (var o3 = e4.length, n3 = t5.findImage(o3), t5 = n3.index, s4 = 0, i3 = 0; i3 < o3; ++i3) s4 += e4[i3].length;
                  for (var a3 = r4.findImage(s4), l3 = 0; l3 < o3; ++l3) {
                    var u3 = e4[l3], c2 = u3.length, d2 = a3.index;
                    z(n3, d2 >> 7, 127 & d2, c2 >> 7, 127 & c2);
                    for (var h2 = 0; h2 < c2; ++h2) {
                      var f2 = u3[h2] + F;
                      z(a3, f2 >> 7, 127 & f2, 0, 0);
                    }
                  }
                  return {
                    cellImageInfo: a3,
                    dimOffset: t5,
                    dimImageInfo: n3
                  };
                }
              }
            }]), t3;
          }();
          B.default.RendererGL.prototype._renderText = function(e3, t3, r3, o2, n2) {
            if (this._textFont && "string" != typeof this._textFont) {
              if (!(n2 <= o2) && this._doFill) {
                if (this._isOpenType()) {
                  e3.push();
                  var n2 = this._doStroke, s3 = this.drawMode, i2 = (this._doStroke = false, this.drawMode = E.TEXTURE, this._textFont.font), a2 = (a2 = this._textFont._fontInfo) || (this._textFont._fontInfo = new M(i2)), r3 = this._textFont._handleAlignment(this, t3, r3, o2), o2 = this._textSize / i2.unitsPerEm, l2 = (this.translate(r3.x, r3.y, 0), this.scale(o2, o2, 1), this.GL), r3 = !this._defaultFontShader, u2 = this._getFontShader(), c = (u2.init(), u2.bindShader(), r3 && (u2.setUniform("uGridImageSize", [64, 64]), u2.setUniform("uCellsImageSize", [64, 64]), u2.setUniform("uStrokeImageSize", [64, 64]), u2.setUniform("uGridSize", [9, 9])), this._applyColorBlend(this.curFillColor), this.retainedMode.geometry.glyph), d = (c || ((o2 = this._textGeom = new B.default.Geometry(1, 1, function() {
                    for (var e4 = 0; e4 <= 1; e4++) for (var t4 = 0; t4 <= 1; t4++) this.vertices.push(new B.default.Vector(t4, e4, 0)), this.uvs.push(t4, e4);
                  })).computeFaces().computeNormals(), c = this.createBuffers("glyph", o2)), true), r3 = false, o2 = void 0;
                  try {
                    for (var h, f = this.retainedMode.buffers.text[Symbol.iterator](); !(d = (h = f.next()).done); d = true) h.value._prepareBuffer(c, u2);
                  } catch (e4) {
                    r3 = true, o2 = e4;
                  } finally {
                    try {
                      d || null == f.return || f.return();
                    } finally {
                      if (r3) throw o2;
                    }
                  }
                  this._bindBuffer(c.indexBuffer, l2.ELEMENT_ARRAY_BUFFER), u2.setUniform("uMaterialColor", this.curFillColor), l2.pixelStorei(l2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
                  try {
                    var p = 0, m = null, y = i2.stringToGlyphs(t3), g = true, v = false, b = void 0;
                    try {
                      for (var _, j = y[Symbol.iterator](); !(g = (_ = j.next()).done); g = true) {
                        var x, w, S = _.value, T = (m && (p += i2.getKerningValue(m, S)), a2.getGlyphInfo(S));
                        T.uGlyphRect && (x = T.rowInfo, w = T.colInfo, u2.setUniform("uSamplerStrokes", T.strokeImageInfo.imageData), u2.setUniform("uSamplerRowStrokes", x.cellImageInfo.imageData), u2.setUniform("uSamplerRows", x.dimImageInfo.imageData), u2.setUniform("uSamplerColStrokes", w.cellImageInfo.imageData), u2.setUniform("uSamplerCols", w.dimImageInfo.imageData), u2.setUniform("uGridOffset", T.uGridOffset), u2.setUniform("uGlyphRect", T.uGlyphRect), u2.setUniform("uGlyphOffset", p), u2.bindTextures(), l2.drawElements(l2.TRIANGLES, 6, this.GL.UNSIGNED_SHORT, 0)), p += S.advanceWidth, m = S;
                      }
                    } catch (e4) {
                      v = true, b = e4;
                    } finally {
                      try {
                        g || null == j.return || j.return();
                      } finally {
                        if (v) throw b;
                      }
                    }
                  } finally {
                    u2.unbindShader(), this._doStroke = n2, this.drawMode = s3, l2.pixelStorei(l2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true), e3.pop();
                  }
                } else console.log("WEBGL: only Opentype (.otf) and Truetype (.ttf) fonts are supported");
                return e3;
              }
            } else console.log("WEBGL: you must load and set a font before drawing text. See `loadFont` and `textFont` for more details.");
          };
        }, {
          "../core/constants": 272,
          "../core/main": 283,
          "./p5.RendererGL.Retained": 340,
          "./p5.Shader": 342,
          "core-js/modules/es.array.iterator": 165,
          "core-js/modules/es.object.get-own-property-descriptor": 186,
          "core-js/modules/es.object.to-string": 190,
          "core-js/modules/es.regexp.exec": 195,
          "core-js/modules/es.string.iterator": 200,
          "core-js/modules/es.string.split": 206,
          "core-js/modules/es.string.sub": 208,
          "core-js/modules/es.symbol": 212,
          "core-js/modules/es.symbol.description": 210,
          "core-js/modules/es.symbol.iterator": 211,
          "core-js/modules/es.weak-map": 244,
          "core-js/modules/web.dom-collections.iterator": 246
        }]
      }, {}, [267])(267);
    });
  }
});

// node_modules/@angular/core/fesm2022/untracked-BKcld_ew.mjs
function defaultEquals(a, b) {
  return Object.is(a, b);
}
var activeConsumer = null;
var inNotificationPhase = false;
var epoch = 1;
var SIGNAL = /* @__PURE__ */ Symbol("SIGNAL");
function setActiveConsumer(consumer) {
  const prev = activeConsumer;
  activeConsumer = consumer;
  return prev;
}
function getActiveConsumer() {
  return activeConsumer;
}
function isInNotificationPhase() {
  return inNotificationPhase;
}
var REACTIVE_NODE = {
  version: 0,
  lastCleanEpoch: 0,
  dirty: false,
  producerNode: void 0,
  producerLastReadVersion: void 0,
  producerIndexOfThis: void 0,
  nextProducerIndex: 0,
  liveConsumerNode: void 0,
  liveConsumerIndexOfThis: void 0,
  consumerAllowSignalWrites: false,
  consumerIsAlwaysLive: false,
  kind: "unknown",
  producerMustRecompute: () => false,
  producerRecomputeValue: () => {
  },
  consumerMarkedDirty: () => {
  },
  consumerOnSignalRead: () => {
  }
};
function producerAccessed(node) {
  if (inNotificationPhase) {
    throw new Error(typeof ngDevMode !== "undefined" && ngDevMode ? `Assertion error: signal read during notification phase` : "");
  }
  if (activeConsumer === null) {
    return;
  }
  activeConsumer.consumerOnSignalRead(node);
  const idx = activeConsumer.nextProducerIndex++;
  assertConsumerNode(activeConsumer);
  if (idx < activeConsumer.producerNode.length && activeConsumer.producerNode[idx] !== node) {
    if (consumerIsLive(activeConsumer)) {
      const staleProducer = activeConsumer.producerNode[idx];
      producerRemoveLiveConsumerAtIndex(staleProducer, activeConsumer.producerIndexOfThis[idx]);
    }
  }
  if (activeConsumer.producerNode[idx] !== node) {
    activeConsumer.producerNode[idx] = node;
    activeConsumer.producerIndexOfThis[idx] = consumerIsLive(activeConsumer) ? producerAddLiveConsumer(node, activeConsumer, idx) : 0;
  }
  activeConsumer.producerLastReadVersion[idx] = node.version;
}
function producerIncrementEpoch() {
  epoch++;
}
function producerUpdateValueVersion(node) {
  if (consumerIsLive(node) && !node.dirty) {
    return;
  }
  if (!node.dirty && node.lastCleanEpoch === epoch) {
    return;
  }
  if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {
    producerMarkClean(node);
    return;
  }
  node.producerRecomputeValue(node);
  producerMarkClean(node);
}
function producerNotifyConsumers(node) {
  if (node.liveConsumerNode === void 0) {
    return;
  }
  const prev = inNotificationPhase;
  inNotificationPhase = true;
  try {
    for (const consumer of node.liveConsumerNode) {
      if (!consumer.dirty) {
        consumerMarkDirty(consumer);
      }
    }
  } finally {
    inNotificationPhase = prev;
  }
}
function producerUpdatesAllowed() {
  return activeConsumer?.consumerAllowSignalWrites !== false;
}
function consumerMarkDirty(node) {
  node.dirty = true;
  producerNotifyConsumers(node);
  node.consumerMarkedDirty?.(node);
}
function producerMarkClean(node) {
  node.dirty = false;
  node.lastCleanEpoch = epoch;
}
function consumerBeforeComputation(node) {
  node && (node.nextProducerIndex = 0);
  return setActiveConsumer(node);
}
function consumerAfterComputation(node, prevConsumer) {
  setActiveConsumer(prevConsumer);
  if (!node || node.producerNode === void 0 || node.producerIndexOfThis === void 0 || node.producerLastReadVersion === void 0) {
    return;
  }
  if (consumerIsLive(node)) {
    for (let i = node.nextProducerIndex; i < node.producerNode.length; i++) {
      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
    }
  }
  while (node.producerNode.length > node.nextProducerIndex) {
    node.producerNode.pop();
    node.producerLastReadVersion.pop();
    node.producerIndexOfThis.pop();
  }
}
function consumerPollProducersForChange(node) {
  assertConsumerNode(node);
  for (let i = 0; i < node.producerNode.length; i++) {
    const producer = node.producerNode[i];
    const seenVersion = node.producerLastReadVersion[i];
    if (seenVersion !== producer.version) {
      return true;
    }
    producerUpdateValueVersion(producer);
    if (seenVersion !== producer.version) {
      return true;
    }
  }
  return false;
}
function consumerDestroy(node) {
  assertConsumerNode(node);
  if (consumerIsLive(node)) {
    for (let i = 0; i < node.producerNode.length; i++) {
      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
    }
  }
  node.producerNode.length = node.producerLastReadVersion.length = node.producerIndexOfThis.length = 0;
  if (node.liveConsumerNode) {
    node.liveConsumerNode.length = node.liveConsumerIndexOfThis.length = 0;
  }
}
function producerAddLiveConsumer(node, consumer, indexOfThis) {
  assertProducerNode(node);
  if (node.liveConsumerNode.length === 0 && isConsumerNode(node)) {
    for (let i = 0; i < node.producerNode.length; i++) {
      node.producerIndexOfThis[i] = producerAddLiveConsumer(node.producerNode[i], node, i);
    }
  }
  node.liveConsumerIndexOfThis.push(indexOfThis);
  return node.liveConsumerNode.push(consumer) - 1;
}
function producerRemoveLiveConsumerAtIndex(node, idx) {
  assertProducerNode(node);
  if (typeof ngDevMode !== "undefined" && ngDevMode && idx >= node.liveConsumerNode.length) {
    throw new Error(`Assertion error: active consumer index ${idx} is out of bounds of ${node.liveConsumerNode.length} consumers)`);
  }
  if (node.liveConsumerNode.length === 1 && isConsumerNode(node)) {
    for (let i = 0; i < node.producerNode.length; i++) {
      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
    }
  }
  const lastIdx = node.liveConsumerNode.length - 1;
  node.liveConsumerNode[idx] = node.liveConsumerNode[lastIdx];
  node.liveConsumerIndexOfThis[idx] = node.liveConsumerIndexOfThis[lastIdx];
  node.liveConsumerNode.length--;
  node.liveConsumerIndexOfThis.length--;
  if (idx < node.liveConsumerNode.length) {
    const idxProducer = node.liveConsumerIndexOfThis[idx];
    const consumer = node.liveConsumerNode[idx];
    assertConsumerNode(consumer);
    consumer.producerIndexOfThis[idxProducer] = idx;
  }
}
function consumerIsLive(node) {
  return node.consumerIsAlwaysLive || (node?.liveConsumerNode?.length ?? 0) > 0;
}
function assertConsumerNode(node) {
  node.producerNode ??= [];
  node.producerIndexOfThis ??= [];
  node.producerLastReadVersion ??= [];
}
function assertProducerNode(node) {
  node.liveConsumerNode ??= [];
  node.liveConsumerIndexOfThis ??= [];
}
function isConsumerNode(node) {
  return node.producerNode !== void 0;
}
function createComputed(computation, equal) {
  const node = Object.create(COMPUTED_NODE);
  node.computation = computation;
  if (equal !== void 0) {
    node.equal = equal;
  }
  const computed2 = () => {
    producerUpdateValueVersion(node);
    producerAccessed(node);
    if (node.value === ERRORED) {
      throw node.error;
    }
    return node.value;
  };
  computed2[SIGNAL] = node;
  return computed2;
}
var UNSET = /* @__PURE__ */ Symbol("UNSET");
var COMPUTING = /* @__PURE__ */ Symbol("COMPUTING");
var ERRORED = /* @__PURE__ */ Symbol("ERRORED");
var COMPUTED_NODE = /* @__PURE__ */ (() => {
  return __spreadProps(__spreadValues({}, REACTIVE_NODE), {
    value: UNSET,
    dirty: true,
    error: null,
    equal: defaultEquals,
    kind: "computed",
    producerMustRecompute(node) {
      return node.value === UNSET || node.value === COMPUTING;
    },
    producerRecomputeValue(node) {
      if (node.value === COMPUTING) {
        throw new Error("Detected cycle in computations.");
      }
      const oldValue = node.value;
      node.value = COMPUTING;
      const prevConsumer = consumerBeforeComputation(node);
      let newValue;
      let wasEqual = false;
      try {
        newValue = node.computation();
        setActiveConsumer(null);
        wasEqual = oldValue !== UNSET && oldValue !== ERRORED && newValue !== ERRORED && node.equal(oldValue, newValue);
      } catch (err) {
        newValue = ERRORED;
        node.error = err;
      } finally {
        consumerAfterComputation(node, prevConsumer);
      }
      if (wasEqual) {
        node.value = oldValue;
        return;
      }
      node.value = newValue;
      node.version++;
    }
  });
})();
function defaultThrowError() {
  throw new Error();
}
var throwInvalidWriteToSignalErrorFn = defaultThrowError;
function throwInvalidWriteToSignalError(node) {
  throwInvalidWriteToSignalErrorFn(node);
}
function setThrowInvalidWriteToSignalError(fn) {
  throwInvalidWriteToSignalErrorFn = fn;
}
var postSignalSetFn = null;
function createSignal(initialValue, equal) {
  const node = Object.create(SIGNAL_NODE);
  node.value = initialValue;
  if (equal !== void 0) {
    node.equal = equal;
  }
  const getter = () => {
    producerAccessed(node);
    return node.value;
  };
  getter[SIGNAL] = node;
  return getter;
}
function signalSetFn(node, newValue) {
  if (!producerUpdatesAllowed()) {
    throwInvalidWriteToSignalError(node);
  }
  if (!node.equal(node.value, newValue)) {
    node.value = newValue;
    signalValueChanged(node);
  }
}
function signalUpdateFn(node, updater) {
  if (!producerUpdatesAllowed()) {
    throwInvalidWriteToSignalError(node);
  }
  signalSetFn(node, updater(node.value));
}
var SIGNAL_NODE = /* @__PURE__ */ (() => {
  return __spreadProps(__spreadValues({}, REACTIVE_NODE), {
    equal: defaultEquals,
    value: void 0,
    kind: "signal"
  });
})();
function signalValueChanged(node) {
  node.version++;
  producerIncrementEpoch();
  producerNotifyConsumers(node);
  postSignalSetFn?.();
}
function untracked(nonReactiveReadsFn) {
  const prevConsumer = setActiveConsumer(null);
  try {
    return nonReactiveReadsFn();
  } finally {
    setActiveConsumer(prevConsumer);
  }
}

// node_modules/@angular/core/fesm2022/primitives/di.mjs
var _currentInjector = void 0;
function getCurrentInjector() {
  return _currentInjector;
}
function setCurrentInjector(injector) {
  const former = _currentInjector;
  _currentInjector = injector;
  return former;
}
var NOT_FOUND = Symbol("NotFound");

// node_modules/rxjs/dist/esm/internal/util/isFunction.js
function isFunction(value) {
  return typeof value === "function";
}

// node_modules/rxjs/dist/esm/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  const _super = (instance) => {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  const ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/rxjs/dist/esm/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass((_super) => function UnsubscriptionErrorImpl(errors) {
  _super(this);
  this.message = errors ? `${errors.length} errors occurred during unsubscription:
${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join("\n  ")}` : "";
  this.name = "UnsubscriptionError";
  this.errors = errors;
});

// node_modules/rxjs/dist/esm/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    const index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/rxjs/dist/esm/internal/Subscription.js
var Subscription = class _Subscription {
  constructor(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  unsubscribe() {
    let errors;
    if (!this.closed) {
      this.closed = true;
      const {
        _parentage
      } = this;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          for (const parent of _parentage) {
            parent.remove(this);
          }
        } else {
          _parentage.remove(this);
        }
      }
      const {
        initialTeardown: initialFinalizer
      } = this;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e2) {
          errors = e2 instanceof UnsubscriptionError ? e2.errors : [e2];
        }
      }
      const {
        _finalizers
      } = this;
      if (_finalizers) {
        this._finalizers = null;
        for (const finalizer of _finalizers) {
          try {
            execFinalizer(finalizer);
          } catch (err) {
            errors = errors !== null && errors !== void 0 ? errors : [];
            if (err instanceof UnsubscriptionError) {
              errors = [...errors, ...err.errors];
            } else {
              errors.push(err);
            }
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  }
  add(teardown) {
    var _a;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof _Subscription) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  }
  _hasParent(parent) {
    const {
      _parentage
    } = this;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  }
  _addParent(parent) {
    const {
      _parentage
    } = this;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  }
  _removeParent(parent) {
    const {
      _parentage
    } = this;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  }
  remove(teardown) {
    const {
      _finalizers
    } = this;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof _Subscription) {
      teardown._removeParent(this);
    }
  }
};
Subscription.EMPTY = (() => {
  const empty = new Subscription();
  empty.closed = true;
  return empty;
})();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/rxjs/dist/esm/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/rxjs/dist/esm/internal/scheduler/timeoutProvider.js
var timeoutProvider = {
  setTimeout(handler, timeout, ...args) {
    const {
      delegate
    } = timeoutProvider;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout(handler, timeout, ...args);
    }
    return setTimeout(handler, timeout, ...args);
  },
  clearTimeout(handle) {
    const {
      delegate
    } = timeoutProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(() => {
    const {
      onUnhandledError
    } = config;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/rxjs/dist/esm/internal/util/noop.js
function noop() {
}

// node_modules/rxjs/dist/esm/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = (() => createNotification("C", void 0, void 0))();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/rxjs/dist/esm/internal/util/errorContext.js
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    const isRoot = !context;
    if (isRoot) {
      context = {
        errorThrown: false,
        error: null
      };
    }
    cb();
    if (isRoot) {
      const {
        errorThrown,
        error
      } = context;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/rxjs/dist/esm/internal/Subscriber.js
var Subscriber = class extends Subscription {
  constructor(destination) {
    super();
    this.isStopped = false;
    if (destination) {
      this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(this);
      }
    } else {
      this.destination = EMPTY_OBSERVER;
    }
  }
  static create(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  }
  next(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  }
  error(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  }
  complete() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  }
  unsubscribe() {
    if (!this.closed) {
      this.isStopped = true;
      super.unsubscribe();
      this.destination = null;
    }
  }
  _next(value) {
    this.destination.next(value);
  }
  _error(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  }
  _complete() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  }
};
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = class {
  constructor(partialObserver) {
    this.partialObserver = partialObserver;
  }
  next(value) {
    const {
      partialObserver
    } = this;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  }
  error(err) {
    const {
      partialObserver
    } = this;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  }
  complete() {
    const {
      partialObserver
    } = this;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  }
};
var SafeSubscriber = class extends Subscriber {
  constructor(observerOrNext, error, complete) {
    super();
    let partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      let context2;
      if (this && config.useDeprecatedNextContext) {
        context2 = Object.create(observerOrNext);
        context2.unsubscribe = () => this.unsubscribe();
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context2),
          error: observerOrNext.error && bind(observerOrNext.error, context2),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context2)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    this.destination = new ConsumerObserver(partialObserver);
  }
};
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  const {
    onStoppedNotification
  } = config;
  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};

// node_modules/rxjs/dist/esm/internal/symbol/observable.js
var observable = (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();

// node_modules/rxjs/dist/esm/internal/util/identity.js
function identity(x) {
  return x;
}

// node_modules/rxjs/dist/esm/internal/util/pipe.js
function pipe(...fns) {
  return pipeFromArray(fns);
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input2) {
    return fns.reduce((prev, fn) => fn(prev), input2);
  };
}

// node_modules/rxjs/dist/esm/internal/Observable.js
var Observable = class _Observable {
  constructor(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  lift(operator) {
    const observable2 = new _Observable();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  }
  subscribe(observerOrNext, error, complete) {
    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(() => {
      const {
        operator,
        source
      } = this;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? this._subscribe(subscriber) : this._trySubscribe(subscriber));
    });
    return subscriber;
  }
  _trySubscribe(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  }
  forEach(next, promiseCtor) {
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor((resolve, reject) => {
      const subscriber = new SafeSubscriber({
        next: (value) => {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      this.subscribe(subscriber);
    });
  }
  _subscribe(subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  }
  [observable]() {
    return this;
  }
  pipe(...operations) {
    return pipeFromArray(operations)(this);
  }
  toPromise(promiseCtor) {
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor((resolve, reject) => {
      let value;
      this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));
    });
  }
};
Observable.create = (subscribe) => {
  return new Observable(subscribe);
};
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/rxjs/dist/esm/internal/util/lift.js
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
  return (source) => {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = class extends Subscriber {
  constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    super(destination);
    this.onFinalize = onFinalize;
    this.shouldUnsubscribe = shouldUnsubscribe;
    this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : super._next;
    this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : super._error;
    this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : super._complete;
  }
  unsubscribe() {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      const {
        closed
      } = this;
      super.unsubscribe();
      !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  }
};

// node_modules/rxjs/dist/esm/internal/operators/refCount.js
function refCount() {
  return operate((source, subscriber) => {
    let connection = null;
    source._refCount++;
    const refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, () => {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      const sharedConnection = source._connection;
      const conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/rxjs/dist/esm/internal/observable/ConnectableObservable.js
var ConnectableObservable = class extends Observable {
  constructor(source, subjectFactory) {
    super();
    this.source = source;
    this.subjectFactory = subjectFactory;
    this._subject = null;
    this._refCount = 0;
    this._connection = null;
    if (hasLift(source)) {
      this.lift = source.lift;
    }
  }
  _subscribe(subscriber) {
    return this.getSubject().subscribe(subscriber);
  }
  getSubject() {
    const subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  }
  _teardown() {
    this._refCount = 0;
    const {
      _connection
    } = this;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  }
  connect() {
    let connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      const subject = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject, void 0, () => {
        this._teardown();
        subject.complete();
      }, (err) => {
        this._teardown();
        subject.error(err);
      }, () => this._teardown())));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  }
  refCount() {
    return refCount()(this);
  }
};

// node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {
  _super(this);
  this.name = "ObjectUnsubscribedError";
  this.message = "object unsubscribed";
});

// node_modules/rxjs/dist/esm/internal/Subject.js
var Subject = class extends Observable {
  constructor() {
    super();
    this.closed = false;
    this.currentObservers = null;
    this.observers = [];
    this.isStopped = false;
    this.hasError = false;
    this.thrownError = null;
  }
  lift(operator) {
    const subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  }
  _throwIfClosed() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  }
  next(value) {
    errorContext(() => {
      this._throwIfClosed();
      if (!this.isStopped) {
        if (!this.currentObservers) {
          this.currentObservers = Array.from(this.observers);
        }
        for (const observer of this.currentObservers) {
          observer.next(value);
        }
      }
    });
  }
  error(err) {
    errorContext(() => {
      this._throwIfClosed();
      if (!this.isStopped) {
        this.hasError = this.isStopped = true;
        this.thrownError = err;
        const {
          observers
        } = this;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  }
  complete() {
    errorContext(() => {
      this._throwIfClosed();
      if (!this.isStopped) {
        this.isStopped = true;
        const {
          observers
        } = this;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  }
  unsubscribe() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  }
  get observed() {
    var _a;
    return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
  }
  _trySubscribe(subscriber) {
    this._throwIfClosed();
    return super._trySubscribe(subscriber);
  }
  _subscribe(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  }
  _innerSubscribe(subscriber) {
    const {
      hasError,
      isStopped,
      observers
    } = this;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(() => {
      this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  }
  _checkFinalizedStatuses(subscriber) {
    const {
      hasError,
      thrownError,
      isStopped
    } = this;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  }
  asObservable() {
    const observable2 = new Observable();
    observable2.source = this;
    return observable2;
  }
};
Subject.create = (destination, source) => {
  return new AnonymousSubject(destination, source);
};
var AnonymousSubject = class extends Subject {
  constructor(destination, source) {
    super();
    this.destination = destination;
    this.source = source;
  }
  next(value) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  }
  error(err) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  }
  complete() {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
  _subscribe(subscriber) {
    var _a, _b;
    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  }
};

// node_modules/rxjs/dist/esm/internal/BehaviorSubject.js
var BehaviorSubject = class extends Subject {
  constructor(_value) {
    super();
    this._value = _value;
  }
  get value() {
    return this.getValue();
  }
  _subscribe(subscriber) {
    const subscription = super._subscribe(subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  }
  getValue() {
    const {
      hasError,
      thrownError,
      _value
    } = this;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  }
  next(value) {
    super.next(this._value = value);
  }
};

// node_modules/rxjs/dist/esm/internal/observable/empty.js
var EMPTY = new Observable((subscriber) => subscriber.complete());

// node_modules/rxjs/dist/esm/internal/util/isScheduler.js
function isScheduler(value) {
  return value && isFunction(value.schedule);
}

// node_modules/rxjs/dist/esm/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popResultSelector(args) {
  return isFunction(last(args)) ? args.pop() : void 0;
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}

// node_modules/tslib/tslib.es6.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f) i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e2) {
      settle(q[0][3], e2);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({
        value: v2,
        done: d
      });
    }, reject);
  }
}

// node_modules/rxjs/dist/esm/internal/util/isArrayLike.js
var isArrayLike = (x) => x && typeof x.length === "number" && typeof x !== "function";

// node_modules/rxjs/dist/esm/internal/util/isPromise.js
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/rxjs/dist/esm/internal/util/isInteropObservable.js
function isInteropObservable(input2) {
  return isFunction(input2[observable]);
}

// node_modules/rxjs/dist/esm/internal/util/isAsyncIterable.js
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/rxjs/dist/esm/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input2) {
  return new TypeError(`You provided ${input2 !== null && typeof input2 === "object" ? "an invalid object" : `'${input2}'`} where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`);
}

// node_modules/rxjs/dist/esm/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/rxjs/dist/esm/internal/util/isIterable.js
function isIterable(input2) {
  return isFunction(input2 === null || input2 === void 0 ? void 0 : input2[iterator]);
}

// node_modules/rxjs/dist/esm/internal/util/isReadableStreamLike.js
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function* readableStreamLikeToAsyncGenerator_1() {
    const reader = readableStream.getReader();
    try {
      while (true) {
        const {
          value,
          done
        } = yield __await(reader.read());
        if (done) {
          return yield __await(void 0);
        }
        yield yield __await(value);
      }
    } finally {
      reader.releaseLock();
    }
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/rxjs/dist/esm/internal/observable/innerFrom.js
function innerFrom(input2) {
  if (input2 instanceof Observable) {
    return input2;
  }
  if (input2 != null) {
    if (isInteropObservable(input2)) {
      return fromInteropObservable(input2);
    }
    if (isArrayLike(input2)) {
      return fromArrayLike(input2);
    }
    if (isPromise(input2)) {
      return fromPromise(input2);
    }
    if (isAsyncIterable(input2)) {
      return fromAsyncIterable(input2);
    }
    if (isIterable(input2)) {
      return fromIterable(input2);
    }
    if (isReadableStreamLike(input2)) {
      return fromReadableStreamLike(input2);
    }
  }
  throw createInvalidObservableTypeError(input2);
}
function fromInteropObservable(obj) {
  return new Observable((subscriber) => {
    const obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable((subscriber) => {
    for (let i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable((subscriber) => {
    promise.then((value) => {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, (err) => subscriber.error(err)).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable((subscriber) => {
    for (const value of iterable) {
      subscriber.next(value);
      if (subscriber.closed) {
        return;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable((subscriber) => {
    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_1, _a;
  return __awaiter(this, void 0, void 0, function* () {
    try {
      for (asyncIterable_1 = __asyncValues(asyncIterable); asyncIterable_1_1 = yield asyncIterable_1.next(), !asyncIterable_1_1.done; ) {
        const value = asyncIterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)) yield _a.call(asyncIterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    subscriber.complete();
  });
}

// node_modules/rxjs/dist/esm/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {
  const scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat) {
      parentSubscription.add(this.schedule(null, delay));
    } else {
      this.unsubscribe();
    }
  }, delay);
  parentSubscription.add(scheduleSubscription);
  if (!repeat) {
    return scheduleSubscription;
  }
}

// node_modules/rxjs/dist/esm/internal/operators/observeOn.js
function observeOn(scheduler, delay = 0) {
  return operate((source, subscriber) => {
    source.subscribe(createOperatorSubscriber(subscriber, (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js
function subscribeOn(scheduler, delay = 0) {
  return operate((source, subscriber) => {
    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js
function scheduleObservable(input2, scheduler) {
  return innerFrom(input2).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js
function schedulePromise(input2, scheduler) {
  return innerFrom(input2).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js
function scheduleArray(input2, scheduler) {
  return new Observable((subscriber) => {
    let i = 0;
    return scheduler.schedule(function() {
      if (i === input2.length) {
        subscriber.complete();
      } else {
        subscriber.next(input2[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js
function scheduleIterable(input2, scheduler) {
  return new Observable((subscriber) => {
    let iterator2;
    executeSchedule(subscriber, scheduler, () => {
      iterator2 = input2[iterator]();
      executeSchedule(subscriber, scheduler, () => {
        let value;
        let done;
        try {
          ({
            value,
            done
          } = iterator2.next());
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return () => isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js
function scheduleAsyncIterable(input2, scheduler) {
  if (!input2) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable((subscriber) => {
    executeSchedule(subscriber, scheduler, () => {
      const iterator2 = input2[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, () => {
        iterator2.next().then((result) => {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js
function scheduleReadableStreamLike(input2, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input2), scheduler);
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js
function scheduled(input2, scheduler) {
  if (input2 != null) {
    if (isInteropObservable(input2)) {
      return scheduleObservable(input2, scheduler);
    }
    if (isArrayLike(input2)) {
      return scheduleArray(input2, scheduler);
    }
    if (isPromise(input2)) {
      return schedulePromise(input2, scheduler);
    }
    if (isAsyncIterable(input2)) {
      return scheduleAsyncIterable(input2, scheduler);
    }
    if (isIterable(input2)) {
      return scheduleIterable(input2, scheduler);
    }
    if (isReadableStreamLike(input2)) {
      return scheduleReadableStreamLike(input2, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input2);
}

// node_modules/rxjs/dist/esm/internal/observable/from.js
function from(input2, scheduler) {
  return scheduler ? scheduled(input2, scheduler) : innerFrom(input2);
}

// node_modules/rxjs/dist/esm/internal/observable/of.js
function of(...args) {
  const scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/rxjs/dist/esm/internal/observable/throwError.js
function throwError(errorOrErrorFactory, scheduler) {
  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;
  const init = (subscriber) => subscriber.error(errorFactory());
  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init, 0, subscriber) : init);
}

// node_modules/rxjs/dist/esm/internal/util/isObservable.js
function isObservable(obj) {
  return !!obj && (obj instanceof Observable || isFunction(obj.lift) && isFunction(obj.subscribe));
}

// node_modules/rxjs/dist/esm/internal/util/EmptyError.js
var EmptyError = createErrorClass((_super) => function EmptyErrorImpl() {
  _super(this);
  this.name = "EmptyError";
  this.message = "no elements in sequence";
});

// node_modules/rxjs/dist/esm/internal/operators/map.js
function map(project, thisArg) {
  return operate((source, subscriber) => {
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js
var {
  isArray
} = Array;
function callOrApply(fn, args) {
  return isArray(args) ? fn(...args) : fn(args);
}
function mapOneOrManyArgs(fn) {
  return map((args) => callOrApply(fn, args));
}

// node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js
var {
  isArray: isArray2
} = Array;
var {
  getPrototypeOf,
  prototype: objectProto,
  keys: getKeys
} = Object;
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    const first2 = args[0];
    if (isArray2(first2)) {
      return {
        args: first2,
        keys: null
      };
    }
    if (isPOJO(first2)) {
      const keys = getKeys(first2);
      return {
        args: keys.map((key) => first2[key]),
        keys
      };
    }
  }
  return {
    args,
    keys: null
  };
}
function isPOJO(obj) {
  return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
}

// node_modules/rxjs/dist/esm/internal/util/createObject.js
function createObject(keys, values) {
  return keys.reduce((result, key, i) => (result[key] = values[i], result), {});
}

// node_modules/rxjs/dist/esm/internal/observable/combineLatest.js
function combineLatest(...args) {
  const scheduler = popScheduler(args);
  const resultSelector = popResultSelector(args);
  const {
    args: observables,
    keys
  } = argsArgArrayOrObject(args);
  if (observables.length === 0) {
    return from([], scheduler);
  }
  const result = new Observable(combineLatestInit(observables, scheduler, keys ? (values) => createObject(keys, values) : identity));
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform = identity) {
  return (subscriber) => {
    maybeSchedule(scheduler, () => {
      const {
        length
      } = observables;
      const values = new Array(length);
      let active = length;
      let remainingFirstValues = length;
      for (let i = 0; i < length; i++) {
        maybeSchedule(scheduler, () => {
          const source = from(observables[i], scheduler);
          let hasFirstValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, (value) => {
            values[i] = value;
            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }
            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, () => {
            if (!--active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      }
    }, subscriber);
  };
}
function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    executeSchedule(subscription, scheduler, execute);
  } else {
    execute();
  }
}

// node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
  const buffer = [];
  let active = 0;
  let index = 0;
  let isComplete = false;
  const checkComplete = () => {
    if (isComplete && !buffer.length && !active) {
      subscriber.complete();
    }
  };
  const outerNext = (value) => active < concurrent ? doInnerSub(value) : buffer.push(value);
  const doInnerSub = (value) => {
    expand && subscriber.next(value);
    active++;
    let innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, () => {
      innerComplete = true;
    }, void 0, () => {
      if (innerComplete) {
        try {
          active--;
          while (buffer.length && active < concurrent) {
            const bufferedValue = buffer.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));
            } else {
              doInnerSub(bufferedValue);
            }
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {
    isComplete = true;
    checkComplete();
  }));
  return () => {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}

// node_modules/rxjs/dist/esm/internal/operators/mergeMap.js
function mergeMap(project, resultSelector, concurrent = Infinity) {
  if (isFunction(resultSelector)) {
    return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));
}

// node_modules/rxjs/dist/esm/internal/operators/mergeAll.js
function mergeAll(concurrent = Infinity) {
  return mergeMap(identity, concurrent);
}

// node_modules/rxjs/dist/esm/internal/operators/concatAll.js
function concatAll() {
  return mergeAll(1);
}

// node_modules/rxjs/dist/esm/internal/observable/concat.js
function concat(...args) {
  return concatAll()(from(args, popScheduler(args)));
}

// node_modules/rxjs/dist/esm/internal/observable/defer.js
function defer(observableFactory) {
  return new Observable((subscriber) => {
    innerFrom(observableFactory()).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm/internal/operators/filter.js
function filter(predicate, thisArg) {
  return operate((source, subscriber) => {
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/catchError.js
function catchError(selector) {
  return operate((source, subscriber) => {
    let innerSub = null;
    let syncUnsub = false;
    let handledResult;
    innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, (err) => {
      handledResult = innerFrom(selector(err, catchError(selector)(source)));
      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));
    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}

// node_modules/rxjs/dist/esm/internal/operators/scanInternals.js
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return (source, subscriber) => {
    let hasState = hasSeed;
    let state = seed;
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      const i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && (() => {
      hasState && subscriber.next(state);
      subscriber.complete();
    })));
  };
}

// node_modules/rxjs/dist/esm/internal/operators/concatMap.js
function concatMap(project, resultSelector) {
  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
}

// node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js
function defaultIfEmpty(defaultValue) {
  return operate((source, subscriber) => {
    let hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      hasValue = true;
      subscriber.next(value);
    }, () => {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }
      subscriber.complete();
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/take.js
function take(count) {
  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {
    let seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      if (++seen <= count) {
        subscriber.next(value);
        if (count <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js
function throwIfEmpty(errorFactory = defaultErrorFactory) {
  return operate((source, subscriber) => {
    let hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      hasValue = true;
      subscriber.next(value);
    }, () => hasValue ? subscriber.complete() : subscriber.error(errorFactory())));
  });
}
function defaultErrorFactory() {
  return new EmptyError();
}

// node_modules/rxjs/dist/esm/internal/operators/finalize.js
function finalize(callback) {
  return operate((source, subscriber) => {
    try {
      source.subscribe(subscriber);
    } finally {
      subscriber.add(callback);
    }
  });
}

// node_modules/rxjs/dist/esm/internal/operators/first.js
function first(predicate, defaultValue) {
  const hasDefaultValue = arguments.length >= 2;
  return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));
}

// node_modules/rxjs/dist/esm/internal/operators/takeLast.js
function takeLast(count) {
  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {
    let buffer = [];
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      buffer.push(value);
      count < buffer.length && buffer.shift();
    }, () => {
      for (const value of buffer) {
        subscriber.next(value);
      }
      subscriber.complete();
    }, void 0, () => {
      buffer = null;
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/last.js
function last2(predicate, defaultValue) {
  const hasDefaultValue = arguments.length >= 2;
  return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));
}

// node_modules/rxjs/dist/esm/internal/operators/scan.js
function scan(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
}

// node_modules/rxjs/dist/esm/internal/operators/startWith.js
function startWith(...values) {
  const scheduler = popScheduler(values);
  return operate((source, subscriber) => {
    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm/internal/operators/switchMap.js
function switchMap(project, resultSelector) {
  return operate((source, subscriber) => {
    let innerSubscriber = null;
    let index = 0;
    let isComplete = false;
    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      let innerIndex = 0;
      const outerIndex = index++;
      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {
        innerSubscriber = null;
        checkComplete();
      }));
    }, () => {
      isComplete = true;
      checkComplete();
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/takeUntil.js
function takeUntil(notifier) {
  return operate((source, subscriber) => {
    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));
    !subscriber.closed && source.subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm/internal/operators/tap.js
function tap(observerOrNext, error, complete) {
  const tapObserver = isFunction(observerOrNext) || error || complete ? {
    next: observerOrNext,
    error,
    complete
  } : observerOrNext;
  return tapObserver ? operate((source, subscriber) => {
    var _a;
    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
    let isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      var _a2;
      (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
      subscriber.next(value);
    }, () => {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      subscriber.complete();
    }, (err) => {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
      subscriber.error(err);
    }, () => {
      var _a2, _b;
      if (isUnsub) {
        (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      }
      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : identity;
}

// node_modules/@angular/core/fesm2022/core.mjs
var ERROR_DETAILS_PAGE_BASE_URL = "https://angular.dev/errors";
var XSS_SECURITY_URL = "https://angular.dev/best-practices/security#preventing-cross-site-scripting-xss";
var RuntimeError = class extends Error {
  code;
  constructor(code, message) {
    super(formatRuntimeError(code, message));
    this.code = code;
  }
};
function formatRuntimeErrorCode(code) {
  return `NG0${Math.abs(code)}`;
}
function formatRuntimeError(code, message) {
  const fullCode = formatRuntimeErrorCode(code);
  let errorMessage = `${fullCode}${message ? ": " + message : ""}`;
  if (ngDevMode && code < 0) {
    const addPeriodSeparator = !errorMessage.match(/[.,;!?\n]$/);
    const separator = addPeriodSeparator ? "." : "";
    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;
  }
  return errorMessage;
}
var REQUIRED_UNSET_VALUE = /* @__PURE__ */ Symbol("InputSignalNode#UNSET");
var INPUT_SIGNAL_NODE = /* @__PURE__ */ (() => {
  return __spreadProps(__spreadValues({}, SIGNAL_NODE), {
    transformFn: void 0,
    applyValueToInputSignal(node, value) {
      signalSetFn(node, value);
    }
  });
})();
function createInputSignal(initialValue, options) {
  const node = Object.create(INPUT_SIGNAL_NODE);
  node.value = initialValue;
  node.transformFn = options?.transform;
  function inputValueFn() {
    producerAccessed(node);
    if (node.value === REQUIRED_UNSET_VALUE) {
      let message = null;
      if (ngDevMode) {
        const name = options?.debugName ?? options?.alias;
        message = `Input${name ? ` "${name}"` : ""} is required but no value is available yet.`;
      }
      throw new RuntimeError(-950, message);
    }
    return node.value;
  }
  inputValueFn[SIGNAL] = node;
  if (ngDevMode) {
    inputValueFn.toString = () => `[Input Signal: ${inputValueFn()}]`;
    node.debugName = options?.debugName;
  }
  return inputValueFn;
}
function noSideEffects(fn) {
  return {
    toString: fn
  }.toString();
}
var ANNOTATIONS = "__annotations__";
var PARAMETERS = "__parameters__";
var PROP_METADATA = "__prop__metadata__";
function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function DecoratorFactory(...args) {
      if (this instanceof DecoratorFactory) {
        metaCtor.call(this, ...args);
        return this;
      }
      const annotationInstance = new DecoratorFactory(...args);
      return function TypeDecorator(cls) {
        if (typeFn) typeFn(cls, ...args);
        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {
          value: []
        })[ANNOTATIONS];
        annotations.push(annotationInstance);
        return cls;
      };
    }
    if (parentClass) {
      DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.ngMetadataName = name;
    DecoratorFactory.annotationCls = DecoratorFactory;
    return DecoratorFactory;
  });
}
function makeMetadataCtor(props) {
  return function ctor(...args) {
    if (props) {
      const values = props(...args);
      for (const propName in values) {
        this[propName] = values[propName];
      }
    }
  };
}
function makeParamDecorator(name, props, parentClass) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function ParamDecoratorFactory(...args) {
      if (this instanceof ParamDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      const annotationInstance = new ParamDecoratorFactory(...args);
      ParamDecorator.annotation = annotationInstance;
      return ParamDecorator;
      function ParamDecorator(cls, unusedKey, index) {
        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {
          value: []
        })[PARAMETERS];
        while (parameters.length <= index) {
          parameters.push(null);
        }
        (parameters[index] = parameters[index] || []).push(annotationInstance);
        return cls;
      }
    }
    ParamDecoratorFactory.prototype.ngMetadataName = name;
    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
  });
}
function makePropDecorator(name, props, parentClass, additionalProcessing) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function PropDecoratorFactory(...args) {
      if (this instanceof PropDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      const decoratorInstance = new PropDecoratorFactory(...args);
      function PropDecorator(target, name2) {
        if (target === void 0) {
          throw new Error("Standard Angular field decorators are not supported in JIT mode.");
        }
        const constructor = target.constructor;
        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {
          value: {}
        })[PROP_METADATA];
        meta[name2] = meta.hasOwnProperty(name2) && meta[name2] || [];
        meta[name2].unshift(decoratorInstance);
      }
      return PropDecorator;
    }
    if (parentClass) {
      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.ngMetadataName = name;
    PropDecoratorFactory.annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
  });
}
var _global = globalThis;
function ngDevModeResetPerfCounters() {
  const locationString = typeof location !== "undefined" ? location.toString() : "";
  const newCounters = {
    namedConstructors: locationString.indexOf("ngDevMode=namedConstructors") != -1,
    firstCreatePass: 0,
    tNode: 0,
    tView: 0,
    rendererCreateTextNode: 0,
    rendererSetText: 0,
    rendererCreateElement: 0,
    rendererAddEventListener: 0,
    rendererSetAttribute: 0,
    rendererRemoveAttribute: 0,
    rendererSetProperty: 0,
    rendererSetClassName: 0,
    rendererAddClass: 0,
    rendererRemoveClass: 0,
    rendererSetStyle: 0,
    rendererRemoveStyle: 0,
    rendererDestroy: 0,
    rendererDestroyNode: 0,
    rendererMoveNode: 0,
    rendererRemoveNode: 0,
    rendererAppendChild: 0,
    rendererInsertBefore: 0,
    rendererCreateComment: 0,
    hydratedNodes: 0,
    hydratedComponents: 0,
    dehydratedViewsRemoved: 0,
    dehydratedViewsCleanupRuns: 0,
    componentsSkippedHydration: 0,
    deferBlocksWithIncrementalHydration: 0
  };
  const allowNgDevModeTrue = locationString.indexOf("ngDevMode=false") === -1;
  if (!allowNgDevModeTrue) {
    _global["ngDevMode"] = false;
  } else {
    if (typeof _global["ngDevMode"] !== "object") {
      _global["ngDevMode"] = {};
    }
    Object.assign(_global["ngDevMode"], newCounters);
  }
  return newCounters;
}
function initNgDevMode() {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (typeof ngDevMode !== "object" || Object.keys(ngDevMode).length === 0) {
      ngDevModeResetPerfCounters();
    }
    return typeof ngDevMode !== "undefined" && !!ngDevMode;
  }
  return false;
}
function getClosureSafeProperty(objWithPropertyToExtract) {
  for (let key in objWithPropertyToExtract) {
    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
      return key;
    }
  }
  throw Error("Could not find renamed property on target object.");
}
function fillProperties(target, source) {
  for (const key in source) {
    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
      target[key] = source[key];
    }
  }
}
function stringify(token) {
  if (typeof token === "string") {
    return token;
  }
  if (Array.isArray(token)) {
    return `[${token.map(stringify).join(", ")}]`;
  }
  if (token == null) {
    return "" + token;
  }
  const name = token.overriddenName || token.name;
  if (name) {
    return `${name}`;
  }
  const result = token.toString();
  if (result == null) {
    return "" + result;
  }
  const newLineIndex = result.indexOf("\n");
  return newLineIndex >= 0 ? result.slice(0, newLineIndex) : result;
}
function concatStringsWithSpace(before, after) {
  if (!before) return after || "";
  if (!after) return before;
  return `${before} ${after}`;
}
var __forward_ref__ = getClosureSafeProperty({
  __forward_ref__: getClosureSafeProperty
});
function forwardRef(forwardRefFn) {
  forwardRefFn.__forward_ref__ = forwardRef;
  forwardRefFn.toString = function() {
    return stringify(this());
  };
  return forwardRefFn;
}
function resolveForwardRef(type) {
  return isForwardRef(type) ? type() : type;
}
function isForwardRef(fn) {
  return typeof fn === "function" && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;
}
function assertNumber(actual, msg) {
  if (!(typeof actual === "number")) {
    throwError2(msg, typeof actual, "number", "===");
  }
}
function assertNumberInRange(actual, minInclusive, maxInclusive) {
  assertNumber(actual, "Expected a number");
  assertLessThanOrEqual(actual, maxInclusive, "Expected number to be less than or equal to");
  assertGreaterThanOrEqual(actual, minInclusive, "Expected number to be greater than or equal to");
}
function assertString(actual, msg) {
  if (!(typeof actual === "string")) {
    throwError2(msg, actual === null ? "null" : typeof actual, "string", "===");
  }
}
function assertFunction(actual, msg) {
  if (!(typeof actual === "function")) {
    throwError2(msg, actual === null ? "null" : typeof actual, "function", "===");
  }
}
function assertEqual(actual, expected, msg) {
  if (!(actual == expected)) {
    throwError2(msg, actual, expected, "==");
  }
}
function assertNotEqual(actual, expected, msg) {
  if (!(actual != expected)) {
    throwError2(msg, actual, expected, "!=");
  }
}
function assertSame(actual, expected, msg) {
  if (!(actual === expected)) {
    throwError2(msg, actual, expected, "===");
  }
}
function assertNotSame(actual, expected, msg) {
  if (!(actual !== expected)) {
    throwError2(msg, actual, expected, "!==");
  }
}
function assertLessThan(actual, expected, msg) {
  if (!(actual < expected)) {
    throwError2(msg, actual, expected, "<");
  }
}
function assertLessThanOrEqual(actual, expected, msg) {
  if (!(actual <= expected)) {
    throwError2(msg, actual, expected, "<=");
  }
}
function assertGreaterThan(actual, expected, msg) {
  if (!(actual > expected)) {
    throwError2(msg, actual, expected, ">");
  }
}
function assertGreaterThanOrEqual(actual, expected, msg) {
  if (!(actual >= expected)) {
    throwError2(msg, actual, expected, ">=");
  }
}
function assertDefined(actual, msg) {
  if (actual == null) {
    throwError2(msg, actual, null, "!=");
  }
}
function throwError2(msg, actual, expected, comparison) {
  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? "" : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));
}
function assertDomNode(node) {
  if (!(node instanceof Node)) {
    throwError2(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);
  }
}
function assertElement(node) {
  if (!(node instanceof Element)) {
    throwError2(`The provided value must be an element but got ${stringify(node)}`);
  }
}
function assertIndexInRange(arr, index) {
  assertDefined(arr, "Array must be defined.");
  const maxLen = arr.length;
  if (index < 0 || index >= maxLen) {
    throwError2(`Index expected to be less than ${maxLen} but got ${index}`);
  }
}
function assertOneOf(value, ...validValues) {
  if (validValues.indexOf(value) !== -1) return true;
  throwError2(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);
}
function assertNotReactive(fn) {
  if (getActiveConsumer() !== null) {
    throwError2(`${fn}() should never be called in a reactive context.`);
  }
}
function \u0275\u0275defineInjectable(opts) {
  return {
    token: opts.token,
    providedIn: opts.providedIn || null,
    factory: opts.factory,
    value: void 0
  };
}
function \u0275\u0275defineInjector(options) {
  return {
    providers: options.providers || [],
    imports: options.imports || []
  };
}
function getInjectableDef(type) {
  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);
}
function isInjectable(type) {
  return getInjectableDef(type) !== null;
}
function getOwnDefinition(type, field) {
  return type.hasOwnProperty(field) ? type[field] : null;
}
function getInheritedInjectableDef(type) {
  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);
  if (def) {
    ngDevMode && console.warn(`DEPRECATED: DI is instantiating a token "${type.name}" that inherits its @Injectable decorator but does not provide one itself.
This will become an error in a future version of Angular. Please add @Injectable() to the "${type.name}" class.`);
    return def;
  } else {
    return null;
  }
}
function getInjectorDef(type) {
  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;
}
var NG_PROV_DEF = getClosureSafeProperty({
  \u0275prov: getClosureSafeProperty
});
var NG_INJ_DEF = getClosureSafeProperty({
  \u0275inj: getClosureSafeProperty
});
var NG_INJECTABLE_DEF = getClosureSafeProperty({
  ngInjectableDef: getClosureSafeProperty
});
var NG_INJECTOR_DEF = getClosureSafeProperty({
  ngInjectorDef: getClosureSafeProperty
});
var InjectionToken = class {
  _desc;
  /** @internal */
  ngMetadataName = "InjectionToken";
  \u0275prov;
  /**
   * @param _desc   Description for the token,
   *                used only for debugging purposes,
   *                it should but does not need to be unique
   * @param options Options for the token's usage, as described above
   */
  constructor(_desc, options) {
    this._desc = _desc;
    this.\u0275prov = void 0;
    if (typeof options == "number") {
      (typeof ngDevMode === "undefined" || ngDevMode) && assertLessThan(options, 0, "Only negative numbers are supported here");
      this.__NG_ELEMENT_ID__ = options;
    } else if (options !== void 0) {
      this.\u0275prov = \u0275\u0275defineInjectable({
        token: this,
        providedIn: options.providedIn || "root",
        factory: options.factory
      });
    }
  }
  /**
   * @internal
   */
  get multi() {
    return this;
  }
  toString() {
    return `InjectionToken ${this._desc}`;
  }
};
var _injectorProfilerContext;
function getInjectorProfilerContext() {
  !ngDevMode && throwError2("getInjectorProfilerContext should never be called in production mode");
  return _injectorProfilerContext;
}
function setInjectorProfilerContext(context2) {
  !ngDevMode && throwError2("setInjectorProfilerContext should never be called in production mode");
  const previous = _injectorProfilerContext;
  _injectorProfilerContext = context2;
  return previous;
}
var injectorProfilerCallback = null;
var setInjectorProfiler = (injectorProfiler2) => {
  !ngDevMode && throwError2("setInjectorProfiler should never be called in production mode");
  injectorProfilerCallback = injectorProfiler2;
};
function injectorProfiler(event) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  if (injectorProfilerCallback != null) {
    injectorProfilerCallback(event);
  }
}
function emitProviderConfiguredEvent(eventProvider, isViewProvider = false) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  let token;
  if (typeof eventProvider === "function") {
    token = eventProvider;
  } else if (eventProvider instanceof InjectionToken) {
    token = eventProvider;
  } else {
    token = resolveForwardRef(eventProvider.provide);
  }
  let provider = eventProvider;
  if (eventProvider instanceof InjectionToken) {
    provider = eventProvider.\u0275prov || eventProvider;
  }
  injectorProfiler({
    type: 2,
    context: getInjectorProfilerContext(),
    providerRecord: {
      token,
      provider,
      isViewProvider
    }
  });
}
function emitInstanceCreatedByInjectorEvent(instance) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 1,
    context: getInjectorProfilerContext(),
    instance: {
      value: instance
    }
  });
}
function emitInjectEvent(token, value, flags) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 0,
    context: getInjectorProfilerContext(),
    service: {
      token,
      value,
      flags
    }
  });
}
function emitEffectCreatedEvent(effect2) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 3,
    context: getInjectorProfilerContext(),
    effect: effect2
  });
}
function runInInjectorProfilerContext(injector, token, callback) {
  !ngDevMode && throwError2("runInInjectorProfilerContext should never be called in production mode");
  const prevInjectContext = setInjectorProfilerContext({
    injector,
    token
  });
  try {
    callback();
  } finally {
    setInjectorProfilerContext(prevInjectContext);
  }
}
function isEnvironmentProviders(value) {
  return value && !!value.\u0275providers;
}
var NG_COMP_DEF = getClosureSafeProperty({
  \u0275cmp: getClosureSafeProperty
});
var NG_DIR_DEF = getClosureSafeProperty({
  \u0275dir: getClosureSafeProperty
});
var NG_PIPE_DEF = getClosureSafeProperty({
  \u0275pipe: getClosureSafeProperty
});
var NG_MOD_DEF = getClosureSafeProperty({
  \u0275mod: getClosureSafeProperty
});
var NG_FACTORY_DEF = getClosureSafeProperty({
  \u0275fac: getClosureSafeProperty
});
var NG_ELEMENT_ID = getClosureSafeProperty({
  __NG_ELEMENT_ID__: getClosureSafeProperty
});
var NG_ENV_ID = getClosureSafeProperty({
  __NG_ENV_ID__: getClosureSafeProperty
});
function renderStringify(value) {
  if (typeof value === "string") return value;
  if (value == null) return "";
  return String(value);
}
function stringifyForError(value) {
  if (typeof value === "function") return value.name || value.toString();
  if (typeof value === "object" && value != null && typeof value.type === "function") {
    return value.type.name || value.type.toString();
  }
  return renderStringify(value);
}
function throwCyclicDependencyError(token, path) {
  throw new RuntimeError(-200, ngDevMode ? `Circular dependency in DI detected for ${token}${path ? `. Dependency path: ${path.join(" > ")} > ${token}` : ""}` : token);
}
function throwMixedMultiProviderError() {
  throw new Error(`Cannot mix multi providers and regular providers`);
}
function throwInvalidProviderError(ngModuleType, providers, provider) {
  if (ngModuleType && providers) {
    const providerDetail = providers.map((v) => v == provider ? "?" + provider + "?" : "...");
    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(", ")}]`);
  } else if (isEnvironmentProviders(provider)) {
    if (provider.\u0275fromNgModule) {
      throw new RuntimeError(207, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);
    } else {
      throw new RuntimeError(207, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);
    }
  } else {
    throw new Error("Invalid provider");
  }
}
function throwProviderNotFoundError(token, injectorName) {
  const errorMessage = ngDevMode && `No provider for ${stringifyForError(token)} found${injectorName ? ` in ${injectorName}` : ""}`;
  throw new RuntimeError(-201, errorMessage);
}
var InjectFlags;
(function(InjectFlags2) {
  InjectFlags2[InjectFlags2["Default"] = 0] = "Default";
  InjectFlags2[InjectFlags2["Host"] = 1] = "Host";
  InjectFlags2[InjectFlags2["Self"] = 2] = "Self";
  InjectFlags2[InjectFlags2["SkipSelf"] = 4] = "SkipSelf";
  InjectFlags2[InjectFlags2["Optional"] = 8] = "Optional";
})(InjectFlags || (InjectFlags = {}));
var _injectImplementation;
function getInjectImplementation() {
  return _injectImplementation;
}
function setInjectImplementation(impl) {
  const previous = _injectImplementation;
  _injectImplementation = impl;
  return previous;
}
function injectRootLimpMode(token, notFoundValue, flags) {
  const injectableDef = getInjectableDef(token);
  if (injectableDef && injectableDef.providedIn == "root") {
    return injectableDef.value === void 0 ? injectableDef.value = injectableDef.factory() : injectableDef.value;
  }
  if (flags & InjectFlags.Optional) return null;
  if (notFoundValue !== void 0) return notFoundValue;
  throwProviderNotFoundError(token, "Injector");
}
function assertInjectImplementationNotEqual(fn) {
  ngDevMode && assertNotEqual(_injectImplementation, fn, "Calling \u0275\u0275inject would cause infinite recursion");
}
var _THROW_IF_NOT_FOUND = {};
var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
var DI_DECORATOR_FLAG = "__NG_DI_FLAG__";
var RetrievingInjector = class {
  injector;
  constructor(injector) {
    this.injector = injector;
  }
  retrieve(token, options) {
    const ngOptions = options;
    return this.injector.get(token, ngOptions.optional ? NOT_FOUND : THROW_IF_NOT_FOUND, ngOptions);
  }
};
var NG_TEMP_TOKEN_PATH = "ngTempTokenPath";
var NG_TOKEN_PATH = "ngTokenPath";
var NEW_LINE = /\n/gm;
var NO_NEW_LINE = "\u0275";
var SOURCE = "__source";
function injectInjectorOnly(token, flags = InjectFlags.Default) {
  if (getCurrentInjector() === void 0) {
    throw new RuntimeError(-203, ngDevMode && `The \`${stringify(token)}\` token injection failed. \`inject()\` function must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \`runInInjectionContext\`.`);
  } else if (getCurrentInjector() === null) {
    return injectRootLimpMode(token, void 0, flags);
  } else {
    const currentInjector = getCurrentInjector();
    let injector;
    if (currentInjector instanceof RetrievingInjector) {
      injector = currentInjector.injector;
    } else {
      injector = currentInjector;
    }
    const value = injector.get(token, flags & InjectFlags.Optional ? null : void 0, flags);
    ngDevMode && emitInjectEvent(token, value, flags);
    return value;
  }
}
function \u0275\u0275inject(token, flags = InjectFlags.Default) {
  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);
}
function \u0275\u0275invalidFactoryDep(index) {
  throw new RuntimeError(202, ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.
This can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.

Please check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);
}
function inject(token, flags = InjectFlags.Default) {
  return \u0275\u0275inject(token, convertToBitFlags(flags));
}
function convertToBitFlags(flags) {
  if (typeof flags === "undefined" || typeof flags === "number") {
    return flags;
  }
  return 0 | // comment to force a line break in the formatter
  (flags.optional && 8) | (flags.host && 1) | (flags.self && 2) | (flags.skipSelf && 4);
}
function injectArgs(types) {
  const args = [];
  for (let i = 0; i < types.length; i++) {
    const arg = resolveForwardRef(types[i]);
    if (Array.isArray(arg)) {
      if (arg.length === 0) {
        throw new RuntimeError(900, ngDevMode && "Arguments array must have arguments.");
      }
      let type = void 0;
      let flags = InjectFlags.Default;
      for (let j = 0; j < arg.length; j++) {
        const meta = arg[j];
        const flag = getInjectFlag(meta);
        if (typeof flag === "number") {
          if (flag === -1) {
            type = meta.token;
          } else {
            flags |= flag;
          }
        } else {
          type = meta;
        }
      }
      args.push(\u0275\u0275inject(type, flags));
    } else {
      args.push(\u0275\u0275inject(arg));
    }
  }
  return args;
}
function attachInjectFlag(decorator, flag) {
  decorator[DI_DECORATOR_FLAG] = flag;
  decorator.prototype[DI_DECORATOR_FLAG] = flag;
  return decorator;
}
function getInjectFlag(token) {
  return token[DI_DECORATOR_FLAG];
}
function catchInjectorError(e2, token, injectorErrorName, source) {
  const tokenPath = e2[NG_TEMP_TOKEN_PATH];
  if (token[SOURCE]) {
    tokenPath.unshift(token[SOURCE]);
  }
  e2.message = formatError("\n" + e2.message, tokenPath, injectorErrorName, source);
  e2[NG_TOKEN_PATH] = tokenPath;
  e2[NG_TEMP_TOKEN_PATH] = null;
  throw e2;
}
function formatError(text, obj, injectorErrorName, source = null) {
  text = text && text.charAt(0) === "\n" && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;
  let context2 = stringify(obj);
  if (Array.isArray(obj)) {
    context2 = obj.map(stringify).join(" -> ");
  } else if (typeof obj === "object") {
    let parts = [];
    for (let key in obj) {
      if (obj.hasOwnProperty(key)) {
        let value = obj[key];
        parts.push(key + ":" + (typeof value === "string" ? JSON.stringify(value) : stringify(value)));
      }
    }
    context2 = `{${parts.join(", ")}}`;
  }
  return `${injectorErrorName}${source ? "(" + source + ")" : ""}[${context2}]: ${text.replace(NEW_LINE, "\n  ")}`;
}
var Inject = attachInjectFlag(
  // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.
  makeParamDecorator("Inject", (token) => ({
    token
  })),
  -1
  /* DecoratorFlags.Inject */
);
var Optional = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("Optional"),
    8
    /* InternalInjectFlags.Optional */
  )
);
var Self = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("Self"),
    2
    /* InternalInjectFlags.Self */
  )
);
var SkipSelf = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("SkipSelf"),
    4
    /* InternalInjectFlags.SkipSelf */
  )
);
var Host = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("Host"),
    1
    /* InternalInjectFlags.Host */
  )
);
function getFactoryDef(type, throwNotFound) {
  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);
  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
    throw new Error(`Type ${stringify(type)} does not have '\u0275fac' property.`);
  }
  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
}
function arrayEquals(a, b, identityAccessor) {
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; i++) {
    let valueA = a[i];
    let valueB = b[i];
    if (identityAccessor) {
      valueA = identityAccessor(valueA);
      valueB = identityAccessor(valueB);
    }
    if (valueB !== valueA) {
      return false;
    }
  }
  return true;
}
function flatten(list) {
  return list.flat(Number.POSITIVE_INFINITY);
}
function deepForEach(input2, fn) {
  input2.forEach((value) => Array.isArray(value) ? deepForEach(value, fn) : fn(value));
}
function addToArray(arr, index, value) {
  if (index >= arr.length) {
    arr.push(value);
  } else {
    arr.splice(index, 0, value);
  }
}
function removeFromArray(arr, index) {
  if (index >= arr.length - 1) {
    return arr.pop();
  } else {
    return arr.splice(index, 1)[0];
  }
}
function newArray(size, value) {
  const list = [];
  for (let i = 0; i < size; i++) {
    list.push(value);
  }
  return list;
}
function arraySplice(array, index, count) {
  const length = array.length - count;
  while (index < length) {
    array[index] = array[index + count];
    index++;
  }
  while (count--) {
    array.pop();
  }
}
function arrayInsert2(array, index, value1, value2) {
  ngDevMode && assertLessThanOrEqual(index, array.length, "Can't insert past array end.");
  let end = array.length;
  if (end == index) {
    array.push(value1, value2);
  } else if (end === 1) {
    array.push(value2, array[0]);
    array[0] = value1;
  } else {
    end--;
    array.push(array[end - 1], array[end]);
    while (end > index) {
      const previousEnd = end - 2;
      array[end] = array[previousEnd];
      end--;
    }
    array[index] = value1;
    array[index + 1] = value2;
  }
}
function keyValueArraySet(keyValueArray, key, value) {
  let index = keyValueArrayIndexOf(keyValueArray, key);
  if (index >= 0) {
    keyValueArray[index | 1] = value;
  } else {
    index = ~index;
    arrayInsert2(keyValueArray, index, key, value);
  }
  return index;
}
function keyValueArrayGet(keyValueArray, key) {
  const index = keyValueArrayIndexOf(keyValueArray, key);
  if (index >= 0) {
    return keyValueArray[index | 1];
  }
  return void 0;
}
function keyValueArrayIndexOf(keyValueArray, key) {
  return _arrayIndexOfSorted(keyValueArray, key, 1);
}
function _arrayIndexOfSorted(array, value, shift) {
  ngDevMode && assertEqual(Array.isArray(array), true, "Expecting an array");
  let start = 0;
  let end = array.length >> shift;
  while (end !== start) {
    const middle = start + (end - start >> 1);
    const current = array[middle << shift];
    if (value === current) {
      return middle << shift;
    } else if (current > value) {
      end = middle;
    } else {
      start = middle + 1;
    }
  }
  return ~(end << shift);
}
var EMPTY_OBJ = {};
var EMPTY_ARRAY = [];
if ((typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode()) {
  Object.freeze(EMPTY_OBJ);
  Object.freeze(EMPTY_ARRAY);
}
var ENVIRONMENT_INITIALIZER = new InjectionToken(ngDevMode ? "ENVIRONMENT_INITIALIZER" : "");
var INJECTOR$1 = new InjectionToken(
  ngDevMode ? "INJECTOR" : "",
  // Disable tslint because this is const enum which gets inlined not top level prop access.
  // tslint:disable-next-line: no-toplevel-property-access
  -1
  /* InjectorMarkers.Injector */
);
var INJECTOR_DEF_TYPES = new InjectionToken(ngDevMode ? "INJECTOR_DEF_TYPES" : "");
var NullInjector = class {
  get(token, notFoundValue = THROW_IF_NOT_FOUND) {
    if (notFoundValue === THROW_IF_NOT_FOUND) {
      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);
      error.name = "NullInjectorError";
      throw error;
    }
    return notFoundValue;
  }
};
function getNgModuleDef(type, throwNotFound) {
  const ngModuleDef = type[NG_MOD_DEF] || null;
  if (!ngModuleDef && throwNotFound === true) {
    throw new Error(`Type ${stringify(type)} does not have '\u0275mod' property.`);
  }
  return ngModuleDef;
}
function getComponentDef(type) {
  return type[NG_COMP_DEF] || null;
}
function getDirectiveDef(type) {
  return type[NG_DIR_DEF] || null;
}
function getPipeDef$1(type) {
  return type[NG_PIPE_DEF] || null;
}
function isStandalone(type) {
  const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
  return def !== null && def.standalone;
}
function makeEnvironmentProviders(providers) {
  return {
    \u0275providers: providers
  };
}
function importProvidersFrom(...sources) {
  return {
    \u0275providers: internalImportProvidersFrom(true, sources),
    \u0275fromNgModule: true
  };
}
function internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {
  const providersOut = [];
  const dedup = /* @__PURE__ */ new Set();
  let injectorTypesWithProviders;
  const collectProviders = (provider) => {
    providersOut.push(provider);
  };
  deepForEach(sources, (source) => {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && checkForStandaloneCmp) {
      const cmpDef = getComponentDef(source);
      if (cmpDef?.standalone) {
        throw new RuntimeError(800, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component "${stringifyForError(source)}"`);
      }
    }
    const internalSource = source;
    if (walkProviderTree(internalSource, collectProviders, [], dedup)) {
      injectorTypesWithProviders ||= [];
      injectorTypesWithProviders.push(internalSource);
    }
  });
  if (injectorTypesWithProviders !== void 0) {
    processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);
  }
  return providersOut;
}
function processInjectorTypesWithProviders(typesWithProviders, visitor) {
  for (let i = 0; i < typesWithProviders.length; i++) {
    const {
      ngModule,
      providers
    } = typesWithProviders[i];
    deepForEachProvider(providers, (provider) => {
      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);
      visitor(provider, ngModule);
    });
  }
}
function walkProviderTree(container, visitor, parents, dedup) {
  container = resolveForwardRef(container);
  if (!container) return false;
  let defType = null;
  let injDef = getInjectorDef(container);
  const cmpDef = !injDef && getComponentDef(container);
  if (!injDef && !cmpDef) {
    const ngModule = container.ngModule;
    injDef = getInjectorDef(ngModule);
    if (injDef) {
      defType = ngModule;
    } else {
      return false;
    }
  } else if (cmpDef && !cmpDef.standalone) {
    return false;
  } else {
    defType = container;
  }
  if (ngDevMode && parents.indexOf(defType) !== -1) {
    const defName = stringify(defType);
    const path = parents.map(stringify);
    throwCyclicDependencyError(defName, path);
  }
  const isDuplicate = dedup.has(defType);
  if (cmpDef) {
    if (isDuplicate) {
      return false;
    }
    dedup.add(defType);
    if (cmpDef.dependencies) {
      const deps = typeof cmpDef.dependencies === "function" ? cmpDef.dependencies() : cmpDef.dependencies;
      for (const dep of deps) {
        walkProviderTree(dep, visitor, parents, dedup);
      }
    }
  } else if (injDef) {
    if (injDef.imports != null && !isDuplicate) {
      ngDevMode && parents.push(defType);
      dedup.add(defType);
      let importTypesWithProviders;
      try {
        deepForEach(injDef.imports, (imported) => {
          if (walkProviderTree(imported, visitor, parents, dedup)) {
            importTypesWithProviders ||= [];
            importTypesWithProviders.push(imported);
          }
        });
      } finally {
        ngDevMode && parents.pop();
      }
      if (importTypesWithProviders !== void 0) {
        processInjectorTypesWithProviders(importTypesWithProviders, visitor);
      }
    }
    if (!isDuplicate) {
      const factory = getFactoryDef(defType) || (() => new defType());
      visitor({
        provide: defType,
        useFactory: factory,
        deps: EMPTY_ARRAY
      }, defType);
      visitor({
        provide: INJECTOR_DEF_TYPES,
        useValue: defType,
        multi: true
      }, defType);
      visitor({
        provide: ENVIRONMENT_INITIALIZER,
        useValue: () => \u0275\u0275inject(defType),
        multi: true
      }, defType);
    }
    const defProviders = injDef.providers;
    if (defProviders != null && !isDuplicate) {
      const injectorType = container;
      deepForEachProvider(defProviders, (provider) => {
        ngDevMode && validateProvider(provider, defProviders, injectorType);
        visitor(provider, injectorType);
      });
    }
  } else {
    return false;
  }
  return defType !== container && container.providers !== void 0;
}
function validateProvider(provider, providers, containerType) {
  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {
    return;
  }
  const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));
  if (!classRef) {
    throwInvalidProviderError(containerType, providers, provider);
  }
}
function deepForEachProvider(providers, fn) {
  for (let provider of providers) {
    if (isEnvironmentProviders(provider)) {
      provider = provider.\u0275providers;
    }
    if (Array.isArray(provider)) {
      deepForEachProvider(provider, fn);
    } else {
      fn(provider);
    }
  }
}
var USE_VALUE$1 = getClosureSafeProperty({
  provide: String,
  useValue: getClosureSafeProperty
});
function isValueProvider(value) {
  return value !== null && typeof value == "object" && USE_VALUE$1 in value;
}
function isExistingProvider(value) {
  return !!(value && value.useExisting);
}
function isFactoryProvider(value) {
  return !!(value && value.useFactory);
}
function isTypeProvider(value) {
  return typeof value === "function";
}
function isClassProvider(value) {
  return !!value.useClass;
}
var INJECTOR_SCOPE = new InjectionToken(ngDevMode ? "Set Injector scope." : "");
var NOT_YET = {};
var CIRCULAR = {};
var NULL_INJECTOR = void 0;
function getNullInjector() {
  if (NULL_INJECTOR === void 0) {
    NULL_INJECTOR = new NullInjector();
  }
  return NULL_INJECTOR;
}
var EnvironmentInjector = class {
};
var R3Injector = class extends EnvironmentInjector {
  parent;
  source;
  scopes;
  /**
   * Map of tokens to records which contain the instances of those tokens.
   * - `null` value implies that we don't have the record. Used by tree-shakable injectors
   * to prevent further searches.
   */
  records = /* @__PURE__ */ new Map();
  /**
   * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
   */
  _ngOnDestroyHooks = /* @__PURE__ */ new Set();
  _onDestroyHooks = [];
  /**
   * Flag indicating that this injector was previously destroyed.
   */
  get destroyed() {
    return this._destroyed;
  }
  _destroyed = false;
  injectorDefTypes;
  constructor(providers, parent, source, scopes) {
    super();
    this.parent = parent;
    this.source = source;
    this.scopes = scopes;
    forEachSingleProvider(providers, (provider) => this.processProvider(provider));
    this.records.set(INJECTOR$1, makeRecord(void 0, this));
    if (scopes.has("environment")) {
      this.records.set(EnvironmentInjector, makeRecord(void 0, this));
    }
    const record = this.records.get(INJECTOR_SCOPE);
    if (record != null && typeof record.value === "string") {
      this.scopes.add(record.value);
    }
    this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, InjectFlags.Self));
  }
  retrieve(token, options) {
    const ngOptions = options;
    return this.get(token, ngOptions.optional ? NOT_FOUND : THROW_IF_NOT_FOUND, ngOptions);
  }
  /**
   * Destroy the injector and release references to every instance or provider associated with it.
   *
   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
   * hook was found.
   */
  destroy() {
    assertNotDestroyed(this);
    this._destroyed = true;
    const prevConsumer = setActiveConsumer(null);
    try {
      for (const service of this._ngOnDestroyHooks) {
        service.ngOnDestroy();
      }
      const onDestroyHooks = this._onDestroyHooks;
      this._onDestroyHooks = [];
      for (const hook of onDestroyHooks) {
        hook();
      }
    } finally {
      this.records.clear();
      this._ngOnDestroyHooks.clear();
      this.injectorDefTypes.clear();
      setActiveConsumer(prevConsumer);
    }
  }
  onDestroy(callback) {
    assertNotDestroyed(this);
    this._onDestroyHooks.push(callback);
    return () => this.removeOnDestroy(callback);
  }
  runInContext(fn) {
    assertNotDestroyed(this);
    const previousInjector = setCurrentInjector(this);
    const previousInjectImplementation = setInjectImplementation(void 0);
    let prevInjectContext;
    if (ngDevMode) {
      prevInjectContext = setInjectorProfilerContext({
        injector: this,
        token: null
      });
    }
    try {
      return fn();
    } finally {
      setCurrentInjector(previousInjector);
      setInjectImplementation(previousInjectImplementation);
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
    }
  }
  get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {
    assertNotDestroyed(this);
    if (token.hasOwnProperty(NG_ENV_ID)) {
      return token[NG_ENV_ID](this);
    }
    flags = convertToBitFlags(flags);
    let prevInjectContext;
    if (ngDevMode) {
      prevInjectContext = setInjectorProfilerContext({
        injector: this,
        token
      });
    }
    const previousInjector = setCurrentInjector(this);
    const previousInjectImplementation = setInjectImplementation(void 0);
    try {
      if (!(flags & InjectFlags.SkipSelf)) {
        let record = this.records.get(token);
        if (record === void 0) {
          const def = couldBeInjectableType(token) && getInjectableDef(token);
          if (def && this.injectableDefInScope(def)) {
            if (ngDevMode) {
              runInInjectorProfilerContext(this, token, () => {
                emitProviderConfiguredEvent(token);
              });
            }
            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
          } else {
            record = null;
          }
          this.records.set(token, record);
        }
        if (record != null) {
          return this.hydrate(token, record);
        }
      }
      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();
      notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;
      return nextInjector.get(token, notFoundValue);
    } catch (e2) {
      if (e2.name === "NullInjectorError") {
        const path = e2[NG_TEMP_TOKEN_PATH] = e2[NG_TEMP_TOKEN_PATH] || [];
        path.unshift(stringify(token));
        if (previousInjector) {
          throw e2;
        } else {
          return catchInjectorError(e2, token, "R3InjectorError", this.source);
        }
      } else {
        throw e2;
      }
    } finally {
      setInjectImplementation(previousInjectImplementation);
      setCurrentInjector(previousInjector);
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
    }
  }
  /** @internal */
  resolveInjectorInitializers() {
    const prevConsumer = setActiveConsumer(null);
    const previousInjector = setCurrentInjector(this);
    const previousInjectImplementation = setInjectImplementation(void 0);
    let prevInjectContext;
    if (ngDevMode) {
      prevInjectContext = setInjectorProfilerContext({
        injector: this,
        token: null
      });
    }
    try {
      const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, InjectFlags.Self);
      if (ngDevMode && !Array.isArray(initializers)) {
        throw new RuntimeError(-209, `Unexpected type of the \`ENVIRONMENT_INITIALIZER\` token value (expected an array, but got ${typeof initializers}). Please check that the \`ENVIRONMENT_INITIALIZER\` token is configured as a \`multi: true\` provider.`);
      }
      for (const initializer of initializers) {
        initializer();
      }
    } finally {
      setCurrentInjector(previousInjector);
      setInjectImplementation(previousInjectImplementation);
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
      setActiveConsumer(prevConsumer);
    }
  }
  toString() {
    const tokens = [];
    const records = this.records;
    for (const token of records.keys()) {
      tokens.push(stringify(token));
    }
    return `R3Injector[${tokens.join(", ")}]`;
  }
  /**
   * Process a `SingleProvider` and add it.
   */
  processProvider(provider) {
    provider = resolveForwardRef(provider);
    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);
    const record = providerToRecord(provider);
    if (ngDevMode) {
      runInInjectorProfilerContext(this, token, () => {
        if (isValueProvider(provider)) {
          emitInstanceCreatedByInjectorEvent(provider.useValue);
        }
        emitProviderConfiguredEvent(provider);
      });
    }
    if (!isTypeProvider(provider) && provider.multi === true) {
      let multiRecord = this.records.get(token);
      if (multiRecord) {
        if (ngDevMode && multiRecord.multi === void 0) {
          throwMixedMultiProviderError();
        }
      } else {
        multiRecord = makeRecord(void 0, NOT_YET, true);
        multiRecord.factory = () => injectArgs(multiRecord.multi);
        this.records.set(token, multiRecord);
      }
      token = provider;
      multiRecord.multi.push(provider);
    } else {
      if (ngDevMode) {
        const existing = this.records.get(token);
        if (existing && existing.multi !== void 0) {
          throwMixedMultiProviderError();
        }
      }
    }
    this.records.set(token, record);
  }
  hydrate(token, record) {
    const prevConsumer = setActiveConsumer(null);
    try {
      if (record.value === CIRCULAR) {
        throwCyclicDependencyError(stringify(token));
      } else if (record.value === NOT_YET) {
        record.value = CIRCULAR;
        if (ngDevMode) {
          runInInjectorProfilerContext(this, token, () => {
            record.value = record.factory();
            emitInstanceCreatedByInjectorEvent(record.value);
          });
        } else {
          record.value = record.factory();
        }
      }
      if (typeof record.value === "object" && record.value && hasOnDestroy(record.value)) {
        this._ngOnDestroyHooks.add(record.value);
      }
      return record.value;
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
  injectableDefInScope(def) {
    if (!def.providedIn) {
      return false;
    }
    const providedIn = resolveForwardRef(def.providedIn);
    if (typeof providedIn === "string") {
      return providedIn === "any" || this.scopes.has(providedIn);
    } else {
      return this.injectorDefTypes.has(providedIn);
    }
  }
  removeOnDestroy(callback) {
    const destroyCBIdx = this._onDestroyHooks.indexOf(callback);
    if (destroyCBIdx !== -1) {
      this._onDestroyHooks.splice(destroyCBIdx, 1);
    }
  }
};
function injectableDefOrInjectorDefFactory(token) {
  const injectableDef = getInjectableDef(token);
  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);
  if (factory !== null) {
    return factory;
  }
  if (token instanceof InjectionToken) {
    throw new RuntimeError(204, ngDevMode && `Token ${stringify(token)} is missing a \u0275prov definition.`);
  }
  if (token instanceof Function) {
    return getUndecoratedInjectableFactory(token);
  }
  throw new RuntimeError(204, ngDevMode && "unreachable");
}
function getUndecoratedInjectableFactory(token) {
  const paramLength = token.length;
  if (paramLength > 0) {
    throw new RuntimeError(204, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${newArray(paramLength, "?").join(", ")}).`);
  }
  const inheritedInjectableDef = getInheritedInjectableDef(token);
  if (inheritedInjectableDef !== null) {
    return () => inheritedInjectableDef.factory(token);
  } else {
    return () => new token();
  }
}
function providerToRecord(provider) {
  if (isValueProvider(provider)) {
    return makeRecord(void 0, provider.useValue);
  } else {
    const factory = providerToFactory(provider);
    return makeRecord(factory, NOT_YET);
  }
}
function providerToFactory(provider, ngModuleType, providers) {
  let factory = void 0;
  if (ngDevMode && isEnvironmentProviders(provider)) {
    throwInvalidProviderError(void 0, providers, provider);
  }
  if (isTypeProvider(provider)) {
    const unwrappedProvider = resolveForwardRef(provider);
    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
  } else {
    if (isValueProvider(provider)) {
      factory = () => resolveForwardRef(provider.useValue);
    } else if (isFactoryProvider(provider)) {
      factory = () => provider.useFactory(...injectArgs(provider.deps || []));
    } else if (isExistingProvider(provider)) {
      factory = () => \u0275\u0275inject(resolveForwardRef(provider.useExisting));
    } else {
      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));
      if (ngDevMode && !classRef) {
        throwInvalidProviderError(ngModuleType, providers, provider);
      }
      if (hasDeps(provider)) {
        factory = () => new classRef(...injectArgs(provider.deps));
      } else {
        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
      }
    }
  }
  return factory;
}
function assertNotDestroyed(injector) {
  if (injector.destroyed) {
    throw new RuntimeError(205, ngDevMode && "Injector has already been destroyed.");
  }
}
function makeRecord(factory, value, multi = false) {
  return {
    factory,
    value,
    multi: multi ? [] : void 0
  };
}
function hasDeps(value) {
  return !!value.deps;
}
function hasOnDestroy(value) {
  return value !== null && typeof value === "object" && typeof value.ngOnDestroy === "function";
}
function couldBeInjectableType(value) {
  return typeof value === "function" || typeof value === "object" && value instanceof InjectionToken;
}
function forEachSingleProvider(providers, fn) {
  for (const provider of providers) {
    if (Array.isArray(provider)) {
      forEachSingleProvider(provider, fn);
    } else if (provider && isEnvironmentProviders(provider)) {
      forEachSingleProvider(provider.\u0275providers, fn);
    } else {
      fn(provider);
    }
  }
}
function runInInjectionContext(injector, fn) {
  let internalInjector;
  if (injector instanceof R3Injector) {
    assertNotDestroyed(injector);
    internalInjector = injector;
  } else {
    internalInjector = new RetrievingInjector(injector);
  }
  let prevInjectorProfilerContext;
  if (ngDevMode) {
    prevInjectorProfilerContext = setInjectorProfilerContext({
      injector,
      token: null
    });
  }
  const prevInjector = setCurrentInjector(internalInjector);
  const previousInjectImplementation = setInjectImplementation(void 0);
  try {
    return fn();
  } finally {
    setCurrentInjector(prevInjector);
    ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext);
    setInjectImplementation(previousInjectImplementation);
  }
}
function isInInjectionContext() {
  return getInjectImplementation() !== void 0 || getCurrentInjector() != null;
}
function assertInInjectionContext(debugFn) {
  if (!isInInjectionContext()) {
    throw new RuntimeError(-203, ngDevMode && debugFn.name + "() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`");
  }
}
var FactoryTarget;
(function(FactoryTarget2) {
  FactoryTarget2[FactoryTarget2["Directive"] = 0] = "Directive";
  FactoryTarget2[FactoryTarget2["Component"] = 1] = "Component";
  FactoryTarget2[FactoryTarget2["Injectable"] = 2] = "Injectable";
  FactoryTarget2[FactoryTarget2["Pipe"] = 3] = "Pipe";
  FactoryTarget2[FactoryTarget2["NgModule"] = 4] = "NgModule";
})(FactoryTarget || (FactoryTarget = {}));
var R3TemplateDependencyKind;
(function(R3TemplateDependencyKind2) {
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["Directive"] = 0] = "Directive";
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["Pipe"] = 1] = "Pipe";
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["NgModule"] = 2] = "NgModule";
})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));
var ViewEncapsulation$1;
(function(ViewEncapsulation2) {
  ViewEncapsulation2[ViewEncapsulation2["Emulated"] = 0] = "Emulated";
  ViewEncapsulation2[ViewEncapsulation2["None"] = 2] = "None";
  ViewEncapsulation2[ViewEncapsulation2["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));
function getCompilerFacade(request) {
  const globalNg = _global["ng"];
  if (globalNg && globalNg.\u0275compilerFacade) {
    return globalNg.\u0275compilerFacade;
  }
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    console.error(`JIT compilation failed for ${request.kind}`, request.type);
    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.

`;
    if (request.usage === 1) {
      message += `The ${request.kind} is part of a library that has been partially compiled.
`;
      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.
`;
      message += "\n";
      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.
`;
    } else {
      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.
`;
    }
    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',
`;
    message += `or manually provide the compiler with 'import "@angular/compiler";' before bootstrapping.`;
    throw new Error(message);
  } else {
    throw new Error("JIT compiler unavailable");
  }
}
var angularCoreDiEnv = {
  "\u0275\u0275defineInjectable": \u0275\u0275defineInjectable,
  "\u0275\u0275defineInjector": \u0275\u0275defineInjector,
  "\u0275\u0275inject": \u0275\u0275inject,
  "\u0275\u0275invalidFactoryDep": \u0275\u0275invalidFactoryDep,
  "resolveForwardRef": resolveForwardRef
};
var Type = Function;
function isType(v) {
  return typeof v === "function";
}
var ES5_DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/;
var ES2015_INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
var ES2015_INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
var ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;
function isDelegateCtor(typeStr) {
  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);
}
var ReflectionCapabilities = class {
  _reflect;
  constructor(reflect) {
    this._reflect = reflect || _global["Reflect"];
  }
  factory(t) {
    return (...args) => new t(...args);
  }
  /** @internal */
  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
    let result;
    if (typeof paramTypes === "undefined") {
      result = newArray(paramAnnotations.length);
    } else {
      result = newArray(paramTypes.length);
    }
    for (let i = 0; i < result.length; i++) {
      if (typeof paramTypes === "undefined") {
        result[i] = [];
      } else if (paramTypes[i] && paramTypes[i] != Object) {
        result[i] = [paramTypes[i]];
      } else {
        result[i] = [];
      }
      if (paramAnnotations && paramAnnotations[i] != null) {
        result[i] = result[i].concat(paramAnnotations[i]);
      }
    }
    return result;
  }
  _ownParameters(type, parentCtor) {
    const typeStr = type.toString();
    if (isDelegateCtor(typeStr)) {
      return null;
    }
    if (type.parameters && type.parameters !== parentCtor.parameters) {
      return type.parameters;
    }
    const tsickleCtorParams = type.ctorParameters;
    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
      const ctorParameters = typeof tsickleCtorParams === "function" ? tsickleCtorParams() : tsickleCtorParams;
      const paramTypes2 = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);
      const paramAnnotations2 = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));
      return this._zipTypesAndAnnotations(paramTypes2, paramAnnotations2);
    }
    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];
    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata("design:paramtypes", type);
    if (paramTypes || paramAnnotations) {
      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
    }
    return newArray(type.length);
  }
  parameters(type) {
    if (!isType(type)) {
      return [];
    }
    const parentCtor = getParentCtor(type);
    let parameters = this._ownParameters(type, parentCtor);
    if (!parameters && parentCtor !== Object) {
      parameters = this.parameters(parentCtor);
    }
    return parameters || [];
  }
  _ownAnnotations(typeOrFunc, parentCtor) {
    if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
      let annotations = typeOrFunc.annotations;
      if (typeof annotations === "function" && annotations.annotations) {
        annotations = annotations.annotations;
      }
      return annotations;
    }
    if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
      return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
    }
    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
      return typeOrFunc[ANNOTATIONS];
    }
    return null;
  }
  annotations(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return [];
    }
    const parentCtor = getParentCtor(typeOrFunc);
    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
    return parentAnnotations.concat(ownAnnotations);
  }
  _ownPropMetadata(typeOrFunc, parentCtor) {
    if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
      let propMetadata = typeOrFunc.propMetadata;
      if (typeof propMetadata === "function" && propMetadata.propMetadata) {
        propMetadata = propMetadata.propMetadata;
      }
      return propMetadata;
    }
    if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
      const propDecorators = typeOrFunc.propDecorators;
      const propMetadata = {};
      Object.keys(propDecorators).forEach((prop) => {
        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
      });
      return propMetadata;
    }
    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
      return typeOrFunc[PROP_METADATA];
    }
    return null;
  }
  propMetadata(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return {};
    }
    const parentCtor = getParentCtor(typeOrFunc);
    const propMetadata = {};
    if (parentCtor !== Object) {
      const parentPropMetadata = this.propMetadata(parentCtor);
      Object.keys(parentPropMetadata).forEach((propName) => {
        propMetadata[propName] = parentPropMetadata[propName];
      });
    }
    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
    if (ownPropMetadata) {
      Object.keys(ownPropMetadata).forEach((propName) => {
        const decorators = [];
        if (propMetadata.hasOwnProperty(propName)) {
          decorators.push(...propMetadata[propName]);
        }
        decorators.push(...ownPropMetadata[propName]);
        propMetadata[propName] = decorators;
      });
    }
    return propMetadata;
  }
  ownPropMetadata(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return {};
    }
    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
  }
  hasLifecycleHook(type, lcProperty) {
    return type instanceof Type && lcProperty in type.prototype;
  }
};
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
  if (!decoratorInvocations) {
    return [];
  }
  return decoratorInvocations.map((decoratorInvocation) => {
    const decoratorType = decoratorInvocation.type;
    const annotationCls = decoratorType.annotationCls;
    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
    return new annotationCls(...annotationArgs);
  });
}
function getParentCtor(ctor) {
  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
  const parentCtor = parentProto ? parentProto.constructor : null;
  return parentCtor || Object;
}
var HOST = 0;
var TVIEW = 1;
var FLAGS = 2;
var PARENT = 3;
var NEXT = 4;
var T_HOST = 5;
var HYDRATION = 6;
var CLEANUP = 7;
var CONTEXT = 8;
var INJECTOR = 9;
var ENVIRONMENT = 10;
var RENDERER = 11;
var CHILD_HEAD = 12;
var CHILD_TAIL = 13;
var DECLARATION_VIEW = 14;
var DECLARATION_COMPONENT_VIEW = 15;
var DECLARATION_LCONTAINER = 16;
var PREORDER_HOOK_FLAGS = 17;
var QUERIES = 18;
var ID = 19;
var EMBEDDED_VIEW_INJECTOR = 20;
var ON_DESTROY_HOOKS = 21;
var EFFECTS_TO_SCHEDULE = 22;
var EFFECTS = 23;
var REACTIVE_TEMPLATE_CONSUMER = 24;
var AFTER_RENDER_SEQUENCES_TO_ADD = 25;
var HEADER_OFFSET = 26;
var TYPE = 1;
var DEHYDRATED_VIEWS = 6;
var NATIVE = 7;
var VIEW_REFS = 8;
var MOVED_VIEWS = 9;
var CONTAINER_HEADER_OFFSET = 10;
function isLView(value) {
  return Array.isArray(value) && typeof value[TYPE] === "object";
}
function isLContainer(value) {
  return Array.isArray(value) && value[TYPE] === true;
}
function isContentQueryHost(tNode) {
  return (tNode.flags & 4) !== 0;
}
function isComponentHost(tNode) {
  return tNode.componentOffset > -1;
}
function isDirectiveHost(tNode) {
  return (tNode.flags & 1) === 1;
}
function isComponentDef(def) {
  return !!def.template;
}
function isRootView(target) {
  return (target[FLAGS] & 512) !== 0;
}
function isDestroyed(lView) {
  return (lView[FLAGS] & 256) === 256;
}
function assertTNodeForLView(tNode, lView) {
  assertTNodeForTView(tNode, lView[TVIEW]);
}
function assertTNodeForTView(tNode, tView) {
  assertTNode(tNode);
  const tData = tView.data;
  for (let i = HEADER_OFFSET; i < tData.length; i++) {
    if (tData[i] === tNode) {
      return;
    }
  }
  throwError2("This TNode does not belong to this TView.");
}
function assertTNode(tNode) {
  assertDefined(tNode, "TNode must be defined");
  if (!(tNode && typeof tNode === "object" && tNode.hasOwnProperty("directiveStylingLast"))) {
    throwError2("Not of type TNode, got: " + tNode);
  }
}
function assertTIcu(tIcu) {
  assertDefined(tIcu, "Expected TIcu to be defined");
  if (!(typeof tIcu.currentCaseLViewIndex === "number")) {
    throwError2("Object is not of TIcu type.");
  }
}
function assertComponentType(actual, msg = "Type passed in is not ComponentType, it does not have '\u0275cmp' property.") {
  if (!getComponentDef(actual)) {
    throwError2(msg);
  }
}
function assertNgModuleType(actual, msg = "Type passed in is not NgModuleType, it does not have '\u0275mod' property.") {
  if (!getNgModuleDef(actual)) {
    throwError2(msg);
  }
}
function assertHasParent(tNode) {
  assertDefined(tNode, "currentTNode should exist!");
  assertDefined(tNode.parent, "currentTNode should have a parent");
}
function assertLContainer(value) {
  assertDefined(value, "LContainer must be defined");
  assertEqual(isLContainer(value), true, "Expecting LContainer");
}
function assertLViewOrUndefined(value) {
  value && assertEqual(isLView(value), true, "Expecting LView or undefined or null");
}
function assertLView(value) {
  assertDefined(value, "LView must be defined");
  assertEqual(isLView(value), true, "Expecting LView");
}
function assertFirstCreatePass(tView, errMessage) {
  assertEqual(tView.firstCreatePass, true, errMessage || "Should only be called in first create pass.");
}
function assertFirstUpdatePass(tView, errMessage) {
  assertEqual(tView.firstUpdatePass, true, "Should only be called in first update pass.");
}
function assertDirectiveDef(obj) {
  if (obj.type === void 0 || obj.selectors == void 0 || obj.inputs === void 0) {
    throwError2(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);
  }
}
function assertIndexInDeclRange(tView, index) {
  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);
}
function assertIndexInExpandoRange(lView, index) {
  const tView = lView[1];
  assertBetween(tView.expandoStartIndex, lView.length, index);
}
function assertBetween(lower, upper, index) {
  if (!(lower <= index && index < upper)) {
    throwError2(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);
  }
}
function assertProjectionSlots(lView, errMessage) {
  assertDefined(lView[DECLARATION_COMPONENT_VIEW], "Component views should exist.");
  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, "Components with projection nodes (<ng-content>) must have projection slots defined.");
}
function assertParentView(lView, errMessage) {
  assertDefined(lView, "Component views should always have a parent view (component's host view)");
}
function assertNodeInjector(lView, injectorIndex) {
  assertIndexInExpandoRange(lView, injectorIndex);
  assertIndexInExpandoRange(
    lView,
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  );
  assertNumber(lView[injectorIndex + 0], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 1], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 2], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 3], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 4], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 5], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 6], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 7], "injectorIndex should point to a bloom filter");
  assertNumber(lView[
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ], "injectorIndex should point to parent injector");
}
var SimpleChange = class {
  previousValue;
  currentValue;
  firstChange;
  constructor(previousValue, currentValue, firstChange) {
    this.previousValue = previousValue;
    this.currentValue = currentValue;
    this.firstChange = firstChange;
  }
  /**
   * Check whether the new value is the first value assigned.
   */
  isFirstChange() {
    return this.firstChange;
  }
};
function applyValueToInputField(instance, inputSignalNode, privateName, value) {
  if (inputSignalNode !== null) {
    inputSignalNode.applyValueToInputSignal(inputSignalNode, value);
  } else {
    instance[privateName] = value;
  }
}
var \u0275\u0275NgOnChangesFeature = /* @__PURE__ */ (() => {
  const \u0275\u0275NgOnChangesFeatureImpl = () => NgOnChangesFeatureImpl;
  \u0275\u0275NgOnChangesFeatureImpl.ngInherit = true;
  return \u0275\u0275NgOnChangesFeatureImpl;
})();
function NgOnChangesFeatureImpl(definition) {
  if (definition.type.prototype.ngOnChanges) {
    definition.setInput = ngOnChangesSetInput;
  }
  return rememberChangeHistoryAndInvokeOnChangesHook;
}
function rememberChangeHistoryAndInvokeOnChangesHook() {
  const simpleChangesStore = getSimpleChangesStore(this);
  const current = simpleChangesStore?.current;
  if (current) {
    const previous = simpleChangesStore.previous;
    if (previous === EMPTY_OBJ) {
      simpleChangesStore.previous = current;
    } else {
      for (let key in current) {
        previous[key] = current[key];
      }
    }
    simpleChangesStore.current = null;
    this.ngOnChanges(current);
  }
}
function ngOnChangesSetInput(instance, inputSignalNode, value, publicName, privateName) {
  const declaredName = this.declaredInputs[publicName];
  ngDevMode && assertString(declaredName, "Name of input in ngOnChanges has to be a string");
  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {
    previous: EMPTY_OBJ,
    current: null
  });
  const current = simpleChangesStore.current || (simpleChangesStore.current = {});
  const previous = simpleChangesStore.previous;
  const previousChange = previous[declaredName];
  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
  applyValueToInputField(instance, inputSignalNode, privateName, value);
}
var SIMPLE_CHANGES_STORE = "__ngSimpleChanges__";
function getSimpleChangesStore(instance) {
  return instance[SIMPLE_CHANGES_STORE] || null;
}
function setSimpleChangesStore(instance, store2) {
  return instance[SIMPLE_CHANGES_STORE] = store2;
}
var profilerCallback = null;
var setProfiler = (profiler2) => {
  profilerCallback = profiler2;
};
var profiler = function(event, instance = null, hookOrListener) {
  if (profilerCallback != null) {
    profilerCallback(event, instance, hookOrListener);
  }
};
var SVG_NAMESPACE = "svg";
var MATH_ML_NAMESPACE = "math";
function unwrapRNode(value) {
  while (Array.isArray(value)) {
    value = value[HOST];
  }
  return value;
}
function unwrapLView(value) {
  while (Array.isArray(value)) {
    if (typeof value[TYPE] === "object") return value;
    value = value[HOST];
  }
  return null;
}
function getNativeByIndex(index, lView) {
  ngDevMode && assertIndexInRange(lView, index);
  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, "Expected to be past HEADER_OFFSET");
  return unwrapRNode(lView[index]);
}
function getNativeByTNode(tNode, lView) {
  ngDevMode && assertTNodeForLView(tNode, lView);
  ngDevMode && assertIndexInRange(lView, tNode.index);
  const node = unwrapRNode(lView[tNode.index]);
  return node;
}
function getTNode(tView, index) {
  ngDevMode && assertGreaterThan(index, -1, "wrong index for TNode");
  ngDevMode && assertLessThan(index, tView.data.length, "wrong index for TNode");
  const tNode = tView.data[index];
  ngDevMode && tNode !== null && assertTNode(tNode);
  return tNode;
}
function load(view, index) {
  ngDevMode && assertIndexInRange(view, index);
  return view[index];
}
function getComponentLViewByIndex(nodeIndex, hostView) {
  ngDevMode && assertIndexInRange(hostView, nodeIndex);
  const slotValue = hostView[nodeIndex];
  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];
  return lView;
}
function isCreationMode(view) {
  return (view[FLAGS] & 4) === 4;
}
function viewAttachedToChangeDetector(view) {
  return (view[FLAGS] & 128) === 128;
}
function viewAttachedToContainer(view) {
  return isLContainer(view[PARENT]);
}
function getConstant(consts, index) {
  if (index === null || index === void 0) return null;
  ngDevMode && assertIndexInRange(consts, index);
  return consts[index];
}
function resetPreOrderHookFlags(lView) {
  lView[PREORDER_HOOK_FLAGS] = 0;
}
function markViewForRefresh(lView) {
  if (lView[FLAGS] & 1024) {
    return;
  }
  lView[FLAGS] |= 1024;
  if (viewAttachedToChangeDetector(lView)) {
    markAncestorsForTraversal(lView);
  }
}
function walkUpViews(nestingLevel, currentView) {
  while (nestingLevel > 0) {
    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], "Declaration view should be defined if nesting level is greater than 0.");
    currentView = currentView[DECLARATION_VIEW];
    nestingLevel--;
  }
  return currentView;
}
function requiresRefreshOrTraversal(lView) {
  return !!(lView[FLAGS] & (1024 | 8192) || lView[REACTIVE_TEMPLATE_CONSUMER]?.dirty);
}
function updateAncestorTraversalFlagsOnAttach(lView) {
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(
    8
    /* NotificationSource.ViewAttached */
  );
  if (lView[FLAGS] & 64) {
    lView[FLAGS] |= 1024;
  }
  if (requiresRefreshOrTraversal(lView)) {
    markAncestorsForTraversal(lView);
  }
}
function markAncestorsForTraversal(lView) {
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(
    0
    /* NotificationSource.MarkAncestorsForTraversal */
  );
  let parent = getLViewParent(lView);
  while (parent !== null) {
    if (parent[FLAGS] & 8192) {
      break;
    }
    parent[FLAGS] |= 8192;
    if (!viewAttachedToChangeDetector(parent)) {
      break;
    }
    parent = getLViewParent(parent);
  }
}
function storeLViewOnDestroy(lView, onDestroyCallback) {
  if (isDestroyed(lView)) {
    throw new RuntimeError(911, ngDevMode && "View has already been destroyed.");
  }
  if (lView[ON_DESTROY_HOOKS] === null) {
    lView[ON_DESTROY_HOOKS] = [];
  }
  lView[ON_DESTROY_HOOKS].push(onDestroyCallback);
}
function removeLViewOnDestroy(lView, onDestroyCallback) {
  if (lView[ON_DESTROY_HOOKS] === null) return;
  const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);
  if (destroyCBIdx !== -1) {
    lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);
  }
}
function getLViewParent(lView) {
  ngDevMode && assertLView(lView);
  const parent = lView[PARENT];
  return isLContainer(parent) ? parent[PARENT] : parent;
}
function getOrCreateLViewCleanup(view) {
  return view[CLEANUP] ??= [];
}
function getOrCreateTViewCleanup(tView) {
  return tView.cleanup ??= [];
}
function storeCleanupWithContext(tView, lView, context2, cleanupFn) {
  const lCleanup = getOrCreateLViewCleanup(lView);
  ngDevMode && assertDefined(context2, "Cleanup context is mandatory when registering framework-level destroy hooks");
  lCleanup.push(context2);
  if (tView.firstCreatePass) {
    getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
  } else {
    if (ngDevMode) {
      Object.freeze(getOrCreateTViewCleanup(tView));
    }
  }
}
var instructionState = {
  lFrame: createLFrame(null),
  bindingsEnabled: true,
  skipHydrationRootTNode: null
};
var CheckNoChangesMode;
(function(CheckNoChangesMode2) {
  CheckNoChangesMode2[CheckNoChangesMode2["Off"] = 0] = "Off";
  CheckNoChangesMode2[CheckNoChangesMode2["Exhaustive"] = 1] = "Exhaustive";
  CheckNoChangesMode2[CheckNoChangesMode2["OnlyDirtyViews"] = 2] = "OnlyDirtyViews";
})(CheckNoChangesMode || (CheckNoChangesMode = {}));
var _checkNoChangesMode = 0;
var _isRefreshingViews = false;
function getElementDepthCount() {
  return instructionState.lFrame.elementDepthCount;
}
function increaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount++;
}
function decreaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount--;
}
function getBindingsEnabled() {
  return instructionState.bindingsEnabled;
}
function isInSkipHydrationBlock$1() {
  return instructionState.skipHydrationRootTNode !== null;
}
function isSkipHydrationRootTNode(tNode) {
  return instructionState.skipHydrationRootTNode === tNode;
}
function \u0275\u0275enableBindings() {
  instructionState.bindingsEnabled = true;
}
function \u0275\u0275disableBindings() {
  instructionState.bindingsEnabled = false;
}
function leaveSkipHydrationBlock() {
  instructionState.skipHydrationRootTNode = null;
}
function getLView() {
  return instructionState.lFrame.lView;
}
function getTView() {
  return instructionState.lFrame.tView;
}
function \u0275\u0275restoreView(viewToRestore) {
  instructionState.lFrame.contextLView = viewToRestore;
  return viewToRestore[CONTEXT];
}
function \u0275\u0275resetView(value) {
  instructionState.lFrame.contextLView = null;
  return value;
}
function getCurrentTNode() {
  let currentTNode = getCurrentTNodePlaceholderOk();
  while (currentTNode !== null && currentTNode.type === 64) {
    currentTNode = currentTNode.parent;
  }
  return currentTNode;
}
function getCurrentTNodePlaceholderOk() {
  return instructionState.lFrame.currentTNode;
}
function getCurrentParentTNode() {
  const lFrame = instructionState.lFrame;
  const currentTNode = lFrame.currentTNode;
  return lFrame.isParent ? currentTNode : currentTNode.parent;
}
function setCurrentTNode(tNode, isParent) {
  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);
  const lFrame = instructionState.lFrame;
  lFrame.currentTNode = tNode;
  lFrame.isParent = isParent;
}
function isCurrentTNodeParent() {
  return instructionState.lFrame.isParent;
}
function setCurrentTNodeAsNotParent() {
  instructionState.lFrame.isParent = false;
}
function getContextLView() {
  const contextLView = instructionState.lFrame.contextLView;
  ngDevMode && assertDefined(contextLView, "contextLView must be defined.");
  return contextLView;
}
function isInCheckNoChangesMode() {
  !ngDevMode && throwError2("Must never be called in production mode");
  return _checkNoChangesMode !== CheckNoChangesMode.Off;
}
function isExhaustiveCheckNoChanges() {
  !ngDevMode && throwError2("Must never be called in production mode");
  return _checkNoChangesMode === CheckNoChangesMode.Exhaustive;
}
function setIsInCheckNoChangesMode(mode) {
  !ngDevMode && throwError2("Must never be called in production mode");
  _checkNoChangesMode = mode;
}
function isRefreshingViews() {
  return _isRefreshingViews;
}
function setIsRefreshingViews(mode) {
  const prev = _isRefreshingViews;
  _isRefreshingViews = mode;
  return prev;
}
function getBindingRoot() {
  const lFrame = instructionState.lFrame;
  let index = lFrame.bindingRootIndex;
  if (index === -1) {
    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
  }
  return index;
}
function getBindingIndex() {
  return instructionState.lFrame.bindingIndex;
}
function setBindingIndex(value) {
  return instructionState.lFrame.bindingIndex = value;
}
function nextBindingIndex() {
  return instructionState.lFrame.bindingIndex++;
}
function incrementBindingIndex(count) {
  const lFrame = instructionState.lFrame;
  const index = lFrame.bindingIndex;
  lFrame.bindingIndex = lFrame.bindingIndex + count;
  return index;
}
function isInI18nBlock() {
  return instructionState.lFrame.inI18n;
}
function setInI18nBlock(isInI18nBlock2) {
  instructionState.lFrame.inI18n = isInI18nBlock2;
}
function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
  const lFrame = instructionState.lFrame;
  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
  setCurrentDirectiveIndex(currentDirectiveIndex);
}
function getCurrentDirectiveIndex() {
  return instructionState.lFrame.currentDirectiveIndex;
}
function setCurrentDirectiveIndex(currentDirectiveIndex) {
  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
}
function getCurrentDirectiveDef(tData) {
  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
}
function getCurrentQueryIndex() {
  return instructionState.lFrame.currentQueryIndex;
}
function setCurrentQueryIndex(value) {
  instructionState.lFrame.currentQueryIndex = value;
}
function getDeclarationTNode(lView) {
  const tView = lView[TVIEW];
  if (tView.type === 2) {
    ngDevMode && assertDefined(tView.declTNode, "Embedded TNodes should have declaration parents.");
    return tView.declTNode;
  }
  if (tView.type === 1) {
    return lView[T_HOST];
  }
  return null;
}
function enterDI(lView, tNode, flags) {
  ngDevMode && assertLViewOrUndefined(lView);
  if (flags & InjectFlags.SkipSelf) {
    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);
    let parentTNode = tNode;
    let parentLView = lView;
    while (true) {
      ngDevMode && assertDefined(parentTNode, "Parent TNode should be defined");
      parentTNode = parentTNode.parent;
      if (parentTNode === null && !(flags & InjectFlags.Host)) {
        parentTNode = getDeclarationTNode(parentLView);
        if (parentTNode === null) break;
        ngDevMode && assertDefined(parentLView, "Parent LView should be defined");
        parentLView = parentLView[DECLARATION_VIEW];
        if (parentTNode.type & (2 | 8)) {
          break;
        }
      } else {
        break;
      }
    }
    if (parentTNode === null) {
      return false;
    } else {
      tNode = parentTNode;
      lView = parentLView;
    }
  }
  ngDevMode && assertTNodeForLView(tNode, lView);
  const lFrame = instructionState.lFrame = allocLFrame();
  lFrame.currentTNode = tNode;
  lFrame.lView = lView;
  return true;
}
function enterView(newView) {
  ngDevMode && assertNotEqual(newView[0], newView[1], "????");
  ngDevMode && assertLViewOrUndefined(newView);
  const newLFrame = allocLFrame();
  if (ngDevMode) {
    assertEqual(newLFrame.isParent, true, "Expected clean LFrame");
    assertEqual(newLFrame.lView, null, "Expected clean LFrame");
    assertEqual(newLFrame.tView, null, "Expected clean LFrame");
    assertEqual(newLFrame.selectedIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.elementDepthCount, 0, "Expected clean LFrame");
    assertEqual(newLFrame.currentDirectiveIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.currentNamespace, null, "Expected clean LFrame");
    assertEqual(newLFrame.bindingRootIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.currentQueryIndex, 0, "Expected clean LFrame");
  }
  const tView = newView[TVIEW];
  instructionState.lFrame = newLFrame;
  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);
  newLFrame.currentTNode = tView.firstChild;
  newLFrame.lView = newView;
  newLFrame.tView = tView;
  newLFrame.contextLView = newView;
  newLFrame.bindingIndex = tView.bindingStartIndex;
  newLFrame.inI18n = false;
}
function allocLFrame() {
  const currentLFrame = instructionState.lFrame;
  const childLFrame = currentLFrame === null ? null : currentLFrame.child;
  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
  return newLFrame;
}
function createLFrame(parent) {
  const lFrame = {
    currentTNode: null,
    isParent: true,
    lView: null,
    tView: null,
    selectedIndex: -1,
    contextLView: null,
    elementDepthCount: 0,
    currentNamespace: null,
    currentDirectiveIndex: -1,
    bindingRootIndex: -1,
    bindingIndex: -1,
    currentQueryIndex: 0,
    parent,
    child: null,
    inI18n: false
  };
  parent !== null && (parent.child = lFrame);
  return lFrame;
}
function leaveViewLight() {
  const oldLFrame = instructionState.lFrame;
  instructionState.lFrame = oldLFrame.parent;
  oldLFrame.currentTNode = null;
  oldLFrame.lView = null;
  return oldLFrame;
}
var leaveDI = leaveViewLight;
function leaveView() {
  const oldLFrame = leaveViewLight();
  oldLFrame.isParent = true;
  oldLFrame.tView = null;
  oldLFrame.selectedIndex = -1;
  oldLFrame.contextLView = null;
  oldLFrame.elementDepthCount = 0;
  oldLFrame.currentDirectiveIndex = -1;
  oldLFrame.currentNamespace = null;
  oldLFrame.bindingRootIndex = -1;
  oldLFrame.bindingIndex = -1;
  oldLFrame.currentQueryIndex = 0;
}
function nextContextImpl(level) {
  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);
  return contextLView[CONTEXT];
}
function getSelectedIndex() {
  return instructionState.lFrame.selectedIndex;
}
function setSelectedIndex(index) {
  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, "Index must be past HEADER_OFFSET (or -1).");
  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, "Can't set index passed end of LView");
  instructionState.lFrame.selectedIndex = index;
}
function getSelectedTNode() {
  const lFrame = instructionState.lFrame;
  return getTNode(lFrame.tView, lFrame.selectedIndex);
}
function \u0275\u0275namespaceSVG() {
  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
}
function \u0275\u0275namespaceMathML() {
  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
}
function \u0275\u0275namespaceHTML() {
  namespaceHTMLInternal();
}
function namespaceHTMLInternal() {
  instructionState.lFrame.currentNamespace = null;
}
function getNamespace() {
  return instructionState.lFrame.currentNamespace;
}
var _wasLastNodeCreated = true;
function wasLastNodeCreated() {
  return _wasLastNodeCreated;
}
function lastNodeWasCreated(flag) {
  _wasLastNodeCreated = flag;
}
function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
  ngDevMode && assertFirstCreatePass(tView);
  const {
    ngOnChanges,
    ngOnInit,
    ngDoCheck
  } = directiveDef.type.prototype;
  if (ngOnChanges) {
    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
    (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);
    (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);
  }
  if (ngOnInit) {
    (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);
  }
  if (ngDoCheck) {
    (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);
    (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);
  }
}
function registerPostOrderHooks(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
    const directiveDef = tView.data[i];
    ngDevMode && assertDefined(directiveDef, "Expecting DirectiveDef");
    const lifecycleHooks = directiveDef.type.prototype;
    const {
      ngAfterContentInit,
      ngAfterContentChecked,
      ngAfterViewInit,
      ngAfterViewChecked,
      ngOnDestroy
    } = lifecycleHooks;
    if (ngAfterContentInit) {
      (tView.contentHooks ??= []).push(-i, ngAfterContentInit);
    }
    if (ngAfterContentChecked) {
      (tView.contentHooks ??= []).push(i, ngAfterContentChecked);
      (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);
    }
    if (ngAfterViewInit) {
      (tView.viewHooks ??= []).push(-i, ngAfterViewInit);
    }
    if (ngAfterViewChecked) {
      (tView.viewHooks ??= []).push(i, ngAfterViewChecked);
      (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);
    }
    if (ngOnDestroy != null) {
      (tView.destroyHooks ??= []).push(i, ngOnDestroy);
    }
  }
}
function executeCheckHooks(lView, hooks, nodeIndex) {
  callHooks(lView, hooks, 3, nodeIndex);
}
function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
  ngDevMode && assertNotEqual(initPhase, 3, "Init pre-order hooks should not be called more than once");
  if ((lView[FLAGS] & 3) === initPhase) {
    callHooks(lView, hooks, initPhase, nodeIndex);
  }
}
function incrementInitPhaseFlags(lView, initPhase) {
  ngDevMode && assertNotEqual(initPhase, 3, "Init hooks phase should not be incremented after all init hooks have been run.");
  let flags = lView[FLAGS];
  if ((flags & 3) === initPhase) {
    flags &= 16383;
    flags += 1;
    lView[FLAGS] = flags;
  }
}
function callHooks(currentView, arr, initPhase, currentNodeIndex) {
  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, "Hooks should never be run when in check no changes mode.");
  const startIndex = currentNodeIndex !== void 0 ? currentView[PREORDER_HOOK_FLAGS] & 65535 : 0;
  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
  const max = arr.length - 1;
  let lastNodeIndexFound = 0;
  for (let i = startIndex; i < max; i++) {
    const hook = arr[i + 1];
    if (typeof hook === "number") {
      lastNodeIndexFound = arr[i];
      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
        break;
      }
    } else {
      const isInitHook = arr[i] < 0;
      if (isInitHook) {
        currentView[PREORDER_HOOK_FLAGS] += 65536;
      }
      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
        callHook(currentView, initPhase, arr, i);
        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760) + i + 2;
      }
      i++;
    }
  }
}
function callHookInternal(directive, hook) {
  profiler(4, directive, hook);
  const prevConsumer = setActiveConsumer(null);
  try {
    hook.call(directive);
  } finally {
    setActiveConsumer(prevConsumer);
    profiler(5, directive, hook);
  }
}
function callHook(currentView, initPhase, arr, i) {
  const isInitHook = arr[i] < 0;
  const hook = arr[i + 1];
  const directiveIndex = isInitHook ? -arr[i] : arr[i];
  const directive = currentView[directiveIndex];
  if (isInitHook) {
    const indexWithintInitPhase = currentView[FLAGS] >> 14;
    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16 && (currentView[FLAGS] & 3) === initPhase) {
      currentView[FLAGS] += 16384;
      callHookInternal(directive, hook);
    }
  } else {
    callHookInternal(directive, hook);
  }
}
var NO_PARENT_INJECTOR = -1;
var NodeInjectorFactory = class {
  factory;
  /**
   * The inject implementation to be activated when using the factory.
   */
  injectImpl;
  /**
   * Marker set to true during factory invocation to see if we get into recursive loop.
   * Recursive loop causes an error to be displayed.
   */
  resolving = false;
  /**
   * Marks that the token can see other Tokens declared in `viewProviders` on the same node.
   */
  canSeeViewProviders;
  /**
   * An array of factories to use in case of `multi` provider.
   */
  multi;
  /**
   * Number of `multi`-providers which belong to the component.
   *
   * This is needed because when multiple components and directives declare the `multi` provider
   * they have to be concatenated in the correct order.
   *
   * Example:
   *
   * If we have a component and directive active an a single element as declared here
   * ```ts
   * component:
   *   providers: [ {provide: String, useValue: 'component', multi: true} ],
   *   viewProviders: [ {provide: String, useValue: 'componentView', multi: true} ],
   *
   * directive:
   *   providers: [ {provide: String, useValue: 'directive', multi: true} ],
   * ```
   *
   * Then the expected results are:
   *
   * ```ts
   * providers: ['component', 'directive']
   * viewProviders: ['component', 'componentView', 'directive']
   * ```
   *
   * The way to think about it is that the `viewProviders` have been inserted after the component
   * but before the directives, which is why we need to know how many `multi`s have been declared by
   * the component.
   */
  componentProviders;
  /**
   * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.
   * See `providerFactory`.
   */
  index;
  /**
   * Because the same `multi` provider can be declared in `providers` and `viewProviders` it is
   * possible for `viewProviders` to shadow the `providers`. For this reason we store the
   * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.
   *
   * Example:
   *
   * Given:
   * ```ts
   * providers: [ {provide: String, useValue: 'all', multi: true} ],
   * viewProviders: [ {provide: String, useValue: 'viewOnly', multi: true} ],
   * ```
   *
   * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case
   * of view injection. We further have to make sure that the shared instances (in our case
   * `all`) are the exact same instance in both the content as well as the view injection. (We
   * have to make sure that we don't double instantiate.) For this reason the `viewProviders`
   * `Factory` has a pointer to the shadowed `providers` factory so that it can instantiate the
   * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =
   * ['all', 'viewOnly']`).
   */
  providerFactory;
  constructor(factory, isViewProvider, injectImplementation) {
    this.factory = factory;
    ngDevMode && assertDefined(factory, "Factory not specified");
    ngDevMode && assertEqual(typeof factory, "function", "Expected factory function.");
    this.canSeeViewProviders = isViewProvider;
    this.injectImpl = injectImplementation;
  }
};
function toTNodeTypeAsString(tNodeType) {
  let text = "";
  tNodeType & 1 && (text += "|Text");
  tNodeType & 2 && (text += "|Element");
  tNodeType & 4 && (text += "|Container");
  tNodeType & 8 && (text += "|ElementContainer");
  tNodeType & 16 && (text += "|Projection");
  tNodeType & 32 && (text += "|IcuContainer");
  tNodeType & 64 && (text += "|Placeholder");
  tNodeType & 128 && (text += "|LetDeclaration");
  return text.length > 0 ? text.substring(1) : text;
}
function isTNodeShape(value) {
  return value != null && typeof value === "object" && (value.insertBeforeIndex === null || typeof value.insertBeforeIndex === "number" || Array.isArray(value.insertBeforeIndex));
}
function hasClassInput(tNode) {
  return (tNode.flags & 8) !== 0;
}
function hasStyleInput(tNode) {
  return (tNode.flags & 16) !== 0;
}
function assertTNodeType(tNode, expectedTypes, message) {
  assertDefined(tNode, "should be called with a TNode");
  if ((tNode.type & expectedTypes) === 0) {
    throwError2(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);
  }
}
function assertPureTNodeType(type) {
  if (!(type === 2 || type === 1 || type === 4 || type === 8 || type === 32 || type === 16 || type === 64 || type === 128)) {
    throwError2(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);
  }
}
function setUpAttributes(renderer, native, attrs) {
  let i = 0;
  while (i < attrs.length) {
    const value = attrs[i];
    if (typeof value === "number") {
      if (value !== 0) {
        break;
      }
      i++;
      const namespaceURI = attrs[i++];
      const attrName = attrs[i++];
      const attrVal = attrs[i++];
      ngDevMode && ngDevMode.rendererSetAttribute++;
      renderer.setAttribute(native, attrName, attrVal, namespaceURI);
    } else {
      const attrName = value;
      const attrVal = attrs[++i];
      ngDevMode && ngDevMode.rendererSetAttribute++;
      if (isAnimationProp(attrName)) {
        renderer.setProperty(native, attrName, attrVal);
      } else {
        renderer.setAttribute(native, attrName, attrVal);
      }
      i++;
    }
  }
  return i;
}
function isNameOnlyAttributeMarker(marker) {
  return marker === 3 || marker === 4 || marker === 6;
}
function isAnimationProp(name) {
  return name.charCodeAt(0) === 64;
}
function mergeHostAttrs(dst, src) {
  if (src === null || src.length === 0) ;
  else if (dst === null || dst.length === 0) {
    dst = src.slice();
  } else {
    let srcMarker = -1;
    for (let i = 0; i < src.length; i++) {
      const item = src[i];
      if (typeof item === "number") {
        srcMarker = item;
      } else {
        if (srcMarker === 0) ;
        else if (srcMarker === -1 || srcMarker === 2) {
          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
        } else {
          mergeHostAttribute(dst, srcMarker, item, null, null);
        }
      }
    }
  }
  return dst;
}
function mergeHostAttribute(dst, marker, key1, key2, value) {
  let i = 0;
  let markerInsertPosition = dst.length;
  if (marker === -1) {
    markerInsertPosition = -1;
  } else {
    while (i < dst.length) {
      const dstValue = dst[i++];
      if (typeof dstValue === "number") {
        if (dstValue === marker) {
          markerInsertPosition = -1;
          break;
        } else if (dstValue > marker) {
          markerInsertPosition = i - 1;
          break;
        }
      }
    }
  }
  while (i < dst.length) {
    const item = dst[i];
    if (typeof item === "number") {
      break;
    } else if (item === key1) {
      {
        if (value !== null) {
          dst[i + 1] = value;
        }
        return;
      }
    }
    i++;
    if (value !== null) i++;
  }
  if (markerInsertPosition !== -1) {
    dst.splice(markerInsertPosition, 0, marker);
    i = markerInsertPosition + 1;
  }
  dst.splice(i++, 0, key1);
  if (value !== null) {
    dst.splice(i++, 0, value);
  }
}
function hasParentInjector(parentLocation) {
  return parentLocation !== NO_PARENT_INJECTOR;
}
function getParentInjectorIndex(parentLocation) {
  if (ngDevMode) {
    assertNumber(parentLocation, "Number expected");
    assertNotEqual(parentLocation, -1, "Not a valid state.");
    const parentInjectorIndex = parentLocation & 32767;
    assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, "Parent injector must be pointing past HEADER_OFFSET.");
  }
  return parentLocation & 32767;
}
function getParentInjectorViewOffset(parentLocation) {
  return parentLocation >> 16;
}
function getParentInjectorView(location2, startView) {
  let viewOffset = getParentInjectorViewOffset(location2);
  let parentView = startView;
  while (viewOffset > 0) {
    parentView = parentView[DECLARATION_VIEW];
    viewOffset--;
  }
  return parentView;
}
var includeViewProviders = true;
function setIncludeViewProviders(v) {
  const oldValue = includeViewProviders;
  includeViewProviders = v;
  return oldValue;
}
var BLOOM_SIZE = 256;
var BLOOM_MASK = BLOOM_SIZE - 1;
var BLOOM_BUCKET_BITS = 5;
var nextNgElementId = 0;
var NOT_FOUND2 = {};
function bloomAdd(injectorIndex, tView, type) {
  ngDevMode && assertEqual(tView.firstCreatePass, true, "expected firstCreatePass to be true");
  let id;
  if (typeof type === "string") {
    id = type.charCodeAt(0) || 0;
  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
    id = type[NG_ELEMENT_ID];
  }
  if (id == null) {
    id = type[NG_ELEMENT_ID] = nextNgElementId++;
  }
  const bloomHash = id & BLOOM_MASK;
  const mask = 1 << bloomHash;
  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;
}
function getOrCreateNodeInjectorForNode(tNode, lView) {
  const existingInjectorIndex = getInjectorIndex(tNode, lView);
  if (existingInjectorIndex !== -1) {
    return existingInjectorIndex;
  }
  const tView = lView[TVIEW];
  if (tView.firstCreatePass) {
    tNode.injectorIndex = lView.length;
    insertBloom(tView.data, tNode);
    insertBloom(lView, null);
    insertBloom(tView.blueprint, null);
  }
  const parentLoc = getParentInjectorLocation(tNode, lView);
  const injectorIndex = tNode.injectorIndex;
  if (hasParentInjector(parentLoc)) {
    const parentIndex = getParentInjectorIndex(parentLoc);
    const parentLView = getParentInjectorView(parentLoc, lView);
    const parentData = parentLView[TVIEW].data;
    for (let i = 0; i < 8; i++) {
      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
    }
  }
  lView[
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ] = parentLoc;
  return injectorIndex;
}
function insertBloom(arr, footer) {
  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
}
function getInjectorIndex(tNode, lView) {
  if (tNode.injectorIndex === -1 || // If the injector index is the same as its parent's injector index, then the index has been
  // copied down from the parent node. No injector has been created yet on this node.
  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values
  // might not have been calculated yet for this instance
  lView[
    tNode.injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ] === null) {
    return -1;
  } else {
    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);
    return tNode.injectorIndex;
  }
}
function getParentInjectorLocation(tNode, lView) {
  if (tNode.parent && tNode.parent.injectorIndex !== -1) {
    return tNode.parent.injectorIndex;
  }
  let declarationViewOffset = 0;
  let parentTNode = null;
  let lViewCursor = lView;
  while (lViewCursor !== null) {
    parentTNode = getTNodeFromLView(lViewCursor);
    if (parentTNode === null) {
      return NO_PARENT_INJECTOR;
    }
    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);
    declarationViewOffset++;
    lViewCursor = lViewCursor[DECLARATION_VIEW];
    if (parentTNode.injectorIndex !== -1) {
      return parentTNode.injectorIndex | declarationViewOffset << 16;
    }
  }
  return NO_PARENT_INJECTOR;
}
function diPublicInInjector(injectorIndex, tView, token) {
  bloomAdd(injectorIndex, tView, token);
}
function injectAttributeImpl(tNode, attrNameToInject) {
  ngDevMode && assertTNodeType(
    tNode,
    12 | 3
    /* TNodeType.AnyRNode */
  );
  ngDevMode && assertDefined(tNode, "expecting tNode");
  if (attrNameToInject === "class") {
    return tNode.classes;
  }
  if (attrNameToInject === "style") {
    return tNode.styles;
  }
  const attrs = tNode.attrs;
  if (attrs) {
    const attrsLength = attrs.length;
    let i = 0;
    while (i < attrsLength) {
      const value = attrs[i];
      if (isNameOnlyAttributeMarker(value)) break;
      if (value === 0) {
        i = i + 2;
      } else if (typeof value === "number") {
        i++;
        while (i < attrsLength && typeof attrs[i] === "string") {
          i++;
        }
      } else if (value === attrNameToInject) {
        return attrs[i + 1];
      } else {
        i = i + 2;
      }
    }
  }
  return null;
}
function notFoundValueOrThrow(notFoundValue, token, flags) {
  if (flags & InjectFlags.Optional || notFoundValue !== void 0) {
    return notFoundValue;
  } else {
    throwProviderNotFoundError(token, "NodeInjector");
  }
}
function lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {
  if (flags & InjectFlags.Optional && notFoundValue === void 0) {
    notFoundValue = null;
  }
  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
    const moduleInjector = lView[INJECTOR];
    const previousInjectImplementation = setInjectImplementation(void 0);
    try {
      if (moduleInjector) {
        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
      } else {
        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
      }
    } finally {
      setInjectImplementation(previousInjectImplementation);
    }
  }
  return notFoundValueOrThrow(notFoundValue, token, flags);
}
function getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {
  if (tNode !== null) {
    if (lView[FLAGS] & 2048 && // The token must be present on the current node injector when the `Self`
    // flag is set, so the lookup on embedded view injector(s) can be skipped.
    !(flags & InjectFlags.Self)) {
      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND2);
      if (embeddedInjectorValue !== NOT_FOUND2) {
        return embeddedInjectorValue;
      }
    }
    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND2);
    if (value !== NOT_FOUND2) {
      return value;
    }
  }
  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
}
function lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {
  const bloomHash = bloomHashBitOrFactory(token);
  if (typeof bloomHash === "function") {
    if (!enterDI(lView, tNode, flags)) {
      return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
    }
    try {
      let value;
      if (ngDevMode) {
        runInInjectorProfilerContext(new NodeInjector(getCurrentTNode(), getLView()), token, () => {
          value = bloomHash(flags);
          if (value != null) {
            emitInstanceCreatedByInjectorEvent(value);
          }
        });
      } else {
        value = bloomHash(flags);
      }
      if (value == null && !(flags & InjectFlags.Optional)) {
        throwProviderNotFoundError(token);
      } else {
        return value;
      }
    } finally {
      leaveDI();
    }
  } else if (typeof bloomHash === "number") {
    let previousTView = null;
    let injectorIndex = getInjectorIndex(tNode, lView);
    let parentLocation = NO_PARENT_INJECTOR;
    let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;
    if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[
        injectorIndex + 8
        /* NodeInjectorOffset.PARENT */
      ];
      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {
        injectorIndex = -1;
      } else {
        previousTView = lView[TVIEW];
        injectorIndex = getParentInjectorIndex(parentLocation);
        lView = getParentInjectorView(parentLocation, lView);
      }
    }
    while (injectorIndex !== -1) {
      ngDevMode && assertNodeInjector(lView, injectorIndex);
      const tView = lView[TVIEW];
      ngDevMode && assertTNodeForLView(tView.data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ], lView);
      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
        const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);
        if (instance !== NOT_FOUND2) {
          return instance;
        }
      }
      parentLocation = lView[
        injectorIndex + 8
        /* NodeInjectorOffset.PARENT */
      ];
      if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {
        previousTView = tView;
        injectorIndex = getParentInjectorIndex(parentLocation);
        lView = getParentInjectorView(parentLocation, lView);
      } else {
        injectorIndex = -1;
      }
    }
  }
  return notFoundValue;
}
function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
  const currentTView = lView[TVIEW];
  const tNode = currentTView.data[
    injectorIndex + 8
    /* NodeInjectorOffset.TNODE */
  ];
  const canAccessViewProviders = previousTView == null ? (
    // 1) This is the first invocation `previousTView == null` which means that we are at the
    // `TNode` of where injector is starting to look. In such a case the only time we are allowed
    // to look into the ViewProviders is if:
    // - we are on a component
    // - AND the injector set `includeViewProviders` to true (implying that the token can see
    // ViewProviders because it is the Component or a Service which itself was declared in
    // ViewProviders)
    isComponentHost(tNode) && includeViewProviders
  ) : (
    // 2) `previousTView != null` which means that we are now walking across the parent nodes.
    // In such a case we are only allowed to look into the ViewProviders if:
    // - We just crossed from child View to Parent View `previousTView != currentTView`
    // - AND the parent TNode is an Element.
    // This means that we just came from the Component's View and therefore are allowed to see
    // into the ViewProviders.
    previousTView != currentTView && (tNode.type & 3) !== 0
  );
  const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;
  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);
  if (injectableIdx !== null) {
    return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
  } else {
    return NOT_FOUND2;
  }
}
function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
  const nodeProviderIndexes = tNode.providerIndexes;
  const tInjectables = tView.data;
  const injectablesStart = nodeProviderIndexes & 1048575;
  const directivesStart = tNode.directiveStart;
  const directiveEnd = tNode.directiveEnd;
  const cptViewProvidersCount = nodeProviderIndexes >> 20;
  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;
  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;
  for (let i = startingIndex; i < endIndex; i++) {
    const providerTokenOrDef = tInjectables[i];
    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {
      return i;
    }
  }
  if (isHostSpecialCase) {
    const dirDef = tInjectables[directivesStart];
    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
      return directivesStart;
    }
  }
  return null;
}
function getNodeInjectable(lView, tView, index, tNode) {
  let value = lView[index];
  const tData = tView.data;
  if (value instanceof NodeInjectorFactory) {
    const factory = value;
    if (factory.resolving) {
      throwCyclicDependencyError(stringifyForError(tData[index]));
    }
    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
    factory.resolving = true;
    let prevInjectContext;
    if (ngDevMode) {
      const token = tData[index].type || tData[index];
      const injector = new NodeInjector(tNode, lView);
      prevInjectContext = setInjectorProfilerContext({
        injector,
        token
      });
    }
    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;
    const success = enterDI(lView, tNode, InjectFlags.Default);
    ngDevMode && assertEqual(success, true, "Because flags do not contain `SkipSelf' we expect this to always succeed.");
    try {
      value = lView[index] = factory.factory(void 0, tData, lView, tNode);
      ngDevMode && emitInstanceCreatedByInjectorEvent(value);
      if (tView.firstCreatePass && index >= tNode.directiveStart) {
        ngDevMode && assertDirectiveDef(tData[index]);
        registerPreOrderHooks(index, tData[index], tView);
      }
    } finally {
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);
      setIncludeViewProviders(previousIncludeViewProviders);
      factory.resolving = false;
      leaveDI();
    }
  }
  return value;
}
function bloomHashBitOrFactory(token) {
  ngDevMode && assertDefined(token, "token must be defined");
  if (typeof token === "string") {
    return token.charCodeAt(0) || 0;
  }
  const tokenId = (
    // First check with `hasOwnProperty` so we don't get an inherited ID.
    token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : void 0
  );
  if (typeof tokenId === "number") {
    if (tokenId >= 0) {
      return tokenId & BLOOM_MASK;
    } else {
      ngDevMode && assertEqual(tokenId, -1, "Expecting to get Special Injector Id");
      return createNodeInjector;
    }
  } else {
    return tokenId;
  }
}
function bloomHasToken(bloomHash, injectorIndex, injectorView) {
  const mask = 1 << bloomHash;
  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];
  return !!(value & mask);
}
function shouldSearchParent(flags, isFirstHostTNode) {
  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
}
function getNodeInjectorLView(nodeInjector) {
  return nodeInjector._lView;
}
function getNodeInjectorTNode(nodeInjector) {
  return nodeInjector._tNode;
}
var NodeInjector = class {
  _tNode;
  _lView;
  constructor(_tNode, _lView) {
    this._tNode = _tNode;
    this._lView = _lView;
  }
  get(token, notFoundValue, flags) {
    return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);
  }
};
function createNodeInjector() {
  return new NodeInjector(getCurrentTNode(), getLView());
}
function \u0275\u0275getInheritedFactory(type) {
  return noSideEffects(() => {
    const ownConstructor = type.prototype.constructor;
    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);
    const objectPrototype = Object.prototype;
    let parent = Object.getPrototypeOf(type.prototype).constructor;
    while (parent && parent !== objectPrototype) {
      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);
      if (factory && factory !== ownFactory) {
        return factory;
      }
      parent = Object.getPrototypeOf(parent);
    }
    return (t) => new t();
  });
}
function getFactoryOf(type) {
  if (isForwardRef(type)) {
    return () => {
      const factory = getFactoryOf(resolveForwardRef(type));
      return factory && factory();
    };
  }
  return getFactoryDef(type);
}
function lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {
  let currentTNode = tNode;
  let currentLView = lView;
  while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 2048 && !isRootView(currentLView)) {
    ngDevMode && assertTNodeForLView(currentTNode, currentLView);
    const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND2);
    if (nodeInjectorValue !== NOT_FOUND2) {
      return nodeInjectorValue;
    }
    let parentTNode = currentTNode.parent;
    if (!parentTNode) {
      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];
      if (embeddedViewInjector) {
        const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND2, flags);
        if (embeddedViewInjectorValue !== NOT_FOUND2) {
          return embeddedViewInjectorValue;
        }
      }
      parentTNode = getTNodeFromLView(currentLView);
      currentLView = currentLView[DECLARATION_VIEW];
    }
    currentTNode = parentTNode;
  }
  return notFoundValue;
}
function getTNodeFromLView(lView) {
  const tView = lView[TVIEW];
  const tViewType = tView.type;
  if (tViewType === 2) {
    ngDevMode && assertDefined(tView.declTNode, "Embedded TNodes should have declaration parents.");
    return tView.declTNode;
  } else if (tViewType === 1) {
    return lView[T_HOST];
  }
  return null;
}
function \u0275\u0275injectAttribute(attrNameToInject) {
  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);
}
var Attribute = makeParamDecorator("Attribute", (attributeName) => ({
  attributeName,
  __NG_ELEMENT_ID__: () => \u0275\u0275injectAttribute(attributeName)
}));
var _reflect = null;
function getReflect() {
  return _reflect = _reflect || new ReflectionCapabilities();
}
function reflectDependencies(type) {
  return convertDependencies(getReflect().parameters(type));
}
function convertDependencies(deps) {
  return deps.map((dep) => reflectDependency(dep));
}
function reflectDependency(dep) {
  const meta = {
    token: null,
    attribute: null,
    host: false,
    optional: false,
    self: false,
    skipSelf: false
  };
  if (Array.isArray(dep) && dep.length > 0) {
    for (let j = 0; j < dep.length; j++) {
      const param = dep[j];
      if (param === void 0) {
        continue;
      }
      const proto = Object.getPrototypeOf(param);
      if (param instanceof Optional || proto.ngMetadataName === "Optional") {
        meta.optional = true;
      } else if (param instanceof SkipSelf || proto.ngMetadataName === "SkipSelf") {
        meta.skipSelf = true;
      } else if (param instanceof Self || proto.ngMetadataName === "Self") {
        meta.self = true;
      } else if (param instanceof Host || proto.ngMetadataName === "Host") {
        meta.host = true;
      } else if (param instanceof Inject) {
        meta.token = param.token;
      } else if (param instanceof Attribute) {
        if (param.attributeName === void 0) {
          throw new RuntimeError(204, ngDevMode && `Attribute name must be defined.`);
        }
        meta.attribute = param.attributeName;
      } else {
        meta.token = param;
      }
    }
  } else if (dep === void 0 || Array.isArray(dep) && dep.length === 0) {
    meta.token = null;
  } else {
    meta.token = dep;
  }
  return meta;
}
function compileInjectable(type, meta) {
  let ngInjectableDef = null;
  let ngFactoryDef = null;
  if (!type.hasOwnProperty(NG_PROV_DEF)) {
    Object.defineProperty(type, NG_PROV_DEF, {
      get: () => {
        if (ngInjectableDef === null) {
          const compiler = getCompilerFacade({
            usage: 0,
            kind: "injectable",
            type
          });
          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/\u0275prov.js`, getInjectableMetadata(type, meta));
        }
        return ngInjectableDef;
      }
    });
  }
  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
    Object.defineProperty(type, NG_FACTORY_DEF, {
      get: () => {
        if (ngFactoryDef === null) {
          const compiler = getCompilerFacade({
            usage: 0,
            kind: "injectable",
            type
          });
          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/\u0275fac.js`, {
            name: type.name,
            type,
            typeArgumentCount: 0,
            // In JIT mode types are not available nor used.
            deps: reflectDependencies(type),
            target: compiler.FactoryTarget.Injectable
          });
        }
        return ngFactoryDef;
      },
      // Leave this configurable so that the factories from directives or pipes can take precedence.
      configurable: true
    });
  }
}
var USE_VALUE = getClosureSafeProperty({
  provide: String,
  useValue: getClosureSafeProperty
});
function isUseClassProvider(meta) {
  return meta.useClass !== void 0;
}
function isUseValueProvider(meta) {
  return USE_VALUE in meta;
}
function isUseFactoryProvider(meta) {
  return meta.useFactory !== void 0;
}
function isUseExistingProvider(meta) {
  return meta.useExisting !== void 0;
}
function getInjectableMetadata(type, srcMeta) {
  const meta = srcMeta || {
    providedIn: null
  };
  const compilerMeta = {
    name: type.name,
    type,
    typeArgumentCount: 0,
    providedIn: meta.providedIn
  };
  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== void 0) {
    compilerMeta.deps = convertDependencies(meta.deps);
  }
  if (isUseClassProvider(meta)) {
    compilerMeta.useClass = meta.useClass;
  } else if (isUseValueProvider(meta)) {
    compilerMeta.useValue = meta.useValue;
  } else if (isUseFactoryProvider(meta)) {
    compilerMeta.useFactory = meta.useFactory;
  } else if (isUseExistingProvider(meta)) {
    compilerMeta.useExisting = meta.useExisting;
  }
  return compilerMeta;
}
var Injectable = makeDecorator("Injectable", void 0, void 0, void 0, (type, meta) => compileInjectable(type, meta));
function createInjector(defType, parent = null, additionalProviders = null, name) {
  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);
  injector.resolveInjectorInitializers();
  return injector;
}
function createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = /* @__PURE__ */ new Set()) {
  const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];
  name = name || (typeof defType === "object" ? void 0 : stringify(defType));
  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);
}
var Injector = class _Injector {
  static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
  static NULL = new NullInjector();
  static create(options, parent) {
    if (Array.isArray(options)) {
      return createInjector({
        name: ""
      }, parent, options, "");
    } else {
      const name = options.name ?? "";
      return createInjector({
        name
      }, options.parent, options.providers, name);
    }
  }
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _Injector,
      providedIn: "any",
      factory: () => \u0275\u0275inject(INJECTOR$1)
    })
  );
  /**
   * @internal
   * @nocollapse
   */
  static __NG_ELEMENT_ID__ = -1;
};
var HOST_TAG_NAME = new InjectionToken(ngDevMode ? "HOST_TAG_NAME" : "");
HOST_TAG_NAME.__NG_ELEMENT_ID__ = (flags) => {
  const tNode = getCurrentTNode();
  if (tNode === null) {
    throw new RuntimeError(204, ngDevMode && "HOST_TAG_NAME can only be injected in directives and components during construction time (in a class constructor or as a class field initializer)");
  }
  if (tNode.type & 2) {
    return tNode.value;
  }
  if (flags & InjectFlags.Optional) {
    return null;
  }
  throw new RuntimeError(204, ngDevMode && `HOST_TAG_NAME was used on ${getDevModeNodeName(tNode)} which doesn't have an underlying element in the DOM. This is invalid, and so the dependency should be marked as optional.`);
};
function getDevModeNodeName(tNode) {
  if (tNode.type & 8) {
    return "an <ng-container>";
  } else if (tNode.type & 4) {
    return "an <ng-template>";
  } else if (tNode.type & 128) {
    return "an @let declaration";
  } else {
    return "a node";
  }
}
var SCHEDULE_IN_ROOT_ZONE_DEFAULT = false;
var DestroyRef = class {
  /**
   * @internal
   * @nocollapse
   */
  static __NG_ELEMENT_ID__ = injectDestroyRef;
  /**
   * @internal
   * @nocollapse
   */
  static __NG_ENV_ID__ = (injector) => injector;
};
var NodeInjectorDestroyRef = class extends DestroyRef {
  _lView;
  constructor(_lView) {
    super();
    this._lView = _lView;
  }
  onDestroy(callback) {
    storeLViewOnDestroy(this._lView, callback);
    return () => removeLViewOnDestroy(this._lView, callback);
  }
};
function injectDestroyRef() {
  return new NodeInjectorDestroyRef(getLView());
}
var ChangeDetectionScheduler = class {
};
var ZONELESS_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Zoneless enabled" : "", {
  providedIn: "root",
  factory: () => false
});
var PROVIDED_ZONELESS = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Zoneless provided" : "", {
  providedIn: "root",
  factory: () => false
});
var ZONELESS_SCHEDULER_DISABLED = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "scheduler disabled" : "");
var SCHEDULE_IN_ROOT_ZONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "run changes outside zone in root" : "");
var PendingTasksInternal = class _PendingTasksInternal {
  taskId = 0;
  pendingTasks = /* @__PURE__ */ new Set();
  get _hasPendingTasks() {
    return this.hasPendingTasks.value;
  }
  hasPendingTasks = new BehaviorSubject(false);
  add() {
    if (!this._hasPendingTasks) {
      this.hasPendingTasks.next(true);
    }
    const taskId = this.taskId++;
    this.pendingTasks.add(taskId);
    return taskId;
  }
  has(taskId) {
    return this.pendingTasks.has(taskId);
  }
  remove(taskId) {
    this.pendingTasks.delete(taskId);
    if (this.pendingTasks.size === 0 && this._hasPendingTasks) {
      this.hasPendingTasks.next(false);
    }
  }
  ngOnDestroy() {
    this.pendingTasks.clear();
    if (this._hasPendingTasks) {
      this.hasPendingTasks.next(false);
    }
  }
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _PendingTasksInternal,
      providedIn: "root",
      factory: () => new _PendingTasksInternal()
    })
  );
};
var EventEmitter_ = class extends Subject {
  // tslint:disable-next-line:require-internal-with-underscore
  __isAsync;
  destroyRef = void 0;
  pendingTasks = void 0;
  constructor(isAsync = false) {
    super();
    this.__isAsync = isAsync;
    if (isInInjectionContext()) {
      this.destroyRef = inject(DestroyRef, {
        optional: true
      }) ?? void 0;
      this.pendingTasks = inject(PendingTasksInternal, {
        optional: true
      }) ?? void 0;
    }
  }
  emit(value) {
    const prevConsumer = setActiveConsumer(null);
    try {
      super.next(value);
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
  subscribe(observerOrNext, error, complete) {
    let nextFn = observerOrNext;
    let errorFn = error || (() => null);
    let completeFn = complete;
    if (observerOrNext && typeof observerOrNext === "object") {
      const observer = observerOrNext;
      nextFn = observer.next?.bind(observer);
      errorFn = observer.error?.bind(observer);
      completeFn = observer.complete?.bind(observer);
    }
    if (this.__isAsync) {
      errorFn = this.wrapInTimeout(errorFn);
      if (nextFn) {
        nextFn = this.wrapInTimeout(nextFn);
      }
      if (completeFn) {
        completeFn = this.wrapInTimeout(completeFn);
      }
    }
    const sink = super.subscribe({
      next: nextFn,
      error: errorFn,
      complete: completeFn
    });
    if (observerOrNext instanceof Subscription) {
      observerOrNext.add(sink);
    }
    return sink;
  }
  wrapInTimeout(fn) {
    return (value) => {
      const taskId = this.pendingTasks?.add();
      setTimeout(() => {
        fn(value);
        if (taskId !== void 0) {
          this.pendingTasks?.remove(taskId);
        }
      });
    };
  }
};
var EventEmitter = EventEmitter_;
function noop2(...args) {
}
function scheduleCallbackWithRafRace(callback) {
  let timeoutId;
  let animationFrameId;
  function cleanup() {
    callback = noop2;
    try {
      if (animationFrameId !== void 0 && typeof cancelAnimationFrame === "function") {
        cancelAnimationFrame(animationFrameId);
      }
      if (timeoutId !== void 0) {
        clearTimeout(timeoutId);
      }
    } catch {
    }
  }
  timeoutId = setTimeout(() => {
    callback();
    cleanup();
  });
  if (typeof requestAnimationFrame === "function") {
    animationFrameId = requestAnimationFrame(() => {
      callback();
      cleanup();
    });
  }
  return () => cleanup();
}
function scheduleCallbackWithMicrotask(callback) {
  queueMicrotask(() => callback());
  return () => {
    callback = noop2;
  };
}
var AsyncStackTaggingZoneSpec = class {
  createTask;
  constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {
    this.name = "asyncStackTagging for " + namePrefix;
    this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);
  }
  // ZoneSpec implementation below.
  name;
  onScheduleTask(delegate, _current, target, task) {
    task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);
    return delegate.scheduleTask(target, task);
  }
  onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {
    let ret;
    if (task.consoleTask) {
      ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));
    } else {
      ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);
    }
    return ret;
  }
};
var isAngularZoneProperty = "isAngularZone";
var angularZoneInstanceIdProperty = isAngularZoneProperty + "_ID";
var ngZoneInstanceId = 0;
var NgZone = class _NgZone {
  hasPendingMacrotasks = false;
  hasPendingMicrotasks = false;
  /**
   * Whether there are no outstanding microtasks or macrotasks.
   */
  isStable = true;
  /**
   * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
   */
  onUnstable = new EventEmitter(false);
  /**
   * Notifies when there is no more microtasks enqueued in the current VM Turn.
   * This is a hint for Angular to do change detection, which may enqueue more microtasks.
   * For this reason this event can fire multiple times per VM Turn.
   */
  onMicrotaskEmpty = new EventEmitter(false);
  /**
   * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
   * implies we are about to relinquish VM turn.
   * This event gets called just once.
   */
  onStable = new EventEmitter(false);
  /**
   * Notifies that an error has been delivered.
   */
  onError = new EventEmitter(false);
  constructor(options) {
    const {
      enableLongStackTrace = false,
      shouldCoalesceEventChangeDetection = false,
      shouldCoalesceRunChangeDetection = false,
      scheduleInRootZone = SCHEDULE_IN_ROOT_ZONE_DEFAULT
    } = options;
    if (typeof Zone == "undefined") {
      throw new RuntimeError(908, ngDevMode && `In this configuration Angular requires Zone.js`);
    }
    Zone.assertZonePatched();
    const self2 = this;
    self2._nesting = 0;
    self2._outer = self2._inner = Zone.current;
    if (ngDevMode) {
      self2._inner = self2._inner.fork(new AsyncStackTaggingZoneSpec("Angular"));
    }
    if (Zone["TaskTrackingZoneSpec"]) {
      self2._inner = self2._inner.fork(new Zone["TaskTrackingZoneSpec"]());
    }
    if (enableLongStackTrace && Zone["longStackTraceZoneSpec"]) {
      self2._inner = self2._inner.fork(Zone["longStackTraceZoneSpec"]);
    }
    self2.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;
    self2.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;
    self2.callbackScheduled = false;
    self2.scheduleInRootZone = scheduleInRootZone;
    forkInnerZoneWithAngularBehavior(self2);
  }
  /**
    This method checks whether the method call happens within an Angular Zone instance.
  */
  static isInAngularZone() {
    return typeof Zone !== "undefined" && Zone.current.get(isAngularZoneProperty) === true;
  }
  /**
    Assures that the method is called within the Angular Zone, otherwise throws an error.
  */
  static assertInAngularZone() {
    if (!_NgZone.isInAngularZone()) {
      throw new RuntimeError(909, ngDevMode && "Expected to be in Angular Zone, but it is not!");
    }
  }
  /**
    Assures that the method is called outside of the Angular Zone, otherwise throws an error.
  */
  static assertNotInAngularZone() {
    if (_NgZone.isInAngularZone()) {
      throw new RuntimeError(909, ngDevMode && "Expected to not be in Angular Zone, but it is!");
    }
  }
  /**
   * Executes the `fn` function synchronously within the Angular zone and returns value returned by
   * the function.
   *
   * Running functions via `run` allows you to reenter Angular zone from a task that was executed
   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * within the Angular zone.
   *
   * If a synchronous error happens it will be rethrown and not reported via `onError`.
   */
  run(fn, applyThis, applyArgs) {
    return this._inner.run(fn, applyThis, applyArgs);
  }
  /**
   * Executes the `fn` function synchronously within the Angular zone as a task and returns value
   * returned by the function.
   *
   * Running functions via `runTask` allows you to reenter Angular zone from a task that was executed
   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * within the Angular zone.
   *
   * If a synchronous error happens it will be rethrown and not reported via `onError`.
   */
  runTask(fn, applyThis, applyArgs, name) {
    const zone = this._inner;
    const task = zone.scheduleEventTask("NgZoneEvent: " + name, fn, EMPTY_PAYLOAD, noop2, noop2);
    try {
      return zone.runTask(task, applyThis, applyArgs);
    } finally {
      zone.cancelTask(task);
    }
  }
  /**
   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
   * rethrown.
   */
  runGuarded(fn, applyThis, applyArgs) {
    return this._inner.runGuarded(fn, applyThis, applyArgs);
  }
  /**
   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
   * the function.
   *
   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
   * work that
   * doesn't trigger Angular change-detection or is subject to Angular's error handling.
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * outside of the Angular zone.
   *
   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
   */
  runOutsideAngular(fn) {
    return this._outer.run(fn);
  }
};
var EMPTY_PAYLOAD = {};
function checkStable(zone) {
  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
    try {
      zone._nesting++;
      zone.onMicrotaskEmpty.emit(null);
    } finally {
      zone._nesting--;
      if (!zone.hasPendingMicrotasks) {
        try {
          zone.runOutsideAngular(() => zone.onStable.emit(null));
        } finally {
          zone.isStable = true;
        }
      }
    }
  }
}
function delayChangeDetectionForEvents(zone) {
  if (zone.isCheckStableRunning || zone.callbackScheduled) {
    return;
  }
  zone.callbackScheduled = true;
  function scheduleCheckStable() {
    scheduleCallbackWithRafRace(() => {
      zone.callbackScheduled = false;
      updateMicroTaskStatus(zone);
      zone.isCheckStableRunning = true;
      checkStable(zone);
      zone.isCheckStableRunning = false;
    });
  }
  if (zone.scheduleInRootZone) {
    Zone.root.run(() => {
      scheduleCheckStable();
    });
  } else {
    zone._outer.run(() => {
      scheduleCheckStable();
    });
  }
  updateMicroTaskStatus(zone);
}
function forkInnerZoneWithAngularBehavior(zone) {
  const delayChangeDetectionForEventsDelegate = () => {
    delayChangeDetectionForEvents(zone);
  };
  const instanceId = ngZoneInstanceId++;
  zone._inner = zone._inner.fork({
    name: "angular",
    properties: {
      [isAngularZoneProperty]: true,
      [angularZoneInstanceIdProperty]: instanceId,
      [angularZoneInstanceIdProperty + instanceId]: true
    },
    onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {
      if (shouldBeIgnoredByZone(applyArgs)) {
        return delegate.invokeTask(target, task, applyThis, applyArgs);
      }
      try {
        onEnter(zone);
        return delegate.invokeTask(target, task, applyThis, applyArgs);
      } finally {
        if (zone.shouldCoalesceEventChangeDetection && task.type === "eventTask" || zone.shouldCoalesceRunChangeDetection) {
          delayChangeDetectionForEventsDelegate();
        }
        onLeave(zone);
      }
    },
    onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {
      try {
        onEnter(zone);
        return delegate.invoke(target, callback, applyThis, applyArgs, source);
      } finally {
        if (zone.shouldCoalesceRunChangeDetection && // Do not delay change detection when the task is the scheduler's tick.
        // We need to synchronously trigger the stability logic so that the
        // zone-based scheduler can prevent a duplicate ApplicationRef.tick
        // by first checking if the scheduler tick is running. This does seem a bit roundabout,
        // but we _do_ still want to trigger all the correct events when we exit the zone.run
        // (`onMicrotaskEmpty` and `onStable` _should_ emit; developers can have code which
        // relies on these events happening after change detection runs).
        // Note: `zone.callbackScheduled` is already in delayChangeDetectionForEventsDelegate
        // but is added here as well to prevent reads of applyArgs when not necessary
        !zone.callbackScheduled && !isSchedulerTick(applyArgs)) {
          delayChangeDetectionForEventsDelegate();
        }
        onLeave(zone);
      }
    },
    onHasTask: (delegate, current, target, hasTaskState) => {
      delegate.hasTask(target, hasTaskState);
      if (current === target) {
        if (hasTaskState.change == "microTask") {
          zone._hasPendingMicrotasks = hasTaskState.microTask;
          updateMicroTaskStatus(zone);
          checkStable(zone);
        } else if (hasTaskState.change == "macroTask") {
          zone.hasPendingMacrotasks = hasTaskState.macroTask;
        }
      }
    },
    onHandleError: (delegate, current, target, error) => {
      delegate.handleError(target, error);
      zone.runOutsideAngular(() => zone.onError.emit(error));
      return false;
    }
  });
}
function updateMicroTaskStatus(zone) {
  if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.callbackScheduled === true) {
    zone.hasPendingMicrotasks = true;
  } else {
    zone.hasPendingMicrotasks = false;
  }
}
function onEnter(zone) {
  zone._nesting++;
  if (zone.isStable) {
    zone.isStable = false;
    zone.onUnstable.emit(null);
  }
}
function onLeave(zone) {
  zone._nesting--;
  checkStable(zone);
}
var NoopNgZone = class {
  hasPendingMicrotasks = false;
  hasPendingMacrotasks = false;
  isStable = true;
  onUnstable = new EventEmitter();
  onMicrotaskEmpty = new EventEmitter();
  onStable = new EventEmitter();
  onError = new EventEmitter();
  run(fn, applyThis, applyArgs) {
    return fn.apply(applyThis, applyArgs);
  }
  runGuarded(fn, applyThis, applyArgs) {
    return fn.apply(applyThis, applyArgs);
  }
  runOutsideAngular(fn) {
    return fn();
  }
  runTask(fn, applyThis, applyArgs, name) {
    return fn.apply(applyThis, applyArgs);
  }
};
function shouldBeIgnoredByZone(applyArgs) {
  return hasApplyArgsData(applyArgs, "__ignore_ng_zone__");
}
function isSchedulerTick(applyArgs) {
  return hasApplyArgsData(applyArgs, "__scheduler_tick__");
}
function hasApplyArgsData(applyArgs, key) {
  if (!Array.isArray(applyArgs)) {
    return false;
  }
  if (applyArgs.length !== 1) {
    return false;
  }
  return applyArgs[0]?.data?.[key] === true;
}
function getNgZone(ngZoneToUse = "zone.js", options) {
  if (ngZoneToUse === "noop") {
    return new NoopNgZone();
  }
  if (ngZoneToUse === "zone.js") {
    return new NgZone(options);
  }
  return ngZoneToUse;
}
var ErrorHandler = class {
  /**
   * @internal
   */
  _console = console;
  handleError(error) {
    this._console.error("ERROR", error);
  }
};
var INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "internal error handler" : "", {
  providedIn: "root",
  factory: () => {
    const zone = inject(NgZone);
    const userErrorHandler = inject(ErrorHandler);
    return (e2) => zone.runOutsideAngular(() => userErrorHandler.handleError(e2));
  }
});
var OutputEmitterRef = class {
  destroyed = false;
  listeners = null;
  errorHandler = inject(ErrorHandler, {
    optional: true
  });
  /** @internal */
  destroyRef = inject(DestroyRef);
  constructor() {
    this.destroyRef.onDestroy(() => {
      this.destroyed = true;
      this.listeners = null;
    });
  }
  subscribe(callback) {
    if (this.destroyed) {
      throw new RuntimeError(953, ngDevMode && "Unexpected subscription to destroyed `OutputRef`. The owning directive/component is destroyed.");
    }
    (this.listeners ??= []).push(callback);
    return {
      unsubscribe: () => {
        const idx = this.listeners?.indexOf(callback);
        if (idx !== void 0 && idx !== -1) {
          this.listeners?.splice(idx, 1);
        }
      }
    };
  }
  /** Emits a new value to the output. */
  emit(value) {
    if (this.destroyed) {
      console.warn(formatRuntimeError(953, ngDevMode && "Unexpected emit for destroyed `OutputRef`. The owning directive/component is destroyed."));
      return;
    }
    if (this.listeners === null) {
      return;
    }
    const previousConsumer = setActiveConsumer(null);
    try {
      for (const listenerFn of this.listeners) {
        try {
          listenerFn(value);
        } catch (err) {
          this.errorHandler?.handleError(err);
        }
      }
    } finally {
      setActiveConsumer(previousConsumer);
    }
  }
};
function output(opts) {
  ngDevMode && assertInInjectionContext(output);
  return new OutputEmitterRef();
}
function inputFunction(initialValue, opts) {
  ngDevMode && assertInInjectionContext(input);
  return createInputSignal(initialValue, opts);
}
function inputRequiredFunction(opts) {
  ngDevMode && assertInInjectionContext(input);
  return createInputSignal(REQUIRED_UNSET_VALUE, opts);
}
var input = (() => {
  inputFunction.required = inputRequiredFunction;
  return inputFunction;
})();
function injectElementRef() {
  return createElementRef(getCurrentTNode(), getLView());
}
function createElementRef(tNode, lView) {
  return new ElementRef(getNativeByTNode(tNode, lView));
}
var ElementRef = class {
  /**
   * <div class="callout is-critical">
   *   <header>Use with caution</header>
   *   <p>
   *    Use this API as the last resort when direct access to DOM is needed. Use templating and
   *    data-binding provided by Angular instead. Alternatively you can take a look at
   *    {@link Renderer2} which provides an API that can be safely used.
   *   </p>
   * </div>
   */
  nativeElement;
  constructor(nativeElement) {
    this.nativeElement = nativeElement;
  }
  /**
   * @internal
   * @nocollapse
   */
  static __NG_ELEMENT_ID__ = injectElementRef;
};
function unwrapElementRef(value) {
  return value instanceof ElementRef ? value.nativeElement : value;
}
function isSignal(value) {
  return typeof value === "function" && value[SIGNAL] !== void 0;
}
function signal(initialValue, options) {
  const signalFn = createSignal(initialValue, options?.equal);
  const node = signalFn[SIGNAL];
  signalFn.set = (newValue) => signalSetFn(node, newValue);
  signalFn.update = (updateFn) => signalUpdateFn(node, updateFn);
  signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn);
  if (ngDevMode) {
    signalFn.toString = () => `[Signal: ${signalFn()}]`;
    node.debugName = options?.debugName;
  }
  return signalFn;
}
function signalAsReadonlyFn() {
  const node = this[SIGNAL];
  if (node.readonlyFn === void 0) {
    const readonlyFn = () => this();
    readonlyFn[SIGNAL] = node;
    node.readonlyFn = readonlyFn;
  }
  return node.readonlyFn;
}
function isWritableSignal(value) {
  return isSignal(value) && typeof value.set === "function";
}
function symbolIterator() {
  return this._results[Symbol.iterator]();
}
var QueryList = class {
  _emitDistinctChangesOnly;
  dirty = true;
  _onDirty = void 0;
  _results = [];
  _changesDetected = false;
  _changes = void 0;
  length = 0;
  first = void 0;
  last = void 0;
  /**
   * Returns `Observable` of `QueryList` notifying the subscriber of changes.
   */
  get changes() {
    return this._changes ??= new Subject();
  }
  /**
   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change
   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in
   *     the same result)
   */
  constructor(_emitDistinctChangesOnly = false) {
    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;
  }
  /**
   * Returns the QueryList entry at `index`.
   */
  get(index) {
    return this._results[index];
  }
  /**
   * See
   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
   */
  map(fn) {
    return this._results.map(fn);
  }
  filter(fn) {
    return this._results.filter(fn);
  }
  /**
   * See
   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
   */
  find(fn) {
    return this._results.find(fn);
  }
  /**
   * See
   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
   */
  reduce(fn, init) {
    return this._results.reduce(fn, init);
  }
  /**
   * See
   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
   */
  forEach(fn) {
    this._results.forEach(fn);
  }
  /**
   * See
   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
   */
  some(fn) {
    return this._results.some(fn);
  }
  /**
   * Returns a copy of the internal results list as an Array.
   */
  toArray() {
    return this._results.slice();
  }
  toString() {
    return this._results.toString();
  }
  /**
   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
   * on change detection, it will not notify of changes to the queries, unless a new change
   * occurs.
   *
   * @param resultsTree The query results to store
   * @param identityAccessor Optional function for extracting stable object identity from a value
   *    in the array. This function is executed for each element of the query result list while
   *    comparing current query list with the new one (provided as a first argument of the `reset`
   *    function) to detect if the lists are different. If the function is not provided, elements
   *    are compared as is (without any pre-processing).
   */
  reset(resultsTree, identityAccessor) {
    this.dirty = false;
    const newResultFlat = flatten(resultsTree);
    if (this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor)) {
      this._results = newResultFlat;
      this.length = newResultFlat.length;
      this.last = newResultFlat[this.length - 1];
      this.first = newResultFlat[0];
    }
  }
  /**
   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
   */
  notifyOnChanges() {
    if (this._changes !== void 0 && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.next(this);
  }
  /** @internal */
  onDirty(cb) {
    this._onDirty = cb;
  }
  /** internal */
  setDirty() {
    this.dirty = true;
    this._onDirty?.();
  }
  /** internal */
  destroy() {
    if (this._changes !== void 0) {
      this._changes.complete();
      this._changes.unsubscribe();
    }
  }
  [Symbol.iterator] = /* @__PURE__ */ (() => symbolIterator)();
};
function hasInSkipHydrationBlockFlag(tNode) {
  return (tNode.flags & 128) === 128;
}
var ChangeDetectionStrategy;
(function(ChangeDetectionStrategy2) {
  ChangeDetectionStrategy2[ChangeDetectionStrategy2["OnPush"] = 0] = "OnPush";
  ChangeDetectionStrategy2[ChangeDetectionStrategy2["Default"] = 1] = "Default";
})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
var TRACKED_LVIEWS = /* @__PURE__ */ new Map();
var uniqueIdCounter = 0;
function getUniqueLViewId() {
  return uniqueIdCounter++;
}
function registerLView(lView) {
  ngDevMode && assertNumber(lView[ID], "LView must have an ID in order to be registered");
  TRACKED_LVIEWS.set(lView[ID], lView);
}
function getLViewById(id) {
  ngDevMode && assertNumber(id, "ID used for LView lookup must be a number");
  return TRACKED_LVIEWS.get(id) || null;
}
function unregisterLView(lView) {
  ngDevMode && assertNumber(lView[ID], "Cannot stop tracking an LView that does not have an ID");
  TRACKED_LVIEWS.delete(lView[ID]);
}
function getTrackedLViews() {
  return TRACKED_LVIEWS;
}
var LContext = class {
  lViewId;
  nodeIndex;
  native;
  /**
   * The instance of the Component node.
   */
  component;
  /**
   * The list of active directives that exist on this element.
   */
  directives;
  /**
   * The map of local references (local reference name => element or directive instance) that
   * exist on this element.
   */
  localRefs;
  /** Component's parent view data. */
  get lView() {
    return getLViewById(this.lViewId);
  }
  constructor(lViewId, nodeIndex, native) {
    this.lViewId = lViewId;
    this.nodeIndex = nodeIndex;
    this.native = native;
  }
};
function getLContext(target) {
  let mpValue = readPatchedData(target);
  if (mpValue) {
    if (isLView(mpValue)) {
      const lView = mpValue;
      let nodeIndex;
      let component = void 0;
      let directives = void 0;
      if (isComponentInstance(target)) {
        nodeIndex = findViaComponent(lView, target);
        if (nodeIndex == -1) {
          throw new Error("The provided component was not found in the application");
        }
        component = target;
      } else if (isDirectiveInstance(target)) {
        nodeIndex = findViaDirective(lView, target);
        if (nodeIndex == -1) {
          throw new Error("The provided directive was not found in the application");
        }
        directives = getDirectivesAtNodeIndex(nodeIndex, lView);
      } else {
        nodeIndex = findViaNativeElement(lView, target);
        if (nodeIndex == -1) {
          return null;
        }
      }
      const native = unwrapRNode(lView[nodeIndex]);
      const existingCtx = readPatchedData(native);
      const context2 = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);
      if (component && context2.component === void 0) {
        context2.component = component;
        attachPatchData(context2.component, context2);
      }
      if (directives && context2.directives === void 0) {
        context2.directives = directives;
        for (let i = 0; i < directives.length; i++) {
          attachPatchData(directives[i], context2);
        }
      }
      attachPatchData(context2.native, context2);
      mpValue = context2;
    }
  } else {
    const rElement = target;
    ngDevMode && assertDomNode(rElement);
    let parent = rElement;
    while (parent = parent.parentNode) {
      const parentContext = readPatchedData(parent);
      if (parentContext) {
        const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;
        if (!lView) {
          return null;
        }
        const index = findViaNativeElement(lView, rElement);
        if (index >= 0) {
          const native = unwrapRNode(lView[index]);
          const context2 = createLContext(lView, index, native);
          attachPatchData(native, context2);
          mpValue = context2;
          break;
        }
      }
    }
  }
  return mpValue || null;
}
function createLContext(lView, nodeIndex, native) {
  return new LContext(lView[ID], nodeIndex, native);
}
function getComponentViewByInstance(componentInstance) {
  let patchedData = readPatchedData(componentInstance);
  let lView;
  if (isLView(patchedData)) {
    const contextLView = patchedData;
    const nodeIndex = findViaComponent(contextLView, componentInstance);
    lView = getComponentLViewByIndex(nodeIndex, contextLView);
    const context2 = createLContext(contextLView, nodeIndex, lView[HOST]);
    context2.component = componentInstance;
    attachPatchData(componentInstance, context2);
    attachPatchData(context2.native, context2);
  } else {
    const context2 = patchedData;
    const contextLView = context2.lView;
    ngDevMode && assertLView(contextLView);
    lView = getComponentLViewByIndex(context2.nodeIndex, contextLView);
  }
  return lView;
}
var MONKEY_PATCH_KEY_NAME = "__ngContext__";
function attachPatchData(target, data) {
  ngDevMode && assertDefined(target, "Target expected");
  if (isLView(data)) {
    target[MONKEY_PATCH_KEY_NAME] = data[ID];
    registerLView(data);
  } else {
    target[MONKEY_PATCH_KEY_NAME] = data;
  }
}
function readPatchedData(target) {
  ngDevMode && assertDefined(target, "Target expected");
  const data = target[MONKEY_PATCH_KEY_NAME];
  return typeof data === "number" ? getLViewById(data) : data || null;
}
function readPatchedLView(target) {
  const value = readPatchedData(target);
  if (value) {
    return isLView(value) ? value : value.lView;
  }
  return null;
}
function isComponentInstance(instance) {
  return instance && instance.constructor && instance.constructor.\u0275cmp;
}
function isDirectiveInstance(instance) {
  return instance && instance.constructor && instance.constructor.\u0275dir;
}
function findViaNativeElement(lView, target) {
  const tView = lView[TVIEW];
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    if (unwrapRNode(lView[i]) === target) {
      return i;
    }
  }
  return -1;
}
function traverseNextElement(tNode) {
  if (tNode.child) {
    return tNode.child;
  } else if (tNode.next) {
    return tNode.next;
  } else {
    while (tNode.parent && !tNode.parent.next) {
      tNode = tNode.parent;
    }
    return tNode.parent && tNode.parent.next;
  }
}
function findViaComponent(lView, componentInstance) {
  const componentIndices = lView[TVIEW].components;
  if (componentIndices) {
    for (let i = 0; i < componentIndices.length; i++) {
      const elementComponentIndex = componentIndices[i];
      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);
      if (componentView[CONTEXT] === componentInstance) {
        return elementComponentIndex;
      }
    }
  } else {
    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
    const rootComponent = rootComponentView[CONTEXT];
    if (rootComponent === componentInstance) {
      return HEADER_OFFSET;
    }
  }
  return -1;
}
function findViaDirective(lView, directiveInstance) {
  let tNode = lView[TVIEW].firstChild;
  while (tNode) {
    const directiveIndexStart = tNode.directiveStart;
    const directiveIndexEnd = tNode.directiveEnd;
    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {
      if (lView[i] === directiveInstance) {
        return tNode.index;
      }
    }
    tNode = traverseNextElement(tNode);
  }
  return -1;
}
function getDirectivesAtNodeIndex(nodeIndex, lView) {
  const tNode = lView[TVIEW].data[nodeIndex];
  if (tNode.directiveStart === 0) return EMPTY_ARRAY;
  const results = [];
  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {
    const directiveInstance = lView[i];
    if (!isComponentInstance(directiveInstance)) {
      results.push(directiveInstance);
    }
  }
  return results;
}
function getComponentAtNodeIndex(nodeIndex, lView) {
  const tNode = lView[TVIEW].data[nodeIndex];
  return isComponentHost(tNode) ? lView[tNode.directiveStart + tNode.componentOffset] : null;
}
function getRootView(componentOrLView) {
  ngDevMode && assertDefined(componentOrLView, "component");
  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);
  while (lView && !isRootView(lView)) {
    lView = getLViewParent(lView);
  }
  ngDevMode && assertLView(lView);
  return lView;
}
function getRootContext(viewOrComponent) {
  const rootView = getRootView(viewOrComponent);
  ngDevMode && assertDefined(rootView[CONTEXT], "Root view has no context. Perhaps it is disconnected?");
  return rootView[CONTEXT];
}
function getFirstLContainer(lView) {
  return getNearestLContainer(lView[CHILD_HEAD]);
}
function getNextLContainer(container) {
  return getNearestLContainer(container[NEXT]);
}
function getNearestLContainer(viewOrContainer) {
  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
    viewOrContainer = viewOrContainer[NEXT];
  }
  return viewOrContainer;
}
function getComponent(element) {
  ngDevMode && assertDomElement(element);
  const context2 = getLContext(element);
  if (context2 === null) return null;
  if (context2.component === void 0) {
    const lView = context2.lView;
    if (lView === null) {
      return null;
    }
    context2.component = getComponentAtNodeIndex(context2.nodeIndex, lView);
  }
  return context2.component;
}
function getContext(element) {
  assertDomElement(element);
  const context2 = getLContext(element);
  const lView = context2 ? context2.lView : null;
  return lView === null ? null : lView[CONTEXT];
}
function getOwningComponent(elementOrDir) {
  const context2 = getLContext(elementOrDir);
  let lView = context2 ? context2.lView : null;
  if (lView === null) return null;
  let parent;
  while (lView[TVIEW].type === 2 && (parent = getLViewParent(lView))) {
    lView = parent;
  }
  return isRootView(lView) ? null : lView[CONTEXT];
}
function getRootComponents(elementOrDir) {
  const lView = readPatchedLView(elementOrDir);
  return lView !== null ? [getRootContext(lView)] : [];
}
function getInjector(elementOrDir) {
  const context2 = getLContext(elementOrDir);
  const lView = context2 ? context2.lView : null;
  if (lView === null) return Injector.NULL;
  const tNode = lView[TVIEW].data[context2.nodeIndex];
  return new NodeInjector(tNode, lView);
}
function getDirectives(node) {
  if (node instanceof Text) {
    return [];
  }
  const context2 = getLContext(node);
  const lView = context2 ? context2.lView : null;
  if (lView === null) {
    return [];
  }
  const tView = lView[TVIEW];
  const nodeIndex = context2.nodeIndex;
  if (!tView?.data[nodeIndex]) {
    return [];
  }
  if (context2.directives === void 0) {
    context2.directives = getDirectivesAtNodeIndex(nodeIndex, lView);
  }
  return context2.directives === null ? [] : [...context2.directives];
}
function getDirectiveMetadata$1(directiveOrComponentInstance) {
  const {
    constructor
  } = directiveOrComponentInstance;
  if (!constructor) {
    throw new Error("Unable to find the instance constructor");
  }
  const componentDef = getComponentDef(constructor);
  if (componentDef) {
    const inputs = extractInputDebugMetadata(componentDef.inputs);
    return {
      inputs,
      outputs: componentDef.outputs,
      encapsulation: componentDef.encapsulation,
      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default
    };
  }
  const directiveDef = getDirectiveDef(constructor);
  if (directiveDef) {
    const inputs = extractInputDebugMetadata(directiveDef.inputs);
    return {
      inputs,
      outputs: directiveDef.outputs
    };
  }
  return null;
}
function getHostElement(componentOrDirective) {
  return getLContext(componentOrDirective).native;
}
function getListeners(element) {
  ngDevMode && assertDomElement(element);
  const lContext = getLContext(element);
  const lView = lContext === null ? null : lContext.lView;
  if (lView === null) return [];
  const tView = lView[TVIEW];
  const lCleanup = lView[CLEANUP];
  const tCleanup = tView.cleanup;
  const listeners = [];
  if (tCleanup && lCleanup) {
    for (let i = 0; i < tCleanup.length; ) {
      const firstParam = tCleanup[i++];
      const secondParam = tCleanup[i++];
      if (typeof firstParam === "string") {
        const name = firstParam;
        const listenerElement = unwrapRNode(lView[secondParam]);
        const callback = lCleanup[tCleanup[i++]];
        const useCaptureOrIndx = tCleanup[i++];
        const type = typeof useCaptureOrIndx === "boolean" || useCaptureOrIndx >= 0 ? "dom" : "output";
        const useCapture = typeof useCaptureOrIndx === "boolean" ? useCaptureOrIndx : false;
        if (element == listenerElement) {
          listeners.push({
            element,
            name,
            callback,
            useCapture,
            type
          });
        }
      }
    }
  }
  listeners.sort(sortListeners);
  return listeners;
}
function sortListeners(a, b) {
  if (a.name == b.name) return 0;
  return a.name < b.name ? -1 : 1;
}
function assertDomElement(value) {
  if (typeof Element !== "undefined" && !(value instanceof Element)) {
    throw new Error("Expecting instance of DOM Element");
  }
}
function extractInputDebugMetadata(inputs) {
  const res = {};
  for (const key in inputs) {
    if (inputs.hasOwnProperty(key)) {
      const value = inputs[key];
      if (value !== void 0) {
        res[key] = value[0];
      }
    }
  }
  return res;
}
var DOCUMENT = void 0;
function setDocument(document2) {
  DOCUMENT = document2;
}
function getDocument() {
  if (DOCUMENT !== void 0) {
    return DOCUMENT;
  } else if (typeof document !== "undefined") {
    return document;
  }
  throw new RuntimeError(210, (typeof ngDevMode === "undefined" || ngDevMode) && `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`);
}
var APP_ID = new InjectionToken(ngDevMode ? "AppId" : "", {
  providedIn: "root",
  factory: () => DEFAULT_APP_ID
});
var DEFAULT_APP_ID = "ng";
var PLATFORM_INITIALIZER = new InjectionToken(ngDevMode ? "Platform Initializer" : "");
var PLATFORM_ID = new InjectionToken(ngDevMode ? "Platform ID" : "", {
  providedIn: "platform",
  factory: () => "unknown"
  // set a default platform name, when none set explicitly
});
var PACKAGE_ROOT_URL = new InjectionToken(ngDevMode ? "Application Packages Root URL" : "");
var ANIMATION_MODULE_TYPE = new InjectionToken(ngDevMode ? "AnimationModuleType" : "");
var CSP_NONCE = new InjectionToken(ngDevMode ? "CSP nonce" : "", {
  providedIn: "root",
  factory: () => {
    return getDocument().body?.querySelector("[ngCspNonce]")?.getAttribute("ngCspNonce") || null;
  }
});
var IMAGE_CONFIG_DEFAULTS = {
  breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],
  placeholderResolution: 30,
  disableImageSizeWarning: false,
  disableImageLazyLoadWarning: false
};
var IMAGE_CONFIG = new InjectionToken(ngDevMode ? "ImageConfig" : "", {
  providedIn: "root",
  factory: () => IMAGE_CONFIG_DEFAULTS
});
function makeStateKey(key) {
  return key;
}
function initTransferState() {
  const transferState = new TransferState();
  if (true) {
    transferState.store = retrieveTransferredState(getDocument(), inject(APP_ID));
  }
  return transferState;
}
var TransferState = class _TransferState {
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _TransferState,
      providedIn: "root",
      factory: initTransferState
    })
  );
  /** @internal */
  store = {};
  onSerializeCallbacks = {};
  /**
   * Get the value corresponding to a key. Return `defaultValue` if key is not found.
   */
  get(key, defaultValue) {
    return this.store[key] !== void 0 ? this.store[key] : defaultValue;
  }
  /**
   * Set the value corresponding to a key.
   */
  set(key, value) {
    this.store[key] = value;
  }
  /**
   * Remove a key from the store.
   */
  remove(key) {
    delete this.store[key];
  }
  /**
   * Test whether a key exists in the store.
   */
  hasKey(key) {
    return this.store.hasOwnProperty(key);
  }
  /**
   * Indicates whether the state is empty.
   */
  get isEmpty() {
    return Object.keys(this.store).length === 0;
  }
  /**
   * Register a callback to provide the value for a key when `toJson` is called.
   */
  onSerialize(key, callback) {
    this.onSerializeCallbacks[key] = callback;
  }
  /**
   * Serialize the current state of the store to JSON.
   */
  toJson() {
    for (const key in this.onSerializeCallbacks) {
      if (this.onSerializeCallbacks.hasOwnProperty(key)) {
        try {
          this.store[key] = this.onSerializeCallbacks[key]();
        } catch (e2) {
          console.warn("Exception in onSerialize callback: ", e2);
        }
      }
    }
    return JSON.stringify(this.store).replace(/</g, "\\u003C");
  }
};
function retrieveTransferredState(doc, appId) {
  const script = doc.getElementById(appId + "-state");
  if (script?.textContent) {
    try {
      return JSON.parse(script.textContent);
    } catch (e2) {
      console.warn("Exception while restoring TransferState for app " + appId, e2);
    }
  }
  return {};
}
var REFERENCE_NODE_HOST = "h";
var REFERENCE_NODE_BODY = "b";
var NUM_ROOT_NODES = "r";
var DEFER_BLOCK_ID = "di";
var DEFER_BLOCK_STATE$1 = "s";
var DEFER_PARENT_BLOCK_ID = "p";
var IS_HYDRATION_DOM_REUSE_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_HYDRATION_DOM_REUSE_ENABLED" : "");
var PRESERVE_HOST_CONTENT_DEFAULT = false;
var PRESERVE_HOST_CONTENT = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "PRESERVE_HOST_CONTENT" : "", {
  providedIn: "root",
  factory: () => PRESERVE_HOST_CONTENT_DEFAULT
});
var IS_I18N_HYDRATION_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_I18N_HYDRATION_ENABLED" : "");
var IS_EVENT_REPLAY_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_EVENT_REPLAY_ENABLED" : "");
var IS_INCREMENTAL_HYDRATION_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_INCREMENTAL_HYDRATION_ENABLED" : "");
var JSACTION_BLOCK_ELEMENT_MAP = new InjectionToken(ngDevMode ? "JSACTION_BLOCK_ELEMENT_MAP" : "", {
  providedIn: "root",
  factory: () => /* @__PURE__ */ new Map()
});
var TracingAction;
(function(TracingAction2) {
  TracingAction2[TracingAction2["CHANGE_DETECTION"] = 0] = "CHANGE_DETECTION";
  TracingAction2[TracingAction2["AFTER_NEXT_RENDER"] = 1] = "AFTER_NEXT_RENDER";
})(TracingAction || (TracingAction = {}));
var TracingService = new InjectionToken(ngDevMode ? "TracingService" : "");
var markedFeatures = /* @__PURE__ */ new Set();
function performanceMarkFeature(feature) {
  if (markedFeatures.has(feature)) {
    return;
  }
  markedFeatures.add(feature);
  performance?.mark?.("mark_feature_usage", {
    detail: {
      feature
    }
  });
}
function assertNotInReactiveContext(debugFn, extraContext) {
  if (getActiveConsumer() !== null) {
    throw new RuntimeError(-602, ngDevMode && `${debugFn.name}() cannot be called from within a reactive context.${extraContext ? ` ${extraContext}` : ""}`);
  }
}
var ViewContext = class {
  view;
  node;
  constructor(view, node) {
    this.view = view;
    this.node = node;
  }
  /**
   * @internal
   * @nocollapse
   */
  static __NG_ELEMENT_ID__ = injectViewContext;
};
function injectViewContext() {
  return new ViewContext(getLView(), getCurrentTNode());
}
var AfterRenderPhase;
(function(AfterRenderPhase2) {
  AfterRenderPhase2[AfterRenderPhase2["EarlyRead"] = 0] = "EarlyRead";
  AfterRenderPhase2[AfterRenderPhase2["Write"] = 1] = "Write";
  AfterRenderPhase2[AfterRenderPhase2["MixedReadWrite"] = 2] = "MixedReadWrite";
  AfterRenderPhase2[AfterRenderPhase2["Read"] = 3] = "Read";
})(AfterRenderPhase || (AfterRenderPhase = {}));
var AfterRenderManager = class _AfterRenderManager {
  impl = null;
  execute() {
    this.impl?.execute();
  }
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _AfterRenderManager,
      providedIn: "root",
      factory: () => new _AfterRenderManager()
    })
  );
};
var AFTER_RENDER_PHASES = /* @__PURE__ */ (() => [AfterRenderPhase.EarlyRead, AfterRenderPhase.Write, AfterRenderPhase.MixedReadWrite, AfterRenderPhase.Read])();
var AfterRenderImpl = class _AfterRenderImpl {
  ngZone = inject(NgZone);
  scheduler = inject(ChangeDetectionScheduler);
  errorHandler = inject(ErrorHandler, {
    optional: true
  });
  /** Current set of active sequences. */
  sequences = /* @__PURE__ */ new Set();
  /** Tracks registrations made during the current set of executions. */
  deferredRegistrations = /* @__PURE__ */ new Set();
  /** Whether the `AfterRenderManager` is currently executing hooks. */
  executing = false;
  constructor() {
    inject(TracingService, {
      optional: true
    });
  }
  /**
   * Run the sequence of phases of hooks, once through. As a result of executing some hooks, more
   * might be scheduled.
   */
  execute() {
    const hasSequencesToExecute = this.sequences.size > 0;
    if (hasSequencesToExecute) {
      profiler(
        16
        /* ProfilerEvent.AfterRenderHooksStart */
      );
    }
    this.executing = true;
    for (const phase of AFTER_RENDER_PHASES) {
      for (const sequence of this.sequences) {
        if (sequence.erroredOrDestroyed || !sequence.hooks[phase]) {
          continue;
        }
        try {
          sequence.pipelinedValue = this.ngZone.runOutsideAngular(() => this.maybeTrace(() => {
            const hookFn = sequence.hooks[phase];
            const value = hookFn(sequence.pipelinedValue);
            return value;
          }, sequence.snapshot));
        } catch (err) {
          sequence.erroredOrDestroyed = true;
          this.errorHandler?.handleError(err);
        }
      }
    }
    this.executing = false;
    for (const sequence of this.sequences) {
      sequence.afterRun();
      if (sequence.once) {
        this.sequences.delete(sequence);
        sequence.destroy();
      }
    }
    for (const sequence of this.deferredRegistrations) {
      this.sequences.add(sequence);
    }
    if (this.deferredRegistrations.size > 0) {
      this.scheduler.notify(
        7
        /* NotificationSource.RenderHook */
      );
    }
    this.deferredRegistrations.clear();
    if (hasSequencesToExecute) {
      profiler(
        17
        /* ProfilerEvent.AfterRenderHooksEnd */
      );
    }
  }
  register(sequence) {
    const {
      view
    } = sequence;
    if (view !== void 0) {
      (view[AFTER_RENDER_SEQUENCES_TO_ADD] ??= []).push(sequence);
      markAncestorsForTraversal(view);
      view[FLAGS] |= 8192;
    } else if (!this.executing) {
      this.addSequence(sequence);
    } else {
      this.deferredRegistrations.add(sequence);
    }
  }
  addSequence(sequence) {
    this.sequences.add(sequence);
    this.scheduler.notify(
      7
      /* NotificationSource.RenderHook */
    );
  }
  unregister(sequence) {
    if (this.executing && this.sequences.has(sequence)) {
      sequence.erroredOrDestroyed = true;
      sequence.pipelinedValue = void 0;
      sequence.once = true;
    } else {
      this.sequences.delete(sequence);
      this.deferredRegistrations.delete(sequence);
    }
  }
  maybeTrace(fn, snapshot) {
    return snapshot ? snapshot.run(TracingAction.AFTER_NEXT_RENDER, fn) : fn();
  }
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _AfterRenderImpl,
      providedIn: "root",
      factory: () => new _AfterRenderImpl()
    })
  );
};
var AfterRenderSequence = class {
  impl;
  hooks;
  view;
  once;
  snapshot;
  /**
   * Whether this sequence errored or was destroyed during this execution, and hooks should no
   * longer run for it.
   */
  erroredOrDestroyed = false;
  /**
   * The value returned by the last hook execution (if any), ready to be pipelined into the next
   * one.
   */
  pipelinedValue = void 0;
  unregisterOnDestroy;
  constructor(impl, hooks, view, once, destroyRef, snapshot = null) {
    this.impl = impl;
    this.hooks = hooks;
    this.view = view;
    this.once = once;
    this.snapshot = snapshot;
    this.unregisterOnDestroy = destroyRef?.onDestroy(() => this.destroy());
  }
  afterRun() {
    this.erroredOrDestroyed = false;
    this.pipelinedValue = void 0;
    this.snapshot?.dispose();
    this.snapshot = null;
  }
  destroy() {
    this.impl.unregister(this);
    this.unregisterOnDestroy?.();
    const scheduled2 = this.view?.[AFTER_RENDER_SEQUENCES_TO_ADD];
    if (scheduled2) {
      this.view[AFTER_RENDER_SEQUENCES_TO_ADD] = scheduled2.filter((s) => s !== this);
    }
  }
};
function afterRender(callbackOrSpec, options) {
  ngDevMode && assertNotInReactiveContext(afterRender, "Call `afterRender` outside of a reactive context. For example, schedule the render callback inside the component constructor`.");
  !options?.injector && assertInInjectionContext(afterRender);
  const injector = options?.injector ?? inject(Injector);
  if (false) {
    return NOOP_AFTER_RENDER_REF;
  }
  performanceMarkFeature("NgAfterRender");
  return afterRenderImpl(
    callbackOrSpec,
    injector,
    options,
    /* once */
    false
  );
}
function afterNextRender(callbackOrSpec, options) {
  !options?.injector && assertInInjectionContext(afterNextRender);
  const injector = options?.injector ?? inject(Injector);
  if (false) {
    return NOOP_AFTER_RENDER_REF;
  }
  performanceMarkFeature("NgAfterNextRender");
  return afterRenderImpl(
    callbackOrSpec,
    injector,
    options,
    /* once */
    true
  );
}
function getHooks(callbackOrSpec, phase) {
  if (callbackOrSpec instanceof Function) {
    const hooks = [void 0, void 0, void 0, void 0];
    hooks[phase] = callbackOrSpec;
    return hooks;
  } else {
    return [callbackOrSpec.earlyRead, callbackOrSpec.write, callbackOrSpec.mixedReadWrite, callbackOrSpec.read];
  }
}
function afterRenderImpl(callbackOrSpec, injector, options, once) {
  const manager = injector.get(AfterRenderManager);
  manager.impl ??= injector.get(AfterRenderImpl);
  const tracing = injector.get(TracingService, null, {
    optional: true
  });
  const hooks = options?.phase ?? AfterRenderPhase.MixedReadWrite;
  const destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;
  const viewContext = injector.get(ViewContext, null, {
    optional: true
  });
  const sequence = new AfterRenderSequence(manager.impl, getHooks(callbackOrSpec, hooks), viewContext?.view, once, destroyRef, tracing?.snapshot(null));
  manager.impl.register(sequence);
  return sequence;
}
var DeferDependenciesLoadingState;
(function(DeferDependenciesLoadingState2) {
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["NOT_STARTED"] = 0] = "NOT_STARTED";
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["IN_PROGRESS"] = 1] = "IN_PROGRESS";
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["COMPLETE"] = 2] = "COMPLETE";
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["FAILED"] = 3] = "FAILED";
})(DeferDependenciesLoadingState || (DeferDependenciesLoadingState = {}));
var MINIMUM_SLOT = 0;
var LOADING_AFTER_SLOT = 1;
var DeferBlockState;
(function(DeferBlockState2) {
  DeferBlockState2[DeferBlockState2["Placeholder"] = 0] = "Placeholder";
  DeferBlockState2[DeferBlockState2["Loading"] = 1] = "Loading";
  DeferBlockState2[DeferBlockState2["Complete"] = 2] = "Complete";
  DeferBlockState2[DeferBlockState2["Error"] = 3] = "Error";
})(DeferBlockState || (DeferBlockState = {}));
var DeferBlockInternalState;
(function(DeferBlockInternalState2) {
  DeferBlockInternalState2[DeferBlockInternalState2["Initial"] = -1] = "Initial";
})(DeferBlockInternalState || (DeferBlockInternalState = {}));
var NEXT_DEFER_BLOCK_STATE = 0;
var DEFER_BLOCK_STATE = 1;
var STATE_IS_FROZEN_UNTIL = 2;
var LOADING_AFTER_CLEANUP_FN = 3;
var TRIGGER_CLEANUP_FNS = 4;
var PREFETCH_TRIGGER_CLEANUP_FNS = 5;
var SSR_UNIQUE_ID = 6;
var SSR_BLOCK_STATE = 7;
var ON_COMPLETE_FNS = 8;
var HYDRATE_TRIGGER_CLEANUP_FNS = 9;
var DeferBlockBehavior;
(function(DeferBlockBehavior2) {
  DeferBlockBehavior2[DeferBlockBehavior2["Manual"] = 0] = "Manual";
  DeferBlockBehavior2[DeferBlockBehavior2["Playthrough"] = 1] = "Playthrough";
})(DeferBlockBehavior || (DeferBlockBehavior = {}));
function storeTriggerCleanupFn(type, lDetails, cleanupFn) {
  const key = getCleanupFnKeyByType(type);
  if (lDetails[key] === null) {
    lDetails[key] = [];
  }
  lDetails[key].push(cleanupFn);
}
function invokeTriggerCleanupFns(type, lDetails) {
  const key = getCleanupFnKeyByType(type);
  const cleanupFns = lDetails[key];
  if (cleanupFns !== null) {
    for (const cleanupFn of cleanupFns) {
      cleanupFn();
    }
    lDetails[key] = null;
  }
}
function invokeAllTriggerCleanupFns(lDetails) {
  invokeTriggerCleanupFns(1, lDetails);
  invokeTriggerCleanupFns(0, lDetails);
  invokeTriggerCleanupFns(2, lDetails);
}
function getCleanupFnKeyByType(type) {
  let key = TRIGGER_CLEANUP_FNS;
  if (type === 1) {
    key = PREFETCH_TRIGGER_CLEANUP_FNS;
  } else if (type === 2) {
    key = HYDRATE_TRIGGER_CLEANUP_FNS;
  }
  return key;
}
function getDeferBlockDataIndex(deferBlockIndex) {
  return deferBlockIndex + 1;
}
function getLDeferBlockDetails(lView, tNode) {
  const tView = lView[TVIEW];
  const slotIndex = getDeferBlockDataIndex(tNode.index);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  return lView[slotIndex];
}
function setLDeferBlockDetails(lView, deferBlockIndex, lDetails) {
  const tView = lView[TVIEW];
  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  lView[slotIndex] = lDetails;
}
function getTDeferBlockDetails(tView, tNode) {
  const slotIndex = getDeferBlockDataIndex(tNode.index);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  return tView.data[slotIndex];
}
function setTDeferBlockDetails(tView, deferBlockIndex, deferBlockConfig) {
  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  tView.data[slotIndex] = deferBlockConfig;
}
function getTemplateIndexForState(newState, hostLView, tNode) {
  const tView = hostLView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  switch (newState) {
    case DeferBlockState.Complete:
      return tDetails.primaryTmplIndex;
    case DeferBlockState.Loading:
      return tDetails.loadingTmplIndex;
    case DeferBlockState.Error:
      return tDetails.errorTmplIndex;
    case DeferBlockState.Placeholder:
      return tDetails.placeholderTmplIndex;
    default:
      ngDevMode && throwError2(`Unexpected defer block state: ${newState}`);
      return null;
  }
}
function getMinimumDurationForState(tDetails, currentState) {
  if (currentState === DeferBlockState.Placeholder) {
    return tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null;
  } else if (currentState === DeferBlockState.Loading) {
    return tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null;
  }
  return null;
}
function getLoadingBlockAfter(tDetails) {
  return tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null;
}
function addDepsToRegistry(currentDeps, newDeps) {
  if (!currentDeps || currentDeps.length === 0) {
    return newDeps;
  }
  const currentDepSet = new Set(currentDeps);
  for (const dep of newDeps) {
    currentDepSet.add(dep);
  }
  return currentDeps.length === currentDepSet.size ? currentDeps : Array.from(currentDepSet);
}
function getPrimaryBlockTNode(tView, tDetails) {
  const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;
  return getTNode(tView, adjustedIndex);
}
function assertDeferredDependenciesLoaded(tDetails) {
  assertEqual(tDetails.loadingState, DeferDependenciesLoadingState.COMPLETE, "Expecting all deferred dependencies to be loaded.");
}
function isTDeferBlockDetails(value) {
  return value !== null && typeof value === "object" && typeof value.primaryTmplIndex === "number";
}
function trackTriggerForDebugging(tView, tNode, textRepresentation) {
  const tDetails = getTDeferBlockDetails(tView, tNode);
  tDetails.debug ??= {};
  tDetails.debug.triggers ??= /* @__PURE__ */ new Set();
  tDetails.debug.triggers.add(textRepresentation);
}
var eventListenerOptions = {
  passive: true,
  capture: true
};
var hoverTriggers = /* @__PURE__ */ new WeakMap();
var interactionTriggers = /* @__PURE__ */ new WeakMap();
var viewportTriggers = /* @__PURE__ */ new WeakMap();
var interactionEventNames = ["click", "keydown"];
var hoverEventNames = ["mouseenter", "mouseover", "focusin"];
var intersectionObserver = null;
var observedViewportElements = 0;
var DeferEventEntry = class {
  callbacks = /* @__PURE__ */ new Set();
  listener = () => {
    for (const callback of this.callbacks) {
      callback();
    }
  };
};
function onInteraction(trigger, callback) {
  let entry = interactionTriggers.get(trigger);
  if (!entry) {
    entry = new DeferEventEntry();
    interactionTriggers.set(trigger, entry);
    for (const name of interactionEventNames) {
      trigger.addEventListener(name, entry.listener, eventListenerOptions);
    }
  }
  entry.callbacks.add(callback);
  return () => {
    const {
      callbacks,
      listener
    } = entry;
    callbacks.delete(callback);
    if (callbacks.size === 0) {
      interactionTriggers.delete(trigger);
      for (const name of interactionEventNames) {
        trigger.removeEventListener(name, listener, eventListenerOptions);
      }
    }
  };
}
function onHover(trigger, callback) {
  let entry = hoverTriggers.get(trigger);
  if (!entry) {
    entry = new DeferEventEntry();
    hoverTriggers.set(trigger, entry);
    for (const name of hoverEventNames) {
      trigger.addEventListener(name, entry.listener, eventListenerOptions);
    }
  }
  entry.callbacks.add(callback);
  return () => {
    const {
      callbacks,
      listener
    } = entry;
    callbacks.delete(callback);
    if (callbacks.size === 0) {
      for (const name of hoverEventNames) {
        trigger.removeEventListener(name, listener, eventListenerOptions);
      }
      hoverTriggers.delete(trigger);
    }
  };
}
function onViewport(trigger, callback, injector) {
  const ngZone = injector.get(NgZone);
  let entry = viewportTriggers.get(trigger);
  intersectionObserver = intersectionObserver || ngZone.runOutsideAngular(() => {
    return new IntersectionObserver((entries) => {
      for (const current of entries) {
        if (current.isIntersecting && viewportTriggers.has(current.target)) {
          ngZone.run(viewportTriggers.get(current.target).listener);
        }
      }
    });
  });
  if (!entry) {
    entry = new DeferEventEntry();
    ngZone.runOutsideAngular(() => intersectionObserver.observe(trigger));
    viewportTriggers.set(trigger, entry);
    observedViewportElements++;
  }
  entry.callbacks.add(callback);
  return () => {
    if (!viewportTriggers.has(trigger)) {
      return;
    }
    entry.callbacks.delete(callback);
    if (entry.callbacks.size === 0) {
      intersectionObserver?.unobserve(trigger);
      viewportTriggers.delete(trigger);
      observedViewportElements--;
    }
    if (observedViewportElements === 0) {
      intersectionObserver?.disconnect();
      intersectionObserver = null;
    }
  };
}
function getTriggerLView(deferredHostLView, deferredTNode, walkUpTimes) {
  if (walkUpTimes == null) {
    return deferredHostLView;
  }
  if (walkUpTimes >= 0) {
    return walkUpViews(walkUpTimes, deferredHostLView);
  }
  const deferredContainer = deferredHostLView[deferredTNode.index];
  ngDevMode && assertLContainer(deferredContainer);
  const triggerLView = deferredContainer[CONTAINER_HEADER_OFFSET] ?? null;
  if (ngDevMode && triggerLView !== null) {
    const lDetails = getLDeferBlockDetails(deferredHostLView, deferredTNode);
    const renderedState = lDetails[DEFER_BLOCK_STATE];
    assertEqual(renderedState, DeferBlockState.Placeholder, "Expected a placeholder to be rendered in this defer block.");
    assertLView(triggerLView);
  }
  return triggerLView;
}
function getTriggerElement(triggerLView, triggerIndex) {
  const element = getNativeByIndex(HEADER_OFFSET + triggerIndex, triggerLView);
  ngDevMode && assertElement(element);
  return element;
}
function registerDomTrigger(initialLView, tNode, triggerIndex, walkUpTimes, registerFn, callback, type) {
  const injector = initialLView[INJECTOR];
  const zone = injector.get(NgZone);
  let poll;
  function pollDomTrigger() {
    if (isDestroyed(initialLView)) {
      poll.destroy();
      return;
    }
    const lDetails = getLDeferBlockDetails(initialLView, tNode);
    const renderedState = lDetails[DEFER_BLOCK_STATE];
    if (renderedState !== DeferBlockInternalState.Initial && renderedState !== DeferBlockState.Placeholder) {
      poll.destroy();
      return;
    }
    const triggerLView = getTriggerLView(initialLView, tNode, walkUpTimes);
    if (!triggerLView) {
      return;
    }
    poll.destroy();
    if (isDestroyed(triggerLView)) {
      return;
    }
    const element = getTriggerElement(triggerLView, triggerIndex);
    const cleanup = registerFn(element, () => {
      zone.run(() => {
        if (initialLView !== triggerLView) {
          removeLViewOnDestroy(triggerLView, cleanup);
        }
        callback();
      });
    }, injector);
    if (initialLView !== triggerLView) {
      storeLViewOnDestroy(triggerLView, cleanup);
    }
    storeTriggerCleanupFn(type, lDetails, cleanup);
  }
  poll = afterRender({
    read: pollDomTrigger
  }, {
    injector
  });
}
var JSACTION_EVENT_CONTRACT = new InjectionToken(ngDevMode ? "EVENT_CONTRACT_DETAILS" : "", {
  providedIn: "root",
  factory: () => ({})
});
var DEHYDRATED_BLOCK_REGISTRY = new InjectionToken(ngDevMode ? "DEHYDRATED_BLOCK_REGISTRY" : "");
var TRANSFER_STATE_TOKEN_ID = "__nghData__";
var NGH_DATA_KEY = makeStateKey(TRANSFER_STATE_TOKEN_ID);
var TRANSFER_STATE_DEFER_BLOCKS_INFO = "__nghDeferData__";
var NGH_DEFER_BLOCKS_KEY = makeStateKey(TRANSFER_STATE_DEFER_BLOCKS_INFO);
var _retrieveHydrationInfoImpl = () => null;
function retrieveHydrationInfo(rNode, injector, isRootView2 = false) {
  return _retrieveHydrationInfoImpl(rNode, injector, isRootView2);
}
function getLNodeForHydration(viewRef) {
  let lView = viewRef._lView;
  const tView = lView[TVIEW];
  if (tView.type === 2) {
    return null;
  }
  if (isRootView(lView)) {
    lView = lView[HEADER_OFFSET];
  }
  return lView;
}
var HydrationStatus;
(function(HydrationStatus2) {
  HydrationStatus2["Hydrated"] = "hydrated";
  HydrationStatus2["Skipped"] = "skipped";
  HydrationStatus2["Mismatched"] = "mismatched";
})(HydrationStatus || (HydrationStatus = {}));
var HYDRATION_INFO_KEY = "__ngDebugHydrationInfo__";
function patchHydrationInfo(node, info) {
  node[HYDRATION_INFO_KEY] = info;
}
function markRNodeAsHavingHydrationMismatch(node, expectedNodeDetails = null, actualNodeDetails = null) {
  if (!ngDevMode) {
    throw new Error("Calling `markRNodeAsMismatchedByHydration` in prod mode is not supported and likely a mistake.");
  }
  while (node && !getComponent(node)) {
    node = node?.parentNode;
  }
  if (node) {
    patchHydrationInfo(node, {
      status: HydrationStatus.Mismatched,
      expectedNodeDetails,
      actualNodeDetails
    });
  }
}
function isIncrementalHydrationEnabled(injector) {
  return injector.get(IS_INCREMENTAL_HYDRATION_ENABLED, false, {
    optional: true
  });
}
function assertIncrementalHydrationIsConfigured(injector) {
  if (!isIncrementalHydrationEnabled(injector)) {
    throw new RuntimeError(508, "Angular has detected that some `@defer` blocks use `hydrate` triggers, but incremental hydration was not enabled. Please ensure that the `withIncrementalHydration()` call is added as an argument for the `provideClientHydration()` function call in your application config.");
  }
}
function assertSsrIdDefined(ssrUniqueId) {
  assertDefined(ssrUniqueId, "Internal error: expecting an SSR id for a defer block that should be hydrated, but the id is not present");
}
function getParentBlockHydrationQueue(deferBlockId, injector) {
  const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
  const transferState = injector.get(TransferState);
  const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});
  let isTopMostDeferBlock = false;
  let currentBlockId = deferBlockId;
  let parentBlockPromise = null;
  const hydrationQueue = [];
  while (!isTopMostDeferBlock && currentBlockId) {
    ngDevMode && assertEqual(hydrationQueue.indexOf(currentBlockId), -1, "Internal error: defer block hierarchy has a cycle.");
    isTopMostDeferBlock = dehydratedBlockRegistry.has(currentBlockId);
    const hydratingParentBlock = dehydratedBlockRegistry.hydrating.get(currentBlockId);
    if (parentBlockPromise === null && hydratingParentBlock != null) {
      parentBlockPromise = hydratingParentBlock.promise;
      break;
    }
    hydrationQueue.unshift(currentBlockId);
    currentBlockId = deferBlockParents[currentBlockId][DEFER_PARENT_BLOCK_ID];
  }
  return {
    parentBlockPromise,
    hydrationQueue
  };
}
function refreshContentQueries(tView, lView) {
  const contentQueries = tView.contentQueries;
  if (contentQueries !== null) {
    const prevConsumer = setActiveConsumer(null);
    try {
      for (let i = 0; i < contentQueries.length; i += 2) {
        const queryStartIdx = contentQueries[i];
        const directiveDefIdx = contentQueries[i + 1];
        if (directiveDefIdx !== -1) {
          const directiveDef = tView.data[directiveDefIdx];
          ngDevMode && assertDefined(directiveDef, "DirectiveDef not found.");
          ngDevMode && assertDefined(directiveDef.contentQueries, "contentQueries function should be defined");
          setCurrentQueryIndex(queryStartIdx);
          directiveDef.contentQueries(2, lView[directiveDefIdx], directiveDefIdx);
        }
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function executeViewQueryFn(flags, viewQueryFn, component) {
  ngDevMode && assertDefined(viewQueryFn, "View queries function to execute must be defined.");
  setCurrentQueryIndex(0);
  const prevConsumer = setActiveConsumer(null);
  try {
    viewQueryFn(flags, component);
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function executeContentQueries(tView, tNode, lView) {
  if (isContentQueryHost(tNode)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const start = tNode.directiveStart;
      const end = tNode.directiveEnd;
      for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
        const def = tView.data[directiveIndex];
        if (def.contentQueries) {
          const directiveInstance = lView[directiveIndex];
          ngDevMode && assertDefined(directiveIndex, "Incorrect reference to a directive defining a content query");
          def.contentQueries(1, directiveInstance, directiveIndex);
        }
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
var ViewEncapsulation;
(function(ViewEncapsulation2) {
  ViewEncapsulation2[ViewEncapsulation2["Emulated"] = 0] = "Emulated";
  ViewEncapsulation2[ViewEncapsulation2["None"] = 2] = "None";
  ViewEncapsulation2[ViewEncapsulation2["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation || (ViewEncapsulation = {}));
var policy$1;
function getPolicy$1() {
  if (policy$1 === void 0) {
    policy$1 = null;
    if (_global.trustedTypes) {
      try {
        policy$1 = _global.trustedTypes.createPolicy("angular", {
          createHTML: (s) => s,
          createScript: (s) => s,
          createScriptURL: (s) => s
        });
      } catch {
      }
    }
  }
  return policy$1;
}
function trustedHTMLFromString(html) {
  return getPolicy$1()?.createHTML(html) || html;
}
function trustedScriptURLFromString(url) {
  return getPolicy$1()?.createScriptURL(url) || url;
}
var policy;
function getPolicy() {
  if (policy === void 0) {
    policy = null;
    if (_global.trustedTypes) {
      try {
        policy = _global.trustedTypes.createPolicy("angular#unsafe-bypass", {
          createHTML: (s) => s,
          createScript: (s) => s,
          createScriptURL: (s) => s
        });
      } catch {
      }
    }
  }
  return policy;
}
function trustedHTMLFromStringBypass(html) {
  return getPolicy()?.createHTML(html) || html;
}
function trustedScriptFromStringBypass(script) {
  return getPolicy()?.createScript(script) || script;
}
function trustedScriptURLFromStringBypass(url) {
  return getPolicy()?.createScriptURL(url) || url;
}
var SafeValueImpl = class {
  changingThisBreaksApplicationSecurity;
  constructor(changingThisBreaksApplicationSecurity) {
    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
  }
  toString() {
    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see ${XSS_SECURITY_URL})`;
  }
};
var SafeHtmlImpl = class extends SafeValueImpl {
  getTypeName() {
    return "HTML";
  }
};
var SafeStyleImpl = class extends SafeValueImpl {
  getTypeName() {
    return "Style";
  }
};
var SafeScriptImpl = class extends SafeValueImpl {
  getTypeName() {
    return "Script";
  }
};
var SafeUrlImpl = class extends SafeValueImpl {
  getTypeName() {
    return "URL";
  }
};
var SafeResourceUrlImpl = class extends SafeValueImpl {
  getTypeName() {
    return "ResourceURL";
  }
};
function unwrapSafeValue(value) {
  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;
}
function allowSanitizationBypassAndThrow(value, type) {
  const actualType = getSanitizationBypassType(value);
  if (actualType != null && actualType !== type) {
    if (actualType === "ResourceURL" && type === "URL") return true;
    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);
  }
  return actualType === type;
}
function getSanitizationBypassType(value) {
  return value instanceof SafeValueImpl && value.getTypeName() || null;
}
function bypassSanitizationTrustHtml(trustedHtml) {
  return new SafeHtmlImpl(trustedHtml);
}
function bypassSanitizationTrustStyle(trustedStyle) {
  return new SafeStyleImpl(trustedStyle);
}
function bypassSanitizationTrustScript(trustedScript) {
  return new SafeScriptImpl(trustedScript);
}
function bypassSanitizationTrustUrl(trustedUrl) {
  return new SafeUrlImpl(trustedUrl);
}
function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
  return new SafeResourceUrlImpl(trustedResourceUrl);
}
function getInertBodyHelper(defaultDoc) {
  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);
  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;
}
var DOMParserHelper = class {
  inertDocumentHelper;
  constructor(inertDocumentHelper) {
    this.inertDocumentHelper = inertDocumentHelper;
  }
  getInertBodyElement(html) {
    html = "<body><remove></remove>" + html;
    try {
      const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), "text/html").body;
      if (body === null) {
        return this.inertDocumentHelper.getInertBodyElement(html);
      }
      body.firstChild?.remove();
      return body;
    } catch {
      return null;
    }
  }
};
var InertDocumentHelper = class {
  defaultDoc;
  inertDocument;
  constructor(defaultDoc) {
    this.defaultDoc = defaultDoc;
    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument("sanitization-inert");
  }
  getInertBodyElement(html) {
    const templateEl = this.inertDocument.createElement("template");
    templateEl.innerHTML = trustedHTMLFromString(html);
    return templateEl;
  }
};
function isDOMParserAvailable() {
  try {
    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(""), "text/html");
  } catch {
    return false;
  }
}
var SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\/?#]*(?:[\/?#]|$))/i;
function _sanitizeUrl(url) {
  url = String(url);
  if (url.match(SAFE_URL_PATTERN)) return url;
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);
  }
  return "unsafe:" + url;
}
function tagSet(tags) {
  const res = {};
  for (const t of tags.split(",")) res[t] = true;
  return res;
}
function merge(...sets) {
  const res = {};
  for (const s of sets) {
    for (const v in s) {
      if (s.hasOwnProperty(v)) res[v] = true;
    }
  }
  return res;
}
var VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr");
var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr");
var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt");
var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul"));
var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video"));
var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
var URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href");
var HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width");
var ARIA_ATTRS = tagSet("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext");
var VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);
var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet("script,style,template");
var SanitizingHtmlSerializer = class {
  // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
  // because characters were re-encoded.
  sanitizedSomething = false;
  buf = [];
  sanitizeChildren(el) {
    let current = el.firstChild;
    let traverseContent = true;
    let parentNodes = [];
    while (current) {
      if (current.nodeType === Node.ELEMENT_NODE) {
        traverseContent = this.startElement(current);
      } else if (current.nodeType === Node.TEXT_NODE) {
        this.chars(current.nodeValue);
      } else {
        this.sanitizedSomething = true;
      }
      if (traverseContent && current.firstChild) {
        parentNodes.push(current);
        current = getFirstChild(current);
        continue;
      }
      while (current) {
        if (current.nodeType === Node.ELEMENT_NODE) {
          this.endElement(current);
        }
        let next = getNextSibling(current);
        if (next) {
          current = next;
          break;
        }
        current = parentNodes.pop();
      }
    }
    return this.buf.join("");
  }
  /**
   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
   * be traversed. Element content must always be traversed (even if the element itself is not
   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
   *
   * @param element The element to sanitize.
   * @return True if the element's contents should be traversed.
   */
  startElement(element) {
    const tagName = getNodeName(element).toLowerCase();
    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
      this.sanitizedSomething = true;
      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
    }
    this.buf.push("<");
    this.buf.push(tagName);
    const elAttrs = element.attributes;
    for (let i = 0; i < elAttrs.length; i++) {
      const elAttr = elAttrs.item(i);
      const attrName = elAttr.name;
      const lower = attrName.toLowerCase();
      if (!VALID_ATTRS.hasOwnProperty(lower)) {
        this.sanitizedSomething = true;
        continue;
      }
      let value = elAttr.value;
      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);
      this.buf.push(" ", attrName, '="', encodeEntities(value), '"');
    }
    this.buf.push(">");
    return true;
  }
  endElement(current) {
    const tagName = getNodeName(current).toLowerCase();
    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
      this.buf.push("</");
      this.buf.push(tagName);
      this.buf.push(">");
    }
  }
  chars(chars) {
    this.buf.push(encodeEntities(chars));
  }
};
function isClobberedElement(parentNode, childNode) {
  return (parentNode.compareDocumentPosition(childNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) !== Node.DOCUMENT_POSITION_CONTAINED_BY;
}
function getNextSibling(node) {
  const nextSibling = node.nextSibling;
  if (nextSibling && node !== nextSibling.previousSibling) {
    throw clobberedElementError(nextSibling);
  }
  return nextSibling;
}
function getFirstChild(node) {
  const firstChild = node.firstChild;
  if (firstChild && isClobberedElement(node, firstChild)) {
    throw clobberedElementError(firstChild);
  }
  return firstChild;
}
function getNodeName(node) {
  const nodeName = node.nodeName;
  return typeof nodeName === "string" ? nodeName : "FORM";
}
function clobberedElementError(node) {
  return new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);
}
var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
function encodeEntities(value) {
  return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(match2) {
    const hi = match2.charCodeAt(0);
    const low = match2.charCodeAt(1);
    return "&#" + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ";";
  }).replace(NON_ALPHANUMERIC_REGEXP, function(match2) {
    return "&#" + match2.charCodeAt(0) + ";";
  }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
var inertBodyHelper;
function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
  let inertBodyElement = null;
  try {
    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);
    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "";
    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    let mXSSAttempts = 5;
    let parsedHtml = unsafeHtml;
    do {
      if (mXSSAttempts === 0) {
        throw new Error("Failed to sanitize html because the input is unstable");
      }
      mXSSAttempts--;
      unsafeHtml = parsedHtml;
      parsedHtml = inertBodyElement.innerHTML;
      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    } while (unsafeHtml !== parsedHtml);
    const sanitizer = new SanitizingHtmlSerializer();
    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);
    if ((typeof ngDevMode === "undefined" || ngDevMode) && sanitizer.sanitizedSomething) {
      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);
    }
    return trustedHTMLFromString(safeHtml);
  } finally {
    if (inertBodyElement) {
      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;
      while (parent.firstChild) {
        parent.firstChild.remove();
      }
    }
  }
}
function getTemplateContent(el) {
  return "content" in el && isTemplateElement(el) ? el.content : null;
}
function isTemplateElement(el) {
  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === "TEMPLATE";
}
var SecurityContext;
(function(SecurityContext2) {
  SecurityContext2[SecurityContext2["NONE"] = 0] = "NONE";
  SecurityContext2[SecurityContext2["HTML"] = 1] = "HTML";
  SecurityContext2[SecurityContext2["STYLE"] = 2] = "STYLE";
  SecurityContext2[SecurityContext2["SCRIPT"] = 3] = "SCRIPT";
  SecurityContext2[SecurityContext2["URL"] = 4] = "URL";
  SecurityContext2[SecurityContext2["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(SecurityContext || (SecurityContext = {}));
function \u0275\u0275sanitizeHtml(unsafeHtml) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeHtml,
    "HTML"
    /* BypassType.Html */
  )) {
    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));
  }
  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
}
function \u0275\u0275sanitizeStyle(unsafeStyle) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || "";
  }
  if (allowSanitizationBypassAndThrow(
    unsafeStyle,
    "Style"
    /* BypassType.Style */
  )) {
    return unwrapSafeValue(unsafeStyle);
  }
  return renderStringify(unsafeStyle);
}
function \u0275\u0275sanitizeUrl(unsafeUrl) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || "";
  }
  if (allowSanitizationBypassAndThrow(
    unsafeUrl,
    "URL"
    /* BypassType.Url */
  )) {
    return unwrapSafeValue(unsafeUrl);
  }
  return _sanitizeUrl(renderStringify(unsafeUrl));
}
function \u0275\u0275sanitizeResourceUrl(unsafeResourceUrl) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeResourceUrl,
    "ResourceURL"
    /* BypassType.ResourceUrl */
  )) {
    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));
  }
  throw new RuntimeError(904, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);
}
function \u0275\u0275sanitizeScript(unsafeScript) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeScript,
    "Script"
    /* BypassType.Script */
  )) {
    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));
  }
  throw new RuntimeError(905, ngDevMode && "unsafe value used in a script context");
}
function \u0275\u0275trustConstantHtml(html) {
  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {
    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join("?")}`);
  }
  return trustedHTMLFromString(html[0]);
}
function \u0275\u0275trustConstantResourceUrl(url) {
  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {
    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join("?")}`);
  }
  return trustedScriptURLFromString(url[0]);
}
function getUrlSanitizer(tag, prop) {
  if (prop === "src" && (tag === "embed" || tag === "frame" || tag === "iframe" || tag === "media" || tag === "script") || prop === "href" && (tag === "base" || tag === "link")) {
    return \u0275\u0275sanitizeResourceUrl;
  }
  return \u0275\u0275sanitizeUrl;
}
function \u0275\u0275sanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
  return getUrlSanitizer(tag, prop)(unsafeUrl);
}
function validateAgainstEventProperties(name) {
  if (name.toLowerCase().startsWith("on")) {
    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...
If '${name}' is a directive input, make sure the directive is imported by the current module.`;
    throw new RuntimeError(306, errorMessage);
  }
}
function validateAgainstEventAttributes(name) {
  if (name.toLowerCase().startsWith("on")) {
    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...`;
    throw new RuntimeError(306, errorMessage);
  }
}
function getSanitizer() {
  const lView = getLView();
  return lView && lView[ENVIRONMENT].sanitizer;
}
var COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;
var COMMENT_DELIMITER = /(<|>)/g;
var COMMENT_DELIMITER_ESCAPED = "\u200B$1\u200B";
function escapeCommentText(value) {
  return value.replace(COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));
}
function normalizeDebugBindingName(name) {
  name = camelCaseToDashCase(name.replace(/[$@]/g, "_"));
  return `ng-reflect-${name}`;
}
var CAMEL_CASE_REGEXP = /([A-Z])/g;
function camelCaseToDashCase(input2) {
  return input2.replace(CAMEL_CASE_REGEXP, (...m) => "-" + m[1].toLowerCase());
}
function normalizeDebugBindingValue(value) {
  try {
    return value != null ? value.toString().slice(0, 30) : value;
  } catch (e2) {
    return "[ERROR] Exception while trying to serialize the value";
  }
}
var CUSTOM_ELEMENTS_SCHEMA = {
  name: "custom-elements"
};
var NO_ERRORS_SCHEMA = {
  name: "no-errors-schema"
};
var shouldThrowErrorOnUnknownElement = false;
var shouldThrowErrorOnUnknownProperty = false;
function validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {
  if (schemas === null) return;
  if (!hasDirectives && tagName !== null) {
    const isUnknown = (
      // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because
      // Domino doesn't expose HTMLUnknownElement globally.
      typeof HTMLUnknownElement !== "undefined" && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== "undefined" && tagName.indexOf("-") > -1 && !customElements.get(tagName)
    );
    if (isUnknown && !matchingSchemas(schemas, tagName)) {
      const isHostStandalone = isHostComponentStandalone(lView);
      const templateLocation = getTemplateLocationDetails(lView);
      const schemas2 = `'${isHostStandalone ? "@Component" : "@NgModule"}.schemas'`;
      let message = `'${tagName}' is not a known element${templateLocation}:
`;
      message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? "included in the '@Component.imports' of this component" : "a part of an @NgModule where this component is declared"}.
`;
      if (tagName && tagName.indexOf("-") > -1) {
        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas2} of this component to suppress this message.`;
      } else {
        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas2} of this component.`;
      }
      if (shouldThrowErrorOnUnknownElement) {
        throw new RuntimeError(304, message);
      } else {
        console.error(formatRuntimeError(304, message));
      }
    }
  }
}
function isPropertyValid(element, propName, tagName, schemas) {
  if (schemas === null) return true;
  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {
    return true;
  }
  return typeof Node === "undefined" || Node === null || !(element instanceof Node);
}
function handleUnknownPropertyError(propName, tagName, nodeType, lView) {
  if (!tagName && nodeType === 4) {
    tagName = "ng-template";
  }
  const isHostStandalone = isHostComponentStandalone(lView);
  const templateLocation = getTemplateLocationDetails(lView);
  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;
  const schemas = `'${isHostStandalone ? "@Component" : "@NgModule"}.schemas'`;
  const importLocation = isHostStandalone ? "included in the '@Component.imports' of this component" : "a part of an @NgModule where this component is declared";
  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {
    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);
    message += `
If the '${propName}' is an Angular control flow directive, please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;
  } else {
    message += `
1. If '${tagName}' is an Angular component and it has the '${propName}' input, then verify that it is ${importLocation}.`;
    if (tagName && tagName.indexOf("-") > -1) {
      message += `
2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;
      message += `
3. To allow any property add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
    } else {
      message += `
2. To allow any property add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
    }
  }
  reportUnknownPropertyError(message);
}
function reportUnknownPropertyError(message) {
  if (shouldThrowErrorOnUnknownProperty) {
    throw new RuntimeError(303, message);
  } else {
    console.error(formatRuntimeError(303, message));
  }
}
function getDeclarationComponentDef(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  if (!context2) return null;
  return context2.constructor ? getComponentDef(context2.constructor) : null;
}
function isHostComponentStandalone(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const componentDef = getDeclarationComponentDef(lView);
  return !!componentDef?.standalone;
}
function getTemplateLocationDetails(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const hostComponentDef = getDeclarationComponentDef(lView);
  const componentClassName = hostComponentDef?.type?.name;
  return componentClassName ? ` (used in the '${componentClassName}' component template)` : "";
}
var KNOWN_CONTROL_FLOW_DIRECTIVES = /* @__PURE__ */ new Map([["ngIf", "NgIf"], ["ngFor", "NgFor"], ["ngSwitchCase", "NgSwitchCase"], ["ngSwitchDefault", "NgSwitchDefault"]]);
function matchingSchemas(schemas, tagName) {
  if (schemas !== null) {
    for (let i = 0; i < schemas.length; i++) {
      const schema = schemas[i];
      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf("-") > -1) {
        return true;
      }
    }
  }
  return false;
}
function \u0275\u0275resolveWindow(element) {
  return element.ownerDocument.defaultView;
}
function \u0275\u0275resolveDocument(element) {
  return element.ownerDocument;
}
function \u0275\u0275resolveBody(element) {
  return element.ownerDocument.body;
}
var INTERPOLATION_DELIMITER = `\uFFFD`;
function maybeUnwrapFn(value) {
  if (value instanceof Function) {
    return value();
  } else {
    return value;
  }
}
var VALUE_STRING_LENGTH_LIMIT = 200;
function assertStandaloneComponentType(type) {
  assertComponentDef(type);
  const componentDef = getComponentDef(type);
  if (!componentDef.standalone) {
    throw new RuntimeError(907, `The ${stringifyForError(type)} component is not marked as standalone, but Angular expects to have a standalone component here. Please make sure the ${stringifyForError(type)} component has the \`standalone: true\` flag in the decorator.`);
  }
}
function assertComponentDef(type) {
  if (!getComponentDef(type)) {
    throw new RuntimeError(906, `The ${stringifyForError(type)} is not an Angular component, make sure it has the \`@Component\` decorator.`);
  }
}
function throwMultipleComponentError(tNode, first2, second) {
  throw new RuntimeError(-300, `Multiple components match node with tagname ${tNode.value}: ${stringifyForError(first2)} and ${stringifyForError(second)}`);
}
function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName, lView) {
  const hostComponentDef = getDeclarationComponentDef(lView);
  const componentClassName = hostComponentDef?.type?.name;
  const field = propName ? ` for '${propName}'` : "";
  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(oldValue)}'. Current value: '${formatValue(currValue)}'.${componentClassName ? ` Expression location: ${componentClassName} component` : ""}`;
  if (creationMode) {
    msg += ` It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?`;
  }
  throw new RuntimeError(-100, msg);
}
function formatValue(value) {
  let strValue = String(value);
  try {
    if (Array.isArray(value) || strValue === "[object Object]") {
      strValue = JSON.stringify(value);
    }
  } catch (error) {
  }
  return strValue.length > VALUE_STRING_LENGTH_LIMIT ? strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + "\u2026" : strValue;
}
function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);
  let oldValue = prefix, newValue = prefix;
  for (let i = 0; i < chunks.length; i++) {
    const slotIdx = rootIndex + i;
    oldValue += `${lView[slotIdx]}${chunks[i]}`;
    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;
  }
  return {
    propName,
    oldValue,
    newValue
  };
}
function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
  const tData = lView[TVIEW].data;
  const metadata = tData[bindingIndex];
  if (typeof metadata === "string") {
    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
    }
    return {
      propName: metadata,
      oldValue,
      newValue
    };
  }
  if (metadata === null) {
    let idx = bindingIndex - 1;
    while (typeof tData[idx] !== "string" && tData[idx + 1] === null) {
      idx--;
    }
    const meta = tData[idx];
    if (typeof meta === "string") {
      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, "g"));
      if (matches && matches.length - 1 > bindingIndex - idx) {
        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
      }
    }
  }
  return {
    propName: void 0,
    oldValue,
    newValue
  };
}
function classIndexOf(className, classToSearch, startingIndex) {
  ngDevMode && assertNotEqual(classToSearch, "", 'can not look for "" string.');
  let end = className.length;
  while (true) {
    const foundIndex = className.indexOf(classToSearch, startingIndex);
    if (foundIndex === -1) return foundIndex;
    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32) {
      const length = classToSearch.length;
      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32) {
        return foundIndex;
      }
    }
    startingIndex = foundIndex + 1;
  }
}
var NG_TEMPLATE_SELECTOR = "ng-template";
function isCssClassMatching(tNode, attrs, cssClassToMatch, isProjectionMode) {
  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), "Class name expected to be lowercase.");
  let i = 0;
  if (isProjectionMode) {
    for (; i < attrs.length && typeof attrs[i] === "string"; i += 2) {
      if (attrs[i] === "class" && classIndexOf(attrs[i + 1].toLowerCase(), cssClassToMatch, 0) !== -1) {
        return true;
      }
    }
  } else if (isInlineTemplate(tNode)) {
    return false;
  }
  i = attrs.indexOf(1, i);
  if (i > -1) {
    let item;
    while (++i < attrs.length && typeof (item = attrs[i]) === "string") {
      if (item.toLowerCase() === cssClassToMatch) {
        return true;
      }
    }
  }
  return false;
}
function isInlineTemplate(tNode) {
  return tNode.type === 4 && tNode.value !== NG_TEMPLATE_SELECTOR;
}
function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
  const tagNameToCompare = tNode.type === 4 && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;
  return currentSelector === tagNameToCompare;
}
function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
  ngDevMode && assertDefined(selector[0], "Selector should have a tag name");
  let mode = 4;
  const nodeAttrs = tNode.attrs;
  const nameOnlyMarkerIdx = nodeAttrs !== null ? getNameOnlyMarkerIndex(nodeAttrs) : 0;
  let skipToNextSelector = false;
  for (let i = 0; i < selector.length; i++) {
    const current = selector[i];
    if (typeof current === "number") {
      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
        return false;
      }
      if (skipToNextSelector && isPositive(current)) continue;
      skipToNextSelector = false;
      mode = current | mode & 1;
      continue;
    }
    if (skipToNextSelector) continue;
    if (mode & 4) {
      mode = 2 | mode & 1;
      if (current !== "" && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === "" && selector.length === 1) {
        if (isPositive(mode)) return false;
        skipToNextSelector = true;
      }
    } else if (mode & 8) {
      if (nodeAttrs === null || !isCssClassMatching(tNode, nodeAttrs, current, isProjectionMode)) {
        if (isPositive(mode)) return false;
        skipToNextSelector = true;
      }
    } else {
      const selectorAttrValue = selector[++i];
      const attrIndexInNode = findAttrIndexInNode(current, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);
      if (attrIndexInNode === -1) {
        if (isPositive(mode)) return false;
        skipToNextSelector = true;
        continue;
      }
      if (selectorAttrValue !== "") {
        let nodeAttrValue;
        if (attrIndexInNode > nameOnlyMarkerIdx) {
          nodeAttrValue = "";
        } else {
          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0, "We do not match directives on namespaced attributes");
          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
        }
        if (mode & 2 && selectorAttrValue !== nodeAttrValue) {
          if (isPositive(mode)) return false;
          skipToNextSelector = true;
        }
      }
    }
  }
  return isPositive(mode) || skipToNextSelector;
}
function isPositive(mode) {
  return (mode & 1) === 0;
}
function findAttrIndexInNode(name, attrs, isInlineTemplate2, isProjectionMode) {
  if (attrs === null) return -1;
  let i = 0;
  if (isProjectionMode || !isInlineTemplate2) {
    let bindingsMode = false;
    while (i < attrs.length) {
      const maybeAttrName = attrs[i];
      if (maybeAttrName === name) {
        return i;
      } else if (maybeAttrName === 3 || maybeAttrName === 6) {
        bindingsMode = true;
      } else if (maybeAttrName === 1 || maybeAttrName === 2) {
        let value = attrs[++i];
        while (typeof value === "string") {
          value = attrs[++i];
        }
        continue;
      } else if (maybeAttrName === 4) {
        break;
      } else if (maybeAttrName === 0) {
        i += 4;
        continue;
      }
      i += bindingsMode ? 1 : 2;
    }
    return -1;
  } else {
    return matchTemplateAttribute(attrs, name);
  }
}
function isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {
  for (let i = 0; i < selector.length; i++) {
    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
      return true;
    }
  }
  return false;
}
function getProjectAsAttrValue(tNode) {
  const nodeAttrs = tNode.attrs;
  if (nodeAttrs != null) {
    const ngProjectAsAttrIdx = nodeAttrs.indexOf(
      5
      /* AttributeMarker.ProjectAs */
    );
    if ((ngProjectAsAttrIdx & 1) === 0) {
      return nodeAttrs[ngProjectAsAttrIdx + 1];
    }
  }
  return null;
}
function getNameOnlyMarkerIndex(nodeAttrs) {
  for (let i = 0; i < nodeAttrs.length; i++) {
    const nodeAttr = nodeAttrs[i];
    if (isNameOnlyAttributeMarker(nodeAttr)) {
      return i;
    }
  }
  return nodeAttrs.length;
}
function matchTemplateAttribute(attrs, name) {
  let i = attrs.indexOf(
    4
    /* AttributeMarker.Template */
  );
  if (i > -1) {
    i++;
    while (i < attrs.length) {
      const attr = attrs[i];
      if (typeof attr === "number") return -1;
      if (attr === name) return i;
      i++;
    }
  }
  return -1;
}
function isSelectorInSelectorList(selector, list) {
  selectorListLoop: for (let i = 0; i < list.length; i++) {
    const currentSelectorInList = list[i];
    if (selector.length !== currentSelectorInList.length) {
      continue;
    }
    for (let j = 0; j < selector.length; j++) {
      if (selector[j] !== currentSelectorInList[j]) {
        continue selectorListLoop;
      }
    }
    return true;
  }
  return false;
}
function maybeWrapInNotSelector(isNegativeMode, chunk) {
  return isNegativeMode ? ":not(" + chunk.trim() + ")" : chunk;
}
function stringifyCSSSelector(selector) {
  let result = selector[0];
  let i = 1;
  let mode = 2;
  let currentChunk = "";
  let isNegativeMode = false;
  while (i < selector.length) {
    let valueOrMarker = selector[i];
    if (typeof valueOrMarker === "string") {
      if (mode & 2) {
        const attrValue = selector[++i];
        currentChunk += "[" + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : "") + "]";
      } else if (mode & 8) {
        currentChunk += "." + valueOrMarker;
      } else if (mode & 4) {
        currentChunk += " " + valueOrMarker;
      }
    } else {
      if (currentChunk !== "" && !isPositive(valueOrMarker)) {
        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
        currentChunk = "";
      }
      mode = valueOrMarker;
      isNegativeMode = isNegativeMode || !isPositive(mode);
    }
    i++;
  }
  if (currentChunk !== "") {
    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
  }
  return result;
}
function stringifyCSSSelectorList(selectorList) {
  return selectorList.map(stringifyCSSSelector).join(",");
}
function extractAttrsAndClassesFromSelector(selector) {
  const attrs = [];
  const classes = [];
  let i = 1;
  let mode = 2;
  while (i < selector.length) {
    let valueOrMarker = selector[i];
    if (typeof valueOrMarker === "string") {
      if (mode === 2) {
        if (valueOrMarker !== "") {
          attrs.push(valueOrMarker, selector[++i]);
        }
      } else if (mode === 8) {
        classes.push(valueOrMarker);
      }
    } else {
      if (!isPositive(mode)) break;
      mode = valueOrMarker;
    }
    i++;
  }
  if (classes.length) {
    attrs.push(1, ...classes);
  }
  return attrs;
}
var NO_CHANGE = typeof ngDevMode === "undefined" || ngDevMode ? {
  __brand__: "NO_CHANGE"
} : {};
function createTextNode(renderer, value) {
  ngDevMode && ngDevMode.rendererCreateTextNode++;
  ngDevMode && ngDevMode.rendererSetText++;
  return renderer.createText(value);
}
function updateTextNode(renderer, rNode, value) {
  ngDevMode && ngDevMode.rendererSetText++;
  renderer.setValue(rNode, value);
}
function createCommentNode(renderer, value) {
  ngDevMode && ngDevMode.rendererCreateComment++;
  return renderer.createComment(escapeCommentText(value));
}
function createElementNode(renderer, name, namespace) {
  ngDevMode && ngDevMode.rendererCreateElement++;
  return renderer.createElement(name, namespace);
}
function nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {
  ngDevMode && ngDevMode.rendererInsertBefore++;
  renderer.insertBefore(parent, child, beforeNode, isMove);
}
function nativeAppendChild(renderer, parent, child) {
  ngDevMode && ngDevMode.rendererAppendChild++;
  ngDevMode && assertDefined(parent, "parent node must be defined");
  renderer.appendChild(parent, child);
}
function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {
  if (beforeNode !== null) {
    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);
  } else {
    nativeAppendChild(renderer, parent, child);
  }
}
function nativeRemoveNode(renderer, rNode, isHostElement) {
  ngDevMode && ngDevMode.rendererRemoveNode++;
  renderer.removeChild(null, rNode, isHostElement);
}
function writeDirectStyle(renderer, element, newValue) {
  ngDevMode && assertString(newValue, "'newValue' should be a string");
  renderer.setAttribute(element, "style", newValue);
  ngDevMode && ngDevMode.rendererSetStyle++;
}
function writeDirectClass(renderer, element, newValue) {
  ngDevMode && assertString(newValue, "'newValue' should be a string");
  if (newValue === "") {
    renderer.removeAttribute(element, "class");
  } else {
    renderer.setAttribute(element, "class", newValue);
  }
  ngDevMode && ngDevMode.rendererSetClassName++;
}
function setupStaticAttributes(renderer, element, tNode) {
  const {
    mergedAttrs,
    classes,
    styles
  } = tNode;
  if (mergedAttrs !== null) {
    setUpAttributes(renderer, element, mergedAttrs);
  }
  if (classes !== null) {
    writeDirectClass(renderer, element, classes);
  }
  if (styles !== null) {
    writeDirectStyle(renderer, element, styles);
  }
}
function createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory, ssrId) {
  ngDevMode && ngDevMode.tView++;
  const bindingStartIndex = HEADER_OFFSET + decls;
  const initialViewLength = bindingStartIndex + vars;
  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
  const consts = typeof constsOrFactory === "function" ? constsOrFactory() : constsOrFactory;
  const tView = blueprint[TVIEW] = {
    type,
    blueprint,
    template: templateFn,
    queries: null,
    viewQuery,
    declTNode,
    data: blueprint.slice().fill(null, bindingStartIndex),
    bindingStartIndex,
    expandoStartIndex: initialViewLength,
    hostBindingOpCodes: null,
    firstCreatePass: true,
    firstUpdatePass: true,
    staticViewQueries: false,
    staticContentQueries: false,
    preOrderHooks: null,
    preOrderCheckHooks: null,
    contentHooks: null,
    contentCheckHooks: null,
    viewHooks: null,
    viewCheckHooks: null,
    destroyHooks: null,
    cleanup: null,
    contentQueries: null,
    components: null,
    directiveRegistry: typeof directives === "function" ? directives() : directives,
    pipeRegistry: typeof pipes === "function" ? pipes() : pipes,
    firstChild: null,
    schemas,
    consts,
    incompleteFirstPass: false,
    ssrId
  };
  if (ngDevMode) {
    Object.seal(tView);
  }
  return tView;
}
function createViewBlueprint(bindingStartIndex, initialViewLength) {
  const blueprint = [];
  for (let i = 0; i < initialViewLength; i++) {
    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
  }
  return blueprint;
}
function getOrCreateComponentTView(def) {
  const tView = def.tView;
  if (tView === null || tView.incompleteFirstPass) {
    const declTNode = null;
    return def.tView = createTView(1, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts, def.id);
  }
  return tView;
}
function createLView(parentLView, tView, context2, flags, host, tHostNode, environment, renderer, injector, embeddedViewInjector, hydrationInfo) {
  const lView = tView.blueprint.slice();
  lView[HOST] = host;
  lView[FLAGS] = flags | 4 | 128 | 8 | 64 | 1024;
  if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 2048) {
    lView[FLAGS] |= 2048;
  }
  resetPreOrderHookFlags(lView);
  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);
  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
  lView[CONTEXT] = context2;
  lView[ENVIRONMENT] = environment || parentLView && parentLView[ENVIRONMENT];
  ngDevMode && assertDefined(lView[ENVIRONMENT], "LViewEnvironment is required");
  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];
  ngDevMode && assertDefined(lView[RENDERER], "Renderer is required");
  lView[INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;
  lView[T_HOST] = tHostNode;
  lView[ID] = getUniqueLViewId();
  lView[HYDRATION] = hydrationInfo;
  lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;
  ngDevMode && assertEqual(tView.type == 2 ? parentLView !== null : true, true, "Embedded views must have parentLView");
  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2 ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
  return lView;
}
function createComponentLView(lView, hostTNode, def) {
  const native = getNativeByTNode(hostTNode, lView);
  const tView = getOrCreateComponentTView(def);
  const rendererFactory = lView[ENVIRONMENT].rendererFactory;
  const componentView = addToEndOfViewTree(lView, createLView(lView, tView, null, getInitialLViewFlagsFromDef(def), native, hostTNode, null, rendererFactory.createRenderer(native, def), null, null, null));
  return lView[hostTNode.index] = componentView;
}
function getInitialLViewFlagsFromDef(def) {
  let flags = 16;
  if (def.signals) {
    flags = 4096;
  } else if (def.onPush) {
    flags = 64;
  }
  return flags;
}
function allocExpando(tView, lView, numSlotsToAlloc, initialValue) {
  if (numSlotsToAlloc === 0) return -1;
  if (ngDevMode) {
    assertFirstCreatePass(tView);
    assertSame(tView, lView[TVIEW], "`LView` must be associated with `TView`!");
    assertEqual(tView.data.length, lView.length, "Expecting LView to be same size as TView");
    assertEqual(tView.data.length, tView.blueprint.length, "Expecting Blueprint to be same size as TView");
    assertFirstUpdatePass(tView);
  }
  const allocIdx = lView.length;
  for (let i = 0; i < numSlotsToAlloc; i++) {
    lView.push(initialValue);
    tView.blueprint.push(initialValue);
    tView.data.push(null);
  }
  return allocIdx;
}
function addToEndOfViewTree(lView, lViewOrLContainer) {
  if (lView[CHILD_HEAD]) {
    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
  } else {
    lView[CHILD_HEAD] = lViewOrLContainer;
  }
  lView[CHILD_TAIL] = lViewOrLContainer;
  return lViewOrLContainer;
}
function \u0275\u0275advance(delta = 1) {
  ngDevMode && assertGreaterThan(delta, 0, "Can only advance forward");
  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());
}
function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
  ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);
  if (!checkNoChangesMode) {
    const hooksInitPhaseCompleted = (lView[FLAGS] & 3) === 3;
    if (hooksInitPhaseCompleted) {
      const preOrderCheckHooks = tView.preOrderCheckHooks;
      if (preOrderCheckHooks !== null) {
        executeCheckHooks(lView, preOrderCheckHooks, index);
      }
    } else {
      const preOrderHooks = tView.preOrderHooks;
      if (preOrderHooks !== null) {
        executeInitAndCheckHooks(lView, preOrderHooks, 0, index);
      }
    }
  }
  setSelectedIndex(index);
}
var InputFlags;
(function(InputFlags2) {
  InputFlags2[InputFlags2["None"] = 0] = "None";
  InputFlags2[InputFlags2["SignalBased"] = 1] = "SignalBased";
  InputFlags2[InputFlags2["HasDecoratorInputTransform"] = 2] = "HasDecoratorInputTransform";
})(InputFlags || (InputFlags = {}));
function writeToDirectiveInput(def, instance, publicName, value) {
  const prevConsumer = setActiveConsumer(null);
  try {
    if (ngDevMode) {
      if (!def.inputs.hasOwnProperty(publicName)) {
        throw new Error(`ASSERTION ERROR: Directive ${def.type.name} does not have an input with a public name of "${publicName}"`);
      }
      if (instance instanceof NodeInjectorFactory) {
        throw new Error(`ASSERTION ERROR: Cannot write input to factory for type ${def.type.name}. Directive has not been created yet.`);
      }
    }
    const [privateName, flags, transform] = def.inputs[publicName];
    let inputSignalNode = null;
    if ((flags & InputFlags.SignalBased) !== 0) {
      const field = instance[privateName];
      inputSignalNode = field[SIGNAL];
    }
    if (inputSignalNode !== null && inputSignalNode.transformFn !== void 0) {
      value = inputSignalNode.transformFn(value);
    } else if (transform !== null) {
      value = transform.call(instance, value);
    }
    if (def.setInput !== null) {
      def.setInput(instance, inputSignalNode, value, publicName, privateName);
    } else {
      applyValueToInputField(instance, inputSignalNode, privateName, value);
    }
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function executeTemplate(tView, lView, templateFn, rf, context2) {
  const prevSelectedIndex = getSelectedIndex();
  const isUpdatePhase = rf & 2;
  try {
    setSelectedIndex(-1);
    if (isUpdatePhase && lView.length > HEADER_OFFSET) {
      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());
    }
    const preHookType = isUpdatePhase ? 2 : 0;
    profiler(preHookType, context2);
    templateFn(rf, context2);
  } finally {
    setSelectedIndex(prevSelectedIndex);
    const postHookType = isUpdatePhase ? 3 : 1;
    profiler(postHookType, context2);
  }
}
function createDirectivesInstances(tView, lView, tNode) {
  instantiateAllDirectives(tView, lView, tNode);
  if ((tNode.flags & 64) === 64) {
    invokeDirectivesHostBindings(tView, lView, tNode);
  }
}
function saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {
  const localNames = tNode.localNames;
  if (localNames !== null) {
    let localIndex = tNode.index + 1;
    for (let i = 0; i < localNames.length; i += 2) {
      const index = localNames[i + 1];
      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];
      viewData[localIndex++] = value;
    }
  }
}
function locateHostElement(renderer, elementOrSelector, encapsulation, injector) {
  const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);
  const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation.ShadowDom;
  const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);
  applyRootElementTransform(rootElement);
  return rootElement;
}
function applyRootElementTransform(rootElement) {
  _applyRootElementTransformImpl(rootElement);
}
var _applyRootElementTransformImpl = () => null;
function mapPropName(name) {
  if (name === "class") return "className";
  if (name === "for") return "htmlFor";
  if (name === "formaction") return "formAction";
  if (name === "innerHtml") return "innerHTML";
  if (name === "readonly") return "readOnly";
  if (name === "tabindex") return "tabIndex";
  return name;
}
function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
  ngDevMode && assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
  if (!nativeOnly) {
    const hasSetInput = setAllInputsForProperty(tNode, tView, lView, propName, value);
    if (hasSetInput) {
      isComponentHost(tNode) && markDirtyIfOnPush(lView, tNode.index);
      ngDevMode && setNgReflectProperties(lView, tView, tNode, propName, value);
      return;
    }
  }
  if (tNode.type & 3) {
    const element = getNativeByTNode(tNode, lView);
    propName = mapPropName(propName);
    if (ngDevMode) {
      validateAgainstEventProperties(propName);
      if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {
        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
      }
      ngDevMode.rendererSetProperty++;
    }
    value = sanitizer != null ? sanitizer(value, tNode.value || "", propName) : value;
    renderer.setProperty(element, propName, value);
  } else if (tNode.type & 12) {
    if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {
      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
    }
  }
}
function markDirtyIfOnPush(lView, viewIndex) {
  ngDevMode && assertLView(lView);
  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);
  if (!(childComponentLView[FLAGS] & 16)) {
    childComponentLView[FLAGS] |= 64;
  }
}
function setNgReflectProperty(lView, tNode, attrName, value) {
  const element = getNativeByTNode(tNode, lView);
  const renderer = lView[RENDERER];
  attrName = normalizeDebugBindingName(attrName);
  const debugValue = normalizeDebugBindingValue(value);
  if (tNode.type & 3) {
    if (value == null) {
      renderer.removeAttribute(element, attrName);
    } else {
      renderer.setAttribute(element, attrName, debugValue);
    }
  } else {
    const textContent = escapeCommentText(`bindings=${JSON.stringify({
      [attrName]: debugValue
    }, null, 2)}`);
    renderer.setValue(element, textContent);
  }
}
function setNgReflectProperties(lView, tView, tNode, publicName, value) {
  if (!(tNode.type & (3 | 4))) {
    return;
  }
  const inputConfig = tNode.inputs?.[publicName];
  const hostInputConfig = tNode.hostDirectiveInputs?.[publicName];
  if (hostInputConfig) {
    for (let i = 0; i < hostInputConfig.length; i += 2) {
      const index = hostInputConfig[i];
      const publicName2 = hostInputConfig[i + 1];
      const def = tView.data[index];
      setNgReflectProperty(lView, tNode, def.inputs[publicName2][0], value);
    }
  }
  if (inputConfig) {
    for (const index of inputConfig) {
      const def = tView.data[index];
      setNgReflectProperty(lView, tNode, def.inputs[publicName][0], value);
    }
  }
}
function instantiateAllDirectives(tView, lView, tNode) {
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  if (isComponentHost(tNode)) {
    ngDevMode && assertTNodeType(
      tNode,
      3
      /* TNodeType.AnyRNode */
    );
    createComponentLView(lView, tNode, tView.data[start + tNode.componentOffset]);
  }
  if (!tView.firstCreatePass) {
    getOrCreateNodeInjectorForNode(tNode, lView);
  }
  const initialInputs = tNode.initialInputs;
  for (let i = start; i < end; i++) {
    const def = tView.data[i];
    const directive = getNodeInjectable(lView, tView, i, tNode);
    attachPatchData(directive, lView);
    if (initialInputs !== null) {
      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
    }
    if (isComponentDef(def)) {
      const componentView = getComponentLViewByIndex(tNode.index, lView);
      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);
    }
  }
}
function invokeDirectivesHostBindings(tView, lView, tNode) {
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  const elementIndex = tNode.index;
  const currentDirectiveIndex = getCurrentDirectiveIndex();
  try {
    setSelectedIndex(elementIndex);
    for (let dirIndex = start; dirIndex < end; dirIndex++) {
      const def = tView.data[dirIndex];
      const directive = lView[dirIndex];
      setCurrentDirectiveIndex(dirIndex);
      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
        invokeHostBindingsInCreationMode(def, directive);
      }
    }
  } finally {
    setSelectedIndex(-1);
    setCurrentDirectiveIndex(currentDirectiveIndex);
  }
}
function invokeHostBindingsInCreationMode(def, directive) {
  if (def.hostBindings !== null) {
    def.hostBindings(1, directive);
  }
}
function findDirectiveDefMatches(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && assertTNodeType(
    tNode,
    3 | 12
    /* TNodeType.AnyContainer */
  );
  const registry = tView.directiveRegistry;
  let matches = null;
  if (registry) {
    for (let i = 0; i < registry.length; i++) {
      const def = registry[i];
      if (isNodeMatchingSelectorList(
        tNode,
        def.selectors,
        /* isProjectionMode */
        false
      )) {
        matches ??= [];
        if (isComponentDef(def)) {
          if (ngDevMode) {
            assertTNodeType(tNode, 2, `"${tNode.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${stringify(def.type)} component.`);
            if (matches.length && isComponentDef(matches[0])) {
              throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);
            }
          }
          matches.unshift(def);
        } else {
          matches.push(def);
        }
      }
    }
  }
  return matches;
}
function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
  if (ngDevMode) {
    assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
    validateAgainstEventAttributes(name);
    assertTNodeType(tNode, 2, `Attempted to set attribute \`${name}\` on a container node. Host bindings are not valid on ng-container or ng-template.`);
  }
  const element = getNativeByTNode(tNode, lView);
  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);
}
function setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {
  if (value == null) {
    ngDevMode && ngDevMode.rendererRemoveAttribute++;
    renderer.removeAttribute(element, name, namespace);
  } else {
    ngDevMode && ngDevMode.rendererSetAttribute++;
    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || "", name);
    renderer.setAttribute(element, name, strValue, namespace);
  }
}
function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
  const initialInputs = initialInputData[directiveIndex];
  if (initialInputs !== null) {
    for (let i = 0; i < initialInputs.length; i += 2) {
      const lookupName = initialInputs[i];
      const value = initialInputs[i + 1];
      writeToDirectiveInput(def, instance, lookupName, value);
      if (ngDevMode) {
        setNgReflectProperty(lView, tNode, def.inputs[lookupName][0], value);
      }
    }
  }
}
function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {
  if (tData[bindingIndex] === null) {
    if (!tNode.inputs?.[propertyName] && !tNode.hostDirectiveInputs?.[propertyName]) {
      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
      propBindingIdxs.push(bindingIndex);
      let bindingMetadata = propertyName;
      if (interpolationParts.length > 0) {
        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
      }
      tData[bindingIndex] = bindingMetadata;
    }
  }
}
function loadComponentRenderer(currentDef, tNode, lView) {
  if (currentDef === null || isComponentDef(currentDef)) {
    lView = unwrapLView(lView[tNode.index]);
  }
  return lView[RENDERER];
}
function handleError$1(lView, error) {
  const injector = lView[INJECTOR];
  const errorHandler2 = injector ? injector.get(ErrorHandler, null) : null;
  errorHandler2 && errorHandler2.handleError(error);
}
function setAllInputsForProperty(tNode, tView, lView, publicName, value) {
  const inputs = tNode.inputs?.[publicName];
  const hostDirectiveInputs = tNode.hostDirectiveInputs?.[publicName];
  let hasMatch = false;
  if (hostDirectiveInputs) {
    for (let i = 0; i < hostDirectiveInputs.length; i += 2) {
      const index = hostDirectiveInputs[i];
      ngDevMode && assertIndexInRange(lView, index);
      const publicName2 = hostDirectiveInputs[i + 1];
      const def = tView.data[index];
      writeToDirectiveInput(def, lView[index], publicName2, value);
      hasMatch = true;
    }
  }
  if (inputs) {
    for (const index of inputs) {
      ngDevMode && assertIndexInRange(lView, index);
      const instance = lView[index];
      const def = tView.data[index];
      writeToDirectiveInput(def, instance, publicName, value);
      hasMatch = true;
    }
  }
  return hasMatch;
}
function renderComponent(hostLView, componentHostIdx) {
  ngDevMode && assertEqual(isCreationMode(hostLView), true, "Should be run in creation mode");
  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
  const componentTView = componentView[TVIEW];
  syncViewWithBlueprint(componentTView, componentView);
  const hostRNode = componentView[HOST];
  if (hostRNode !== null && componentView[HYDRATION] === null) {
    componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR]);
  }
  profiler(
    18
    /* ProfilerEvent.ComponentStart */
  );
  renderView(componentTView, componentView, componentView[CONTEXT]);
  profiler(19, componentView[CONTEXT]);
}
function syncViewWithBlueprint(tView, lView) {
  for (let i = lView.length; i < tView.blueprint.length; i++) {
    lView.push(tView.blueprint[i]);
  }
}
function renderView(tView, lView, context2) {
  ngDevMode && assertEqual(isCreationMode(lView), true, "Should be run in creation mode");
  ngDevMode && assertNotReactive(renderView.name);
  enterView(lView);
  try {
    const viewQuery = tView.viewQuery;
    if (viewQuery !== null) {
      executeViewQueryFn(1, viewQuery, context2);
    }
    const templateFn = tView.template;
    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 1, context2);
    }
    if (tView.firstCreatePass) {
      tView.firstCreatePass = false;
    }
    lView[QUERIES]?.finishViewCreation(tView);
    if (tView.staticContentQueries) {
      refreshContentQueries(tView, lView);
    }
    if (tView.staticViewQueries) {
      executeViewQueryFn(2, tView.viewQuery, context2);
    }
    const components = tView.components;
    if (components !== null) {
      renderChildComponents(lView, components);
    }
  } catch (error) {
    if (tView.firstCreatePass) {
      tView.incompleteFirstPass = true;
      tView.firstCreatePass = false;
    }
    throw error;
  } finally {
    lView[FLAGS] &= -5;
    leaveView();
  }
}
function renderChildComponents(hostLView, components) {
  for (let i = 0; i < components.length; i++) {
    renderComponent(hostLView, components[i]);
  }
}
function createAndRenderEmbeddedLView(declarationLView, templateTNode, context2, options) {
  const prevConsumer = setActiveConsumer(null);
  try {
    const embeddedTView = templateTNode.tView;
    ngDevMode && assertDefined(embeddedTView, "TView must be defined for a template node.");
    ngDevMode && assertTNodeForLView(templateTNode, declarationLView);
    const isSignalView = declarationLView[FLAGS] & 4096;
    const viewFlags = isSignalView ? 4096 : 16;
    const embeddedLView = createLView(declarationLView, embeddedTView, context2, viewFlags, null, templateTNode, null, null, options?.injector ?? null, options?.embeddedViewInjector ?? null, options?.dehydratedView ?? null);
    const declarationLContainer = declarationLView[templateTNode.index];
    ngDevMode && assertLContainer(declarationLContainer);
    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
    const declarationViewLQueries = declarationLView[QUERIES];
    if (declarationViewLQueries !== null) {
      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
    }
    renderView(embeddedTView, embeddedLView, context2);
    return embeddedLView;
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function shouldAddViewToDom(tNode, dehydratedView) {
  return !dehydratedView || dehydratedView.firstChild === null || hasInSkipHydrationBlockFlag(tNode);
}
var _icuContainerIterate;
function icuContainerIterate(tIcuContainerNode, lView) {
  return _icuContainerIterate(tIcuContainerNode, lView);
}
function ensureIcuContainerVisitorLoaded(loader) {
  if (_icuContainerIterate === void 0) {
    _icuContainerIterate = loader();
  }
}
var RendererStyleFlags2;
(function(RendererStyleFlags22) {
  RendererStyleFlags22[RendererStyleFlags22["Important"] = 1] = "Important";
  RendererStyleFlags22[RendererStyleFlags22["DashCase"] = 2] = "DashCase";
})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));
function isDetachedByI18n(tNode) {
  return (tNode.flags & 32) === 32;
}
function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
  if (lNodeToHandle != null) {
    let lContainer;
    let isComponent2 = false;
    if (isLContainer(lNodeToHandle)) {
      lContainer = lNodeToHandle;
    } else if (isLView(lNodeToHandle)) {
      isComponent2 = true;
      ngDevMode && assertDefined(lNodeToHandle[HOST], "HOST must be defined for a component LView");
      lNodeToHandle = lNodeToHandle[HOST];
    }
    const rNode = unwrapRNode(lNodeToHandle);
    if (action === 0 && parent !== null) {
      if (beforeNode == null) {
        nativeAppendChild(renderer, parent, rNode);
      } else {
        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
      }
    } else if (action === 1 && parent !== null) {
      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
    } else if (action === 2) {
      nativeRemoveNode(renderer, rNode, isComponent2);
    } else if (action === 3) {
      ngDevMode && ngDevMode.rendererDestroyNode++;
      renderer.destroyNode(rNode);
    }
    if (lContainer != null) {
      applyContainer(renderer, action, lContainer, parent, beforeNode);
    }
  }
}
function removeViewFromDOM(tView, lView) {
  detachViewFromDOM(tView, lView);
  lView[HOST] = null;
  lView[T_HOST] = null;
}
function addViewToDOM(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {
  lView[HOST] = parentNativeNode;
  lView[T_HOST] = parentTNode;
  applyView(tView, lView, renderer, 1, parentNativeNode, beforeNode);
}
function detachViewFromDOM(tView, lView) {
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(
    9
    /* NotificationSource.ViewDetachedFromDOM */
  );
  applyView(tView, lView, lView[RENDERER], 2, null, null);
}
function destroyViewTree(rootView) {
  let lViewOrLContainer = rootView[CHILD_HEAD];
  if (!lViewOrLContainer) {
    return cleanUpView(rootView[TVIEW], rootView);
  }
  while (lViewOrLContainer) {
    let next = null;
    if (isLView(lViewOrLContainer)) {
      next = lViewOrLContainer[CHILD_HEAD];
    } else {
      ngDevMode && assertLContainer(lViewOrLContainer);
      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
      if (firstView) next = firstView;
    }
    if (!next) {
      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
        if (isLView(lViewOrLContainer)) {
          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
        }
        lViewOrLContainer = lViewOrLContainer[PARENT];
      }
      if (lViewOrLContainer === null) lViewOrLContainer = rootView;
      if (isLView(lViewOrLContainer)) {
        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
      }
      next = lViewOrLContainer && lViewOrLContainer[NEXT];
    }
    lViewOrLContainer = next;
  }
}
function detachMovedView(declarationContainer, lView) {
  ngDevMode && assertLContainer(declarationContainer);
  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], "A projected view should belong to a non-empty projected views collection");
  const movedViews = declarationContainer[MOVED_VIEWS];
  const declarationViewIndex = movedViews.indexOf(lView);
  movedViews.splice(declarationViewIndex, 1);
}
function destroyLView(tView, lView) {
  if (isDestroyed(lView)) {
    return;
  }
  const renderer = lView[RENDERER];
  if (renderer.destroyNode) {
    applyView(tView, lView, renderer, 3, null, null);
  }
  destroyViewTree(lView);
}
function cleanUpView(tView, lView) {
  if (isDestroyed(lView)) {
    return;
  }
  const prevConsumer = setActiveConsumer(null);
  try {
    lView[FLAGS] &= ~128;
    lView[FLAGS] |= 256;
    lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);
    executeOnDestroys(tView, lView);
    processCleanups(tView, lView);
    if (lView[TVIEW].type === 1) {
      ngDevMode && ngDevMode.rendererDestroy++;
      lView[RENDERER].destroy();
    }
    const declarationContainer = lView[DECLARATION_LCONTAINER];
    if (declarationContainer !== null && isLContainer(lView[PARENT])) {
      if (declarationContainer !== lView[PARENT]) {
        detachMovedView(declarationContainer, lView);
      }
      const lQueries = lView[QUERIES];
      if (lQueries !== null) {
        lQueries.detachView(tView);
      }
    }
    unregisterLView(lView);
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function processCleanups(tView, lView) {
  ngDevMode && assertNotReactive(processCleanups.name);
  const tCleanup = tView.cleanup;
  const lCleanup = lView[CLEANUP];
  if (tCleanup !== null) {
    for (let i = 0; i < tCleanup.length - 1; i += 2) {
      if (typeof tCleanup[i] === "string") {
        const targetIdx = tCleanup[i + 3];
        ngDevMode && assertNumber(targetIdx, "cleanup target must be a number");
        if (targetIdx >= 0) {
          lCleanup[targetIdx]();
        } else {
          lCleanup[-targetIdx].unsubscribe();
        }
        i += 2;
      } else {
        const context2 = lCleanup[tCleanup[i + 1]];
        tCleanup[i].call(context2);
      }
    }
  }
  if (lCleanup !== null) {
    lView[CLEANUP] = null;
  }
  const destroyHooks = lView[ON_DESTROY_HOOKS];
  if (destroyHooks !== null) {
    lView[ON_DESTROY_HOOKS] = null;
    for (let i = 0; i < destroyHooks.length; i++) {
      const destroyHooksFn = destroyHooks[i];
      ngDevMode && assertFunction(destroyHooksFn, "Expecting destroy hook to be a function.");
      destroyHooksFn();
    }
  }
  const effects = lView[EFFECTS];
  if (effects !== null) {
    lView[EFFECTS] = null;
    for (const effect2 of effects) {
      effect2.destroy();
    }
  }
}
function executeOnDestroys(tView, lView) {
  ngDevMode && assertNotReactive(executeOnDestroys.name);
  let destroyHooks;
  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
    for (let i = 0; i < destroyHooks.length; i += 2) {
      const context2 = lView[destroyHooks[i]];
      if (!(context2 instanceof NodeInjectorFactory)) {
        const toCall = destroyHooks[i + 1];
        if (Array.isArray(toCall)) {
          for (let j = 0; j < toCall.length; j += 2) {
            const callContext = context2[toCall[j]];
            const hook = toCall[j + 1];
            profiler(4, callContext, hook);
            try {
              hook.call(callContext);
            } finally {
              profiler(5, callContext, hook);
            }
          }
        } else {
          profiler(4, context2, toCall);
          try {
            toCall.call(context2);
          } finally {
            profiler(5, context2, toCall);
          }
        }
      }
    }
  }
}
function getParentRElement(tView, tNode, lView) {
  return getClosestRElement(tView, tNode.parent, lView);
}
function getClosestRElement(tView, tNode, lView) {
  let parentTNode = tNode;
  while (parentTNode !== null && parentTNode.type & (8 | 32 | 128)) {
    tNode = parentTNode;
    parentTNode = tNode.parent;
  }
  if (parentTNode === null) {
    return lView[HOST];
  } else {
    ngDevMode && assertTNodeType(
      parentTNode,
      3 | 4
      /* TNodeType.Container */
    );
    if (isComponentHost(parentTNode)) {
      ngDevMode && assertTNodeForLView(parentTNode, lView);
      const {
        encapsulation
      } = tView.data[parentTNode.directiveStart + parentTNode.componentOffset];
      if (encapsulation === ViewEncapsulation.None || encapsulation === ViewEncapsulation.Emulated) {
        return null;
      }
    }
    return getNativeByTNode(parentTNode, lView);
  }
}
function getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {
  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);
}
function getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {
  if (parentTNode.type & (8 | 32)) {
    return getNativeByTNode(parentTNode, lView);
  }
  return null;
}
var _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;
var _processI18nInsertBefore;
function setI18nHandling(getInsertInFrontOfRNodeWithI18n2, processI18nInsertBefore2) {
  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n2;
  _processI18nInsertBefore = processI18nInsertBefore2;
}
function appendChild(tView, lView, childRNode, childTNode) {
  const parentRNode = getParentRElement(tView, childTNode, lView);
  const renderer = lView[RENDERER];
  const parentTNode = childTNode.parent || lView[T_HOST];
  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);
  if (parentRNode != null) {
    if (Array.isArray(childRNode)) {
      for (let i = 0; i < childRNode.length; i++) {
        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);
      }
    } else {
      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);
    }
  }
  _processI18nInsertBefore !== void 0 && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);
}
function getFirstNativeNode(lView, tNode) {
  if (tNode !== null) {
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 32 | 16 | 128
      /* TNodeType.LetDeclaration */
    );
    const tNodeType = tNode.type;
    if (tNodeType & 3) {
      return getNativeByTNode(tNode, lView);
    } else if (tNodeType & 4) {
      return getBeforeNodeForView(-1, lView[tNode.index]);
    } else if (tNodeType & 8) {
      const elIcuContainerChild = tNode.child;
      if (elIcuContainerChild !== null) {
        return getFirstNativeNode(lView, elIcuContainerChild);
      } else {
        const rNodeOrLContainer = lView[tNode.index];
        if (isLContainer(rNodeOrLContainer)) {
          return getBeforeNodeForView(-1, rNodeOrLContainer);
        } else {
          return unwrapRNode(rNodeOrLContainer);
        }
      }
    } else if (tNodeType & 128) {
      return getFirstNativeNode(lView, tNode.next);
    } else if (tNodeType & 32) {
      let nextRNode = icuContainerIterate(tNode, lView);
      let rNode = nextRNode();
      return rNode || unwrapRNode(lView[tNode.index]);
    } else {
      const projectionNodes = getProjectionNodes(lView, tNode);
      if (projectionNodes !== null) {
        if (Array.isArray(projectionNodes)) {
          return projectionNodes[0];
        }
        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        return getFirstNativeNode(parentView, projectionNodes);
      } else {
        return getFirstNativeNode(lView, tNode.next);
      }
    }
  }
  return null;
}
function getProjectionNodes(lView, tNode) {
  if (tNode !== null) {
    const componentView = lView[DECLARATION_COMPONENT_VIEW];
    const componentHost = componentView[T_HOST];
    const slotIdx = tNode.projection;
    ngDevMode && assertProjectionSlots(lView);
    return componentHost.projection[slotIdx];
  }
  return null;
}
function getBeforeNodeForView(viewIndexInContainer, lContainer) {
  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;
  if (nextViewIndex < lContainer.length) {
    const lView = lContainer[nextViewIndex];
    const firstTNodeOfView = lView[TVIEW].firstChild;
    if (firstTNodeOfView !== null) {
      return getFirstNativeNode(lView, firstTNodeOfView);
    }
  }
  return lContainer[NATIVE];
}
function applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {
  while (tNode != null) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    if (tNode.type === 128) {
      tNode = tNode.next;
      continue;
    }
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 16 | 32
      /* TNodeType.Icu */
    );
    const rawSlotValue = lView[tNode.index];
    const tNodeType = tNode.type;
    if (isProjection) {
      if (action === 0) {
        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
        tNode.flags |= 2;
      }
    }
    if (!isDetachedByI18n(tNode)) {
      if (tNodeType & 8) {
        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 32) {
        const nextRNode = icuContainerIterate(tNode, lView);
        let rNode;
        while (rNode = nextRNode()) {
          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
        }
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 16) {
        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);
      } else {
        ngDevMode && assertTNodeType(
          tNode,
          3 | 4
          /* TNodeType.Container */
        );
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      }
    }
    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }
}
function applyView(tView, lView, renderer, action, parentRElement, beforeNode) {
  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);
}
function applyProjection(tView, lView, tProjectionNode) {
  const renderer = lView[RENDERER];
  const parentRNode = getParentRElement(tView, tProjectionNode, lView);
  const parentTNode = tProjectionNode.parent || lView[T_HOST];
  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);
  applyProjectionRecursive(renderer, 0, lView, tProjectionNode, parentRNode, beforeNode);
}
function applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {
  const componentLView = lView[DECLARATION_COMPONENT_VIEW];
  const componentNode = componentLView[T_HOST];
  ngDevMode && assertEqual(typeof tProjectionNode.projection, "number", "expecting projection index");
  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];
  if (Array.isArray(nodeToProjectOrRNodes)) {
    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {
      const rNode = nodeToProjectOrRNodes[i];
      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
    }
  } else {
    let nodeToProject = nodeToProjectOrRNodes;
    const projectedComponentLView = componentLView[PARENT];
    if (hasInSkipHydrationBlockFlag(tProjectionNode)) {
      nodeToProject.flags |= 128;
    }
    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);
  }
}
function applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {
  ngDevMode && assertLContainer(lContainer);
  const anchor = lContainer[NATIVE];
  const native = unwrapRNode(lContainer);
  if (anchor !== native) {
    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);
  }
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const lView = lContainer[i];
    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);
  }
}
function applyStyling(renderer, isClassBased, rNode, prop, value) {
  if (isClassBased) {
    if (!value) {
      ngDevMode && ngDevMode.rendererRemoveClass++;
      renderer.removeClass(rNode, prop);
    } else {
      ngDevMode && ngDevMode.rendererAddClass++;
      renderer.addClass(rNode, prop);
    }
  } else {
    let flags = prop.indexOf("-") === -1 ? void 0 : RendererStyleFlags2.DashCase;
    if (value == null) {
      ngDevMode && ngDevMode.rendererRemoveStyle++;
      renderer.removeStyle(rNode, prop, flags);
    } else {
      const isImportant = typeof value === "string" ? value.endsWith("!important") : false;
      if (isImportant) {
        value = value.slice(0, -10);
        flags |= RendererStyleFlags2.Important;
      }
      ngDevMode && ngDevMode.rendererSetStyle++;
      renderer.setStyle(rNode, prop, value, flags);
    }
  }
}
function collectNativeNodes(tView, lView, tNode, result, isProjection = false) {
  while (tNode !== null) {
    if (tNode.type === 128) {
      tNode = isProjection ? tNode.projectionNext : tNode.next;
      continue;
    }
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 16 | 32
      /* TNodeType.Icu */
    );
    const lNode = lView[tNode.index];
    if (lNode !== null) {
      result.push(unwrapRNode(lNode));
    }
    if (isLContainer(lNode)) {
      collectNativeNodesInLContainer(lNode, result);
    }
    const tNodeType = tNode.type;
    if (tNodeType & 8) {
      collectNativeNodes(tView, lView, tNode.child, result);
    } else if (tNodeType & 32) {
      const nextRNode = icuContainerIterate(tNode, lView);
      let rNode;
      while (rNode = nextRNode()) {
        result.push(rNode);
      }
    } else if (tNodeType & 16) {
      const nodesInSlot = getProjectionNodes(lView, tNode);
      if (Array.isArray(nodesInSlot)) {
        result.push(...nodesInSlot);
      } else {
        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
      }
    }
    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }
  return result;
}
function collectNativeNodesInLContainer(lContainer, result) {
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const lViewInAContainer = lContainer[i];
    const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;
    if (lViewFirstChildTNode !== null) {
      collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
    }
  }
  if (lContainer[NATIVE] !== lContainer[HOST]) {
    result.push(lContainer[NATIVE]);
  }
}
function addAfterRenderSequencesForView(lView) {
  if (lView[AFTER_RENDER_SEQUENCES_TO_ADD] !== null) {
    for (const sequence of lView[AFTER_RENDER_SEQUENCES_TO_ADD]) {
      sequence.impl.addSequence(sequence);
    }
    lView[AFTER_RENDER_SEQUENCES_TO_ADD].length = 0;
  }
}
var freeConsumers = [];
function getOrBorrowReactiveLViewConsumer(lView) {
  return lView[REACTIVE_TEMPLATE_CONSUMER] ?? borrowReactiveLViewConsumer(lView);
}
function borrowReactiveLViewConsumer(lView) {
  const consumer = freeConsumers.pop() ?? Object.create(REACTIVE_LVIEW_CONSUMER_NODE);
  consumer.lView = lView;
  return consumer;
}
function maybeReturnReactiveLViewConsumer(consumer) {
  if (consumer.lView[REACTIVE_TEMPLATE_CONSUMER] === consumer) {
    return;
  }
  consumer.lView = null;
  freeConsumers.push(consumer);
}
var REACTIVE_LVIEW_CONSUMER_NODE = __spreadProps(__spreadValues({}, REACTIVE_NODE), {
  consumerIsAlwaysLive: true,
  kind: "template",
  consumerMarkedDirty: (node) => {
    markAncestorsForTraversal(node.lView);
  },
  consumerOnSignalRead() {
    this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;
  }
});
function getOrCreateTemporaryConsumer(lView) {
  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER] ?? Object.create(TEMPORARY_CONSUMER_NODE);
  consumer.lView = lView;
  return consumer;
}
var TEMPORARY_CONSUMER_NODE = __spreadProps(__spreadValues({}, REACTIVE_NODE), {
  consumerIsAlwaysLive: true,
  kind: "template",
  consumerMarkedDirty: (node) => {
    let parent = getLViewParent(node.lView);
    while (parent && !viewShouldHaveReactiveConsumer(parent[TVIEW])) {
      parent = getLViewParent(parent);
    }
    if (!parent) {
      return;
    }
    markViewForRefresh(parent);
  },
  consumerOnSignalRead() {
    this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;
  }
});
function viewShouldHaveReactiveConsumer(tView) {
  return tView.type !== 2;
}
function runEffectsInView(view) {
  if (view[EFFECTS] === null) {
    return;
  }
  let tryFlushEffects = true;
  while (tryFlushEffects) {
    let foundDirtyEffect = false;
    for (const effect2 of view[EFFECTS]) {
      if (!effect2.dirty) {
        continue;
      }
      foundDirtyEffect = true;
      if (effect2.zone === null || Zone.current === effect2.zone) {
        effect2.run();
      } else {
        effect2.zone.run(() => effect2.run());
      }
    }
    tryFlushEffects = foundDirtyEffect && !!(view[FLAGS] & 8192);
  }
}
var MAXIMUM_REFRESH_RERUNS$1 = 100;
function detectChangesInternal(lView, notifyErrorHandler = true, mode = 0) {
  const environment = lView[ENVIRONMENT];
  const rendererFactory = environment.rendererFactory;
  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();
  if (!checkNoChangesMode) {
    rendererFactory.begin?.();
  }
  try {
    detectChangesInViewWhileDirty(lView, mode);
  } catch (error) {
    if (notifyErrorHandler) {
      handleError$1(lView, error);
    }
    throw error;
  } finally {
    if (!checkNoChangesMode) {
      rendererFactory.end?.();
    }
  }
}
function detectChangesInViewWhileDirty(lView, mode) {
  const lastIsRefreshingViewsValue = isRefreshingViews();
  try {
    setIsRefreshingViews(true);
    detectChangesInView(lView, mode);
    if (ngDevMode && isExhaustiveCheckNoChanges()) {
      return;
    }
    let retries = 0;
    while (requiresRefreshOrTraversal(lView)) {
      if (retries === MAXIMUM_REFRESH_RERUNS$1) {
        throw new RuntimeError(103, ngDevMode && "Infinite change detection while trying to refresh views. There may be components which each cause the other to require a refresh, causing an infinite loop.");
      }
      retries++;
      detectChangesInView(
        lView,
        1
        /* ChangeDetectionMode.Targeted */
      );
    }
  } finally {
    setIsRefreshingViews(lastIsRefreshingViewsValue);
  }
}
function checkNoChangesInternal(lView, mode, notifyErrorHandler = true) {
  setIsInCheckNoChangesMode(mode);
  try {
    detectChangesInternal(lView, notifyErrorHandler);
  } finally {
    setIsInCheckNoChangesMode(CheckNoChangesMode.Off);
  }
}
function refreshView(tView, lView, templateFn, context2) {
  ngDevMode && assertEqual(isCreationMode(lView), false, "Should be run in update mode");
  if (isDestroyed(lView)) return;
  const flags = lView[FLAGS];
  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();
  const isInExhaustiveCheckNoChangesPass = ngDevMode && isExhaustiveCheckNoChanges();
  enterView(lView);
  let returnConsumerToPool = true;
  let prevConsumer = null;
  let currentConsumer = null;
  if (!isInCheckNoChangesPass) {
    if (viewShouldHaveReactiveConsumer(tView)) {
      currentConsumer = getOrBorrowReactiveLViewConsumer(lView);
      prevConsumer = consumerBeforeComputation(currentConsumer);
    } else if (getActiveConsumer() === null) {
      returnConsumerToPool = false;
      currentConsumer = getOrCreateTemporaryConsumer(lView);
      prevConsumer = consumerBeforeComputation(currentConsumer);
    } else if (lView[REACTIVE_TEMPLATE_CONSUMER]) {
      consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);
      lView[REACTIVE_TEMPLATE_CONSUMER] = null;
    }
  }
  try {
    resetPreOrderHookFlags(lView);
    setBindingIndex(tView.bindingStartIndex);
    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 2, context2);
    }
    const hooksInitPhaseCompleted = (flags & 3) === 3;
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const preOrderCheckHooks = tView.preOrderCheckHooks;
        if (preOrderCheckHooks !== null) {
          executeCheckHooks(lView, preOrderCheckHooks, null);
        }
      } else {
        const preOrderHooks = tView.preOrderHooks;
        if (preOrderHooks !== null) {
          executeInitAndCheckHooks(lView, preOrderHooks, 0, null);
        }
        incrementInitPhaseFlags(
          lView,
          0
          /* InitPhaseState.OnInitHooksToBeRun */
        );
      }
    }
    if (!isInExhaustiveCheckNoChangesPass) {
      markTransplantedViewsForRefresh(lView);
    }
    runEffectsInView(lView);
    detectChangesInEmbeddedViews(
      lView,
      0
      /* ChangeDetectionMode.Global */
    );
    if (tView.contentQueries !== null) {
      refreshContentQueries(tView, lView);
    }
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const contentCheckHooks = tView.contentCheckHooks;
        if (contentCheckHooks !== null) {
          executeCheckHooks(lView, contentCheckHooks);
        }
      } else {
        const contentHooks = tView.contentHooks;
        if (contentHooks !== null) {
          executeInitAndCheckHooks(
            lView,
            contentHooks,
            1
            /* InitPhaseState.AfterContentInitHooksToBeRun */
          );
        }
        incrementInitPhaseFlags(
          lView,
          1
          /* InitPhaseState.AfterContentInitHooksToBeRun */
        );
      }
    }
    processHostBindingOpCodes(tView, lView);
    const components = tView.components;
    if (components !== null) {
      detectChangesInChildComponents(
        lView,
        components,
        0
        /* ChangeDetectionMode.Global */
      );
    }
    const viewQuery = tView.viewQuery;
    if (viewQuery !== null) {
      executeViewQueryFn(2, viewQuery, context2);
    }
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const viewCheckHooks = tView.viewCheckHooks;
        if (viewCheckHooks !== null) {
          executeCheckHooks(lView, viewCheckHooks);
        }
      } else {
        const viewHooks = tView.viewHooks;
        if (viewHooks !== null) {
          executeInitAndCheckHooks(
            lView,
            viewHooks,
            2
            /* InitPhaseState.AfterViewInitHooksToBeRun */
          );
        }
        incrementInitPhaseFlags(
          lView,
          2
          /* InitPhaseState.AfterViewInitHooksToBeRun */
        );
      }
    }
    if (tView.firstUpdatePass === true) {
      tView.firstUpdatePass = false;
    }
    if (lView[EFFECTS_TO_SCHEDULE]) {
      for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {
        notifyEffect();
      }
      lView[EFFECTS_TO_SCHEDULE] = null;
    }
    if (!isInCheckNoChangesPass) {
      addAfterRenderSequencesForView(lView);
      lView[FLAGS] &= ~(64 | 8);
    }
  } catch (e2) {
    if (!isInCheckNoChangesPass) {
      markAncestorsForTraversal(lView);
    }
    throw e2;
  } finally {
    if (currentConsumer !== null) {
      consumerAfterComputation(currentConsumer, prevConsumer);
      if (returnConsumerToPool) {
        maybeReturnReactiveLViewConsumer(currentConsumer);
      }
    }
    leaveView();
  }
}
function detectChangesInEmbeddedViews(lView, mode) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      const embeddedLView = lContainer[i];
      detectChangesInViewIfAttached(embeddedLView, mode);
    }
  }
}
function markTransplantedViewsForRefresh(lView) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    if (!(lContainer[FLAGS] & 2)) continue;
    const movedViews = lContainer[MOVED_VIEWS];
    ngDevMode && assertDefined(movedViews, "Transplanted View flags set but missing MOVED_VIEWS");
    for (let i = 0; i < movedViews.length; i++) {
      const movedLView = movedViews[i];
      markViewForRefresh(movedLView);
    }
  }
}
function detectChangesInComponent(hostLView, componentHostIdx, mode) {
  ngDevMode && assertEqual(isCreationMode(hostLView), false, "Should be run in update mode");
  profiler(
    18
    /* ProfilerEvent.ComponentStart */
  );
  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
  detectChangesInViewIfAttached(componentView, mode);
  profiler(19, componentView[CONTEXT]);
}
function detectChangesInViewIfAttached(lView, mode) {
  if (!viewAttachedToChangeDetector(lView)) {
    return;
  }
  detectChangesInView(lView, mode);
}
function detectChangesInView(lView, mode) {
  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();
  const tView = lView[TVIEW];
  const flags = lView[FLAGS];
  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];
  let shouldRefreshView = !!(mode === 0 && flags & 16);
  shouldRefreshView ||= !!(flags & 64 && mode === 0 && !isInCheckNoChangesPass);
  shouldRefreshView ||= !!(flags & 1024);
  shouldRefreshView ||= !!(consumer?.dirty && consumerPollProducersForChange(consumer));
  shouldRefreshView ||= !!(ngDevMode && isExhaustiveCheckNoChanges());
  if (consumer) {
    consumer.dirty = false;
  }
  lView[FLAGS] &= -9217;
  if (shouldRefreshView) {
    refreshView(tView, lView, tView.template, lView[CONTEXT]);
  } else if (flags & 8192) {
    if (!isInCheckNoChangesPass) {
      runEffectsInView(lView);
    }
    detectChangesInEmbeddedViews(
      lView,
      1
      /* ChangeDetectionMode.Targeted */
    );
    const components = tView.components;
    if (components !== null) {
      detectChangesInChildComponents(
        lView,
        components,
        1
        /* ChangeDetectionMode.Targeted */
      );
    }
    if (!isInCheckNoChangesPass) {
      addAfterRenderSequencesForView(lView);
    }
  }
}
function detectChangesInChildComponents(hostLView, components, mode) {
  for (let i = 0; i < components.length; i++) {
    detectChangesInComponent(hostLView, components[i], mode);
  }
}
function processHostBindingOpCodes(tView, lView) {
  const hostBindingOpCodes = tView.hostBindingOpCodes;
  if (hostBindingOpCodes === null) return;
  try {
    for (let i = 0; i < hostBindingOpCodes.length; i++) {
      const opCode = hostBindingOpCodes[i];
      if (opCode < 0) {
        setSelectedIndex(~opCode);
      } else {
        const directiveIdx = opCode;
        const bindingRootIndx = hostBindingOpCodes[++i];
        const hostBindingFn = hostBindingOpCodes[++i];
        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
        const context2 = lView[directiveIdx];
        profiler(24, context2);
        hostBindingFn(2, context2);
        profiler(25, context2);
      }
    }
  } finally {
    setSelectedIndex(-1);
  }
}
function markViewDirty(lView, source) {
  const dirtyBitsToUse = isRefreshingViews() ? (
    // When we are actively refreshing views, we only use the `Dirty` bit to mark a view
    64
  ) : (
    // When we are not actively refreshing a view tree, it is absolutely
    // valid to update state and mark views dirty. We use the `RefreshView` flag in this
    // case to allow synchronously rerunning change detection. This applies today to
    // afterRender hooks as well as animation listeners which execute after detecting
    // changes in a view when the render factory flushes.
    1024 | 64
  );
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(source);
  while (lView) {
    lView[FLAGS] |= dirtyBitsToUse;
    const parent = getLViewParent(lView);
    if (isRootView(lView) && !parent) {
      return lView;
    }
    lView = parent;
  }
  return null;
}
function createLContainer(hostNative, currentView, native, tNode) {
  ngDevMode && assertLView(currentView);
  const lContainer = [
    hostNative,
    // host native
    true,
    // Boolean `true` in this position signifies that this is an `LContainer`
    0,
    // flags
    currentView,
    // parent
    null,
    // next
    tNode,
    // t_host
    null,
    // dehydrated views
    native,
    // native,
    null,
    // view refs
    null
    // moved views
  ];
  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, "Should allocate correct number of slots for LContainer header.");
  return lContainer;
}
function getLViewFromLContainer(lContainer, index) {
  const adjustedIndex = CONTAINER_HEADER_OFFSET + index;
  if (adjustedIndex < lContainer.length) {
    const lView = lContainer[adjustedIndex];
    ngDevMode && assertLView(lView);
    return lView;
  }
  return void 0;
}
function addLViewToLContainer(lContainer, lView, index, addToDOM = true) {
  const tView = lView[TVIEW];
  insertView(tView, lView, lContainer, index);
  if (addToDOM) {
    const beforeNode = getBeforeNodeForView(index, lContainer);
    const renderer = lView[RENDERER];
    const parentRNode = renderer.parentNode(lContainer[NATIVE]);
    if (parentRNode !== null) {
      addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);
    }
  }
  const hydrationInfo = lView[HYDRATION];
  if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {
    hydrationInfo.firstChild = null;
  }
}
function removeLViewFromLContainer(lContainer, index) {
  const lView = detachView(lContainer, index);
  if (lView !== void 0) {
    destroyLView(lView[TVIEW], lView);
  }
  return lView;
}
function detachView(lContainer, removeIndex) {
  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;
  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
  const viewToDetach = lContainer[indexInContainer];
  if (viewToDetach) {
    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];
    if (declarationLContainer !== null && declarationLContainer !== lContainer) {
      detachMovedView(declarationLContainer, viewToDetach);
    }
    if (removeIndex > 0) {
      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
    }
    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
    removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);
    const lQueries = removedLView[QUERIES];
    if (lQueries !== null) {
      lQueries.detachView(removedLView[TVIEW]);
    }
    viewToDetach[PARENT] = null;
    viewToDetach[NEXT] = null;
    viewToDetach[FLAGS] &= -129;
  }
  return viewToDetach;
}
function insertView(tView, lView, lContainer, index) {
  ngDevMode && assertLView(lView);
  ngDevMode && assertLContainer(lContainer);
  const indexInContainer = CONTAINER_HEADER_OFFSET + index;
  const containerLength = lContainer.length;
  if (index > 0) {
    lContainer[indexInContainer - 1][NEXT] = lView;
  }
  if (index < containerLength - CONTAINER_HEADER_OFFSET) {
    lView[NEXT] = lContainer[indexInContainer];
    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
  } else {
    lContainer.push(lView);
    lView[NEXT] = null;
  }
  lView[PARENT] = lContainer;
  const declarationLContainer = lView[DECLARATION_LCONTAINER];
  if (declarationLContainer !== null && lContainer !== declarationLContainer) {
    trackMovedView(declarationLContainer, lView);
  }
  const lQueries = lView[QUERIES];
  if (lQueries !== null) {
    lQueries.insertView(tView);
  }
  updateAncestorTraversalFlagsOnAttach(lView);
  lView[FLAGS] |= 128;
}
function trackMovedView(declarationContainer, lView) {
  ngDevMode && assertDefined(lView, "LView required");
  ngDevMode && assertLContainer(declarationContainer);
  const movedViews = declarationContainer[MOVED_VIEWS];
  const parent = lView[PARENT];
  ngDevMode && assertDefined(parent, "missing parent");
  if (isLView(parent)) {
    declarationContainer[FLAGS] |= 2;
  } else {
    const insertedComponentLView = parent[PARENT][DECLARATION_COMPONENT_VIEW];
    ngDevMode && assertDefined(insertedComponentLView, "Missing insertedComponentLView");
    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
    ngDevMode && assertDefined(declaredComponentLView, "Missing declaredComponentLView");
    if (declaredComponentLView !== insertedComponentLView) {
      declarationContainer[FLAGS] |= 2;
    }
  }
  if (movedViews === null) {
    declarationContainer[MOVED_VIEWS] = [lView];
  } else {
    movedViews.push(lView);
  }
}
var ViewRef$1 = class ViewRef {
  _lView;
  _cdRefInjectingView;
  notifyErrorHandler;
  _appRef = null;
  _attachedToViewContainer = false;
  get rootNodes() {
    const lView = this._lView;
    const tView = lView[TVIEW];
    return collectNativeNodes(tView, lView, tView.firstChild, []);
  }
  constructor(_lView, _cdRefInjectingView, notifyErrorHandler = true) {
    this._lView = _lView;
    this._cdRefInjectingView = _cdRefInjectingView;
    this.notifyErrorHandler = notifyErrorHandler;
  }
  get context() {
    return this._lView[CONTEXT];
  }
  /**
   * @deprecated Replacing the full context object is not supported. Modify the context
   *   directly, or consider using a `Proxy` if you need to replace the full object.
   * // TODO(devversion): Remove this.
   */
  set context(value) {
    if (ngDevMode) {
      console.warn("Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.");
    }
    this._lView[CONTEXT] = value;
  }
  get destroyed() {
    return isDestroyed(this._lView);
  }
  destroy() {
    if (this._appRef) {
      this._appRef.detachView(this);
    } else if (this._attachedToViewContainer) {
      const parent = this._lView[PARENT];
      if (isLContainer(parent)) {
        const viewRefs = parent[VIEW_REFS];
        const index = viewRefs ? viewRefs.indexOf(this) : -1;
        if (index > -1) {
          ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, "An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.");
          detachView(parent, index);
          removeFromArray(viewRefs, index);
        }
      }
      this._attachedToViewContainer = false;
    }
    destroyLView(this._lView[TVIEW], this._lView);
  }
  onDestroy(callback) {
    storeLViewOnDestroy(this._lView, callback);
  }
  /**
   * Marks a view and all of its ancestors dirty.
   *
   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is
   * checked when it needs to be re-rendered but the two normal triggers haven't marked it
   * dirty (i.e. inputs haven't changed and events haven't fired in the view).
   *
   * <!-- TODO: Add a link to a chapter on OnPush components -->
   *
   * @usageNotes
   * ### Example
   *
   * ```ts
   * @Component({
   *   selector: 'app-root',
   *   template: `Number of ticks: {{numberOfTicks}}`
   *   changeDetection: ChangeDetectionStrategy.OnPush,
   * })
   * class AppComponent {
   *   numberOfTicks = 0;
   *
   *   constructor(private ref: ChangeDetectorRef) {
   *     setInterval(() => {
   *       this.numberOfTicks++;
   *       // the following is required, otherwise the view will not be updated
   *       this.ref.markForCheck();
   *     }, 1000);
   *   }
   * }
   * ```
   */
  markForCheck() {
    markViewDirty(
      this._cdRefInjectingView || this._lView,
      4
      /* NotificationSource.MarkForCheck */
    );
  }
  /**
   * Detaches the view from the change detection tree.
   *
   * Detached views will not be checked during change detection runs until they are
   * re-attached, even if they are dirty. `detach` can be used in combination with
   * {@link ChangeDetectorRef#detectChanges} to implement local change
   * detection checks.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example defines a component with a large list of readonly data.
   * Imagine the data changes constantly, many times per second. For performance reasons,
   * we want to check and update the list every five seconds. We can do that by detaching
   * the component's change detector and doing a local check every five seconds.
   *
   * ```ts
   * class DataProvider {
   *   // in a real application the returned data will be different every time
   *   get data() {
   *     return [1,2,3,4,5];
   *   }
   * }
   *
   * @Component({
   *   selector: 'giant-list',
   *   template: `
   *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
   *   `,
   * })
   * class GiantList {
   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
   *     ref.detach();
   *     setInterval(() => {
   *       this.ref.detectChanges();
   *     }, 5000);
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   providers: [DataProvider],
   *   template: `
   *     <giant-list><giant-list>
   *   `,
   * })
   * class App {
   * }
   * ```
   */
  detach() {
    this._lView[FLAGS] &= -129;
  }
  /**
   * Re-attaches a view to the change detection tree.
   *
   * This can be used to re-attach views that were previously detached from the tree
   * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example creates a component displaying `live` data. The component will detach
   * its change detector from the main change detector tree when the component's live property
   * is set to false.
   *
   * ```ts
   * class DataProvider {
   *   data = 1;
   *
   *   constructor() {
   *     setInterval(() => {
   *       this.data = this.data * 2;
   *     }, 500);
   *   }
   * }
   *
   * @Component({
   *   selector: 'live-data',
   *   inputs: ['live'],
   *   template: 'Data: {{dataProvider.data}}'
   * })
   * class LiveData {
   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
   *
   *   set live(value) {
   *     if (value) {
   *       this.ref.reattach();
   *     } else {
   *       this.ref.detach();
   *     }
   *   }
   * }
   *
   * @Component({
   *   selector: 'app-root',
   *   providers: [DataProvider],
   *   template: `
   *     Live Update: <input type="checkbox" [(ngModel)]="live">
   *     <live-data [live]="live"><live-data>
   *   `,
   * })
   * class AppComponent {
   *   live = true;
   * }
   * ```
   */
  reattach() {
    updateAncestorTraversalFlagsOnAttach(this._lView);
    this._lView[FLAGS] |= 128;
  }
  /**
   * Checks the view and its children.
   *
   * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement
   * local change detection checks.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example defines a component with a large list of readonly data.
   * Imagine, the data changes constantly, many times per second. For performance reasons,
   * we want to check and update the list every five seconds.
   *
   * We can do that by detaching the component's change detector and doing a local change detection
   * check every five seconds.
   *
   * See {@link ChangeDetectorRef#detach} for more information.
   */
  detectChanges() {
    this._lView[FLAGS] |= 1024;
    detectChangesInternal(this._lView, this.notifyErrorHandler);
  }
  /**
   * Checks the change detector and its children, and throws if any changes are detected.
   *
   * This is used in development mode to verify that running change detection doesn't
   * introduce other changes.
   */
  checkNoChanges() {
    if (ngDevMode) {
      checkNoChangesInternal(this._lView, CheckNoChangesMode.OnlyDirtyViews, this.notifyErrorHandler);
    }
  }
  attachToViewContainerRef() {
    if (this._appRef) {
      throw new RuntimeError(902, ngDevMode && "This view is already attached directly to the ApplicationRef!");
    }
    this._attachedToViewContainer = true;
  }
  detachFromAppRef() {
    this._appRef = null;
    const isRoot = isRootView(this._lView);
    const declarationContainer = this._lView[DECLARATION_LCONTAINER];
    if (declarationContainer !== null && !isRoot) {
      detachMovedView(declarationContainer, this._lView);
    }
    detachViewFromDOM(this._lView[TVIEW], this._lView);
  }
  attachToAppRef(appRef) {
    if (this._attachedToViewContainer) {
      throw new RuntimeError(902, ngDevMode && "This view is already attached to a ViewContainer!");
    }
    this._appRef = appRef;
    const isRoot = isRootView(this._lView);
    const declarationContainer = this._lView[DECLARATION_LCONTAINER];
    if (declarationContainer !== null && !isRoot) {
      trackMovedView(declarationContainer, this._lView);
    }
    updateAncestorTraversalFlagsOnAttach(this._lView);
  }
};
var TemplateRef = class {
  /**
   * @internal
   * @nocollapse
   */
  static __NG_ELEMENT_ID__ = injectTemplateRef;
};
var ViewEngineTemplateRef = TemplateRef;
var R3TemplateRef = class TemplateRef2 extends ViewEngineTemplateRef {
  _declarationLView;
  _declarationTContainer;
  elementRef;
  constructor(_declarationLView, _declarationTContainer, elementRef) {
    super();
    this._declarationLView = _declarationLView;
    this._declarationTContainer = _declarationTContainer;
    this.elementRef = elementRef;
  }
  /**
   * Returns an `ssrId` associated with a TView, which was used to
   * create this instance of the `TemplateRef`.
   *
   * @internal
   */
  get ssrId() {
    return this._declarationTContainer.tView?.ssrId || null;
  }
  createEmbeddedView(context2, injector) {
    return this.createEmbeddedViewImpl(context2, injector);
  }
  /**
   * @internal
   */
  createEmbeddedViewImpl(context2, injector, dehydratedView) {
    const embeddedLView = createAndRenderEmbeddedLView(this._declarationLView, this._declarationTContainer, context2, {
      embeddedViewInjector: injector,
      dehydratedView
    });
    return new ViewRef$1(embeddedLView);
  }
};
function injectTemplateRef() {
  return createTemplateRef(getCurrentTNode(), getLView());
}
function createTemplateRef(hostTNode, hostLView) {
  if (hostTNode.type & 4) {
    ngDevMode && assertDefined(hostTNode.tView, "TView must be allocated");
    return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));
  }
  return null;
}
var AT_THIS_LOCATION = "<-- AT THIS LOCATION";
function getFriendlyStringFromTNodeType(tNodeType) {
  switch (tNodeType) {
    case 4:
      return "view container";
    case 2:
      return "element";
    case 8:
      return "ng-container";
    case 32:
      return "icu";
    case 64:
      return "i18n";
    case 16:
      return "projection";
    case 1:
      return "text";
    case 128:
      return "@let";
    default:
      return "<unknown>";
  }
}
function validateSiblingNodeExists(node) {
  validateNodeExists(node);
  if (!node.nextSibling) {
    const header = "During hydration Angular expected more sibling nodes to be present.\n\n";
    const actual = `Actual DOM is:

${describeDomFromNode(node)}

`;
    const footer = getHydrationErrorFooter();
    const message = header + actual + footer;
    markRNodeAsHavingHydrationMismatch(node, "", actual);
    throw new RuntimeError(-501, message);
  }
}
function validateNodeExists(node, lView = null, tNode = null) {
  if (!node) {
    const header = "During hydration, Angular expected an element to be present at this location.\n\n";
    let expected = "";
    let footer = "";
    if (lView !== null && tNode !== null) {
      expected = describeExpectedDom(lView, tNode, false);
      footer = getHydrationErrorFooter();
      markRNodeAsHavingHydrationMismatch(unwrapRNode(lView[HOST]), expected, "");
    }
    throw new RuntimeError(-502, `${header}${expected}

${footer}`);
  }
}
function stringifyTNodeAttrs(tNode) {
  const results = [];
  if (tNode.attrs) {
    for (let i = 0; i < tNode.attrs.length; ) {
      const attrName = tNode.attrs[i++];
      if (typeof attrName == "number") {
        break;
      }
      const attrValue = tNode.attrs[i++];
      results.push(`${attrName}="${shorten(attrValue)}"`);
    }
  }
  return results.join(" ");
}
var internalAttrs = /* @__PURE__ */ new Set(["ngh", "ng-version", "ng-server-context"]);
function stringifyRNodeAttrs(rNode) {
  const results = [];
  for (let i = 0; i < rNode.attributes.length; i++) {
    const attr = rNode.attributes[i];
    if (internalAttrs.has(attr.name)) continue;
    results.push(`${attr.name}="${shorten(attr.value)}"`);
  }
  return results.join(" ");
}
function describeTNode(tNode, innerContent = "\u2026") {
  switch (tNode.type) {
    case 1:
      const content = tNode.value ? `(${tNode.value})` : "";
      return `#text${content}`;
    case 2:
      const attrs = stringifyTNodeAttrs(tNode);
      const tag = tNode.value.toLowerCase();
      return `<${tag}${attrs ? " " + attrs : ""}>${innerContent}</${tag}>`;
    case 8:
      return "<!-- ng-container -->";
    case 4:
      return "<!-- container -->";
    default:
      const typeAsString = getFriendlyStringFromTNodeType(tNode.type);
      return `#node(${typeAsString})`;
  }
}
function describeRNode(rNode, innerContent = "\u2026") {
  const node = rNode;
  switch (node.nodeType) {
    case Node.ELEMENT_NODE:
      const tag = node.tagName.toLowerCase();
      const attrs = stringifyRNodeAttrs(node);
      return `<${tag}${attrs ? " " + attrs : ""}>${innerContent}</${tag}>`;
    case Node.TEXT_NODE:
      const content = node.textContent ? shorten(node.textContent) : "";
      return `#text${content ? `(${content})` : ""}`;
    case Node.COMMENT_NODE:
      return `<!-- ${shorten(node.textContent ?? "")} -->`;
    default:
      return `#node(${node.nodeType})`;
  }
}
function describeExpectedDom(lView, tNode, isViewContainerAnchor) {
  const spacer = "  ";
  let content = "";
  if (tNode.prev) {
    content += spacer + "\u2026\n";
    content += spacer + describeTNode(tNode.prev) + "\n";
  } else if (tNode.type && tNode.type & 12) {
    content += spacer + "\u2026\n";
  }
  if (isViewContainerAnchor) {
    content += spacer + describeTNode(tNode) + "\n";
    content += spacer + `<!-- container -->  ${AT_THIS_LOCATION}
`;
  } else {
    content += spacer + describeTNode(tNode) + `  ${AT_THIS_LOCATION}
`;
  }
  content += spacer + "\u2026\n";
  const parentRNode = tNode.type ? getParentRElement(lView[TVIEW], tNode, lView) : null;
  if (parentRNode) {
    content = describeRNode(parentRNode, "\n" + content);
  }
  return content;
}
function describeDomFromNode(node) {
  const spacer = "  ";
  let content = "";
  const currentNode = node;
  if (currentNode.previousSibling) {
    content += spacer + "\u2026\n";
    content += spacer + describeRNode(currentNode.previousSibling) + "\n";
  }
  content += spacer + describeRNode(currentNode) + `  ${AT_THIS_LOCATION}
`;
  if (node.nextSibling) {
    content += spacer + "\u2026\n";
  }
  if (node.parentNode) {
    content = describeRNode(currentNode.parentNode, "\n" + content);
  }
  return content;
}
function getHydrationErrorFooter(componentClassName) {
  const componentInfo = componentClassName ? `the "${componentClassName}"` : "corresponding";
  return `To fix this problem:
  * check ${componentInfo} component for hydration-related issues
  * check to see if your template has valid HTML structure
  * or skip hydration by adding the \`ngSkipHydration\` attribute to its host node in a template

`;
}
function stripNewlines(input2) {
  return input2.replace(/\s+/gm, "");
}
function shorten(input2, maxLength = 50) {
  if (!input2) {
    return "";
  }
  input2 = stripNewlines(input2);
  return input2.length > maxLength ? `${input2.substring(0, maxLength - 1)}\u2026` : input2;
}
function getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {
  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;
  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;
  if (insertBeforeIndex === null) {
    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);
  } else {
    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);
    return unwrapRNode(lView[insertBeforeIndex]);
  }
}
function processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {
  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;
  if (Array.isArray(tNodeInsertBeforeIndex)) {
    ngDevMode && assertDomNode(childRNode);
    let i18nParent = childRNode;
    let anchorRNode = null;
    if (!(childTNode.type & 3)) {
      anchorRNode = i18nParent;
      i18nParent = parentRElement;
    }
    if (i18nParent !== null && childTNode.componentOffset === -1) {
      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {
        const i18nChild = lView[tNodeInsertBeforeIndex[i]];
        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);
      }
    }
  }
}
function getOrCreateTNode(tView, index, type, name, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, "TNodes can't be in the LView header.");
  ngDevMode && assertPureTNodeType(type);
  let tNode = tView.data[index];
  if (tNode === null) {
    tNode = createTNodeAtIndex(tView, index, type, name, attrs);
    if (isInI18nBlock()) {
      tNode.flags |= 32;
    }
  } else if (tNode.type & 64) {
    tNode.type = type;
    tNode.value = name;
    tNode.attrs = attrs;
    const parent = getCurrentParentTNode();
    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;
    ngDevMode && assertTNodeForTView(tNode, tView);
    ngDevMode && assertEqual(index, tNode.index, "Expecting same index");
  }
  setCurrentTNode(tNode, true);
  return tNode;
}
function createTNodeAtIndex(tView, index, type, name, attrs) {
  const currentTNode = getCurrentTNodePlaceholderOk();
  const isParent = isCurrentTNodeParent();
  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;
  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs);
  linkTNodeInTView(tView, tNode, currentTNode, isParent);
  return tNode;
}
function linkTNodeInTView(tView, tNode, currentTNode, isParent) {
  if (tView.firstChild === null) {
    tView.firstChild = tNode;
  }
  if (currentTNode !== null) {
    if (isParent) {
      if (currentTNode.child == null && tNode.parent !== null) {
        currentTNode.child = tNode;
      }
    } else {
      if (currentTNode.next === null) {
        currentTNode.next = tNode;
        tNode.prev = currentTNode;
      }
    }
  }
}
function createTNode(tView, tParent, type, index, value, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, "TNodes can't be in the LView header.");
  ngDevMode && assertNotSame(attrs, void 0, "'undefined' is not valid value for 'attrs'");
  ngDevMode && ngDevMode.tNode++;
  ngDevMode && tParent && assertTNodeForTView(tParent, tView);
  let injectorIndex = tParent ? tParent.injectorIndex : -1;
  let flags = 0;
  if (isInSkipHydrationBlock$1()) {
    flags |= 128;
  }
  const tNode = {
    type,
    index,
    insertBeforeIndex: null,
    injectorIndex,
    directiveStart: -1,
    directiveEnd: -1,
    directiveStylingLast: -1,
    componentOffset: -1,
    propertyBindings: null,
    flags,
    providerIndexes: 0,
    value,
    attrs,
    mergedAttrs: null,
    localNames: null,
    initialInputs: null,
    inputs: null,
    hostDirectiveInputs: null,
    outputs: null,
    hostDirectiveOutputs: null,
    directiveToIndex: null,
    tView: null,
    next: null,
    prev: null,
    projectionNext: null,
    child: null,
    parent: tParent,
    projection: null,
    styles: null,
    stylesWithoutHost: null,
    residualStyles: void 0,
    classes: null,
    classesWithoutHost: null,
    residualClasses: void 0,
    classBindings: 0,
    styleBindings: 0
  };
  if (ngDevMode) {
    Object.seal(tNode);
  }
  return tNode;
}
function addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {
  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, "We expect that insertBeforeIndex is not set");
  previousTNodes.push(newTNode);
  if (previousTNodes.length > 1) {
    for (let i = previousTNodes.length - 2; i >= 0; i--) {
      const existingTNode = previousTNodes[i];
      if (!isI18nText(existingTNode)) {
        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {
          setInsertBeforeIndex(existingTNode, newTNode.index);
        }
      }
    }
  }
}
function isI18nText(tNode) {
  return !(tNode.type & 64);
}
function isNewTNodeCreatedBefore(existingTNode, newTNode) {
  return isI18nText(newTNode) || existingTNode.index > newTNode.index;
}
function getInsertBeforeIndex(tNode) {
  const index = tNode.insertBeforeIndex;
  return Array.isArray(index) ? index[0] : index;
}
function setInsertBeforeIndex(tNode, value) {
  const index = tNode.insertBeforeIndex;
  if (Array.isArray(index)) {
    index[0] = value;
  } else {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    tNode.insertBeforeIndex = value;
  }
}
function getTIcu(tView, index) {
  const value = tView.data[index];
  if (value === null || typeof value === "string") return null;
  if (ngDevMode && !(value.hasOwnProperty("tView") || value.hasOwnProperty("currentCaseLViewIndex"))) {
    throwError2("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: " + value);
  }
  const tIcu = value.hasOwnProperty("currentCaseLViewIndex") ? value : value.value;
  ngDevMode && assertTIcu(tIcu);
  return tIcu;
}
function setTIcu(tView, index, tIcu) {
  const tNode = tView.data[index];
  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty("tView"), true, "We expect to get 'null'|'TIcuContainer'");
  if (tNode === null) {
    tView.data[index] = tIcu;
  } else {
    ngDevMode && assertTNodeType(
      tNode,
      32
      /* TNodeType.Icu */
    );
    tNode.value = tIcu;
  }
}
function setTNodeInsertBeforeIndex(tNode, index) {
  ngDevMode && assertTNode(tNode);
  let insertBeforeIndex = tNode.insertBeforeIndex;
  if (insertBeforeIndex === null) {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    insertBeforeIndex = tNode.insertBeforeIndex = [null, index];
  } else {
    assertEqual(Array.isArray(insertBeforeIndex), true, "Expecting array here");
    insertBeforeIndex.push(index);
  }
}
function createTNodePlaceholder(tView, previousTNodes, index) {
  const tNode = createTNodeAtIndex(tView, index, 64, null, null);
  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);
  return tNode;
}
function getCurrentICUCaseIndex(tIcu, lView) {
  const currentCase = lView[tIcu.currentCaseLViewIndex];
  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;
}
function getParentFromIcuCreateOpCode(mergedCode) {
  return mergedCode >>> 17;
}
function getRefFromIcuCreateOpCode(mergedCode) {
  return (mergedCode & 131070) >>> 1;
}
function getInstructionFromIcuCreateOpCode(mergedCode) {
  return mergedCode & 1;
}
function icuCreateOpCode(opCode, parentIdx, refIdx) {
  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, "Missing parent index");
  ngDevMode && assertGreaterThan(refIdx, 0, "Missing ref index");
  return opCode | parentIdx << 17 | refIdx << 1;
}
function isRootTemplateMessage(subTemplateIndex) {
  return subTemplateIndex === -1;
}
function enterIcu(state, tIcu, lView) {
  state.index = 0;
  const currentCase = getCurrentICUCaseIndex(tIcu, lView);
  if (currentCase !== null) {
    ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);
    state.removes = tIcu.remove[currentCase];
  } else {
    state.removes = EMPTY_ARRAY;
  }
}
function icuContainerIteratorNext(state) {
  if (state.index < state.removes.length) {
    const removeOpCode = state.removes[state.index++];
    ngDevMode && assertNumber(removeOpCode, "Expecting OpCode number");
    if (removeOpCode > 0) {
      const rNode = state.lView[removeOpCode];
      ngDevMode && assertDomNode(rNode);
      return rNode;
    } else {
      state.stack.push(state.index, state.removes);
      const tIcuIndex = ~removeOpCode;
      const tIcu = state.lView[TVIEW].data[tIcuIndex];
      ngDevMode && assertTIcu(tIcu);
      enterIcu(state, tIcu, state.lView);
      return icuContainerIteratorNext(state);
    }
  } else {
    if (state.stack.length === 0) {
      return null;
    } else {
      state.removes = state.stack.pop();
      state.index = state.stack.pop();
      return icuContainerIteratorNext(state);
    }
  }
}
function loadIcuContainerVisitor() {
  const _state = {
    stack: [],
    index: -1
  };
  function icuContainerIteratorStart(tIcuContainerNode, lView) {
    _state.lView = lView;
    while (_state.stack.length) _state.stack.pop();
    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);
    enterIcu(_state, tIcuContainerNode.value, lView);
    return icuContainerIteratorNext.bind(null, _state);
  }
  return icuContainerIteratorStart;
}
var REF_EXTRACTOR_REGEXP = /* @__PURE__ */ new RegExp(`^(\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`);
var _prepareI18nBlockForHydrationImpl = () => {
};
function prepareI18nBlockForHydration(lView, index, parentTNode, subTemplateIndex) {
  _prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex);
}
var _claimDehydratedIcuCaseImpl = () => {
};
function claimDehydratedIcuCase(lView, icuIndex, caseIndex) {
  _claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex);
}
function cleanupI18nHydrationData(lView) {
  const hydrationInfo = lView[HYDRATION];
  if (hydrationInfo) {
    const {
      i18nNodes,
      dehydratedIcuData: dehydratedIcuDataMap
    } = hydrationInfo;
    if (i18nNodes && dehydratedIcuDataMap) {
      const renderer = lView[RENDERER];
      for (const dehydratedIcuData of dehydratedIcuDataMap.values()) {
        cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData);
      }
    }
    hydrationInfo.i18nNodes = void 0;
    hydrationInfo.dehydratedIcuData = void 0;
  }
}
function cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData) {
  for (const node of dehydratedIcuData.node.cases[dehydratedIcuData.case]) {
    const rNode = i18nNodes.get(node.index - HEADER_OFFSET);
    if (rNode) {
      nativeRemoveNode(renderer, rNode, false);
    }
  }
}
function removeDehydratedViews(lContainer) {
  const views = lContainer[DEHYDRATED_VIEWS] ?? [];
  const parentLView = lContainer[PARENT];
  const renderer = parentLView[RENDERER];
  const retainedViews = [];
  for (const view of views) {
    if (view.data[DEFER_BLOCK_ID] !== void 0) {
      retainedViews.push(view);
    } else {
      removeDehydratedView(view, renderer);
      ngDevMode && ngDevMode.dehydratedViewsRemoved++;
    }
  }
  lContainer[DEHYDRATED_VIEWS] = retainedViews;
}
function removeDehydratedViewList(deferBlock) {
  const {
    lContainer
  } = deferBlock;
  const dehydratedViews = lContainer[DEHYDRATED_VIEWS];
  if (dehydratedViews === null) return;
  const parentLView = lContainer[PARENT];
  const renderer = parentLView[RENDERER];
  for (const view of dehydratedViews) {
    removeDehydratedView(view, renderer);
    ngDevMode && ngDevMode.dehydratedViewsRemoved++;
  }
}
function removeDehydratedView(dehydratedView, renderer) {
  let nodesRemoved = 0;
  let currentRNode = dehydratedView.firstChild;
  if (currentRNode) {
    const numNodes = dehydratedView.data[NUM_ROOT_NODES];
    while (nodesRemoved < numNodes) {
      ngDevMode && validateSiblingNodeExists(currentRNode);
      const nextSibling = currentRNode.nextSibling;
      nativeRemoveNode(renderer, currentRNode, false);
      currentRNode = nextSibling;
      nodesRemoved++;
    }
  }
}
function cleanupLContainer(lContainer) {
  removeDehydratedViews(lContainer);
  const hostLView = lContainer[HOST];
  if (isLView(hostLView)) {
    cleanupLView(hostLView);
  }
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    cleanupLView(lContainer[i]);
  }
}
function cleanupLView(lView) {
  cleanupI18nHydrationData(lView);
  const tView = lView[TVIEW];
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    if (isLContainer(lView[i])) {
      const lContainer = lView[i];
      cleanupLContainer(lContainer);
    } else if (isLView(lView[i])) {
      cleanupLView(lView[i]);
    }
  }
}
function cleanupDehydratedViews(appRef) {
  const viewRefs = appRef._views;
  for (const viewRef of viewRefs) {
    const lNode = getLNodeForHydration(viewRef);
    if (lNode !== null && lNode[HOST] !== null) {
      if (isLView(lNode)) {
        cleanupLView(lNode);
      } else {
        cleanupLContainer(lNode);
      }
      ngDevMode && ngDevMode.dehydratedViewsCleanupRuns++;
    }
  }
}
function cleanupHydratedDeferBlocks(deferBlock, hydratedBlocks, registry, appRef) {
  if (deferBlock !== null) {
    registry.cleanup(hydratedBlocks);
    cleanupLContainer(deferBlock.lContainer);
    cleanupDehydratedViews(appRef);
  }
}
var _findMatchingDehydratedViewImpl = () => null;
function findMatchingDehydratedView(lContainer, template) {
  return _findMatchingDehydratedViewImpl(lContainer, template);
}
var ComponentRef$1 = class ComponentRef {
};
var ComponentFactory$1 = class ComponentFactory {
};
var _NullComponentFactoryResolver = class {
  resolveComponentFactory(component) {
    throw Error(`No component factory found for ${stringify(component)}.`);
  }
};
var ComponentFactoryResolver$1 = class ComponentFactoryResolver {
  static NULL = new _NullComponentFactoryResolver();
};
var RendererFactory2 = class {
};
var Renderer2 = class {
  /**
   * If null or undefined, the view engine won't call it.
   * This is used as a performance optimization for production mode.
   */
  destroyNode = null;
  /**
   * @internal
   * @nocollapse
   */
  static __NG_ELEMENT_ID__ = () => injectRenderer2();
};
function injectRenderer2() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];
}
var Sanitizer = class _Sanitizer {
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _Sanitizer,
      providedIn: "root",
      factory: () => null
    })
  );
};
function isModuleWithProviders(value) {
  return value.ngModule !== void 0;
}
function isNgModule(value) {
  return !!getNgModuleDef(value);
}
function isPipe(value) {
  return !!getPipeDef$1(value);
}
function isDirective(value) {
  return !!getDirectiveDef(value);
}
function isComponent(value) {
  return !!getComponentDef(value);
}
function getDependencyTypeForError(type) {
  if (getComponentDef(type)) return "component";
  if (getDirectiveDef(type)) return "directive";
  if (getPipeDef$1(type)) return "pipe";
  return "type";
}
function verifyStandaloneImport(depType, importingType) {
  if (isForwardRef(depType)) {
    depType = resolveForwardRef(depType);
    if (!depType) {
      throw new Error(`Expected forwardRef function, imported from "${stringifyForError(importingType)}", to return a standalone entity or NgModule but got "${stringifyForError(depType) || depType}".`);
    }
  }
  if (getNgModuleDef(depType) == null) {
    const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef$1(depType);
    if (def != null) {
      if (!def.standalone) {
        throw new Error(`The "${stringifyForError(depType)}" ${getDependencyTypeForError(depType)}, imported from "${stringifyForError(importingType)}", is not standalone. Did you forget to add the standalone: true flag?`);
      }
    } else {
      if (isModuleWithProviders(depType)) {
        throw new Error(`A module with providers was imported from "${stringifyForError(importingType)}". Modules with providers are not supported in standalone components imports.`);
      } else {
        throw new Error(`The "${stringifyForError(depType)}" type, imported from "${stringifyForError(importingType)}", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);
      }
    }
  }
}
var DepsTracker = class {
  ownerNgModule = /* @__PURE__ */ new Map();
  ngModulesWithSomeUnresolvedDecls = /* @__PURE__ */ new Set();
  ngModulesScopeCache = /* @__PURE__ */ new Map();
  standaloneComponentsScopeCache = /* @__PURE__ */ new Map();
  /**
   * Attempts to resolve ng module's forward ref declarations as much as possible and add them to
   * the `ownerNgModule` map. This method normally should be called after the initial parsing when
   * all the forward refs are resolved (e.g., when trying to render a component)
   */
  resolveNgModulesDecls() {
    if (this.ngModulesWithSomeUnresolvedDecls.size === 0) {
      return;
    }
    for (const moduleType of this.ngModulesWithSomeUnresolvedDecls) {
      const def = getNgModuleDef(moduleType);
      if (def?.declarations) {
        for (const decl of maybeUnwrapFn(def.declarations)) {
          if (isComponent(decl)) {
            this.ownerNgModule.set(decl, moduleType);
          }
        }
      }
    }
    this.ngModulesWithSomeUnresolvedDecls.clear();
  }
  /** @override */
  getComponentDependencies(type, rawImports) {
    this.resolveNgModulesDecls();
    const def = getComponentDef(type);
    if (def === null) {
      throw new Error(`Attempting to get component dependencies for a type that is not a component: ${type}`);
    }
    if (def.standalone) {
      const scope = this.getStandaloneComponentScope(type, rawImports);
      if (scope.compilation.isPoisoned) {
        return {
          dependencies: []
        };
      }
      return {
        dependencies: [...scope.compilation.directives, ...scope.compilation.pipes, ...scope.compilation.ngModules]
      };
    } else {
      if (!this.ownerNgModule.has(type)) {
        return {
          dependencies: []
        };
      }
      const scope = this.getNgModuleScope(this.ownerNgModule.get(type));
      if (scope.compilation.isPoisoned) {
        return {
          dependencies: []
        };
      }
      return {
        dependencies: [...scope.compilation.directives, ...scope.compilation.pipes]
      };
    }
  }
  /**
   * @override
   * This implementation does not make use of param scopeInfo since it assumes the scope info is
   * already added to the type itself through methods like {@link ɵɵsetNgModuleScope}
   */
  registerNgModule(type, scopeInfo) {
    if (!isNgModule(type)) {
      throw new Error(`Attempting to register a Type which is not NgModule as NgModule: ${type}`);
    }
    this.ngModulesWithSomeUnresolvedDecls.add(type);
  }
  /** @override */
  clearScopeCacheFor(type) {
    this.ngModulesScopeCache.delete(type);
    this.standaloneComponentsScopeCache.delete(type);
  }
  /** @override */
  getNgModuleScope(type) {
    if (this.ngModulesScopeCache.has(type)) {
      return this.ngModulesScopeCache.get(type);
    }
    const scope = this.computeNgModuleScope(type);
    this.ngModulesScopeCache.set(type, scope);
    return scope;
  }
  /** Compute NgModule scope afresh. */
  computeNgModuleScope(type) {
    const def = getNgModuleDef(type, true);
    const scope = {
      exported: {
        directives: /* @__PURE__ */ new Set(),
        pipes: /* @__PURE__ */ new Set()
      },
      compilation: {
        directives: /* @__PURE__ */ new Set(),
        pipes: /* @__PURE__ */ new Set()
      }
    };
    for (const imported of maybeUnwrapFn(def.imports)) {
      if (isNgModule(imported)) {
        const importedScope = this.getNgModuleScope(imported);
        addSet(importedScope.exported.directives, scope.compilation.directives);
        addSet(importedScope.exported.pipes, scope.compilation.pipes);
      } else if (isStandalone(imported)) {
        if (isDirective(imported) || isComponent(imported)) {
          scope.compilation.directives.add(imported);
        } else if (isPipe(imported)) {
          scope.compilation.pipes.add(imported);
        } else {
          throw new RuntimeError(980, "The standalone imported type is neither a component nor a directive nor a pipe");
        }
      } else {
        scope.compilation.isPoisoned = true;
        break;
      }
    }
    if (!scope.compilation.isPoisoned) {
      for (const decl of maybeUnwrapFn(def.declarations)) {
        if (isNgModule(decl) || isStandalone(decl)) {
          scope.compilation.isPoisoned = true;
          break;
        }
        if (isPipe(decl)) {
          scope.compilation.pipes.add(decl);
        } else {
          scope.compilation.directives.add(decl);
        }
      }
    }
    for (const exported of maybeUnwrapFn(def.exports)) {
      if (isNgModule(exported)) {
        const exportedScope = this.getNgModuleScope(exported);
        addSet(exportedScope.exported.directives, scope.exported.directives);
        addSet(exportedScope.exported.pipes, scope.exported.pipes);
        addSet(exportedScope.exported.directives, scope.compilation.directives);
        addSet(exportedScope.exported.pipes, scope.compilation.pipes);
      } else if (isPipe(exported)) {
        scope.exported.pipes.add(exported);
      } else {
        scope.exported.directives.add(exported);
      }
    }
    return scope;
  }
  /** @override */
  getStandaloneComponentScope(type, rawImports) {
    if (this.standaloneComponentsScopeCache.has(type)) {
      return this.standaloneComponentsScopeCache.get(type);
    }
    const ans = this.computeStandaloneComponentScope(type, rawImports);
    this.standaloneComponentsScopeCache.set(type, ans);
    return ans;
  }
  computeStandaloneComponentScope(type, rawImports) {
    const ans = {
      compilation: {
        // Standalone components are always able to self-reference.
        directives: /* @__PURE__ */ new Set([type]),
        pipes: /* @__PURE__ */ new Set(),
        ngModules: /* @__PURE__ */ new Set()
      }
    };
    for (const rawImport of flatten(rawImports ?? [])) {
      const imported = resolveForwardRef(rawImport);
      try {
        verifyStandaloneImport(imported, type);
      } catch (e2) {
        ans.compilation.isPoisoned = true;
        return ans;
      }
      if (isNgModule(imported)) {
        ans.compilation.ngModules.add(imported);
        const importedScope = this.getNgModuleScope(imported);
        if (importedScope.exported.isPoisoned) {
          ans.compilation.isPoisoned = true;
          return ans;
        }
        addSet(importedScope.exported.directives, ans.compilation.directives);
        addSet(importedScope.exported.pipes, ans.compilation.pipes);
      } else if (isPipe(imported)) {
        ans.compilation.pipes.add(imported);
      } else if (isDirective(imported) || isComponent(imported)) {
        ans.compilation.directives.add(imported);
      } else {
        ans.compilation.isPoisoned = true;
        return ans;
      }
    }
    return ans;
  }
  /** @override */
  isOrphanComponent(cmp) {
    const def = getComponentDef(cmp);
    if (!def || def.standalone) {
      return false;
    }
    this.resolveNgModulesDecls();
    return !this.ownerNgModule.has(cmp);
  }
};
function addSet(sourceSet, targetSet) {
  for (const m of sourceSet) {
    targetSet.add(m);
  }
}
var depsTracker = new DepsTracker();
var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
var ChainedInjector = class {
  injector;
  parentInjector;
  constructor(injector, parentInjector) {
    this.injector = injector;
    this.parentInjector = parentInjector;
  }
  get(token, notFoundValue, flags) {
    flags = convertToBitFlags(flags);
    const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);
    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
      return value;
    }
    return this.parentInjector.get(token, notFoundValue, flags);
  }
};
function computeStaticStyling(tNode, attrs, writeToHost) {
  ngDevMode && assertFirstCreatePass(getTView(), "Expecting to be called in first template pass only");
  let styles = writeToHost ? tNode.styles : null;
  let classes = writeToHost ? tNode.classes : null;
  let mode = 0;
  if (attrs !== null) {
    for (let i = 0; i < attrs.length; i++) {
      const value = attrs[i];
      if (typeof value === "number") {
        mode = value;
      } else if (mode == 1) {
        classes = concatStringsWithSpace(classes, value);
      } else if (mode == 2) {
        const style = value;
        const styleValue = attrs[++i];
        styles = concatStringsWithSpace(styles, style + ": " + styleValue + ";");
      }
    }
  }
  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;
  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
}
function \u0275\u0275directiveInject(token, flags = InjectFlags.Default) {
  const lView = getLView();
  if (lView === null) {
    ngDevMode && assertInjectImplementationNotEqual(\u0275\u0275directiveInject);
    return \u0275\u0275inject(token, flags);
  }
  const tNode = getCurrentTNode();
  const value = getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);
  ngDevMode && emitInjectEvent(token, value, flags);
  return value;
}
function \u0275\u0275invalidFactory() {
  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : "invalid";
  throw new Error(msg);
}
function resolveDirectives(tView, lView, tNode, localRefs, directiveMatcher) {
  ngDevMode && assertFirstCreatePass(tView);
  const exportsMap = localRefs === null ? null : {
    "": -1
  };
  const matchedDirectiveDefs = directiveMatcher(tView, tNode);
  if (matchedDirectiveDefs !== null) {
    let directiveDefs;
    let hostDirectiveDefs = null;
    let hostDirectiveRanges = null;
    const hostDirectiveResolution = resolveHostDirectives(matchedDirectiveDefs);
    if (hostDirectiveResolution === null) {
      directiveDefs = matchedDirectiveDefs;
    } else {
      [directiveDefs, hostDirectiveDefs, hostDirectiveRanges] = hostDirectiveResolution;
    }
    initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs, hostDirectiveRanges);
  }
  if (exportsMap !== null && localRefs !== null) {
    cacheMatchingLocalNames(tNode, localRefs, exportsMap);
  }
}
function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
  const localNames = tNode.localNames = [];
  for (let i = 0; i < localRefs.length; i += 2) {
    const index = exportsMap[localRefs[i + 1]];
    if (index == null) throw new RuntimeError(-301, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);
    localNames.push(localRefs[i], index);
  }
}
function resolveHostDirectives(matches) {
  let componentDef = null;
  let hasHostDirectives = false;
  for (let i = 0; i < matches.length; i++) {
    const def = matches[i];
    if (i === 0 && isComponentDef(def)) {
      componentDef = def;
    }
    if (def.findHostDirectiveDefs !== null) {
      hasHostDirectives = true;
      break;
    }
  }
  if (!hasHostDirectives) {
    return null;
  }
  let allDirectiveDefs = null;
  let hostDirectiveDefs = null;
  let hostDirectiveRanges = null;
  for (const def of matches) {
    if (def.findHostDirectiveDefs !== null) {
      allDirectiveDefs ??= [];
      hostDirectiveDefs ??= /* @__PURE__ */ new Map();
      hostDirectiveRanges ??= /* @__PURE__ */ new Map();
      resolveHostDirectivesForDef(def, allDirectiveDefs, hostDirectiveRanges, hostDirectiveDefs);
    }
    if (def === componentDef) {
      allDirectiveDefs ??= [];
      allDirectiveDefs.push(def);
    }
  }
  if (allDirectiveDefs !== null) {
    allDirectiveDefs.push(...componentDef === null ? matches : matches.slice(1));
    ngDevMode && assertNoDuplicateDirectives(allDirectiveDefs);
    return [allDirectiveDefs, hostDirectiveDefs, hostDirectiveRanges];
  }
  return null;
}
function resolveHostDirectivesForDef(def, allDirectiveDefs, hostDirectiveRanges, hostDirectiveDefs) {
  ngDevMode && assertDefined(def.findHostDirectiveDefs, "Expected host directive resolve function");
  const start = allDirectiveDefs.length;
  def.findHostDirectiveDefs(def, allDirectiveDefs, hostDirectiveDefs);
  hostDirectiveRanges.set(def, [start, allDirectiveDefs.length - 1]);
}
function markAsComponentHost(tView, hostTNode, componentOffset) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && assertGreaterThan(componentOffset, -1, "componentOffset must be great than -1");
  hostTNode.componentOffset = componentOffset;
  (tView.components ??= []).push(hostTNode.index);
}
function initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs, hostDirectiveRanges) {
  ngDevMode && assertFirstCreatePass(tView);
  const directivesLength = directives.length;
  let hasSeenComponent = false;
  for (let i = 0; i < directivesLength; i++) {
    const def = directives[i];
    if (!hasSeenComponent && isComponentDef(def)) {
      hasSeenComponent = true;
      markAsComponentHost(tView, tNode, i);
    }
    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, def.type);
  }
  initTNodeFlags(tNode, tView.data.length, directivesLength);
  for (let i = 0; i < directivesLength; i++) {
    const def = directives[i];
    if (def.providersResolver) def.providersResolver(def);
  }
  let preOrderHooksFound = false;
  let preOrderCheckHooksFound = false;
  let directiveIdx = allocExpando(tView, lView, directivesLength, null);
  ngDevMode && assertSame(directiveIdx, tNode.directiveStart, "TNode.directiveStart should point to just allocated space");
  if (directivesLength > 0) {
    tNode.directiveToIndex = /* @__PURE__ */ new Map();
  }
  for (let i = 0; i < directivesLength; i++) {
    const def = directives[i];
    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);
    saveNameToExportMap(directiveIdx, def, exportsMap);
    if (hostDirectiveRanges !== null && hostDirectiveRanges.has(def)) {
      const [start, end] = hostDirectiveRanges.get(def);
      tNode.directiveToIndex.set(def.type, [directiveIdx, start + tNode.directiveStart, end + tNode.directiveStart]);
    } else if (hostDirectiveDefs === null || !hostDirectiveDefs.has(def)) {
      tNode.directiveToIndex.set(def.type, directiveIdx);
    }
    if (def.contentQueries !== null) tNode.flags |= 4;
    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0) tNode.flags |= 64;
    const lifeCycleHooks = def.type.prototype;
    if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
      (tView.preOrderHooks ??= []).push(tNode.index);
      preOrderHooksFound = true;
    }
    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
      (tView.preOrderCheckHooks ??= []).push(tNode.index);
      preOrderCheckHooksFound = true;
    }
    directiveIdx++;
  }
  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);
}
function initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs) {
  ngDevMode && assertFirstCreatePass(tView);
  for (let index = tNode.directiveStart; index < tNode.directiveEnd; index++) {
    const directiveDef = tView.data[index];
    if (hostDirectiveDefs === null || !hostDirectiveDefs.has(directiveDef)) {
      setupSelectorMatchedInputsOrOutputs(0, tNode, directiveDef, index);
      setupSelectorMatchedInputsOrOutputs(1, tNode, directiveDef, index);
      setupInitialInputs(tNode, index, false);
    } else {
      const hostDirectiveDef = hostDirectiveDefs.get(directiveDef);
      setupHostDirectiveInputsOrOutputs(0, tNode, hostDirectiveDef, index);
      setupHostDirectiveInputsOrOutputs(1, tNode, hostDirectiveDef, index);
      setupInitialInputs(tNode, index, true);
    }
  }
}
function setupSelectorMatchedInputsOrOutputs(mode, tNode, def, directiveIndex) {
  const aliasMap = mode === 0 ? def.inputs : def.outputs;
  for (const publicName in aliasMap) {
    if (aliasMap.hasOwnProperty(publicName)) {
      let bindings;
      if (mode === 0) {
        bindings = tNode.inputs ??= {};
      } else {
        bindings = tNode.outputs ??= {};
      }
      bindings[publicName] ??= [];
      bindings[publicName].push(directiveIndex);
      setShadowStylingInputFlags(tNode, publicName);
    }
  }
}
function setupHostDirectiveInputsOrOutputs(mode, tNode, config2, directiveIndex) {
  const aliasMap = mode === 0 ? config2.inputs : config2.outputs;
  for (const initialName in aliasMap) {
    if (aliasMap.hasOwnProperty(initialName)) {
      const publicName = aliasMap[initialName];
      let bindings;
      if (mode === 0) {
        bindings = tNode.hostDirectiveInputs ??= {};
      } else {
        bindings = tNode.hostDirectiveOutputs ??= {};
      }
      bindings[publicName] ??= [];
      bindings[publicName].push(directiveIndex, initialName);
      setShadowStylingInputFlags(tNode, publicName);
    }
  }
}
function setShadowStylingInputFlags(tNode, publicName) {
  if (publicName === "class") {
    tNode.flags |= 8;
  } else if (publicName === "style") {
    tNode.flags |= 16;
  }
}
function setupInitialInputs(tNode, directiveIndex, isHostDirective) {
  const {
    attrs,
    inputs,
    hostDirectiveInputs
  } = tNode;
  if (attrs === null || !isHostDirective && inputs === null || isHostDirective && hostDirectiveInputs === null || // Do not use unbound attributes as inputs to structural directives, since structural
  // directive inputs can only be set using microsyntax (e.g. `<div *dir="exp">`).
  isInlineTemplate(tNode)) {
    tNode.initialInputs ??= [];
    tNode.initialInputs.push(null);
    return;
  }
  let inputsToStore = null;
  let i = 0;
  while (i < attrs.length) {
    const attrName = attrs[i];
    if (attrName === 0) {
      i += 4;
      continue;
    } else if (attrName === 5) {
      i += 2;
      continue;
    } else if (typeof attrName === "number") {
      break;
    }
    if (!isHostDirective && inputs.hasOwnProperty(attrName)) {
      const inputConfig = inputs[attrName];
      for (const index of inputConfig) {
        if (index === directiveIndex) {
          inputsToStore ??= [];
          inputsToStore.push(attrName, attrs[i + 1]);
          break;
        }
      }
    } else if (isHostDirective && hostDirectiveInputs.hasOwnProperty(attrName)) {
      const config2 = hostDirectiveInputs[attrName];
      for (let j = 0; j < config2.length; j += 2) {
        if (config2[j] === directiveIndex) {
          inputsToStore ??= [];
          inputsToStore.push(config2[j + 1], attrs[i + 1]);
          break;
        }
      }
    }
    i += 2;
  }
  tNode.initialInputs ??= [];
  tNode.initialInputs.push(inputsToStore);
}
function configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {
  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, "Must be in Expando section");
  tView.data[directiveIndex] = def;
  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), \u0275\u0275directiveInject);
  tView.blueprint[directiveIndex] = nodeInjectorFactory;
  lView[directiveIndex] = nodeInjectorFactory;
  registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);
}
function registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {
  ngDevMode && assertFirstCreatePass(tView);
  const hostBindings = def.hostBindings;
  if (hostBindings) {
    let hostBindingOpCodes = tView.hostBindingOpCodes;
    if (hostBindingOpCodes === null) {
      hostBindingOpCodes = tView.hostBindingOpCodes = [];
    }
    const elementIndx = ~tNode.index;
    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {
      hostBindingOpCodes.push(elementIndx);
    }
    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);
  }
}
function lastSelectedElementIdx(hostBindingOpCodes) {
  let i = hostBindingOpCodes.length;
  while (i > 0) {
    const value = hostBindingOpCodes[--i];
    if (typeof value === "number" && value < 0) {
      return value;
    }
  }
  return 0;
}
function saveNameToExportMap(directiveIdx, def, exportsMap) {
  if (exportsMap) {
    if (def.exportAs) {
      for (let i = 0; i < def.exportAs.length; i++) {
        exportsMap[def.exportAs[i]] = directiveIdx;
      }
    }
    if (isComponentDef(def)) exportsMap[""] = directiveIdx;
  }
}
function initTNodeFlags(tNode, index, numberOfDirectives) {
  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, "Reached the max number of directives");
  tNode.flags |= 1;
  tNode.directiveStart = index;
  tNode.directiveEnd = index + numberOfDirectives;
  tNode.providerIndexes = index;
}
function assertNoDuplicateDirectives(directives) {
  if (directives.length < 2) {
    return;
  }
  const seenDirectives = /* @__PURE__ */ new Set();
  for (const current of directives) {
    if (seenDirectives.has(current)) {
      throw new RuntimeError(309, `Directive ${current.type.name} matches multiple times on the same element. Directives can only match an element once.`);
    }
    seenDirectives.add(current);
  }
}
function elementStartFirstCreatePass(index, tView, lView, name, directiveMatcher, bindingsEnabled, attrsIndex, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const attrs = getConstant(tViewConsts, attrsIndex);
  const tNode = getOrCreateTNode(tView, index, 2, name, attrs);
  if (bindingsEnabled) {
    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex), directiveMatcher);
  }
  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
  if (tNode.attrs !== null) {
    computeStaticStyling(tNode, tNode.attrs, false);
  }
  if (tNode.mergedAttrs !== null) {
    computeStaticStyling(tNode, tNode.mergedAttrs, true);
  }
  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }
  return tNode;
}
function elementEndFirstCreatePass(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  registerPostOrderHooks(tView, tNode);
  if (isContentQueryHost(tNode)) {
    tView.queries.elementEnd(tNode);
  }
}
var ComponentFactoryResolver2 = class extends ComponentFactoryResolver$1 {
  ngModule;
  /**
   * @param ngModule The NgModuleRef to which all resolved factories are bound.
   */
  constructor(ngModule) {
    super();
    this.ngModule = ngModule;
  }
  resolveComponentFactory(component) {
    ngDevMode && assertComponentType(component);
    const componentDef = getComponentDef(component);
    return new ComponentFactory2(componentDef, this.ngModule);
  }
};
function toInputRefArray(map2) {
  return Object.keys(map2).map((name) => {
    const [propName, flags, transform] = map2[name];
    const inputData = {
      propName,
      templateName: name,
      isSignal: (flags & InputFlags.SignalBased) !== 0
    };
    if (transform) {
      inputData.transform = transform;
    }
    return inputData;
  });
}
function toOutputRefArray(map2) {
  return Object.keys(map2).map((name) => ({
    propName: map2[name],
    templateName: name
  }));
}
function verifyNotAnOrphanComponent(componentDef) {
  if (false) {
    if (depsTracker.isOrphanComponent(componentDef.type)) {
      throw new RuntimeError(981, `Orphan component found! Trying to render the component ${debugStringifyTypeForError(componentDef.type)} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`);
    }
  }
}
function createRootViewInjector(componentDef, environmentInjector, injector) {
  let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : environmentInjector?.injector;
  if (realEnvironmentInjector && componentDef.getStandaloneInjector !== null) {
    realEnvironmentInjector = componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;
  }
  const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;
  return rootViewInjector;
}
function createRootLViewEnvironment(rootLViewInjector) {
  const rendererFactory = rootLViewInjector.get(RendererFactory2, null);
  if (rendererFactory === null) {
    throw new RuntimeError(407, ngDevMode && "Angular was not able to inject a renderer (RendererFactory2). Likely this is due to a broken DI hierarchy. Make sure that any injector used to create this component has a correct parent.");
  }
  const sanitizer = rootLViewInjector.get(Sanitizer, null);
  const changeDetectionScheduler = rootLViewInjector.get(ChangeDetectionScheduler, null);
  return {
    rendererFactory,
    sanitizer,
    changeDetectionScheduler
  };
}
function createHostElement(componentDef, render) {
  const tagName = (componentDef.selectors[0][0] || "div").toLowerCase();
  const namespace = tagName === "svg" ? SVG_NAMESPACE : tagName === "math" ? MATH_ML_NAMESPACE : null;
  return createElementNode(render, tagName, namespace);
}
var ComponentFactory2 = class extends ComponentFactory$1 {
  componentDef;
  ngModule;
  selector;
  componentType;
  ngContentSelectors;
  isBoundToModule;
  cachedInputs = null;
  cachedOutputs = null;
  get inputs() {
    this.cachedInputs ??= toInputRefArray(this.componentDef.inputs);
    return this.cachedInputs;
  }
  get outputs() {
    this.cachedOutputs ??= toOutputRefArray(this.componentDef.outputs);
    return this.cachedOutputs;
  }
  /**
   * @param componentDef The component definition.
   * @param ngModule The NgModuleRef to which the factory is bound.
   */
  constructor(componentDef, ngModule) {
    super();
    this.componentDef = componentDef;
    this.ngModule = ngModule;
    this.componentType = componentDef.type;
    this.selector = stringifyCSSSelectorList(componentDef.selectors);
    this.ngContentSelectors = componentDef.ngContentSelectors ?? [];
    this.isBoundToModule = !!ngModule;
  }
  create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {
    profiler(
      22
      /* ProfilerEvent.DynamicComponentStart */
    );
    const prevConsumer = setActiveConsumer(null);
    try {
      const cmpDef = this.componentDef;
      ngDevMode && verifyNotAnOrphanComponent(cmpDef);
      const tAttributes = rootSelectorOrNode ? ["ng-version", "19.2.6"] : (
        // Extract attributes and classes from the first selector only to match VE behavior.
        extractAttrsAndClassesFromSelector(this.componentDef.selectors[0])
      );
      const rootTView = createTView(0, null, null, 1, 0, null, null, null, null, [tAttributes], null);
      const rootViewInjector = createRootViewInjector(cmpDef, environmentInjector || this.ngModule, injector);
      const environment = createRootLViewEnvironment(rootViewInjector);
      const hostRenderer = environment.rendererFactory.createRenderer(null, cmpDef);
      const hostElement = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, cmpDef.encapsulation, rootViewInjector) : createHostElement(cmpDef, hostRenderer);
      const rootLView = createLView(null, rootTView, null, 512 | getInitialLViewFlagsFromDef(cmpDef), null, null, environment, hostRenderer, rootViewInjector, null, retrieveHydrationInfo(
        hostElement,
        rootViewInjector,
        true
        /* isRootView */
      ));
      rootLView[HEADER_OFFSET] = hostElement;
      enterView(rootLView);
      let componentView = null;
      try {
        const hostTNode = elementStartFirstCreatePass(HEADER_OFFSET, rootTView, rootLView, "#host", () => [this.componentDef], true, 0);
        if (hostElement) {
          setupStaticAttributes(hostRenderer, hostElement, hostTNode);
          attachPatchData(hostElement, rootLView);
        }
        createDirectivesInstances(rootTView, rootLView, hostTNode);
        executeContentQueries(rootTView, hostTNode, rootLView);
        elementEndFirstCreatePass(rootTView, hostTNode);
        if (projectableNodes !== void 0) {
          projectNodes(hostTNode, this.ngContentSelectors, projectableNodes);
        }
        componentView = getComponentLViewByIndex(hostTNode.index, rootLView);
        rootLView[CONTEXT] = componentView[CONTEXT];
        renderView(rootTView, rootLView, null);
      } catch (e2) {
        if (componentView !== null) {
          unregisterLView(componentView);
        }
        unregisterLView(rootLView);
        throw e2;
      } finally {
        profiler(
          23
          /* ProfilerEvent.DynamicComponentEnd */
        );
        leaveView();
      }
      return new ComponentRef2(this.componentType, rootLView);
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
};
var ComponentRef2 = class extends ComponentRef$1 {
  _rootLView;
  instance;
  hostView;
  changeDetectorRef;
  componentType;
  location;
  previousInputValues = null;
  _tNode;
  constructor(componentType, _rootLView) {
    super();
    this._rootLView = _rootLView;
    this._tNode = getTNode(_rootLView[TVIEW], HEADER_OFFSET);
    this.location = createElementRef(this._tNode, _rootLView);
    this.instance = getComponentLViewByIndex(this._tNode.index, _rootLView)[CONTEXT];
    this.hostView = this.changeDetectorRef = new ViewRef$1(
      _rootLView,
      void 0,
      false
      /* notifyErrorHandler */
    );
    this.componentType = componentType;
  }
  setInput(name, value) {
    const tNode = this._tNode;
    this.previousInputValues ??= /* @__PURE__ */ new Map();
    if (this.previousInputValues.has(name) && Object.is(this.previousInputValues.get(name), value)) {
      return;
    }
    const lView = this._rootLView;
    const hasSetInput = setAllInputsForProperty(tNode, lView[TVIEW], lView, name, value);
    this.previousInputValues.set(name, value);
    const childComponentLView = getComponentLViewByIndex(tNode.index, lView);
    markViewDirty(
      childComponentLView,
      1
      /* NotificationSource.SetInput */
    );
    if (ngDevMode && !hasSetInput) {
      const cmpNameForError = stringifyForError(this.componentType);
      let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;
      message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;
      reportUnknownPropertyError(message);
    }
  }
  get injector() {
    return new NodeInjector(this._tNode, this._rootLView);
  }
  destroy() {
    this.hostView.destroy();
  }
  onDestroy(callback) {
    this.hostView.onDestroy(callback);
  }
};
function projectNodes(tNode, ngContentSelectors, projectableNodes) {
  const projection = tNode.projection = [];
  for (let i = 0; i < ngContentSelectors.length; i++) {
    const nodesforSlot = projectableNodes[i];
    projection.push(nodesforSlot != null && nodesforSlot.length ? Array.from(nodesforSlot) : null);
  }
}
var ViewContainerRef = class {
  /**
   * @internal
   * @nocollapse
   */
  static __NG_ELEMENT_ID__ = injectViewContainerRef;
};
function injectViewContainerRef() {
  const previousTNode = getCurrentTNode();
  return createContainerRef(previousTNode, getLView());
}
var VE_ViewContainerRef = ViewContainerRef;
var R3ViewContainerRef = class ViewContainerRef2 extends VE_ViewContainerRef {
  _lContainer;
  _hostTNode;
  _hostLView;
  constructor(_lContainer, _hostTNode, _hostLView) {
    super();
    this._lContainer = _lContainer;
    this._hostTNode = _hostTNode;
    this._hostLView = _hostLView;
  }
  get element() {
    return createElementRef(this._hostTNode, this._hostLView);
  }
  get injector() {
    return new NodeInjector(this._hostTNode, this._hostLView);
  }
  /** @deprecated No replacement */
  get parentInjector() {
    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);
    if (hasParentInjector(parentLocation)) {
      const parentView = getParentInjectorView(parentLocation, this._hostLView);
      const injectorIndex = getParentInjectorIndex(parentLocation);
      ngDevMode && assertNodeInjector(parentView, injectorIndex);
      const parentTNode = parentView[TVIEW].data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ];
      return new NodeInjector(parentTNode, parentView);
    } else {
      return new NodeInjector(null, this._hostLView);
    }
  }
  clear() {
    while (this.length > 0) {
      this.remove(this.length - 1);
    }
  }
  get(index) {
    const viewRefs = getViewRefs(this._lContainer);
    return viewRefs !== null && viewRefs[index] || null;
  }
  get length() {
    return this._lContainer.length - CONTAINER_HEADER_OFFSET;
  }
  createEmbeddedView(templateRef, context2, indexOrOptions) {
    let index;
    let injector;
    if (typeof indexOrOptions === "number") {
      index = indexOrOptions;
    } else if (indexOrOptions != null) {
      index = indexOrOptions.index;
      injector = indexOrOptions.injector;
    }
    const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);
    const viewRef = templateRef.createEmbeddedViewImpl(context2 || {}, injector, dehydratedView);
    this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));
    return viewRef;
  }
  createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {
    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);
    let index;
    if (isComponentFactory) {
      if (ngDevMode) {
        assertEqual(typeof indexOrOptions !== "object", true, "It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)");
      }
      index = indexOrOptions;
    } else {
      if (ngDevMode) {
        assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator.`);
        assertEqual(typeof indexOrOptions !== "number", true, "It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead.");
      }
      const options = indexOrOptions || {};
      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {
        throwError2(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);
      }
      index = options.index;
      injector = options.injector;
      projectableNodes = options.projectableNodes;
      environmentInjector = options.environmentInjector || options.ngModuleRef;
    }
    const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory2(getComponentDef(componentFactoryOrType));
    const contextInjector = injector || this.parentInjector;
    if (!environmentInjector && componentFactory.ngModule == null) {
      const _injector = isComponentFactory ? contextInjector : this.parentInjector;
      const result = _injector.get(EnvironmentInjector, null);
      if (result) {
        environmentInjector = result;
      }
    }
    const componentDef = getComponentDef(componentFactory.componentType ?? {});
    const dehydratedView = findMatchingDehydratedView(this._lContainer, componentDef?.id ?? null);
    const rNode = dehydratedView?.firstChild ?? null;
    const componentRef = componentFactory.create(contextInjector, projectableNodes, rNode, environmentInjector);
    this.insertImpl(componentRef.hostView, index, shouldAddViewToDom(this._hostTNode, dehydratedView));
    return componentRef;
  }
  insert(viewRef, index) {
    return this.insertImpl(viewRef, index, true);
  }
  insertImpl(viewRef, index, addToDOM) {
    const lView = viewRef._lView;
    if (ngDevMode && viewRef.destroyed) {
      throw new Error("Cannot insert a destroyed View in a ViewContainer!");
    }
    if (viewAttachedToContainer(lView)) {
      const prevIdx = this.indexOf(viewRef);
      if (prevIdx !== -1) {
        this.detach(prevIdx);
      } else {
        const prevLContainer = lView[PARENT];
        ngDevMode && assertEqual(isLContainer(prevLContainer), true, "An attached view should have its PARENT point to a container.");
        const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
        prevVCRef.detach(prevVCRef.indexOf(viewRef));
      }
    }
    const adjustedIdx = this._adjustIndex(index);
    const lContainer = this._lContainer;
    addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);
    viewRef.attachToViewContainerRef();
    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);
    return viewRef;
  }
  move(viewRef, newIndex) {
    if (ngDevMode && viewRef.destroyed) {
      throw new Error("Cannot move a destroyed View in a ViewContainer!");
    }
    return this.insert(viewRef, newIndex);
  }
  indexOf(viewRef) {
    const viewRefsArr = getViewRefs(this._lContainer);
    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
  }
  remove(index) {
    const adjustedIdx = this._adjustIndex(index, -1);
    const detachedView = detachView(this._lContainer, adjustedIdx);
    if (detachedView) {
      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);
      destroyLView(detachedView[TVIEW], detachedView);
    }
  }
  detach(index) {
    const adjustedIdx = this._adjustIndex(index, -1);
    const view = detachView(this._lContainer, adjustedIdx);
    const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;
    return wasDetached ? new ViewRef$1(view) : null;
  }
  _adjustIndex(index, shift = 0) {
    if (index == null) {
      return this.length + shift;
    }
    if (ngDevMode) {
      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);
      assertLessThan(index, this.length + 1 + shift, "index");
    }
    return index;
  }
};
function getViewRefs(lContainer) {
  return lContainer[VIEW_REFS];
}
function getOrCreateViewRefs(lContainer) {
  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);
}
function createContainerRef(hostTNode, hostLView) {
  ngDevMode && assertTNodeType(
    hostTNode,
    12 | 3
    /* TNodeType.AnyRNode */
  );
  let lContainer;
  const slotValue = hostLView[hostTNode.index];
  if (isLContainer(slotValue)) {
    lContainer = slotValue;
  } else {
    lContainer = createLContainer(slotValue, hostLView, null, hostTNode);
    hostLView[hostTNode.index] = lContainer;
    addToEndOfViewTree(hostLView, lContainer);
  }
  _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);
  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);
}
function insertAnchorNode(hostLView, hostTNode) {
  const renderer = hostLView[RENDERER];
  ngDevMode && ngDevMode.rendererCreateComment++;
  const commentNode = renderer.createComment(ngDevMode ? "container" : "");
  const hostNative = getNativeByTNode(hostTNode, hostLView);
  const parentOfHostNative = renderer.parentNode(hostNative);
  nativeInsertBefore(renderer, parentOfHostNative, commentNode, renderer.nextSibling(hostNative), false);
  return commentNode;
}
var _locateOrCreateAnchorNode = createAnchorNode;
var _populateDehydratedViewsInLContainer = () => false;
function populateDehydratedViewsInLContainer(lContainer, tNode, hostLView) {
  return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);
}
function createAnchorNode(lContainer, hostLView, hostTNode, slotValue) {
  if (lContainer[NATIVE]) return;
  let commentNode;
  if (hostTNode.type & 8) {
    commentNode = unwrapRNode(slotValue);
  } else {
    commentNode = insertAnchorNode(hostLView, hostTNode);
  }
  lContainer[NATIVE] = commentNode;
}
var LQuery_ = class _LQuery_ {
  queryList;
  matches = null;
  constructor(queryList) {
    this.queryList = queryList;
  }
  clone() {
    return new _LQuery_(this.queryList);
  }
  setDirty() {
    this.queryList.setDirty();
  }
};
var LQueries_ = class _LQueries_ {
  queries;
  constructor(queries = []) {
    this.queries = queries;
  }
  createEmbeddedView(tView) {
    const tQueries = tView.queries;
    if (tQueries !== null) {
      const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
      const viewLQueries = [];
      for (let i = 0; i < noOfInheritedQueries; i++) {
        const tQuery = tQueries.getByIndex(i);
        const parentLQuery = this.queries[tQuery.indexInDeclarationView];
        viewLQueries.push(parentLQuery.clone());
      }
      return new _LQueries_(viewLQueries);
    }
    return null;
  }
  insertView(tView) {
    this.dirtyQueriesWithMatches(tView);
  }
  detachView(tView) {
    this.dirtyQueriesWithMatches(tView);
  }
  finishViewCreation(tView) {
    this.dirtyQueriesWithMatches(tView);
  }
  dirtyQueriesWithMatches(tView) {
    for (let i = 0; i < this.queries.length; i++) {
      if (getTQuery(tView, i).matches !== null) {
        this.queries[i].setDirty();
      }
    }
  }
};
var TQueryMetadata_ = class {
  flags;
  read;
  predicate;
  constructor(predicate, flags, read = null) {
    this.flags = flags;
    this.read = read;
    if (typeof predicate === "string") {
      this.predicate = splitQueryMultiSelectors(predicate);
    } else {
      this.predicate = predicate;
    }
  }
};
var TQueries_ = class _TQueries_ {
  queries;
  constructor(queries = []) {
    this.queries = queries;
  }
  elementStart(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView, "Queries should collect results on the first template pass only");
    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].elementStart(tView, tNode);
    }
  }
  elementEnd(tNode) {
    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].elementEnd(tNode);
    }
  }
  embeddedTView(tNode) {
    let queriesForTemplateRef = null;
    for (let i = 0; i < this.length; i++) {
      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);
      if (tqueryClone) {
        tqueryClone.indexInDeclarationView = i;
        if (queriesForTemplateRef !== null) {
          queriesForTemplateRef.push(tqueryClone);
        } else {
          queriesForTemplateRef = [tqueryClone];
        }
      }
    }
    return queriesForTemplateRef !== null ? new _TQueries_(queriesForTemplateRef) : null;
  }
  template(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView, "Queries should collect results on the first template pass only");
    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].template(tView, tNode);
    }
  }
  getByIndex(index) {
    ngDevMode && assertIndexInRange(this.queries, index);
    return this.queries[index];
  }
  get length() {
    return this.queries.length;
  }
  track(tquery) {
    this.queries.push(tquery);
  }
};
var TQuery_ = class _TQuery_ {
  metadata;
  matches = null;
  indexInDeclarationView = -1;
  crossesNgTemplate = false;
  /**
   * A node index on which a query was declared (-1 for view queries and ones inherited from the
   * declaration template). We use this index (alongside with _appliesToNextNode flag) to know
   * when to apply content queries to elements in a template.
   */
  _declarationNodeIndex;
  /**
   * A flag indicating if a given query still applies to nodes it is crossing. We use this flag
   * (alongside with _declarationNodeIndex) to know when to stop applying content queries to
   * elements in a template.
   */
  _appliesToNextNode = true;
  constructor(metadata, nodeIndex = -1) {
    this.metadata = metadata;
    this._declarationNodeIndex = nodeIndex;
  }
  elementStart(tView, tNode) {
    if (this.isApplyingToNode(tNode)) {
      this.matchTNode(tView, tNode);
    }
  }
  elementEnd(tNode) {
    if (this._declarationNodeIndex === tNode.index) {
      this._appliesToNextNode = false;
    }
  }
  template(tView, tNode) {
    this.elementStart(tView, tNode);
  }
  embeddedTView(tNode, childQueryIndex) {
    if (this.isApplyingToNode(tNode)) {
      this.crossesNgTemplate = true;
      this.addMatch(-tNode.index, childQueryIndex);
      return new _TQuery_(this.metadata);
    }
    return null;
  }
  isApplyingToNode(tNode) {
    if (this._appliesToNextNode && (this.metadata.flags & 1) !== 1) {
      const declarationNodeIdx = this._declarationNodeIndex;
      let parent = tNode.parent;
      while (parent !== null && parent.type & 8 && parent.index !== declarationNodeIdx) {
        parent = parent.parent;
      }
      return declarationNodeIdx === (parent !== null ? parent.index : -1);
    }
    return this._appliesToNextNode;
  }
  matchTNode(tView, tNode) {
    const predicate = this.metadata.predicate;
    if (Array.isArray(predicate)) {
      for (let i = 0; i < predicate.length; i++) {
        const name = predicate[i];
        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));
        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
      }
    } else {
      if (predicate === TemplateRef) {
        if (tNode.type & 4) {
          this.matchTNodeWithReadOption(tView, tNode, -1);
        }
      } else {
        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
      }
    }
  }
  matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
    if (nodeMatchIdx !== null) {
      const read = this.metadata.read;
      if (read !== null) {
        if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4) {
          this.addMatch(tNode.index, -2);
        } else {
          const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);
          if (directiveOrProviderIdx !== null) {
            this.addMatch(tNode.index, directiveOrProviderIdx);
          }
        }
      } else {
        this.addMatch(tNode.index, nodeMatchIdx);
      }
    }
  }
  addMatch(tNodeIdx, matchIdx) {
    if (this.matches === null) {
      this.matches = [tNodeIdx, matchIdx];
    } else {
      this.matches.push(tNodeIdx, matchIdx);
    }
  }
};
function getIdxOfMatchingSelector(tNode, selector) {
  const localNames = tNode.localNames;
  if (localNames !== null) {
    for (let i = 0; i < localNames.length; i += 2) {
      if (localNames[i] === selector) {
        return localNames[i + 1];
      }
    }
  }
  return null;
}
function createResultByTNodeType(tNode, currentView) {
  if (tNode.type & (3 | 8)) {
    return createElementRef(tNode, currentView);
  } else if (tNode.type & 4) {
    return createTemplateRef(tNode, currentView);
  }
  return null;
}
function createResultForNode(lView, tNode, matchingIdx, read) {
  if (matchingIdx === -1) {
    return createResultByTNodeType(tNode, lView);
  } else if (matchingIdx === -2) {
    return createSpecialToken(lView, tNode, read);
  } else {
    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
  }
}
function createSpecialToken(lView, tNode, read) {
  if (read === ElementRef) {
    return createElementRef(tNode, lView);
  } else if (read === TemplateRef) {
    return createTemplateRef(tNode, lView);
  } else if (read === ViewContainerRef) {
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12
      /* TNodeType.AnyContainer */
    );
    return createContainerRef(tNode, lView);
  } else {
    ngDevMode && throwError2(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);
  }
}
function materializeViewResults(tView, lView, tQuery, queryIndex) {
  const lQuery = lView[QUERIES].queries[queryIndex];
  if (lQuery.matches === null) {
    const tViewData = tView.data;
    const tQueryMatches = tQuery.matches;
    const result = [];
    for (let i = 0; tQueryMatches !== null && i < tQueryMatches.length; i += 2) {
      const matchedNodeIdx = tQueryMatches[i];
      if (matchedNodeIdx < 0) {
        result.push(null);
      } else {
        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
        const tNode = tViewData[matchedNodeIdx];
        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
      }
    }
    lQuery.matches = result;
  }
  return lQuery.matches;
}
function collectQueryResults(tView, lView, queryIndex, result) {
  const tQuery = tView.queries.getByIndex(queryIndex);
  const tQueryMatches = tQuery.matches;
  if (tQueryMatches !== null) {
    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);
    for (let i = 0; i < tQueryMatches.length; i += 2) {
      const tNodeIdx = tQueryMatches[i];
      if (tNodeIdx > 0) {
        result.push(lViewResults[i / 2]);
      } else {
        const childQueryIndex = tQueryMatches[i + 1];
        const declarationLContainer = lView[-tNodeIdx];
        ngDevMode && assertLContainer(declarationLContainer);
        for (let i2 = CONTAINER_HEADER_OFFSET; i2 < declarationLContainer.length; i2++) {
          const embeddedLView = declarationLContainer[i2];
          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        }
        if (declarationLContainer[MOVED_VIEWS] !== null) {
          const embeddedLViews = declarationLContainer[MOVED_VIEWS];
          for (let i2 = 0; i2 < embeddedLViews.length; i2++) {
            const embeddedLView = embeddedLViews[i2];
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        }
      }
    }
  }
  return result;
}
function loadQueryInternal(lView, queryIndex) {
  ngDevMode && assertDefined(lView[QUERIES], "LQueries should be defined when trying to load a query");
  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
  return lView[QUERIES].queries[queryIndex].queryList;
}
function createLQuery(tView, lView, flags) {
  const queryList = new QueryList(
    (flags & 4) === 4
    /* QueryFlags.emitDistinctChangesOnly */
  );
  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
  const lQueries = (lView[QUERIES] ??= new LQueries_()).queries;
  return lQueries.push(new LQuery_(queryList)) - 1;
}
function createViewQuery(predicate, flags, read) {
  ngDevMode && assertNumber(flags, "Expecting flags");
  const tView = getTView();
  if (tView.firstCreatePass) {
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);
    if ((flags & 2) === 2) {
      tView.staticViewQueries = true;
    }
  }
  return createLQuery(tView, getLView(), flags);
}
function createContentQuery(directiveIndex, predicate, flags, read) {
  ngDevMode && assertNumber(flags, "Expecting flags");
  const tView = getTView();
  if (tView.firstCreatePass) {
    const tNode = getCurrentTNode();
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);
    saveContentQueryAndDirectiveIndex(tView, directiveIndex);
    if ((flags & 2) === 2) {
      tView.staticContentQueries = true;
    }
  }
  return createLQuery(tView, getLView(), flags);
}
function splitQueryMultiSelectors(locator) {
  return locator.split(",").map((s) => s.trim());
}
function createTQuery(tView, metadata, nodeIndex) {
  if (tView.queries === null) tView.queries = new TQueries_();
  tView.queries.track(new TQuery_(metadata, nodeIndex));
}
function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;
  if (directiveIndex !== lastSavedDirectiveIndex) {
    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
  }
}
function getTQuery(tView, index) {
  ngDevMode && assertDefined(tView.queries, "TQueries must be defined to retrieve a TQuery");
  return tView.queries.getByIndex(index);
}
function getQueryResults(lView, queryIndex) {
  const tView = lView[TVIEW];
  const tQuery = getTQuery(tView, queryIndex);
  return tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);
}
function createQuerySignalFn(firstOnly, required, opts) {
  let node;
  const signalFn = createComputed(() => {
    node._dirtyCounter();
    const value = refreshSignalQuery(node, firstOnly);
    if (required && value === void 0) {
      throw new RuntimeError(-951, ngDevMode && "Child query result is required but no value is available.");
    }
    return value;
  });
  node = signalFn[SIGNAL];
  node._dirtyCounter = signal(0);
  node._flatValue = void 0;
  if (ngDevMode) {
    signalFn.toString = () => `[Query Signal]`;
    node.debugName = opts?.debugName;
  }
  return signalFn;
}
function createSingleResultOptionalQuerySignalFn(opts) {
  return createQuerySignalFn(
    /* firstOnly */
    true,
    /* required */
    false,
    opts
  );
}
function createSingleResultRequiredQuerySignalFn(opts) {
  return createQuerySignalFn(
    /* firstOnly */
    true,
    /* required */
    true,
    opts
  );
}
function createMultiResultQuerySignalFn(opts) {
  return createQuerySignalFn(
    /* firstOnly */
    false,
    /* required */
    false,
    opts
  );
}
function bindQueryToSignal(target, queryIndex) {
  const node = target[SIGNAL];
  node._lView = getLView();
  node._queryIndex = queryIndex;
  node._queryList = loadQueryInternal(node._lView, queryIndex);
  node._queryList.onDirty(() => node._dirtyCounter.update((v) => v + 1));
}
function refreshSignalQuery(node, firstOnly) {
  const lView = node._lView;
  const queryIndex = node._queryIndex;
  if (lView === void 0 || queryIndex === void 0 || lView[FLAGS] & 4) {
    return firstOnly ? void 0 : EMPTY_ARRAY;
  }
  const queryList = loadQueryInternal(lView, queryIndex);
  const results = getQueryResults(lView, queryIndex);
  queryList.reset(results, unwrapElementRef);
  if (firstOnly) {
    return queryList.first;
  } else {
    const resultChanged = queryList._changesDetected;
    if (resultChanged || node._flatValue === void 0) {
      return node._flatValue = queryList.toArray();
    }
    return node._flatValue;
  }
}
function viewChildFn(locator, opts) {
  ngDevMode && assertInInjectionContext(viewChild);
  return createSingleResultOptionalQuerySignalFn(opts);
}
function viewChildRequiredFn(locator, opts) {
  ngDevMode && assertInInjectionContext(viewChild);
  return createSingleResultRequiredQuerySignalFn(opts);
}
var viewChild = (() => {
  viewChildFn.required = viewChildRequiredFn;
  return viewChildFn;
})();
function contentChildFn(locator, opts) {
  ngDevMode && assertInInjectionContext(contentChild);
  return createSingleResultOptionalQuerySignalFn(opts);
}
function contentChildRequiredFn(locator, opts) {
  ngDevMode && assertInInjectionContext(contentChildren);
  return createSingleResultRequiredQuerySignalFn(opts);
}
var contentChild = (() => {
  contentChildFn.required = contentChildRequiredFn;
  return contentChildFn;
})();
function contentChildren(locator, opts) {
  return createMultiResultQuerySignalFn(opts);
}
function createModelSignal(initialValue, opts) {
  const node = Object.create(INPUT_SIGNAL_NODE);
  const emitterRef = new OutputEmitterRef();
  node.value = initialValue;
  function getter() {
    producerAccessed(node);
    assertModelSet(node.value);
    return node.value;
  }
  getter[SIGNAL] = node;
  getter.asReadonly = signalAsReadonlyFn.bind(getter);
  getter.set = (newValue) => {
    if (!node.equal(node.value, newValue)) {
      signalSetFn(node, newValue);
      emitterRef.emit(newValue);
    }
  };
  getter.update = (updateFn) => {
    assertModelSet(node.value);
    getter.set(updateFn(node.value));
  };
  getter.subscribe = emitterRef.subscribe.bind(emitterRef);
  getter.destroyRef = emitterRef.destroyRef;
  if (ngDevMode) {
    getter.toString = () => `[Model Signal: ${getter()}]`;
    node.debugName = opts?.debugName;
  }
  return getter;
}
function assertModelSet(value) {
  if (value === REQUIRED_UNSET_VALUE) {
    throw new RuntimeError(952, ngDevMode && "Model is required but no value is available yet.");
  }
}
function modelFunction(initialValue, opts) {
  ngDevMode && assertInInjectionContext(model);
  return createModelSignal(initialValue, opts);
}
function modelRequiredFunction(opts) {
  ngDevMode && assertInInjectionContext(model);
  return createModelSignal(REQUIRED_UNSET_VALUE, opts);
}
var model = (() => {
  modelFunction.required = modelRequiredFunction;
  return modelFunction;
})();
var emitDistinctChangesOnlyDefaultValue = true;
var Query = class {
};
var ContentChildren = makePropDecorator("ContentChildren", (selector, opts = {}) => __spreadValues({
  selector,
  first: false,
  isViewQuery: false,
  descendants: false,
  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
}, opts), Query);
var ContentChild = makePropDecorator("ContentChild", (selector, opts = {}) => __spreadValues({
  selector,
  first: true,
  isViewQuery: false,
  descendants: true
}, opts), Query);
var ViewChildren = makePropDecorator("ViewChildren", (selector, opts = {}) => __spreadValues({
  selector,
  first: false,
  isViewQuery: true,
  descendants: true,
  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
}, opts), Query);
var ViewChild = makePropDecorator("ViewChild", (selector, opts) => __spreadValues({
  selector,
  first: true,
  isViewQuery: true,
  descendants: true
}, opts), Query);
function resolveComponentResources(resourceResolver) {
  const componentResolved = [];
  const urlMap = /* @__PURE__ */ new Map();
  function cachedResourceResolve(url) {
    let promise = urlMap.get(url);
    if (!promise) {
      const resp = resourceResolver(url);
      urlMap.set(url, promise = resp.then(unwrapResponse));
    }
    return promise;
  }
  componentResourceResolutionQueue.forEach((component, type) => {
    const promises = [];
    if (component.templateUrl) {
      promises.push(cachedResourceResolve(component.templateUrl).then((template) => {
        component.template = template;
      }));
    }
    const styles = typeof component.styles === "string" ? [component.styles] : component.styles || [];
    component.styles = styles;
    if (component.styleUrl && component.styleUrls?.length) {
      throw new Error("@Component cannot define both `styleUrl` and `styleUrls`. Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple");
    } else if (component.styleUrls?.length) {
      const styleOffset = component.styles.length;
      const styleUrls = component.styleUrls;
      component.styleUrls.forEach((styleUrl, index) => {
        styles.push("");
        promises.push(cachedResourceResolve(styleUrl).then((style) => {
          styles[styleOffset + index] = style;
          styleUrls.splice(styleUrls.indexOf(styleUrl), 1);
          if (styleUrls.length == 0) {
            component.styleUrls = void 0;
          }
        }));
      });
    } else if (component.styleUrl) {
      promises.push(cachedResourceResolve(component.styleUrl).then((style) => {
        styles.push(style);
        component.styleUrl = void 0;
      }));
    }
    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));
    componentResolved.push(fullyResolved);
  });
  clearResolutionOfComponentResourcesQueue();
  return Promise.all(componentResolved).then(() => void 0);
}
var componentResourceResolutionQueue = /* @__PURE__ */ new Map();
var componentDefPendingResolution = /* @__PURE__ */ new Set();
function maybeQueueResolutionOfComponentResources(type, metadata) {
  if (componentNeedsResolution(metadata)) {
    componentResourceResolutionQueue.set(type, metadata);
    componentDefPendingResolution.add(type);
  }
}
function componentNeedsResolution(component) {
  return !!(component.templateUrl && !component.hasOwnProperty("template") || component.styleUrls && component.styleUrls.length || component.styleUrl);
}
function clearResolutionOfComponentResourcesQueue() {
  const old = componentResourceResolutionQueue;
  componentResourceResolutionQueue = /* @__PURE__ */ new Map();
  return old;
}
function isComponentResourceResolutionQueueEmpty() {
  return componentResourceResolutionQueue.size === 0;
}
function unwrapResponse(response) {
  return typeof response == "string" ? response : response.text();
}
function componentDefResolved(type) {
  componentDefPendingResolution.delete(type);
}
var modules = /* @__PURE__ */ new Map();
var checkForDuplicateNgModules = true;
function assertSameOrNotExisting(id, type, incoming) {
  if (type && type !== incoming && checkForDuplicateNgModules) {
    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);
  }
}
function registerNgModuleType(ngModuleType, id) {
  const existing = modules.get(id) || null;
  assertSameOrNotExisting(id, existing, ngModuleType);
  modules.set(id, ngModuleType);
}
function \u0275\u0275validateIframeAttribute(attrValue, tagName, attrName) {
  const lView = getLView();
  const tNode = getSelectedTNode();
  const element = getNativeByTNode(tNode, lView);
  if (tNode.type === 2 && tagName.toLowerCase() === "iframe") {
    const iframe = element;
    iframe.src = "";
    iframe.srcdoc = trustedHTMLFromString("");
    nativeRemoveNode(lView[RENDERER], iframe);
    const errorMessage = ngDevMode && `Angular has detected that the \`${attrName}\` was applied as a binding to an <iframe>${getTemplateLocationDetails(lView)}. For security reasons, the \`${attrName}\` can be set on an <iframe> as a static attribute only. 
To fix this, switch the \`${attrName}\` binding to a static attribute in a template or in host bindings section.`;
    throw new RuntimeError(-910, errorMessage);
  }
  return attrValue;
}
var NgModuleRef$1 = class NgModuleRef {
};
var NgModuleFactory$1 = class NgModuleFactory {
};
function createNgModule(ngModule, parentInjector) {
  return new NgModuleRef2(ngModule, parentInjector ?? null, []);
}
var NgModuleRef2 = class extends NgModuleRef$1 {
  ngModuleType;
  _parent;
  // tslint:disable-next-line:require-internal-with-underscore
  _bootstrapComponents = [];
  _r3Injector;
  instance;
  destroyCbs = [];
  // When bootstrapping a module we have a dependency graph that looks like this:
  // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the
  // module being resolved tries to inject the ComponentFactoryResolver, it'll create a
  // circular dependency which will result in a runtime error, because the injector doesn't
  // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves
  // and providing it, rather than letting the injector resolve it.
  componentFactoryResolver = new ComponentFactoryResolver2(this);
  constructor(ngModuleType, _parent, additionalProviders, runInjectorInitializers = true) {
    super();
    this.ngModuleType = ngModuleType;
    this._parent = _parent;
    const ngModuleDef = getNgModuleDef(ngModuleType);
    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);
    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
    this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{
      provide: NgModuleRef$1,
      useValue: this
    }, {
      provide: ComponentFactoryResolver$1,
      useValue: this.componentFactoryResolver
    }, ...additionalProviders], stringify(ngModuleType), /* @__PURE__ */ new Set(["environment"]));
    if (runInjectorInitializers) {
      this.resolveInjectorInitializers();
    }
  }
  resolveInjectorInitializers() {
    this._r3Injector.resolveInjectorInitializers();
    this.instance = this._r3Injector.get(this.ngModuleType);
  }
  get injector() {
    return this._r3Injector;
  }
  destroy() {
    ngDevMode && assertDefined(this.destroyCbs, "NgModule already destroyed");
    const injector = this._r3Injector;
    !injector.destroyed && injector.destroy();
    this.destroyCbs.forEach((fn) => fn());
    this.destroyCbs = null;
  }
  onDestroy(callback) {
    ngDevMode && assertDefined(this.destroyCbs, "NgModule already destroyed");
    this.destroyCbs.push(callback);
  }
};
var NgModuleFactory2 = class extends NgModuleFactory$1 {
  moduleType;
  constructor(moduleType) {
    super();
    this.moduleType = moduleType;
  }
  create(parentInjector) {
    return new NgModuleRef2(this.moduleType, parentInjector, []);
  }
};
function createNgModuleRefWithProviders(moduleType, parentInjector, additionalProviders) {
  return new NgModuleRef2(moduleType, parentInjector, additionalProviders, false);
}
var EnvironmentNgModuleRefAdapter = class extends NgModuleRef$1 {
  injector;
  componentFactoryResolver = new ComponentFactoryResolver2(this);
  instance = null;
  constructor(config2) {
    super();
    const injector = new R3Injector([...config2.providers, {
      provide: NgModuleRef$1,
      useValue: this
    }, {
      provide: ComponentFactoryResolver$1,
      useValue: this.componentFactoryResolver
    }], config2.parent || getNullInjector(), config2.debugName, /* @__PURE__ */ new Set(["environment"]));
    this.injector = injector;
    if (config2.runEnvironmentInitializers) {
      injector.resolveInjectorInitializers();
    }
  }
  destroy() {
    this.injector.destroy();
  }
  onDestroy(callback) {
    this.injector.onDestroy(callback);
  }
};
function createEnvironmentInjector(providers, parent, debugName = null) {
  const adapter = new EnvironmentNgModuleRefAdapter({
    providers,
    parent,
    debugName,
    runEnvironmentInitializers: true
  });
  return adapter.injector;
}
var StandaloneService = class _StandaloneService {
  _injector;
  cachedInjectors = /* @__PURE__ */ new Map();
  constructor(_injector) {
    this._injector = _injector;
  }
  getOrCreateStandaloneInjector(componentDef) {
    if (!componentDef.standalone) {
      return null;
    }
    if (!this.cachedInjectors.has(componentDef)) {
      const providers = internalImportProvidersFrom(false, componentDef.type);
      const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;
      this.cachedInjectors.set(componentDef, standaloneInjector);
    }
    return this.cachedInjectors.get(componentDef);
  }
  ngOnDestroy() {
    try {
      for (const injector of this.cachedInjectors.values()) {
        if (injector !== null) {
          injector.destroy();
        }
      }
    } finally {
      this.cachedInjectors.clear();
    }
  }
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _StandaloneService,
      providedIn: "environment",
      factory: () => new _StandaloneService(\u0275\u0275inject(EnvironmentInjector))
    })
  );
};
function \u0275\u0275defineComponent(componentDefinition) {
  return noSideEffects(() => {
    (typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode();
    const baseDef = getNgDirectiveDef(componentDefinition);
    const def = __spreadProps(__spreadValues({}, baseDef), {
      decls: componentDefinition.decls,
      vars: componentDefinition.vars,
      template: componentDefinition.template,
      consts: componentDefinition.consts || null,
      ngContentSelectors: componentDefinition.ngContentSelectors,
      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
      directiveDefs: null,
      // assigned in noSideEffects
      pipeDefs: null,
      // assigned in noSideEffects
      dependencies: baseDef.standalone && componentDefinition.dependencies || null,
      getStandaloneInjector: baseDef.standalone ? (parentInjector) => {
        return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(def);
      } : null,
      getExternalStyles: null,
      signals: componentDefinition.signals ?? false,
      data: componentDefinition.data || {},
      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,
      styles: componentDefinition.styles || EMPTY_ARRAY,
      _: null,
      schemas: componentDefinition.schemas || null,
      tView: null,
      id: ""
    });
    if (baseDef.standalone) {
      performanceMarkFeature("NgStandalone");
    }
    initFeatures(def);
    const dependencies = componentDefinition.dependencies;
    def.directiveDefs = extractDefListOrFactory(
      dependencies,
      /* pipeDef */
      false
    );
    def.pipeDefs = extractDefListOrFactory(
      dependencies,
      /* pipeDef */
      true
    );
    def.id = getComponentId(def);
    return def;
  });
}
function extractDirectiveDef(type) {
  return getComponentDef(type) || getDirectiveDef(type);
}
function nonNull(value) {
  return value !== null;
}
function \u0275\u0275defineNgModule(def) {
  return noSideEffects(() => {
    const res = {
      type: def.type,
      bootstrap: def.bootstrap || EMPTY_ARRAY,
      declarations: def.declarations || EMPTY_ARRAY,
      imports: def.imports || EMPTY_ARRAY,
      exports: def.exports || EMPTY_ARRAY,
      transitiveCompileScopes: null,
      schemas: def.schemas || null,
      id: def.id || null
    };
    return res;
  });
}
function parseAndConvertInputsForDefinition(obj, declaredInputs) {
  if (obj == null) return EMPTY_OBJ;
  const newLookup = {};
  for (const minifiedKey in obj) {
    if (obj.hasOwnProperty(minifiedKey)) {
      const value = obj[minifiedKey];
      let publicName;
      let declaredName;
      let inputFlags;
      let transform;
      if (Array.isArray(value)) {
        inputFlags = value[0];
        publicName = value[1];
        declaredName = value[2] ?? publicName;
        transform = value[3] || null;
      } else {
        publicName = value;
        declaredName = value;
        inputFlags = InputFlags.None;
        transform = null;
      }
      newLookup[publicName] = [minifiedKey, inputFlags, transform];
      declaredInputs[publicName] = declaredName;
    }
  }
  return newLookup;
}
function parseAndConvertOutputsForDefinition(obj) {
  if (obj == null) return EMPTY_OBJ;
  const newLookup = {};
  for (const minifiedKey in obj) {
    if (obj.hasOwnProperty(minifiedKey)) {
      newLookup[obj[minifiedKey]] = minifiedKey;
    }
  }
  return newLookup;
}
function \u0275\u0275defineDirective(directiveDefinition) {
  return noSideEffects(() => {
    const def = getNgDirectiveDef(directiveDefinition);
    initFeatures(def);
    return def;
  });
}
function \u0275\u0275definePipe(pipeDef) {
  return {
    type: pipeDef.type,
    name: pipeDef.name,
    factory: null,
    pure: pipeDef.pure !== false,
    standalone: pipeDef.standalone ?? true,
    onDestroy: pipeDef.type.prototype.ngOnDestroy || null
  };
}
function getNgDirectiveDef(directiveDefinition) {
  const declaredInputs = {};
  return {
    type: directiveDefinition.type,
    providersResolver: null,
    factory: null,
    hostBindings: directiveDefinition.hostBindings || null,
    hostVars: directiveDefinition.hostVars || 0,
    hostAttrs: directiveDefinition.hostAttrs || null,
    contentQueries: directiveDefinition.contentQueries || null,
    declaredInputs,
    inputConfig: directiveDefinition.inputs || EMPTY_OBJ,
    exportAs: directiveDefinition.exportAs || null,
    standalone: directiveDefinition.standalone ?? true,
    signals: directiveDefinition.signals === true,
    selectors: directiveDefinition.selectors || EMPTY_ARRAY,
    viewQuery: directiveDefinition.viewQuery || null,
    features: directiveDefinition.features || null,
    setInput: null,
    findHostDirectiveDefs: null,
    hostDirectives: null,
    inputs: parseAndConvertInputsForDefinition(directiveDefinition.inputs, declaredInputs),
    outputs: parseAndConvertOutputsForDefinition(directiveDefinition.outputs),
    debugInfo: null
  };
}
function initFeatures(definition) {
  definition.features?.forEach((fn) => fn(definition));
}
function extractDefListOrFactory(dependencies, pipeDef) {
  if (!dependencies) {
    return null;
  }
  const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;
  return () => (typeof dependencies === "function" ? dependencies() : dependencies).map((dep) => defExtractor(dep)).filter(nonNull);
}
var GENERATED_COMP_IDS = /* @__PURE__ */ new Map();
function getComponentId(componentDef) {
  let hash = 0;
  const componentDefConsts = typeof componentDef.consts === "function" ? "" : componentDef.consts;
  const hashSelectors = [
    componentDef.selectors,
    componentDef.ngContentSelectors,
    componentDef.hostVars,
    componentDef.hostAttrs,
    componentDefConsts,
    componentDef.vars,
    componentDef.decls,
    componentDef.encapsulation,
    componentDef.standalone,
    componentDef.signals,
    componentDef.exportAs,
    JSON.stringify(componentDef.inputs),
    JSON.stringify(componentDef.outputs),
    // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not
    // match in the server and browser bundles.
    Object.getOwnPropertyNames(componentDef.type.prototype),
    !!componentDef.contentQueries,
    !!componentDef.viewQuery
  ];
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    for (const item of hashSelectors) {
      assertNotEqual(typeof item, "function", "Internal error: attempting to use a function in component id computation logic.");
    }
  }
  for (const char of hashSelectors.join("|")) {
    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;
  }
  hash += 2147483647 + 1;
  const compId = "c" + hash;
  if ((typeof ngDevMode === "undefined" || ngDevMode) && true) {
    if (GENERATED_COMP_IDS.has(compId)) {
      const previousCompDefType = GENERATED_COMP_IDS.get(compId);
      if (previousCompDefType !== componentDef.type) {
        console.warn(formatRuntimeError(-912, `Component ID generation collision detected. Components '${previousCompDefType.name}' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(componentDef.selectors)}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`));
      }
    } else {
      GENERATED_COMP_IDS.set(compId, componentDef.type);
    }
  }
  return compId;
}
function getSuperType(type) {
  return Object.getPrototypeOf(type.prototype).constructor;
}
function \u0275\u0275InheritDefinitionFeature(definition) {
  let superType = getSuperType(definition.type);
  let shouldInheritFields = true;
  const inheritanceChain = [definition];
  while (superType) {
    let superDef = void 0;
    if (isComponentDef(definition)) {
      superDef = superType.\u0275cmp || superType.\u0275dir;
    } else {
      if (superType.\u0275cmp) {
        throw new RuntimeError(903, ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);
      }
      superDef = superType.\u0275dir;
    }
    if (superDef) {
      if (shouldInheritFields) {
        inheritanceChain.push(superDef);
        const writeableDef = definition;
        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);
        const superHostBindings = superDef.hostBindings;
        superHostBindings && inheritHostBindings(definition, superHostBindings);
        const superViewQuery = superDef.viewQuery;
        const superContentQueries = superDef.contentQueries;
        superViewQuery && inheritViewQuery(definition, superViewQuery);
        superContentQueries && inheritContentQueries(definition, superContentQueries);
        mergeInputsWithTransforms(definition, superDef);
        fillProperties(definition.outputs, superDef.outputs);
        if (isComponentDef(superDef) && superDef.data.animation) {
          const defData = definition.data;
          defData.animation = (defData.animation || []).concat(superDef.data.animation);
        }
      }
      const features = superDef.features;
      if (features) {
        for (let i = 0; i < features.length; i++) {
          const feature = features[i];
          if (feature && feature.ngInherit) {
            feature(definition);
          }
          if (feature === \u0275\u0275InheritDefinitionFeature) {
            shouldInheritFields = false;
          }
        }
      }
    }
    superType = Object.getPrototypeOf(superType);
  }
  mergeHostAttrsAcrossInheritance(inheritanceChain);
}
function mergeInputsWithTransforms(target, source) {
  for (const key in source.inputs) {
    if (!source.inputs.hasOwnProperty(key)) {
      continue;
    }
    if (target.inputs.hasOwnProperty(key)) {
      continue;
    }
    const value = source.inputs[key];
    if (value !== void 0) {
      target.inputs[key] = value;
      target.declaredInputs[key] = source.declaredInputs[key];
    }
  }
}
function mergeHostAttrsAcrossInheritance(inheritanceChain) {
  let hostVars = 0;
  let hostAttrs = null;
  for (let i = inheritanceChain.length - 1; i >= 0; i--) {
    const def = inheritanceChain[i];
    def.hostVars = hostVars += def.hostVars;
    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
  }
}
function maybeUnwrapEmpty(value) {
  if (value === EMPTY_OBJ) {
    return {};
  } else if (value === EMPTY_ARRAY) {
    return [];
  } else {
    return value;
  }
}
function inheritViewQuery(definition, superViewQuery) {
  const prevViewQuery = definition.viewQuery;
  if (prevViewQuery) {
    definition.viewQuery = (rf, ctx) => {
      superViewQuery(rf, ctx);
      prevViewQuery(rf, ctx);
    };
  } else {
    definition.viewQuery = superViewQuery;
  }
}
function inheritContentQueries(definition, superContentQueries) {
  const prevContentQueries = definition.contentQueries;
  if (prevContentQueries) {
    definition.contentQueries = (rf, ctx, directiveIndex) => {
      superContentQueries(rf, ctx, directiveIndex);
      prevContentQueries(rf, ctx, directiveIndex);
    };
  } else {
    definition.contentQueries = superContentQueries;
  }
}
function inheritHostBindings(definition, superHostBindings) {
  const prevHostBindings = definition.hostBindings;
  if (prevHostBindings) {
    definition.hostBindings = (rf, ctx) => {
      superHostBindings(rf, ctx);
      prevHostBindings(rf, ctx);
    };
  } else {
    definition.hostBindings = superHostBindings;
  }
}
var COPY_DIRECTIVE_FIELDS = [
  // The child class should use the providers of its parent.
  "providersResolver"
  // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such
  // as inputs, outputs, and host binding functions.
];
var COPY_COMPONENT_FIELDS = [
  // The child class should use the template function of its parent, including all template
  // semantics.
  "template",
  "decls",
  "consts",
  "vars",
  "onPush",
  "ngContentSelectors",
  // The child class should use the CSS styles of its parent, including all styling semantics.
  "styles",
  "encapsulation",
  // The child class should be checked by the runtime in the same way as its parent.
  "schemas"
];
function \u0275\u0275CopyDefinitionFeature(definition) {
  let superType = getSuperType(definition.type);
  let superDef = void 0;
  if (isComponentDef(definition)) {
    superDef = superType.\u0275cmp;
  } else {
    superDef = superType.\u0275dir;
  }
  const defAny = definition;
  for (const field of COPY_DIRECTIVE_FIELDS) {
    defAny[field] = superDef[field];
  }
  if (isComponentDef(superDef)) {
    for (const field of COPY_COMPONENT_FIELDS) {
      defAny[field] = superDef[field];
    }
  }
}
function \u0275\u0275HostDirectivesFeature(rawHostDirectives) {
  const feature = (definition) => {
    const isEager = Array.isArray(rawHostDirectives);
    if (definition.hostDirectives === null) {
      definition.findHostDirectiveDefs = findHostDirectiveDefs;
      definition.hostDirectives = isEager ? rawHostDirectives.map(createHostDirectiveDef) : [rawHostDirectives];
    } else if (isEager) {
      definition.hostDirectives.unshift(...rawHostDirectives.map(createHostDirectiveDef));
    } else {
      definition.hostDirectives.unshift(rawHostDirectives);
    }
  };
  feature.ngInherit = true;
  return feature;
}
function findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {
  if (currentDef.hostDirectives !== null) {
    for (const configOrFn of currentDef.hostDirectives) {
      if (typeof configOrFn === "function") {
        const resolved = configOrFn();
        for (const config2 of resolved) {
          trackHostDirectiveDef(createHostDirectiveDef(config2), matchedDefs, hostDirectiveDefs);
        }
      } else {
        trackHostDirectiveDef(configOrFn, matchedDefs, hostDirectiveDefs);
      }
    }
  }
}
function trackHostDirectiveDef(def, matchedDefs, hostDirectiveDefs) {
  const hostDirectiveDef = getDirectiveDef(def.directive);
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    validateHostDirective(def, hostDirectiveDef);
  }
  patchDeclaredInputs(hostDirectiveDef.declaredInputs, def.inputs);
  findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);
  hostDirectiveDefs.set(hostDirectiveDef, def);
  matchedDefs.push(hostDirectiveDef);
}
function createHostDirectiveDef(config2) {
  return typeof config2 === "function" ? {
    directive: resolveForwardRef(config2),
    inputs: EMPTY_OBJ,
    outputs: EMPTY_OBJ
  } : {
    directive: resolveForwardRef(config2.directive),
    inputs: bindingArrayToMap(config2.inputs),
    outputs: bindingArrayToMap(config2.outputs)
  };
}
function bindingArrayToMap(bindings) {
  if (bindings === void 0 || bindings.length === 0) {
    return EMPTY_OBJ;
  }
  const result = {};
  for (let i = 0; i < bindings.length; i += 2) {
    result[bindings[i]] = bindings[i + 1];
  }
  return result;
}
function patchDeclaredInputs(declaredInputs, exposedInputs) {
  for (const publicName in exposedInputs) {
    if (exposedInputs.hasOwnProperty(publicName)) {
      const remappedPublicName = exposedInputs[publicName];
      const privateName = declaredInputs[publicName];
      if ((typeof ngDevMode === "undefined" || ngDevMode) && declaredInputs.hasOwnProperty(remappedPublicName)) {
        assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);
      }
      declaredInputs[remappedPublicName] = privateName;
    }
  }
}
function validateHostDirective(hostDirectiveConfig, directiveDef) {
  const type = hostDirectiveConfig.directive;
  if (directiveDef === null) {
    if (getComponentDef(type) !== null) {
      throw new RuntimeError(310, `Host directive ${type.name} cannot be a component.`);
    }
    throw new RuntimeError(307, `Could not resolve metadata for host directive ${type.name}. Make sure that the ${type.name} class is annotated with an @Directive decorator.`);
  }
  if (!directiveDef.standalone) {
    throw new RuntimeError(308, `Host directive ${directiveDef.type.name} must be standalone.`);
  }
  validateMappings("input", directiveDef, hostDirectiveConfig.inputs);
  validateMappings("output", directiveDef, hostDirectiveConfig.outputs);
}
function validateMappings(bindingType, def, hostDirectiveBindings) {
  const className = def.type.name;
  const bindings = bindingType === "input" ? def.inputs : def.outputs;
  for (const publicName in hostDirectiveBindings) {
    if (hostDirectiveBindings.hasOwnProperty(publicName)) {
      if (!bindings.hasOwnProperty(publicName)) {
        throw new RuntimeError(311, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);
      }
      const remappedPublicName = hostDirectiveBindings[publicName];
      if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName) {
        throw new RuntimeError(312, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);
      }
    }
  }
}
function isListLikeIterable(obj) {
  if (!isJsObject(obj)) return false;
  return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
  Symbol.iterator in obj;
}
function areIterablesEqual(a, b, comparator) {
  const iterator1 = a[Symbol.iterator]();
  const iterator2 = b[Symbol.iterator]();
  while (true) {
    const item1 = iterator1.next();
    const item2 = iterator2.next();
    if (item1.done && item2.done) return true;
    if (item1.done || item2.done) return false;
    if (!comparator(item1.value, item2.value)) return false;
  }
}
function iterateListLike(obj, fn) {
  if (Array.isArray(obj)) {
    for (let i = 0; i < obj.length; i++) {
      fn(obj[i]);
    }
  } else {
    const iterator2 = obj[Symbol.iterator]();
    let item;
    while (!(item = iterator2.next()).done) {
      fn(item.value);
    }
  }
}
function isJsObject(o) {
  return o !== null && (typeof o === "function" || typeof o === "object");
}
function devModeEqual(a, b) {
  const isListLikeIterableA = isListLikeIterable(a);
  const isListLikeIterableB = isListLikeIterable(b);
  if (isListLikeIterableA && isListLikeIterableB) {
    return areIterablesEqual(a, b, devModeEqual);
  } else {
    const isAObject = a && (typeof a === "object" || typeof a === "function");
    const isBObject = b && (typeof b === "object" || typeof b === "function");
    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
      return true;
    } else {
      return Object.is(a, b);
    }
  }
}
function updateBinding(lView, bindingIndex, value) {
  return lView[bindingIndex] = value;
}
function getBinding(lView, bindingIndex) {
  ngDevMode && assertIndexInRange(lView, bindingIndex);
  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, "Stored value should never be NO_CHANGE.");
  return lView[bindingIndex];
}
function bindingUpdated(lView, bindingIndex, value) {
  ngDevMode && assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);
  const oldValue = lView[bindingIndex];
  if (Object.is(oldValue, value)) {
    return false;
  } else {
    if (ngDevMode && isInCheckNoChangesMode()) {
      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : void 0;
      if (!devModeEqual(oldValueToCompare, value)) {
        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName, lView);
      }
      return false;
    }
    lView[bindingIndex] = value;
    return true;
  }
}
function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
  const different = bindingUpdated(lView, bindingIndex, exp1);
  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
}
function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
}
function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
}
function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrs, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const tNode = getOrCreateTNode(tView, index, 4, tagName || null, attrs || null);
  if (getBindingsEnabled()) {
    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex), findDirectiveDefMatches);
  }
  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
  registerPostOrderHooks(tView, tNode);
  const embeddedTView = tNode.tView = createTView(
    2,
    tNode,
    templateFn,
    decls,
    vars,
    tView.directiveRegistry,
    tView.pipeRegistry,
    null,
    tView.schemas,
    tViewConsts,
    null
    /* ssrId */
  );
  if (tView.queries !== null) {
    tView.queries.template(tView, tNode);
    embeddedTView.queries = tView.queries.embeddedTView(tNode);
  }
  return tNode;
}
function declareTemplate(declarationLView, declarationTView, index, templateFn, decls, vars, tagName, attrs, localRefsIndex, localRefExtractor) {
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = declarationTView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, declarationTView, declarationLView, templateFn, decls, vars, tagName, attrs, localRefsIndex) : declarationTView.data[adjustedIndex];
  setCurrentTNode(tNode, false);
  const comment = _locateOrCreateContainerAnchor(declarationTView, declarationLView, tNode, index);
  if (wasLastNodeCreated()) {
    appendChild(declarationTView, declarationLView, comment, tNode);
  }
  attachPatchData(comment, declarationLView);
  const lContainer = createLContainer(comment, declarationLView, comment, tNode);
  declarationLView[adjustedIndex] = lContainer;
  addToEndOfViewTree(declarationLView, lContainer);
  populateDehydratedViewsInLContainer(lContainer, tNode, declarationLView);
  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(declarationTView, declarationLView, tNode);
  }
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);
  }
  return tNode;
}
function \u0275\u0275template(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
  const lView = getLView();
  const tView = getTView();
  const attrs = getConstant(tView.consts, attrsIndex);
  declareTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, localRefsIndex, localRefExtractor);
  return \u0275\u0275template;
}
var _locateOrCreateContainerAnchor = createContainerAnchorImpl;
function createContainerAnchorImpl(tView, lView, tNode, index) {
  lastNodeWasCreated(true);
  return lView[RENDERER].createComment(ngDevMode ? "container" : "");
}
function onIdle(callback, injector) {
  const scheduler = injector.get(IdleScheduler);
  const cleanupFn = () => scheduler.remove(callback);
  scheduler.add(callback);
  return cleanupFn;
}
var _requestIdleCallback = () => typeof requestIdleCallback !== "undefined" ? requestIdleCallback : setTimeout;
var _cancelIdleCallback = () => typeof requestIdleCallback !== "undefined" ? cancelIdleCallback : clearTimeout;
var IdleScheduler = class _IdleScheduler {
  // Indicates whether current callbacks are being invoked.
  executingCallbacks = false;
  // Currently scheduled idle callback id.
  idleId = null;
  // Set of callbacks to be invoked next.
  current = /* @__PURE__ */ new Set();
  // Set of callbacks collected while invoking current set of callbacks.
  // Those callbacks are scheduled for the next idle period.
  deferred = /* @__PURE__ */ new Set();
  ngZone = inject(NgZone);
  requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);
  cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);
  add(callback) {
    const target = this.executingCallbacks ? this.deferred : this.current;
    target.add(callback);
    if (this.idleId === null) {
      this.scheduleIdleCallback();
    }
  }
  remove(callback) {
    const {
      current,
      deferred
    } = this;
    current.delete(callback);
    deferred.delete(callback);
    if (current.size === 0 && deferred.size === 0) {
      this.cancelIdleCallback();
    }
  }
  scheduleIdleCallback() {
    const callback = () => {
      this.cancelIdleCallback();
      this.executingCallbacks = true;
      for (const callback2 of this.current) {
        callback2();
      }
      this.current.clear();
      this.executingCallbacks = false;
      if (this.deferred.size > 0) {
        for (const callback2 of this.deferred) {
          this.current.add(callback2);
        }
        this.deferred.clear();
        this.scheduleIdleCallback();
      }
    };
    this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback));
  }
  cancelIdleCallback() {
    if (this.idleId !== null) {
      this.cancelIdleCallbackFn(this.idleId);
      this.idleId = null;
    }
  }
  ngOnDestroy() {
    this.cancelIdleCallback();
    this.current.clear();
    this.deferred.clear();
  }
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _IdleScheduler,
      providedIn: "root",
      factory: () => new _IdleScheduler()
    })
  );
};
function onTimer(delay) {
  return (callback, injector) => scheduleTimerTrigger(delay, callback, injector);
}
function scheduleTimerTrigger(delay, callback, injector) {
  const scheduler = injector.get(TimerScheduler);
  const ngZone = injector.get(NgZone);
  const cleanupFn = () => scheduler.remove(callback);
  scheduler.add(delay, callback, ngZone);
  return cleanupFn;
}
var TimerScheduler = class _TimerScheduler {
  // Indicates whether current callbacks are being invoked.
  executingCallbacks = false;
  // Currently scheduled `setTimeout` id.
  timeoutId = null;
  // When currently scheduled timer would fire.
  invokeTimerAt = null;
  // List of callbacks to be invoked.
  // For each callback we also store a timestamp on when the callback
  // should be invoked. We store timestamps and callback functions
  // in a flat array to avoid creating new objects for each entry.
  // [timestamp1, callback1, timestamp2, callback2, ...]
  current = [];
  // List of callbacks collected while invoking current set of callbacks.
  // Those callbacks are added to the "current" queue at the end of
  // the current callback invocation. The shape of this list is the same
  // as the shape of the `current` list.
  deferred = [];
  add(delay, callback, ngZone) {
    const target = this.executingCallbacks ? this.deferred : this.current;
    this.addToQueue(target, Date.now() + delay, callback);
    this.scheduleTimer(ngZone);
  }
  remove(callback) {
    const {
      current,
      deferred
    } = this;
    const callbackIndex = this.removeFromQueue(current, callback);
    if (callbackIndex === -1) {
      this.removeFromQueue(deferred, callback);
    }
    if (current.length === 0 && deferred.length === 0) {
      this.clearTimeout();
    }
  }
  addToQueue(target, invokeAt, callback) {
    let insertAtIndex = target.length;
    for (let i = 0; i < target.length; i += 2) {
      const invokeQueuedCallbackAt = target[i];
      if (invokeQueuedCallbackAt > invokeAt) {
        insertAtIndex = i;
        break;
      }
    }
    arrayInsert2(target, insertAtIndex, invokeAt, callback);
  }
  removeFromQueue(target, callback) {
    let index = -1;
    for (let i = 0; i < target.length; i += 2) {
      const queuedCallback = target[i + 1];
      if (queuedCallback === callback) {
        index = i;
        break;
      }
    }
    if (index > -1) {
      arraySplice(target, index, 2);
    }
    return index;
  }
  scheduleTimer(ngZone) {
    const callback = () => {
      this.clearTimeout();
      this.executingCallbacks = true;
      const current = [...this.current];
      const now = Date.now();
      for (let i = 0; i < current.length; i += 2) {
        const invokeAt = current[i];
        const callback2 = current[i + 1];
        if (invokeAt <= now) {
          callback2();
        } else {
          break;
        }
      }
      let lastCallbackIndex = -1;
      for (let i = 0; i < this.current.length; i += 2) {
        const invokeAt = this.current[i];
        if (invokeAt <= now) {
          lastCallbackIndex = i + 1;
        } else {
          break;
        }
      }
      if (lastCallbackIndex >= 0) {
        arraySplice(this.current, 0, lastCallbackIndex + 1);
      }
      this.executingCallbacks = false;
      if (this.deferred.length > 0) {
        for (let i = 0; i < this.deferred.length; i += 2) {
          const invokeAt = this.deferred[i];
          const callback2 = this.deferred[i + 1];
          this.addToQueue(this.current, invokeAt, callback2);
        }
        this.deferred.length = 0;
      }
      this.scheduleTimer(ngZone);
    };
    const FRAME_DURATION_MS = 16;
    if (this.current.length > 0) {
      const now = Date.now();
      const invokeAt = this.current[0];
      if (this.timeoutId === null || // Reschedule a timer in case a queue contains an item with
      // an earlier timestamp and the delta is more than an average
      // frame duration.
      this.invokeTimerAt && this.invokeTimerAt - invokeAt > FRAME_DURATION_MS) {
        this.clearTimeout();
        const timeout = Math.max(invokeAt - now, FRAME_DURATION_MS);
        this.invokeTimerAt = invokeAt;
        this.timeoutId = ngZone.runOutsideAngular(() => {
          return setTimeout(() => ngZone.run(callback), timeout);
        });
      }
    }
  }
  clearTimeout() {
    if (this.timeoutId !== null) {
      clearTimeout(this.timeoutId);
      this.timeoutId = null;
    }
  }
  ngOnDestroy() {
    this.clearTimeout();
    this.current.length = 0;
    this.deferred.length = 0;
  }
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _TimerScheduler,
      providedIn: "root",
      factory: () => new _TimerScheduler()
    })
  );
};
var CachedInjectorService = class _CachedInjectorService {
  cachedInjectors = /* @__PURE__ */ new Map();
  getOrCreateInjector(key, parentInjector, providers, debugName) {
    if (!this.cachedInjectors.has(key)) {
      const injector = providers.length > 0 ? createEnvironmentInjector(providers, parentInjector, debugName) : null;
      this.cachedInjectors.set(key, injector);
    }
    return this.cachedInjectors.get(key);
  }
  ngOnDestroy() {
    try {
      for (const injector of this.cachedInjectors.values()) {
        if (injector !== null) {
          injector.destroy();
        }
      }
    } finally {
      this.cachedInjectors.clear();
    }
  }
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _CachedInjectorService,
      providedIn: "environment",
      factory: () => new _CachedInjectorService()
    })
  );
};
var DEFER_BLOCK_DEPENDENCY_INTERCEPTOR = /* @__PURE__ */ new InjectionToken("DEFER_BLOCK_DEPENDENCY_INTERCEPTOR");
var DEFER_BLOCK_CONFIG = new InjectionToken(ngDevMode ? "DEFER_BLOCK_CONFIG" : "");
function getOrCreateEnvironmentInjector(parentInjector, tDetails, providers) {
  return parentInjector.get(CachedInjectorService).getOrCreateInjector(tDetails, parentInjector, providers, ngDevMode ? "DeferBlock Injector" : "");
}
function createDeferBlockInjector(parentInjector, tDetails, providers) {
  if (parentInjector instanceof ChainedInjector) {
    const origInjector = parentInjector.injector;
    const parentEnvInjector2 = parentInjector.parentInjector;
    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector2, tDetails, providers);
    return new ChainedInjector(origInjector, envInjector);
  }
  const parentEnvInjector = parentInjector.get(EnvironmentInjector);
  if (parentEnvInjector !== parentInjector) {
    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);
    return new ChainedInjector(parentInjector, envInjector);
  }
  return getOrCreateEnvironmentInjector(parentInjector, tDetails, providers);
}
function renderDeferBlockState(newState, tNode, lContainer, skipTimerScheduling = false) {
  const hostLView = lContainer[PARENT];
  const hostTView = hostLView[TVIEW];
  if (isDestroyed(hostLView)) return;
  ngDevMode && assertTNodeForLView(tNode, hostLView);
  const lDetails = getLDeferBlockDetails(hostLView, tNode);
  ngDevMode && assertDefined(lDetails, "Expected a defer block state defined");
  const currentState = lDetails[DEFER_BLOCK_STATE];
  const ssrState = lDetails[SSR_BLOCK_STATE];
  if (ssrState !== null && newState < ssrState) {
    return;
  }
  if (isValidStateChange(currentState, newState) && isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)) {
    const tDetails = getTDeferBlockDetails(hostTView, tNode);
    const needsScheduling = !skipTimerScheduling && true && (getLoadingBlockAfter(tDetails) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));
    if (ngDevMode && needsScheduling) {
      assertDefined(applyDeferBlockStateWithSchedulingImpl, "Expected scheduling function to be defined");
    }
    const applyStateFn = needsScheduling ? applyDeferBlockStateWithSchedulingImpl : applyDeferBlockState;
    try {
      applyStateFn(newState, lDetails, lContainer, tNode, hostLView);
    } catch (error) {
      handleError$1(hostLView, error);
    }
  }
}
function findMatchingDehydratedViewForDeferBlock(lContainer, lDetails) {
  const dehydratedViewIx = lContainer[DEHYDRATED_VIEWS]?.findIndex((view) => view.data[DEFER_BLOCK_STATE$1] === lDetails[DEFER_BLOCK_STATE]) ?? -1;
  const dehydratedView = dehydratedViewIx > -1 ? lContainer[DEHYDRATED_VIEWS][dehydratedViewIx] : null;
  return {
    dehydratedView,
    dehydratedViewIx
  };
}
function applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView) {
  profiler(
    20
    /* ProfilerEvent.DeferBlockStateStart */
  );
  const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);
  if (stateTmplIndex !== null) {
    lDetails[DEFER_BLOCK_STATE] = newState;
    const hostTView = hostLView[TVIEW];
    const adjustedIndex = stateTmplIndex + HEADER_OFFSET;
    const activeBlockTNode = getTNode(hostTView, adjustedIndex);
    const viewIndex = 0;
    removeLViewFromLContainer(lContainer, viewIndex);
    let injector;
    if (newState === DeferBlockState.Complete) {
      const tDetails = getTDeferBlockDetails(hostTView, tNode);
      const providers = tDetails.providers;
      if (providers && providers.length > 0) {
        injector = createDeferBlockInjector(hostLView[INJECTOR], tDetails, providers);
      }
    }
    const {
      dehydratedView,
      dehydratedViewIx
    } = findMatchingDehydratedViewForDeferBlock(lContainer, lDetails);
    const embeddedLView = createAndRenderEmbeddedLView(hostLView, activeBlockTNode, null, {
      injector,
      dehydratedView
    });
    addLViewToLContainer(lContainer, embeddedLView, viewIndex, shouldAddViewToDom(activeBlockTNode, dehydratedView));
    markViewDirty(
      embeddedLView,
      2
      /* NotificationSource.DeferBlockStateUpdate */
    );
    if (dehydratedViewIx > -1) {
      lContainer[DEHYDRATED_VIEWS]?.splice(dehydratedViewIx, 1);
    }
    if ((newState === DeferBlockState.Complete || newState === DeferBlockState.Error) && Array.isArray(lDetails[ON_COMPLETE_FNS])) {
      for (const callback of lDetails[ON_COMPLETE_FNS]) {
        callback();
      }
      lDetails[ON_COMPLETE_FNS] = null;
    }
  }
  profiler(
    21
    /* ProfilerEvent.DeferBlockStateEnd */
  );
}
function applyDeferBlockStateWithScheduling(newState, lDetails, lContainer, tNode, hostLView) {
  const now = Date.now();
  const hostTView = hostLView[TVIEW];
  const tDetails = getTDeferBlockDetails(hostTView, tNode);
  if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {
    lDetails[STATE_IS_FROZEN_UNTIL] = null;
    const loadingAfter = getLoadingBlockAfter(tDetails);
    const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;
    if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {
      lDetails[NEXT_DEFER_BLOCK_STATE] = newState;
      const cleanupFn = scheduleDeferBlockUpdate(loadingAfter, lDetails, tNode, lContainer, hostLView);
      lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;
    } else {
      if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {
        lDetails[LOADING_AFTER_CLEANUP_FN]();
        lDetails[LOADING_AFTER_CLEANUP_FN] = null;
        lDetails[NEXT_DEFER_BLOCK_STATE] = null;
      }
      applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);
      const duration = getMinimumDurationForState(tDetails, newState);
      if (duration !== null) {
        lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;
        scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);
      }
    }
  } else {
    lDetails[NEXT_DEFER_BLOCK_STATE] = newState;
  }
}
function scheduleDeferBlockUpdate(timeout, lDetails, tNode, lContainer, hostLView) {
  const callback = () => {
    const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];
    lDetails[STATE_IS_FROZEN_UNTIL] = null;
    lDetails[NEXT_DEFER_BLOCK_STATE] = null;
    if (nextState !== null) {
      renderDeferBlockState(nextState, tNode, lContainer);
    }
  };
  return scheduleTimerTrigger(timeout, callback, hostLView[INJECTOR]);
}
function isValidStateChange(currentState, newState) {
  return currentState < newState;
}
function renderPlaceholder(lView, tNode) {
  const lContainer = lView[tNode.index];
  ngDevMode && assertLContainer(lContainer);
  renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);
}
function renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer) {
  ngDevMode && assertDefined(tDetails.loadingPromise, "Expected loading Promise to exist on this defer block");
  tDetails.loadingPromise.then(() => {
    if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {
      ngDevMode && assertDeferredDependenciesLoaded(tDetails);
      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);
    } else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {
      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);
    }
  });
}
var applyDeferBlockStateWithSchedulingImpl = null;
function \u0275\u0275deferEnableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex) {
  const tViewConsts = tView.consts;
  if (placeholderConfigIndex != null) {
    tDetails.placeholderBlockConfig = getConstant(tViewConsts, placeholderConfigIndex);
  }
  if (loadingConfigIndex != null) {
    tDetails.loadingBlockConfig = getConstant(tViewConsts, loadingConfigIndex);
  }
  if (applyDeferBlockStateWithSchedulingImpl === null) {
    applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;
  }
}
function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
  return noSideEffects(() => {
    const clazz = type;
    if (decorators !== null) {
      if (clazz.hasOwnProperty("decorators") && clazz.decorators !== void 0) {
        clazz.decorators.push(...decorators);
      } else {
        clazz.decorators = decorators;
      }
    }
    if (ctorParameters !== null) {
      clazz.ctorParameters = ctorParameters;
    }
    if (propDecorators !== null) {
      if (clazz.hasOwnProperty("propDecorators") && clazz.propDecorators !== void 0) {
        clazz.propDecorators = __spreadValues(__spreadValues({}, clazz.propDecorators), propDecorators);
      } else {
        clazz.propDecorators = propDecorators;
      }
    }
  });
}
var Console = class _Console {
  log(message) {
    console.log(message);
  }
  // Note: for reporting errors use `DOM.logError()` as it is platform specific
  warn(message) {
    console.warn(message);
  }
  static \u0275fac = function Console_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Console)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _Console,
    factory: _Console.\u0275fac,
    providedIn: "platform"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Console, [{
    type: Injectable,
    args: [{
      providedIn: "platform"
    }]
  }], null, null);
})();
var DIDebugData = class {
  resolverToTokenToDependencies = /* @__PURE__ */ new WeakMap();
  resolverToProviders = /* @__PURE__ */ new WeakMap();
  resolverToEffects = /* @__PURE__ */ new WeakMap();
  standaloneInjectorToComponent = /* @__PURE__ */ new WeakMap();
  reset() {
    this.resolverToTokenToDependencies = /* @__PURE__ */ new WeakMap();
    this.resolverToProviders = /* @__PURE__ */ new WeakMap();
    this.standaloneInjectorToComponent = /* @__PURE__ */ new WeakMap();
  }
};
var frameworkDIDebugData = new DIDebugData();
function getFrameworkDIDebugData() {
  return frameworkDIDebugData;
}
function setupFrameworkInjectorProfiler() {
  frameworkDIDebugData.reset();
  setInjectorProfiler((injectorProfilerEvent) => handleInjectorProfilerEvent(injectorProfilerEvent));
}
function handleInjectorProfilerEvent(injectorProfilerEvent) {
  const {
    context: context2,
    type
  } = injectorProfilerEvent;
  if (type === 0) {
    handleInjectEvent(context2, injectorProfilerEvent.service);
  } else if (type === 1) {
    handleInstanceCreatedByInjectorEvent(context2, injectorProfilerEvent.instance);
  } else if (type === 2) {
    handleProviderConfiguredEvent(context2, injectorProfilerEvent.providerRecord);
  } else if (type === 3) {
    handleEffectCreatedEvent(context2, injectorProfilerEvent.effect);
  }
}
function handleEffectCreatedEvent(context2, effect2) {
  const diResolver = getDIResolver(context2.injector);
  if (diResolver === null) {
    throwError2("An EffectCreated event must be run within an injection context.");
  }
  const {
    resolverToEffects
  } = frameworkDIDebugData;
  if (!resolverToEffects.has(diResolver)) {
    resolverToEffects.set(diResolver, []);
  }
  resolverToEffects.get(diResolver).push(effect2);
}
function handleInjectEvent(context2, data) {
  const diResolver = getDIResolver(context2.injector);
  if (diResolver === null) {
    throwError2("An Inject event must be run within an injection context.");
  }
  const diResolverToInstantiatedToken = frameworkDIDebugData.resolverToTokenToDependencies;
  if (!diResolverToInstantiatedToken.has(diResolver)) {
    diResolverToInstantiatedToken.set(diResolver, /* @__PURE__ */ new WeakMap());
  }
  if (!canBeHeldWeakly(context2.token)) {
    return;
  }
  const instantiatedTokenToDependencies = diResolverToInstantiatedToken.get(diResolver);
  if (!instantiatedTokenToDependencies.has(context2.token)) {
    instantiatedTokenToDependencies.set(context2.token, []);
  }
  const {
    token,
    value,
    flags
  } = data;
  assertDefined(context2.token, "Injector profiler context token is undefined.");
  const dependencies = instantiatedTokenToDependencies.get(context2.token);
  assertDefined(dependencies, "Could not resolve dependencies for token.");
  if (context2.injector instanceof NodeInjector) {
    dependencies.push({
      token,
      value,
      flags,
      injectedIn: getNodeInjectorContext(context2.injector)
    });
  } else {
    dependencies.push({
      token,
      value,
      flags
    });
  }
}
function getNodeInjectorContext(injector) {
  if (!(injector instanceof NodeInjector)) {
    throwError2("getNodeInjectorContext must be called with a NodeInjector");
  }
  const lView = getNodeInjectorLView(injector);
  const tNode = getNodeInjectorTNode(injector);
  if (tNode === null) {
    return;
  }
  assertTNodeForLView(tNode, lView);
  return {
    lView,
    tNode
  };
}
function handleInstanceCreatedByInjectorEvent(context2, data) {
  const {
    value
  } = data;
  if (getDIResolver(context2.injector) === null) {
    throwError2("An InjectorCreatedInstance event must be run within an injection context.");
  }
  let standaloneComponent = void 0;
  if (typeof value === "object") {
    standaloneComponent = value?.constructor;
  }
  if (standaloneComponent == void 0 || !isStandaloneComponent(standaloneComponent)) {
    return;
  }
  const environmentInjector = context2.injector.get(EnvironmentInjector, null, {
    optional: true
  });
  if (environmentInjector === null) {
    return;
  }
  const {
    standaloneInjectorToComponent
  } = frameworkDIDebugData;
  if (standaloneInjectorToComponent.has(environmentInjector)) {
    return;
  }
  standaloneInjectorToComponent.set(environmentInjector, standaloneComponent);
}
function isStandaloneComponent(value) {
  const def = getComponentDef(value);
  return !!def?.standalone;
}
function handleProviderConfiguredEvent(context2, data) {
  const {
    resolverToProviders
  } = frameworkDIDebugData;
  let diResolver;
  if (context2?.injector instanceof NodeInjector) {
    diResolver = getNodeInjectorTNode(context2.injector);
  } else {
    diResolver = context2.injector;
  }
  if (diResolver === null) {
    throwError2("A ProviderConfigured event must be run within an injection context.");
  }
  if (!resolverToProviders.has(diResolver)) {
    resolverToProviders.set(diResolver, []);
  }
  resolverToProviders.get(diResolver).push(data);
}
function getDIResolver(injector) {
  let diResolver = null;
  if (injector === void 0) {
    return diResolver;
  }
  if (injector instanceof NodeInjector) {
    diResolver = getNodeInjectorLView(injector);
  } else {
    diResolver = injector;
  }
  return diResolver;
}
function canBeHeldWeakly(value) {
  return value !== null && (typeof value === "object" || typeof value === "function" || typeof value === "symbol");
}
function applyChanges(component) {
  ngDevMode && assertDefined(component, "component");
  markViewDirty(
    getComponentViewByInstance(component),
    3
    /* NotificationSource.DebugApplyChanges */
  );
  getRootComponents(component).forEach((rootComponent) => detectChanges(rootComponent));
}
function detectChanges(component) {
  const view = getComponentViewByInstance(component);
  view[FLAGS] |= 1024;
  detectChangesInternal(view);
}
function getDeferBlocks$1(lView, deferBlocks) {
  const tView = lView[TVIEW];
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    if (isLContainer(lView[i])) {
      const lContainer = lView[i];
      const isLast = i === tView.bindingStartIndex - 1;
      if (!isLast) {
        const tNode = tView.data[i];
        const tDetails = getTDeferBlockDetails(tView, tNode);
        if (isTDeferBlockDetails(tDetails)) {
          deferBlocks.push({
            lContainer,
            lView,
            tNode,
            tDetails
          });
          continue;
        }
      }
      for (let i2 = CONTAINER_HEADER_OFFSET; i2 < lContainer.length; i2++) {
        getDeferBlocks$1(lContainer[i2], deferBlocks);
      }
    } else if (isLView(lView[i])) {
      getDeferBlocks$1(lView[i], deferBlocks);
    }
  }
}
function getDeferBlocks(node) {
  const results = [];
  const lView = getLContext(node)?.lView;
  if (lView) {
    findDeferBlocks(node, lView, results);
  }
  return results;
}
function findDeferBlocks(node, lView, results) {
  const registry = lView[INJECTOR].get(DEHYDRATED_BLOCK_REGISTRY, null, {
    optional: true
  });
  const blocks = [];
  getDeferBlocks$1(lView, blocks);
  for (const details of blocks) {
    const native = getNativeByTNode(details.tNode, details.lView);
    const lDetails = getLDeferBlockDetails(details.lView, details.tNode);
    if (!node.contains(native)) {
      continue;
    }
    const tDetails = details.tDetails;
    const renderedLView = getRendererLView(details);
    const rootNodes = [];
    if (renderedLView !== null) {
      collectNativeNodes(renderedLView[TVIEW], renderedLView, renderedLView[TVIEW].firstChild, rootNodes);
    }
    const data = {
      state: stringifyState(lDetails[DEFER_BLOCK_STATE]),
      incrementalHydrationState: inferHydrationState(tDetails, lDetails, registry),
      hasErrorBlock: tDetails.errorTmplIndex !== null,
      loadingBlock: {
        exists: tDetails.loadingTmplIndex !== null,
        minimumTime: tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null,
        afterTime: tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null
      },
      placeholderBlock: {
        exists: tDetails.placeholderTmplIndex !== null,
        minimumTime: tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null
      },
      triggers: tDetails.debug?.triggers ? Array.from(tDetails.debug.triggers).sort() : [],
      rootNodes
    };
    results.push(data);
    if (renderedLView !== null) {
      findDeferBlocks(node, renderedLView, results);
    }
  }
}
function stringifyState(state) {
  switch (state) {
    case DeferBlockState.Complete:
      return "complete";
    case DeferBlockState.Loading:
      return "loading";
    case DeferBlockState.Placeholder:
      return "placeholder";
    case DeferBlockState.Error:
      return "error";
    case DeferBlockInternalState.Initial:
      return "initial";
    default:
      throw new Error(`Unrecognized state ${state}`);
  }
}
function inferHydrationState(tDetails, lDetails, registry) {
  if (registry === null || lDetails[SSR_UNIQUE_ID] === null || tDetails.hydrateTriggers === null || tDetails.hydrateTriggers.has(
    7
    /* DeferBlockTrigger.Never */
  )) {
    return "not-configured";
  }
  return registry.has(lDetails[SSR_UNIQUE_ID]) ? "dehydrated" : "hydrated";
}
function getRendererLView(details) {
  if (details.lContainer.length <= CONTAINER_HEADER_OFFSET) {
    return null;
  }
  const lView = details.lContainer[CONTAINER_HEADER_OFFSET];
  ngDevMode && assertLView(lView);
  return lView;
}
function getDependenciesFromInjectable(injector, token) {
  const instance = injector.get(token, null, {
    self: true,
    optional: true
  });
  if (instance === null) {
    throw new Error(`Unable to determine instance of ${token} in given injector`);
  }
  const unformattedDependencies = getDependenciesForTokenInInjector(token, injector);
  const resolutionPath = getInjectorResolutionPath(injector);
  const dependencies = unformattedDependencies.map((dep) => {
    const formattedDependency = {
      value: dep.value
    };
    const flags = dep.flags;
    formattedDependency.flags = {
      optional: (8 & flags) === 8,
      host: (1 & flags) === 1,
      self: (2 & flags) === 2,
      skipSelf: (4 & flags) === 4
      /* InternalInjectFlags.SkipSelf */
    };
    for (let i = 0; i < resolutionPath.length; i++) {
      const injectorToCheck = resolutionPath[i];
      if (i === 0 && formattedDependency.flags.skipSelf) {
        continue;
      }
      if (formattedDependency.flags.host && injectorToCheck instanceof EnvironmentInjector) {
        break;
      }
      const instance2 = injectorToCheck.get(dep.token, null, {
        self: true,
        optional: true
      });
      if (instance2 !== null) {
        if (formattedDependency.flags.host) {
          const firstInjector = resolutionPath[0];
          const lookupFromFirstInjector = firstInjector.get(dep.token, null, __spreadProps(__spreadValues({}, formattedDependency.flags), {
            optional: true
          }));
          if (lookupFromFirstInjector !== null) {
            formattedDependency.providedIn = injectorToCheck;
          }
          break;
        }
        formattedDependency.providedIn = injectorToCheck;
        break;
      }
      if (i === 0 && formattedDependency.flags.self) {
        break;
      }
    }
    if (dep.token) formattedDependency.token = dep.token;
    return formattedDependency;
  });
  return {
    instance,
    dependencies
  };
}
function getDependenciesForTokenInInjector(token, injector) {
  const {
    resolverToTokenToDependencies
  } = getFrameworkDIDebugData();
  if (!(injector instanceof NodeInjector)) {
    return resolverToTokenToDependencies.get(injector)?.get?.(token) ?? [];
  }
  const lView = getNodeInjectorLView(injector);
  const tokenDependencyMap = resolverToTokenToDependencies.get(lView);
  const dependencies = tokenDependencyMap?.get(token) ?? [];
  return dependencies.filter((dependency) => {
    const dependencyNode = dependency.injectedIn?.tNode;
    if (dependencyNode === void 0) {
      return false;
    }
    const instanceNode = getNodeInjectorTNode(injector);
    assertTNode(dependencyNode);
    assertTNode(instanceNode);
    return dependencyNode === instanceNode;
  });
}
function getProviderImportsContainer(injector) {
  const {
    standaloneInjectorToComponent
  } = getFrameworkDIDebugData();
  if (standaloneInjectorToComponent.has(injector)) {
    return standaloneInjectorToComponent.get(injector);
  }
  const defTypeRef = injector.get(NgModuleRef$1, null, {
    self: true,
    optional: true
  });
  if (defTypeRef === null) {
    return null;
  }
  if (defTypeRef.instance === null) {
    return null;
  }
  return defTypeRef.instance.constructor;
}
function getNodeInjectorProviders(injector) {
  const diResolver = getNodeInjectorTNode(injector);
  const {
    resolverToProviders
  } = getFrameworkDIDebugData();
  return resolverToProviders.get(diResolver) ?? [];
}
function getProviderImportPaths(providerImportsContainer) {
  const providerToPath = /* @__PURE__ */ new Map();
  const visitedContainers = /* @__PURE__ */ new Set();
  const visitor = walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers);
  walkProviderTree(providerImportsContainer, visitor, [], /* @__PURE__ */ new Set());
  return providerToPath;
}
function walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers) {
  return (provider, container) => {
    if (!providerToPath.has(provider)) {
      providerToPath.set(provider, [container]);
    }
    if (!visitedContainers.has(container)) {
      for (const prov of providerToPath.keys()) {
        const existingImportPath = providerToPath.get(prov);
        let containerDef = getInjectorDef(container);
        if (!containerDef) {
          const ngModule = container.ngModule;
          containerDef = getInjectorDef(ngModule);
        }
        if (!containerDef) {
          return;
        }
        const lastContainerAddedToPath = existingImportPath[0];
        let isNextStepInPath = false;
        deepForEach(containerDef.imports, (moduleImport) => {
          if (isNextStepInPath) {
            return;
          }
          isNextStepInPath = moduleImport.ngModule === lastContainerAddedToPath || moduleImport === lastContainerAddedToPath;
          if (isNextStepInPath) {
            providerToPath.get(prov)?.unshift(container);
          }
        });
      }
    }
    visitedContainers.add(container);
  };
}
function getEnvironmentInjectorProviders(injector) {
  const providerRecordsWithoutImportPaths = getFrameworkDIDebugData().resolverToProviders.get(injector) ?? [];
  if (isPlatformInjector(injector)) {
    return providerRecordsWithoutImportPaths;
  }
  const providerImportsContainer = getProviderImportsContainer(injector);
  if (providerImportsContainer === null) {
    return providerRecordsWithoutImportPaths;
  }
  const providerToPath = getProviderImportPaths(providerImportsContainer);
  const providerRecords = [];
  for (const providerRecord of providerRecordsWithoutImportPaths) {
    const provider = providerRecord.provider;
    const token = provider.provide;
    if (token === ENVIRONMENT_INITIALIZER || token === INJECTOR_DEF_TYPES) {
      continue;
    }
    let importPath = providerToPath.get(provider) ?? [];
    const def = getComponentDef(providerImportsContainer);
    const isStandaloneComponent2 = !!def?.standalone;
    if (isStandaloneComponent2) {
      importPath = [providerImportsContainer, ...importPath];
    }
    providerRecords.push(__spreadProps(__spreadValues({}, providerRecord), {
      importPath
    }));
  }
  return providerRecords;
}
function isPlatformInjector(injector) {
  return injector instanceof R3Injector && injector.scopes.has("platform");
}
function getInjectorProviders(injector) {
  if (injector instanceof NodeInjector) {
    return getNodeInjectorProviders(injector);
  } else if (injector instanceof EnvironmentInjector) {
    return getEnvironmentInjectorProviders(injector);
  }
  throwError2("getInjectorProviders only supports NodeInjector and EnvironmentInjector");
}
function getInjectorMetadata(injector) {
  if (injector instanceof NodeInjector) {
    const lView = getNodeInjectorLView(injector);
    const tNode = getNodeInjectorTNode(injector);
    assertTNodeForLView(tNode, lView);
    return {
      type: "element",
      source: getNativeByTNode(tNode, lView)
    };
  }
  if (injector instanceof R3Injector) {
    return {
      type: "environment",
      source: injector.source ?? null
    };
  }
  if (injector instanceof NullInjector) {
    return {
      type: "null",
      source: null
    };
  }
  return null;
}
function getInjectorResolutionPath(injector) {
  const resolutionPath = [injector];
  getInjectorResolutionPathHelper(injector, resolutionPath);
  return resolutionPath;
}
function getInjectorResolutionPathHelper(injector, resolutionPath) {
  const parent = getInjectorParent(injector);
  if (parent === null) {
    if (injector instanceof NodeInjector) {
      const firstInjector = resolutionPath[0];
      if (firstInjector instanceof NodeInjector) {
        const moduleInjector = getModuleInjectorOfNodeInjector(firstInjector);
        if (moduleInjector === null) {
          throwError2("NodeInjector must have some connection to the module injector tree");
        }
        resolutionPath.push(moduleInjector);
        getInjectorResolutionPathHelper(moduleInjector, resolutionPath);
      }
      return resolutionPath;
    }
  } else {
    resolutionPath.push(parent);
    getInjectorResolutionPathHelper(parent, resolutionPath);
  }
  return resolutionPath;
}
function getInjectorParent(injector) {
  if (injector instanceof R3Injector) {
    return injector.parent;
  }
  let tNode;
  let lView;
  if (injector instanceof NodeInjector) {
    tNode = getNodeInjectorTNode(injector);
    lView = getNodeInjectorLView(injector);
  } else if (injector instanceof NullInjector) {
    return null;
  } else if (injector instanceof ChainedInjector) {
    return injector.parentInjector;
  } else {
    throwError2("getInjectorParent only support injectors of type R3Injector, NodeInjector, NullInjector");
  }
  const parentLocation = getParentInjectorLocation(tNode, lView);
  if (hasParentInjector(parentLocation)) {
    const parentInjectorIndex = getParentInjectorIndex(parentLocation);
    const parentLView = getParentInjectorView(parentLocation, lView);
    const parentTView = parentLView[TVIEW];
    const parentTNode = parentTView.data[
      parentInjectorIndex + 8
      /* NodeInjectorOffset.TNODE */
    ];
    return new NodeInjector(parentTNode, parentLView);
  } else {
    const chainedInjector = lView[INJECTOR];
    const injectorParent = chainedInjector.injector?.parent;
    if (injectorParent instanceof NodeInjector) {
      return injectorParent;
    }
  }
  return null;
}
function getModuleInjectorOfNodeInjector(injector) {
  let lView;
  if (injector instanceof NodeInjector) {
    lView = getNodeInjectorLView(injector);
  } else {
    throwError2("getModuleInjectorOfNodeInjector must be called with a NodeInjector");
  }
  const inj = lView[INJECTOR];
  const moduleInjector = inj instanceof ChainedInjector ? inj.parentInjector : inj.parent;
  if (!moduleInjector) {
    throwError2("NodeInjector must have some connection to the module injector tree");
  }
  return moduleInjector;
}
function isComputedNode(node) {
  return node.kind === "computed";
}
function isTemplateEffectNode(node) {
  return node.kind === "template";
}
function isEffectNode(node) {
  return node.kind === "effect";
}
function isSignalNode(node) {
  return node.kind === "signal";
}
function getTemplateConsumer(injector) {
  const tNode = getNodeInjectorTNode(injector);
  assertTNode(tNode);
  const lView = getNodeInjectorLView(injector);
  assertLView(lView);
  const templateLView = lView[tNode.index];
  assertLView(templateLView);
  return templateLView[REACTIVE_TEMPLATE_CONSUMER];
}
function getNodesAndEdgesFromSignalMap(signalMap) {
  const nodes = Array.from(signalMap.keys());
  const debugSignalGraphNodes = [];
  const edges = [];
  for (const [consumer, producers] of signalMap.entries()) {
    const consumerIndex = nodes.indexOf(consumer);
    if (isComputedNode(consumer) || isSignalNode(consumer)) {
      debugSignalGraphNodes.push({
        label: consumer.debugName,
        value: consumer.value,
        kind: consumer.kind
      });
    } else if (isTemplateEffectNode(consumer)) {
      debugSignalGraphNodes.push({
        label: consumer.debugName ?? consumer.lView?.[HOST]?.tagName?.toLowerCase?.(),
        kind: consumer.kind
      });
    } else if (isEffectNode(consumer)) {
      debugSignalGraphNodes.push({
        label: consumer.debugName,
        kind: consumer.kind
      });
    } else {
      debugSignalGraphNodes.push({
        label: consumer.debugName,
        kind: consumer.kind
      });
    }
    for (const producer of producers) {
      edges.push({
        consumer: consumerIndex,
        producer: nodes.indexOf(producer)
      });
    }
  }
  return {
    nodes: debugSignalGraphNodes,
    edges
  };
}
function extractEffectsFromInjector(injector) {
  let diResolver = injector;
  if (injector instanceof NodeInjector) {
    const lView = getNodeInjectorLView(injector);
    diResolver = lView;
  }
  const resolverToEffects = getFrameworkDIDebugData().resolverToEffects;
  const effects = resolverToEffects.get(diResolver) ?? [];
  return effects.map((effect2) => effect2[SIGNAL]);
}
function extractSignalNodesAndEdgesFromRoots(nodes, signalDependenciesMap = /* @__PURE__ */ new Map()) {
  for (const node of nodes) {
    if (signalDependenciesMap.has(node)) {
      continue;
    }
    const producerNodes = node.producerNode ?? [];
    signalDependenciesMap.set(node, producerNodes);
    extractSignalNodesAndEdgesFromRoots(producerNodes, signalDependenciesMap);
  }
  return signalDependenciesMap;
}
function getSignalGraph(injector) {
  let templateConsumer = null;
  if (!(injector instanceof NodeInjector) && !(injector instanceof R3Injector)) {
    return throwError2("getSignalGraph must be called with a NodeInjector or R3Injector");
  }
  if (injector instanceof NodeInjector) {
    templateConsumer = getTemplateConsumer(injector);
  }
  const nonTemplateEffectNodes = extractEffectsFromInjector(injector);
  const signalNodes = templateConsumer ? [templateConsumer, ...nonTemplateEffectNodes] : nonTemplateEffectNodes;
  const signalDependenciesMap = extractSignalNodesAndEdgesFromRoots(signalNodes);
  return getNodesAndEdgesFromSignalMap(signalDependenciesMap);
}
var GLOBAL_PUBLISH_EXPANDO_KEY = "ng";
var globalUtilsFunctions = {
  /**
   * Warning: functions that start with `ɵ` are considered *INTERNAL* and should not be relied upon
   * in application's code. The contract of those functions might be changed in any release and/or a
   * function can be removed completely.
   */
  "\u0275getDependenciesFromInjectable": getDependenciesFromInjectable,
  "\u0275getInjectorProviders": getInjectorProviders,
  "\u0275getInjectorResolutionPath": getInjectorResolutionPath,
  "\u0275getInjectorMetadata": getInjectorMetadata,
  "\u0275setProfiler": setProfiler,
  "\u0275getSignalGraph": getSignalGraph,
  "\u0275getDeferBlocks": getDeferBlocks,
  "getDirectiveMetadata": getDirectiveMetadata$1,
  "getComponent": getComponent,
  "getContext": getContext,
  "getListeners": getListeners,
  "getOwningComponent": getOwningComponent,
  "getHostElement": getHostElement,
  "getInjector": getInjector,
  "getRootComponents": getRootComponents,
  "getDirectives": getDirectives,
  "applyChanges": applyChanges,
  "isSignal": isSignal
};
var _published = false;
function publishDefaultGlobalUtils$1() {
  if (!_published) {
    _published = true;
    if (typeof window !== "undefined") {
      setupFrameworkInjectorProfiler();
    }
    for (const [methodName, method] of Object.entries(globalUtilsFunctions)) {
      publishGlobalUtil(methodName, method);
    }
  }
}
function publishGlobalUtil(name, fn) {
  publishUtil(name, fn);
}
function publishUtil(name, fn) {
  if (typeof COMPILED === "undefined" || !COMPILED) {
    const w = _global;
    ngDevMode && assertDefined(fn, "function not defined");
    w[GLOBAL_PUBLISH_EXPANDO_KEY] ??= {};
    w[GLOBAL_PUBLISH_EXPANDO_KEY][name] = fn;
  }
}
var TESTABILITY = new InjectionToken("");
var TESTABILITY_GETTER = new InjectionToken("");
var Testability = class _Testability {
  _ngZone;
  registry;
  _isZoneStable = true;
  _callbacks = [];
  taskTrackingZone = null;
  constructor(_ngZone, registry, testabilityGetter) {
    this._ngZone = _ngZone;
    this.registry = registry;
    if (!_testabilityGetter) {
      setTestabilityGetter(testabilityGetter);
      testabilityGetter.addToWindow(registry);
    }
    this._watchAngularEvents();
    _ngZone.run(() => {
      this.taskTrackingZone = typeof Zone == "undefined" ? null : Zone.current.get("TaskTrackingZone");
    });
  }
  _watchAngularEvents() {
    this._ngZone.onUnstable.subscribe({
      next: () => {
        this._isZoneStable = false;
      }
    });
    this._ngZone.runOutsideAngular(() => {
      this._ngZone.onStable.subscribe({
        next: () => {
          NgZone.assertNotInAngularZone();
          queueMicrotask(() => {
            this._isZoneStable = true;
            this._runCallbacksIfReady();
          });
        }
      });
    });
  }
  /**
   * Whether an associated application is stable
   */
  isStable() {
    return this._isZoneStable && !this._ngZone.hasPendingMacrotasks;
  }
  _runCallbacksIfReady() {
    if (this.isStable()) {
      queueMicrotask(() => {
        while (this._callbacks.length !== 0) {
          let cb = this._callbacks.pop();
          clearTimeout(cb.timeoutId);
          cb.doneCb();
        }
      });
    } else {
      let pending = this.getPendingTasks();
      this._callbacks = this._callbacks.filter((cb) => {
        if (cb.updateCb && cb.updateCb(pending)) {
          clearTimeout(cb.timeoutId);
          return false;
        }
        return true;
      });
    }
  }
  getPendingTasks() {
    if (!this.taskTrackingZone) {
      return [];
    }
    return this.taskTrackingZone.macroTasks.map((t) => {
      return {
        source: t.source,
        // From TaskTrackingZone:
        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
        creationLocation: t.creationLocation,
        data: t.data
      };
    });
  }
  addCallback(cb, timeout, updateCb) {
    let timeoutId = -1;
    if (timeout && timeout > 0) {
      timeoutId = setTimeout(() => {
        this._callbacks = this._callbacks.filter((cb2) => cb2.timeoutId !== timeoutId);
        cb();
      }, timeout);
    }
    this._callbacks.push({
      doneCb: cb,
      timeoutId,
      updateCb
    });
  }
  /**
   * Wait for the application to be stable with a timeout. If the timeout is reached before that
   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
   *
   * @param doneCb The callback to invoke when Angular is stable or the timeout expires
   *    whichever comes first.
   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
   *    specified, whenStable() will wait forever.
   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
   *    and no further updates will be issued.
   */
  whenStable(doneCb, timeout, updateCb) {
    if (updateCb && !this.taskTrackingZone) {
      throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');
    }
    this.addCallback(doneCb, timeout, updateCb);
    this._runCallbacksIfReady();
  }
  /**
   * Registers an application with a testability hook so that it can be tracked.
   * @param token token of application, root element
   *
   * @internal
   */
  registerApplication(token) {
    this.registry.registerApplication(token, this);
  }
  /**
   * Unregisters an application.
   * @param token token of application, root element
   *
   * @internal
   */
  unregisterApplication(token) {
    this.registry.unregisterApplication(token);
  }
  /**
   * Find providers by name
   * @param using The root element to search from
   * @param provider The name of binding variable
   * @param exactMatch Whether using exactMatch
   */
  findProviders(using, provider, exactMatch) {
    return [];
  }
  static \u0275fac = function Testability_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Testability)(\u0275\u0275inject(NgZone), \u0275\u0275inject(TestabilityRegistry), \u0275\u0275inject(TESTABILITY_GETTER));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _Testability,
    factory: _Testability.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Testability, [{
    type: Injectable
  }], () => [{
    type: NgZone
  }, {
    type: TestabilityRegistry
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [TESTABILITY_GETTER]
    }]
  }], null);
})();
var TestabilityRegistry = class _TestabilityRegistry {
  /** @internal */
  _applications = /* @__PURE__ */ new Map();
  /**
   * Registers an application with a testability hook so that it can be tracked
   * @param token token of application, root element
   * @param testability Testability hook
   */
  registerApplication(token, testability) {
    this._applications.set(token, testability);
  }
  /**
   * Unregisters an application.
   * @param token token of application, root element
   */
  unregisterApplication(token) {
    this._applications.delete(token);
  }
  /**
   * Unregisters all applications
   */
  unregisterAllApplications() {
    this._applications.clear();
  }
  /**
   * Get a testability hook associated with the application
   * @param elem root element
   */
  getTestability(elem) {
    return this._applications.get(elem) || null;
  }
  /**
   * Get all registered testabilities
   */
  getAllTestabilities() {
    return Array.from(this._applications.values());
  }
  /**
   * Get all registered applications(root elements)
   */
  getAllRootElements() {
    return Array.from(this._applications.keys());
  }
  /**
   * Find testability of a node in the Tree
   * @param elem node
   * @param findInAncestors whether finding testability in ancestors if testability was not found in
   * current node
   */
  findTestabilityInTree(elem, findInAncestors = true) {
    return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;
  }
  static \u0275fac = function TestabilityRegistry_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _TestabilityRegistry)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _TestabilityRegistry,
    factory: _TestabilityRegistry.\u0275fac,
    providedIn: "platform"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{
    type: Injectable,
    args: [{
      providedIn: "platform"
    }]
  }], null, null);
})();
function setTestabilityGetter(getter) {
  _testabilityGetter = getter;
}
var _testabilityGetter;
var EffectScheduler = class _EffectScheduler {
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _EffectScheduler,
      providedIn: "root",
      factory: () => new ZoneAwareEffectScheduler()
    })
  );
};
var ZoneAwareEffectScheduler = class {
  queuedEffectCount = 0;
  queues = /* @__PURE__ */ new Map();
  schedule(handle) {
    this.enqueue(handle);
  }
  remove(handle) {
    const zone = handle.zone;
    const queue = this.queues.get(zone);
    if (!queue.has(handle)) {
      return;
    }
    queue.delete(handle);
    this.queuedEffectCount--;
  }
  enqueue(handle) {
    const zone = handle.zone;
    if (!this.queues.has(zone)) {
      this.queues.set(zone, /* @__PURE__ */ new Set());
    }
    const queue = this.queues.get(zone);
    if (queue.has(handle)) {
      return;
    }
    this.queuedEffectCount++;
    queue.add(handle);
  }
  /**
   * Run all scheduled effects.
   *
   * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no
   * ordering guarantee between effects scheduled in different zones.
   */
  flush() {
    while (this.queuedEffectCount > 0) {
      for (const [zone, queue] of this.queues) {
        if (zone === null) {
          this.flushQueue(queue);
        } else {
          zone.run(() => this.flushQueue(queue));
        }
      }
    }
  }
  flushQueue(queue) {
    for (const handle of queue) {
      queue.delete(handle);
      this.queuedEffectCount--;
      handle.run();
    }
  }
};
function isPromise2(obj) {
  return !!obj && typeof obj.then === "function";
}
function isSubscribable(obj) {
  return !!obj && typeof obj.subscribe === "function";
}
var APP_INITIALIZER = new InjectionToken(ngDevMode ? "Application Initializer" : "");
function provideAppInitializer(initializerFn) {
  return makeEnvironmentProviders([{
    provide: APP_INITIALIZER,
    multi: true,
    useValue: initializerFn
  }]);
}
var ApplicationInitStatus = class _ApplicationInitStatus {
  // Using non null assertion, these fields are defined below
  // within the `new Promise` callback (synchronously).
  resolve;
  reject;
  initialized = false;
  done = false;
  donePromise = new Promise((res, rej) => {
    this.resolve = res;
    this.reject = rej;
  });
  appInits = inject(APP_INITIALIZER, {
    optional: true
  }) ?? [];
  injector = inject(Injector);
  constructor() {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !Array.isArray(this.appInits)) {
      throw new RuntimeError(-209, `Unexpected type of the \`APP_INITIALIZER\` token value (expected an array, but got ${typeof this.appInits}). Please check that the \`APP_INITIALIZER\` token is configured as a \`multi: true\` provider.`);
    }
  }
  /** @internal */
  runInitializers() {
    if (this.initialized) {
      return;
    }
    const asyncInitPromises = [];
    for (const appInits of this.appInits) {
      const initResult = runInInjectionContext(this.injector, appInits);
      if (isPromise2(initResult)) {
        asyncInitPromises.push(initResult);
      } else if (isSubscribable(initResult)) {
        const observableAsPromise = new Promise((resolve, reject) => {
          initResult.subscribe({
            complete: resolve,
            error: reject
          });
        });
        asyncInitPromises.push(observableAsPromise);
      }
    }
    const complete = () => {
      this.done = true;
      this.resolve();
    };
    Promise.all(asyncInitPromises).then(() => {
      complete();
    }).catch((e2) => {
      this.reject(e2);
    });
    if (asyncInitPromises.length === 0) {
      complete();
    }
    this.initialized = true;
  }
  static \u0275fac = function ApplicationInitStatus_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ApplicationInitStatus)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _ApplicationInitStatus,
    factory: _ApplicationInitStatus.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
var APP_BOOTSTRAP_LISTENER = new InjectionToken(ngDevMode ? "appBootstrapListener" : "");
function publishDefaultGlobalUtils() {
  ngDevMode && publishDefaultGlobalUtils$1();
}
function publishSignalConfiguration() {
  setThrowInvalidWriteToSignalError(() => {
    throw new RuntimeError(600, ngDevMode && "Writing to signals is not allowed in a `computed`.");
  });
}
function isBoundToModule(cf) {
  return cf.isBoundToModule;
}
var MAXIMUM_REFRESH_RERUNS = 10;
function optionsReducer(dst, objs) {
  if (Array.isArray(objs)) {
    return objs.reduce(optionsReducer, dst);
  }
  return __spreadValues(__spreadValues({}, dst), objs);
}
var ApplicationRef = class _ApplicationRef {
  /** @internal */
  _runningTick = false;
  _destroyed = false;
  _destroyListeners = [];
  /** @internal */
  _views = [];
  internalErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);
  afterRenderManager = inject(AfterRenderManager);
  zonelessEnabled = inject(ZONELESS_ENABLED);
  rootEffectScheduler = inject(EffectScheduler);
  /**
   * Current dirty state of the application across a number of dimensions (views, afterRender hooks,
   * etc).
   *
   * A flag set here means that `tick()` will attempt to resolve the dirtiness when executed.
   *
   * @internal
   */
  dirtyFlags = 0;
  /**
   * Most recent snapshot from the `TracingService`, if any.
   *
   * This snapshot attempts to capture the context when `tick()` was first
   * scheduled. It then runs wrapped in this context.
   *
   * @internal
   */
  tracingSnapshot = null;
  // Needed for ComponentFixture temporarily during migration of autoDetect behavior
  // Eventually the hostView of the fixture should just attach to ApplicationRef.
  externalTestViews = /* @__PURE__ */ new Set();
  /** @internal */
  afterTick = new Subject();
  /** @internal */
  get allViews() {
    return [...this.externalTestViews.keys(), ...this._views];
  }
  /**
   * Indicates whether this instance was destroyed.
   */
  get destroyed() {
    return this._destroyed;
  }
  /**
   * Get a list of component types registered to this application.
   * This list is populated even before the component is created.
   */
  componentTypes = [];
  /**
   * Get a list of components registered to this application.
   */
  components = [];
  /**
   * Returns an Observable that indicates when the application is stable or unstable.
   */
  isStable = inject(PendingTasksInternal).hasPendingTasks.pipe(map((pending) => !pending));
  constructor() {
    inject(TracingService, {
      optional: true
    });
  }
  /**
   * @returns A promise that resolves when the application becomes stable
   */
  whenStable() {
    let subscription;
    return new Promise((resolve) => {
      subscription = this.isStable.subscribe({
        next: (stable) => {
          if (stable) {
            resolve();
          }
        }
      });
    }).finally(() => {
      subscription.unsubscribe();
    });
  }
  _injector = inject(EnvironmentInjector);
  _rendererFactory = null;
  /**
   * The `EnvironmentInjector` used to create this application.
   */
  get injector() {
    return this._injector;
  }
  /**
   * Bootstrap a component onto the element identified by its selector or, optionally, to a
   * specified element.
   *
   * @usageNotes
   * ### Bootstrap process
   *
   * When bootstrapping a component, Angular mounts it onto a target DOM element
   * and kicks off automatic change detection. The target DOM element can be
   * provided using the `rootSelectorOrNode` argument.
   *
   * If the target DOM element is not provided, Angular tries to find one on a page
   * using the `selector` of the component that is being bootstrapped
   * (first matched element is used).
   *
   * ### Example
   *
   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,
   * but it requires us to know the component while writing the application code.
   *
   * Imagine a situation where we have to wait for an API call to decide about the component to
   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to
   * dynamically bootstrap a component.
   *
   * {@example core/ts/platform/platform.ts region='componentSelector'}
   *
   * Optionally, a component can be mounted onto a DOM element that does not match the
   * selector of the bootstrapped component.
   *
   * In the following example, we are providing a CSS selector to match the target element.
   *
   * {@example core/ts/platform/platform.ts region='cssSelector'}
   *
   * While in this example, we are providing reference to a DOM node.
   *
   * {@example core/ts/platform/platform.ts region='domNode'}
   */
  bootstrap(componentOrFactory, rootSelectorOrNode) {
    return this.bootstrapImpl(componentOrFactory, rootSelectorOrNode);
  }
  bootstrapImpl(componentOrFactory, rootSelectorOrNode, injector = Injector.NULL) {
    profiler(
      10
      /* ProfilerEvent.BootstrapComponentStart */
    );
    (typeof ngDevMode === "undefined" || ngDevMode) && warnIfDestroyed(this._destroyed);
    const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;
    const initStatus = this._injector.get(ApplicationInitStatus);
    if (!initStatus.done) {
      let errorMessage = "";
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        const standalone = !isComponentFactory && isStandalone(componentOrFactory);
        errorMessage = "Cannot bootstrap as there are still asynchronous initializers running." + (standalone ? "" : " Bootstrap components in the `ngDoBootstrap` method of the root module.");
      }
      throw new RuntimeError(405, errorMessage);
    }
    let componentFactory;
    if (isComponentFactory) {
      componentFactory = componentOrFactory;
    } else {
      const resolver = this._injector.get(ComponentFactoryResolver$1);
      componentFactory = resolver.resolveComponentFactory(componentOrFactory);
    }
    this.componentTypes.push(componentFactory.componentType);
    const ngModule = isBoundToModule(componentFactory) ? void 0 : this._injector.get(NgModuleRef$1);
    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;
    const compRef = componentFactory.create(injector, [], selectorOrNode, ngModule);
    const nativeElement = compRef.location.nativeElement;
    const testability = compRef.injector.get(TESTABILITY, null);
    testability?.registerApplication(nativeElement);
    compRef.onDestroy(() => {
      this.detachView(compRef.hostView);
      remove(this.components, compRef);
      testability?.unregisterApplication(nativeElement);
    });
    this._loadComponent(compRef);
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const _console = this._injector.get(Console);
      _console.log(`Angular is running in development mode.`);
    }
    profiler(11, compRef);
    return compRef;
  }
  /**
   * Invoke this method to explicitly process change detection and its side-effects.
   *
   * In development mode, `tick()` also performs a second change detection cycle to ensure that no
   * further changes are detected. If additional changes are picked up during this second cycle,
   * bindings in the app have side-effects that cannot be resolved in a single change detection
   * pass.
   * In this case, Angular throws an error, since an Angular application can only have one change
   * detection pass during which all change detection must complete.
   */
  tick() {
    if (!this.zonelessEnabled) {
      this.dirtyFlags |= 1;
    }
    this._tick();
  }
  /** @internal */
  _tick() {
    profiler(
      12
      /* ProfilerEvent.ChangeDetectionStart */
    );
    if (this.tracingSnapshot !== null) {
      this.tracingSnapshot.run(TracingAction.CHANGE_DETECTION, this.tickImpl);
    } else {
      this.tickImpl();
    }
  }
  tickImpl = () => {
    (typeof ngDevMode === "undefined" || ngDevMode) && warnIfDestroyed(this._destroyed);
    if (this._runningTick) {
      throw new RuntimeError(101, ngDevMode && "ApplicationRef.tick is called recursively");
    }
    const prevConsumer = setActiveConsumer(null);
    try {
      this._runningTick = true;
      this.synchronize();
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        for (let view of this.allViews) {
          view.checkNoChanges();
        }
      }
    } catch (e2) {
      this.internalErrorHandler(e2);
    } finally {
      this._runningTick = false;
      this.tracingSnapshot?.dispose();
      this.tracingSnapshot = null;
      setActiveConsumer(prevConsumer);
      this.afterTick.next();
      profiler(
        13
        /* ProfilerEvent.ChangeDetectionEnd */
      );
    }
  };
  /**
   * Performs the core work of synchronizing the application state with the UI, resolving any
   * pending dirtiness (potentially in a loop).
   */
  synchronize() {
    if (this._rendererFactory === null && !this._injector.destroyed) {
      this._rendererFactory = this._injector.get(RendererFactory2, null, {
        optional: true
      });
    }
    let runs = 0;
    while (this.dirtyFlags !== 0 && runs++ < MAXIMUM_REFRESH_RERUNS) {
      profiler(
        14
        /* ProfilerEvent.ChangeDetectionSyncStart */
      );
      this.synchronizeOnce();
      profiler(
        15
        /* ProfilerEvent.ChangeDetectionSyncEnd */
      );
    }
    if ((typeof ngDevMode === "undefined" || ngDevMode) && runs >= MAXIMUM_REFRESH_RERUNS) {
      throw new RuntimeError(103, ngDevMode && "Infinite change detection while refreshing application views. Ensure views are not calling `markForCheck` on every template execution or that afterRender hooks always mark views for check.");
    }
  }
  /**
   * Perform a single synchronization pass.
   */
  synchronizeOnce() {
    if (this.dirtyFlags & 16) {
      this.dirtyFlags &= -17;
      this.rootEffectScheduler.flush();
    }
    if (this.dirtyFlags & 7) {
      const useGlobalCheck = Boolean(
        this.dirtyFlags & 1
        /* ApplicationRefDirtyFlags.ViewTreeGlobal */
      );
      this.dirtyFlags &= -8;
      this.dirtyFlags |= 8;
      for (let {
        _lView,
        notifyErrorHandler
      } of this.allViews) {
        detectChangesInViewIfRequired(_lView, notifyErrorHandler, useGlobalCheck, this.zonelessEnabled);
      }
      this.dirtyFlags &= -5;
      this.syncDirtyFlagsWithViews();
      if (this.dirtyFlags & (7 | 16)) {
        return;
      }
    } else {
      this._rendererFactory?.begin?.();
      this._rendererFactory?.end?.();
    }
    if (this.dirtyFlags & 8) {
      this.dirtyFlags &= -9;
      this.afterRenderManager.execute();
    }
    this.syncDirtyFlagsWithViews();
  }
  /**
   * Checks `allViews` for views which require refresh/traversal, and updates `dirtyFlags`
   * accordingly, with two potential behaviors:
   *
   * 1. If any of our views require updating, then this adds the `ViewTreeTraversal` dirty flag.
   *    This _should_ be a no-op, since the scheduler should've added the flag at the same time the
   *    view was marked as needing updating.
   *
   *    TODO(alxhub): figure out if this behavior is still needed for edge cases.
   *
   * 2. If none of our views require updating, then clear the view-related `dirtyFlag`s. This
   *    happens when the scheduler is notified of a view becoming dirty, but the view itself isn't
   *    reachable through traversal from our roots (e.g. it's detached from the CD tree).
   */
  syncDirtyFlagsWithViews() {
    if (this.allViews.some(({
      _lView
    }) => requiresRefreshOrTraversal(_lView))) {
      this.dirtyFlags |= 2;
      return;
    } else {
      this.dirtyFlags &= -8;
    }
  }
  /**
   * Attaches a view so that it will be dirty checked.
   * The view will be automatically detached when it is destroyed.
   * This will throw if the view is already attached to a ViewContainer.
   */
  attachView(viewRef) {
    (typeof ngDevMode === "undefined" || ngDevMode) && warnIfDestroyed(this._destroyed);
    const view = viewRef;
    this._views.push(view);
    view.attachToAppRef(this);
  }
  /**
   * Detaches a view from dirty checking again.
   */
  detachView(viewRef) {
    (typeof ngDevMode === "undefined" || ngDevMode) && warnIfDestroyed(this._destroyed);
    const view = viewRef;
    remove(this._views, view);
    view.detachFromAppRef();
  }
  _loadComponent(componentRef) {
    this.attachView(componentRef.hostView);
    this.tick();
    this.components.push(componentRef);
    const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);
    if (ngDevMode && !Array.isArray(listeners)) {
      throw new RuntimeError(-209, `Unexpected type of the \`APP_BOOTSTRAP_LISTENER\` token value (expected an array, but got ${typeof listeners}). Please check that the \`APP_BOOTSTRAP_LISTENER\` token is configured as a \`multi: true\` provider.`);
    }
    listeners.forEach((listener) => listener(componentRef));
  }
  /** @internal */
  ngOnDestroy() {
    if (this._destroyed) return;
    try {
      this._destroyListeners.forEach((listener) => listener());
      this._views.slice().forEach((view) => view.destroy());
    } finally {
      this._destroyed = true;
      this._views = [];
      this._destroyListeners = [];
    }
  }
  /**
   * Registers a listener to be called when an instance is destroyed.
   *
   * @param callback A callback function to add as a listener.
   * @returns A function which unregisters a listener.
   */
  onDestroy(callback) {
    (typeof ngDevMode === "undefined" || ngDevMode) && warnIfDestroyed(this._destroyed);
    this._destroyListeners.push(callback);
    return () => remove(this._destroyListeners, callback);
  }
  /**
   * Destroys an Angular application represented by this `ApplicationRef`. Calling this function
   * will destroy the associated environment injectors as well as all the bootstrapped components
   * with their views.
   */
  destroy() {
    if (this._destroyed) {
      throw new RuntimeError(406, ngDevMode && "This instance of the `ApplicationRef` has already been destroyed.");
    }
    const injector = this._injector;
    if (injector.destroy && !injector.destroyed) {
      injector.destroy();
    }
  }
  /**
   * Returns the number of attached views.
   */
  get viewCount() {
    return this._views.length;
  }
  static \u0275fac = function ApplicationRef_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ApplicationRef)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _ApplicationRef,
    factory: _ApplicationRef.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationRef, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function warnIfDestroyed(destroyed) {
  if (destroyed) {
    console.warn(formatRuntimeError(406, "This instance of the `ApplicationRef` has already been destroyed."));
  }
}
function remove(list, el) {
  const index = list.indexOf(el);
  if (index > -1) {
    list.splice(index, 1);
  }
}
function detectChangesInViewIfRequired(lView, notifyErrorHandler, isFirstPass, zonelessEnabled) {
  if (!isFirstPass && !requiresRefreshOrTraversal(lView)) {
    return;
  }
  const mode = isFirstPass && !zonelessEnabled ? (
    // The first pass is always in Global mode, which includes `CheckAlways` views.
    0
  ) : (
    // Only refresh views with the `RefreshView` flag or views is a changed signal
    1
  );
  detectChangesInternal(lView, notifyErrorHandler, mode);
}
function scheduleDelayedTrigger(scheduleFn) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  renderPlaceholder(lView, tNode);
  if (!shouldTriggerDeferBlock(0, lView)) return;
  const injector = lView[INJECTOR];
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const cleanupFn = scheduleFn(() => triggerDeferBlock(0, lView, tNode), injector);
  storeTriggerCleanupFn(0, lDetails, cleanupFn);
}
function scheduleDelayedPrefetching(scheduleFn, trigger) {
  if (false) return;
  const lView = getLView();
  const injector = lView[INJECTOR];
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    const lDetails = getLDeferBlockDetails(lView, tNode);
    const prefetch = () => triggerPrefetching(tDetails, lView, tNode);
    const cleanupFn = scheduleFn(prefetch, injector);
    storeTriggerCleanupFn(1, lDetails, cleanupFn);
  }
}
function scheduleDelayedHydrating(scheduleFn, lView, tNode) {
  if (false) return;
  const injector = lView[INJECTOR];
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const ssrUniqueId = lDetails[SSR_UNIQUE_ID];
  ngDevMode && assertSsrIdDefined(ssrUniqueId);
  const cleanupFn = scheduleFn(() => triggerHydrationFromBlockName(injector, ssrUniqueId), injector);
  storeTriggerCleanupFn(2, lDetails, cleanupFn);
}
function triggerPrefetching(tDetails, lView, tNode) {
  triggerResourceLoading(tDetails, lView, tNode);
}
function triggerResourceLoading(tDetails, lView, tNode) {
  const injector = lView[INJECTOR];
  const tView = lView[TVIEW];
  if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {
    return tDetails.loadingPromise ?? Promise.resolve();
  }
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);
  tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;
  invokeTriggerCleanupFns(1, lDetails);
  let dependenciesFn = tDetails.dependencyResolverFn;
  if (ngDevMode) {
    const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, {
      optional: true
    });
    if (deferDependencyInterceptor) {
      dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);
    }
  }
  const pendingTasks = injector.get(PendingTasksInternal);
  const taskId = pendingTasks.add();
  if (!dependenciesFn) {
    tDetails.loadingPromise = Promise.resolve().then(() => {
      tDetails.loadingPromise = null;
      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;
      pendingTasks.remove(taskId);
    });
    return tDetails.loadingPromise;
  }
  tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then((results) => {
    let failed = false;
    const directiveDefs = [];
    const pipeDefs = [];
    for (const result of results) {
      if (result.status === "fulfilled") {
        const dependency = result.value;
        const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);
        if (directiveDef) {
          directiveDefs.push(directiveDef);
        } else {
          const pipeDef = getPipeDef$1(dependency);
          if (pipeDef) {
            pipeDefs.push(pipeDef);
          }
        }
      } else {
        failed = true;
        break;
      }
    }
    tDetails.loadingPromise = null;
    pendingTasks.remove(taskId);
    if (failed) {
      tDetails.loadingState = DeferDependenciesLoadingState.FAILED;
      if (tDetails.errorTmplIndex === null) {
        const templateLocation = ngDevMode ? getTemplateLocationDetails(lView) : "";
        const error = new RuntimeError(-750, ngDevMode && `Loading dependencies for \`@defer\` block failed, but no \`@error\` block was configured${templateLocation}. Consider using the \`@error\` block to render an error state.`);
        handleError$1(lView, error);
      }
    } else {
      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;
      const primaryBlockTView = primaryBlockTNode.tView;
      if (directiveDefs.length > 0) {
        primaryBlockTView.directiveRegistry = addDepsToRegistry(primaryBlockTView.directiveRegistry, directiveDefs);
        const directiveTypes = directiveDefs.map((def) => def.type);
        const providers = internalImportProvidersFrom(false, ...directiveTypes);
        tDetails.providers = providers;
      }
      if (pipeDefs.length > 0) {
        primaryBlockTView.pipeRegistry = addDepsToRegistry(primaryBlockTView.pipeRegistry, pipeDefs);
      }
    }
  });
  return tDetails.loadingPromise;
}
function shouldTriggerDeferBlock(triggerType, lView) {
  if (triggerType === 0 && true && false) {
    return false;
  }
  const injector = lView[INJECTOR];
  const config2 = injector.get(DEFER_BLOCK_CONFIG, null, {
    optional: true
  });
  if (config2?.behavior === DeferBlockBehavior.Manual) {
    return false;
  }
  return true;
}
function triggerDeferBlock(triggerType, lView, tNode) {
  const tView = lView[TVIEW];
  const lContainer = lView[tNode.index];
  ngDevMode && assertLContainer(lContainer);
  if (!shouldTriggerDeferBlock(triggerType, lView)) return;
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const tDetails = getTDeferBlockDetails(tView, tNode);
  invokeAllTriggerCleanupFns(lDetails);
  switch (tDetails.loadingState) {
    case DeferDependenciesLoadingState.NOT_STARTED:
      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);
      triggerResourceLoading(tDetails, lView, tNode);
      if (tDetails.loadingState === DeferDependenciesLoadingState.IN_PROGRESS) {
        renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);
      }
      break;
    case DeferDependenciesLoadingState.IN_PROGRESS:
      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);
      renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);
      break;
    case DeferDependenciesLoadingState.COMPLETE:
      ngDevMode && assertDeferredDependenciesLoaded(tDetails);
      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);
      break;
    case DeferDependenciesLoadingState.FAILED:
      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);
      break;
    default:
      if (ngDevMode) {
        throwError2("Unknown defer block state");
      }
  }
}
function triggerHydrationFromBlockName(injector, blockName, replayQueuedEventsFn) {
  return __async(this, null, function* () {
    const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
    const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;
    if (blocksBeingHydrated.has(blockName)) {
      return;
    }
    const {
      parentBlockPromise,
      hydrationQueue
    } = getParentBlockHydrationQueue(blockName, injector);
    if (hydrationQueue.length === 0) return;
    if (parentBlockPromise !== null) {
      hydrationQueue.shift();
    }
    populateHydratingStateForQueue(dehydratedBlockRegistry, hydrationQueue);
    if (parentBlockPromise !== null) {
      yield parentBlockPromise;
    }
    const topmostParentBlock = hydrationQueue[0];
    if (dehydratedBlockRegistry.has(topmostParentBlock)) {
      yield triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn);
    } else {
      dehydratedBlockRegistry.awaitParentBlock(topmostParentBlock, () => __async(this, null, function* () {
        return yield triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn);
      }));
    }
  });
}
function triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn) {
  return __async(this, null, function* () {
    const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
    const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;
    const pendingTasks = injector.get(PendingTasksInternal);
    const taskId = pendingTasks.add();
    for (let blockQueueIdx = 0; blockQueueIdx < hydrationQueue.length; blockQueueIdx++) {
      const dehydratedBlockId = hydrationQueue[blockQueueIdx];
      const dehydratedDeferBlock = dehydratedBlockRegistry.get(dehydratedBlockId);
      if (dehydratedDeferBlock != null) {
        yield triggerResourceLoadingForHydration(dehydratedDeferBlock);
        yield nextRender(injector);
        if (deferBlockHasErrored(dehydratedDeferBlock)) {
          removeDehydratedViewList(dehydratedDeferBlock);
          cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);
          break;
        }
        blocksBeingHydrated.get(dehydratedBlockId).resolve();
      } else {
        cleanupParentContainer(blockQueueIdx, hydrationQueue, dehydratedBlockRegistry);
        cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);
        break;
      }
    }
    const lastBlockName = hydrationQueue[hydrationQueue.length - 1];
    yield blocksBeingHydrated.get(lastBlockName)?.promise;
    pendingTasks.remove(taskId);
    if (replayQueuedEventsFn) {
      replayQueuedEventsFn(hydrationQueue);
    }
    cleanupHydratedDeferBlocks(dehydratedBlockRegistry.get(lastBlockName), hydrationQueue, dehydratedBlockRegistry, injector.get(ApplicationRef));
  });
}
function deferBlockHasErrored(deferBlock) {
  return getLDeferBlockDetails(deferBlock.lView, deferBlock.tNode)[DEFER_BLOCK_STATE] === DeferBlockState.Error;
}
function cleanupParentContainer(currentBlockIdx, hydrationQueue, dehydratedBlockRegistry) {
  const parentDeferBlockIdx = currentBlockIdx - 1;
  const parentDeferBlock = parentDeferBlockIdx > -1 ? dehydratedBlockRegistry.get(hydrationQueue[parentDeferBlockIdx]) : null;
  if (parentDeferBlock) {
    cleanupLContainer(parentDeferBlock.lContainer);
  }
}
function cleanupRemainingHydrationQueue(hydrationQueue, dehydratedBlockRegistry) {
  const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;
  for (const dehydratedBlockId in hydrationQueue) {
    blocksBeingHydrated.get(dehydratedBlockId)?.reject();
  }
  dehydratedBlockRegistry.cleanup(hydrationQueue);
}
function populateHydratingStateForQueue(registry, queue) {
  for (let blockId of queue) {
    registry.hydrating.set(blockId, Promise.withResolvers());
  }
}
function nextRender(injector) {
  return new Promise((resolveFn) => afterNextRender(resolveFn, {
    injector
  }));
}
function triggerResourceLoadingForHydration(dehydratedBlock) {
  return __async(this, null, function* () {
    const {
      tNode,
      lView
    } = dehydratedBlock;
    const lDetails = getLDeferBlockDetails(lView, tNode);
    return new Promise((resolve) => {
      onDeferBlockCompletion(lDetails, resolve);
      triggerDeferBlock(2, lView, tNode);
    });
  });
}
function onDeferBlockCompletion(lDetails, callback) {
  if (!Array.isArray(lDetails[ON_COMPLETE_FNS])) {
    lDetails[ON_COMPLETE_FNS] = [];
  }
  lDetails[ON_COMPLETE_FNS].push(callback);
}
function shouldAttachTrigger(triggerType, lView, tNode) {
  if (triggerType === 0) {
    return shouldAttachRegularTrigger(lView, tNode);
  } else if (triggerType === 2) {
    return !shouldAttachRegularTrigger(lView, tNode);
  }
  return true;
}
function shouldAttachRegularTrigger(lView, tNode) {
  const injector = lView[INJECTOR];
  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);
  const incrementalHydrationEnabled = isIncrementalHydrationEnabled(injector);
  const hasHydrateTriggers = tDetails.flags !== null && (tDetails.flags & 1) === 1;
  if (false) {
    return !incrementalHydrationEnabled || !hasHydrateTriggers;
  }
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const wasServerSideRendered = lDetails[SSR_UNIQUE_ID] !== null;
  if (hasHydrateTriggers && wasServerSideRendered && incrementalHydrationEnabled) {
    return false;
  }
  return true;
}
function getHydrateTriggers(tView, tNode) {
  const tDetails = getTDeferBlockDetails(tView, tNode);
  return tDetails.hydrateTriggers ??= /* @__PURE__ */ new Map();
}
function \u0275\u0275defer(index, primaryTmplIndex, dependencyResolverFn, loadingTmplIndex, placeholderTmplIndex, errorTmplIndex, loadingConfigIndex, placeholderConfigIndex, enableTimerScheduling, flags) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = declareTemplate(lView, tView, index, null, 0, 0);
  const injector = lView[INJECTOR];
  if (tView.firstCreatePass) {
    performanceMarkFeature("NgDefer");
    if (ngDevMode && true && false) {
      logHmrWarning(injector);
    }
    const tDetails = {
      primaryTmplIndex,
      loadingTmplIndex: loadingTmplIndex ?? null,
      placeholderTmplIndex: placeholderTmplIndex ?? null,
      errorTmplIndex: errorTmplIndex ?? null,
      placeholderBlockConfig: null,
      loadingBlockConfig: null,
      dependencyResolverFn: dependencyResolverFn ?? null,
      loadingState: DeferDependenciesLoadingState.NOT_STARTED,
      loadingPromise: null,
      providers: null,
      hydrateTriggers: null,
      debug: null,
      flags: flags ?? 0
      /* TDeferDetailsFlags.Default */
    };
    enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);
    setTDeferBlockDetails(tView, adjustedIndex, tDetails);
  }
  const lContainer = lView[adjustedIndex];
  populateDehydratedViewsInLContainer(lContainer, tNode, lView);
  let ssrBlockState = null;
  let ssrUniqueId = null;
  if (lContainer[DEHYDRATED_VIEWS]?.length > 0) {
    const info = lContainer[DEHYDRATED_VIEWS][0].data;
    ssrUniqueId = info[DEFER_BLOCK_ID] ?? null;
    ssrBlockState = info[DEFER_BLOCK_STATE$1];
  }
  const lDetails = [
    null,
    // NEXT_DEFER_BLOCK_STATE
    DeferBlockInternalState.Initial,
    // DEFER_BLOCK_STATE
    null,
    // STATE_IS_FROZEN_UNTIL
    null,
    // LOADING_AFTER_CLEANUP_FN
    null,
    // TRIGGER_CLEANUP_FNS
    null,
    // PREFETCH_TRIGGER_CLEANUP_FNS
    ssrUniqueId,
    // SSR_UNIQUE_ID
    ssrBlockState,
    // SSR_BLOCK_STATE
    null,
    // ON_COMPLETE_FNS
    null
    // HYDRATE_TRIGGER_CLEANUP_FNS
  ];
  setLDeferBlockDetails(lView, adjustedIndex, lDetails);
  let registry = null;
  if (ssrUniqueId !== null) {
    ngDevMode && assertIncrementalHydrationIsConfigured(injector);
    registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
    registry.add(ssrUniqueId, {
      lView,
      tNode,
      lContainer
    });
  }
  const onLViewDestroy = () => {
    invokeAllTriggerCleanupFns(lDetails);
    if (ssrUniqueId !== null) {
      registry?.cleanup([ssrUniqueId]);
    }
  };
  storeTriggerCleanupFn(0, lDetails, () => removeLViewOnDestroy(lView, onLViewDestroy));
  storeLViewOnDestroy(lView, onLViewDestroy);
}
function \u0275\u0275deferWhen(rawValue) {
  const lView = getLView();
  const tNode = getSelectedTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "when <expression>");
  }
  if (!shouldAttachTrigger(0, lView, tNode)) return;
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, rawValue)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const value = Boolean(rawValue);
      const lDetails = getLDeferBlockDetails(lView, tNode);
      const renderedState = lDetails[DEFER_BLOCK_STATE];
      if (value === false && renderedState === DeferBlockInternalState.Initial) {
        renderPlaceholder(lView, tNode);
      } else if (value === true && (renderedState === DeferBlockInternalState.Initial || renderedState === DeferBlockState.Placeholder)) {
        triggerDeferBlock(0, lView, tNode);
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function \u0275\u0275deferPrefetchWhen(rawValue) {
  const lView = getLView();
  const tNode = getSelectedTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "prefetch when <expression>");
  }
  if (!shouldAttachTrigger(1, lView, tNode)) return;
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, rawValue)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const value = Boolean(rawValue);
      const tView = lView[TVIEW];
      const tNode2 = getSelectedTNode();
      const tDetails = getTDeferBlockDetails(tView, tNode2);
      if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
        triggerPrefetching(tDetails, lView, tNode2);
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function \u0275\u0275deferHydrateWhen(rawValue) {
  const lView = getLView();
  const tNode = getSelectedTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate when <expression>");
  }
  if (!shouldAttachTrigger(2, lView, tNode)) return;
  const bindingIndex = nextBindingIndex();
  const tView = getTView();
  const hydrateTriggers = getHydrateTriggers(tView, tNode);
  hydrateTriggers.set(6, null);
  if (bindingUpdated(lView, bindingIndex, rawValue)) {
    if (false) {
      triggerDeferBlock(2, lView, tNode);
    } else {
      const injector = lView[INJECTOR];
      const prevConsumer = setActiveConsumer(null);
      try {
        const value = Boolean(rawValue);
        if (value === true) {
          const lDetails = getLDeferBlockDetails(lView, tNode);
          const ssrUniqueId = lDetails[SSR_UNIQUE_ID];
          ngDevMode && assertSsrIdDefined(ssrUniqueId);
          triggerHydrationFromBlockName(injector, ssrUniqueId);
        }
      } finally {
        setActiveConsumer(prevConsumer);
      }
    }
  }
}
function \u0275\u0275deferHydrateNever() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate never");
  }
  if (!shouldAttachTrigger(2, lView, tNode)) return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(7, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  }
}
function \u0275\u0275deferOnIdle() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "on idle");
  }
  if (!shouldAttachTrigger(0, lView, tNode)) return;
  scheduleDelayedTrigger(onIdle);
}
function \u0275\u0275deferPrefetchOnIdle() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "prefetch on idle");
  }
  if (!shouldAttachTrigger(1, lView, tNode)) return;
  scheduleDelayedPrefetching(onIdle);
}
function \u0275\u0275deferHydrateOnIdle() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate on idle");
  }
  if (!shouldAttachTrigger(2, lView, tNode)) return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(0, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  } else {
    scheduleDelayedHydrating(onIdle, lView, tNode);
  }
}
function \u0275\u0275deferOnImmediate() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "on immediate");
  }
  if (!shouldAttachTrigger(0, lView, tNode)) return;
  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);
  if (tDetails.loadingTmplIndex === null) {
    renderPlaceholder(lView, tNode);
  }
  triggerDeferBlock(0, lView, tNode);
}
function \u0275\u0275deferPrefetchOnImmediate() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "prefetch on immediate");
  }
  if (!shouldAttachTrigger(1, lView, tNode)) return;
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    triggerResourceLoading(tDetails, lView, tNode);
  }
}
function \u0275\u0275deferHydrateOnImmediate() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate on immediate");
  }
  if (!shouldAttachTrigger(2, lView, tNode)) return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(1, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  } else {
    const injector = lView[INJECTOR];
    const lDetails = getLDeferBlockDetails(lView, tNode);
    const ssrUniqueId = lDetails[SSR_UNIQUE_ID];
    ngDevMode && assertSsrIdDefined(ssrUniqueId);
    triggerHydrationFromBlockName(injector, ssrUniqueId);
  }
}
function \u0275\u0275deferOnTimer(delay) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `on timer(${delay}ms)`);
  }
  if (!shouldAttachTrigger(0, lView, tNode)) return;
  scheduleDelayedTrigger(onTimer(delay));
}
function \u0275\u0275deferPrefetchOnTimer(delay) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on timer(${delay}ms)`);
  }
  if (!shouldAttachTrigger(1, lView, tNode)) return;
  scheduleDelayedPrefetching(onTimer(delay));
}
function \u0275\u0275deferHydrateOnTimer(delay) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `hydrate on timer(${delay}ms)`);
  }
  if (!shouldAttachTrigger(2, lView, tNode)) return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(5, {
    delay
  });
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  } else {
    scheduleDelayedHydrating(onTimer(delay), lView, tNode);
  }
}
function \u0275\u0275deferOnHover(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `on hover${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(0, lView, tNode)) return;
  renderPlaceholder(lView, tNode);
  if (true) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onHover,
      () => triggerDeferBlock(0, lView, tNode),
      0
      /* TriggerType.Regular */
    );
  }
}
function \u0275\u0275deferPrefetchOnHover(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on hover${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(1, lView, tNode)) return;
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onHover,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function \u0275\u0275deferHydrateOnHover() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate on hover");
  }
  if (!shouldAttachTrigger(2, lView, tNode)) return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(4, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  }
}
function \u0275\u0275deferOnInteraction(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `on interaction${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(0, lView, tNode)) return;
  renderPlaceholder(lView, tNode);
  if (true) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onInteraction,
      () => triggerDeferBlock(0, lView, tNode),
      0
      /* TriggerType.Regular */
    );
  }
}
function \u0275\u0275deferPrefetchOnInteraction(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on interaction${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(1, lView, tNode)) return;
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onInteraction,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function \u0275\u0275deferHydrateOnInteraction() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate on interaction");
  }
  if (!shouldAttachTrigger(2, lView, tNode)) return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(3, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  }
}
function \u0275\u0275deferOnViewport(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `on viewport${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(0, lView, tNode)) return;
  renderPlaceholder(lView, tNode);
  if (true) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onViewport,
      () => triggerDeferBlock(0, lView, tNode),
      0
      /* TriggerType.Regular */
    );
  }
}
function \u0275\u0275deferPrefetchOnViewport(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on viewport${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(1, lView, tNode)) return;
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onViewport,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function \u0275\u0275deferHydrateOnViewport() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate on viewport");
  }
  if (!shouldAttachTrigger(2, lView, tNode)) return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(2, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  }
}
function \u0275\u0275attribute(name, value, sanitizer, namespace) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, "attr." + name, bindingIndex);
  }
  return \u0275\u0275attribute;
}
function interpolationV(lView, values) {
  ngDevMode && assertLessThan(2, values.length, "should have at least 3 values");
  ngDevMode && assertEqual(values.length % 2, 1, "should have an odd number of values");
  let isBindingUpdated = false;
  let bindingIndex = getBindingIndex();
  for (let i = 1; i < values.length; i += 2) {
    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
  }
  setBindingIndex(bindingIndex);
  if (!isBindingUpdated) {
    return NO_CHANGE;
  }
  let content = values[0];
  for (let i = 1; i < values.length; i += 2) {
    content += renderStringify(values[i]) + values[i + 1];
  }
  return content;
}
function interpolation1(lView, prefix, v0, suffix) {
  const different = bindingUpdated(lView, nextBindingIndex(), v0);
  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
}
function interpolation2(lView, prefix, v0, i0, v1, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated2(lView, bindingIndex, v0, v1);
  incrementBindingIndex(2);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
}
function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
  incrementBindingIndex(3);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;
}
function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  incrementBindingIndex(4);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;
}
function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
  incrementBindingIndex(5);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;
}
function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
  incrementBindingIndex(6);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;
}
function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
  incrementBindingIndex(7);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;
}
function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
  incrementBindingIndex(8);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;
}
function \u0275\u0275attributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 1, prefix, suffix);
  }
  return \u0275\u0275attributeInterpolate1;
}
function \u0275\u0275attributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 2, prefix, i0, suffix);
  }
  return \u0275\u0275attributeInterpolate2;
}
function \u0275\u0275attributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
  }
  return \u0275\u0275attributeInterpolate3;
}
function \u0275\u0275attributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
  }
  return \u0275\u0275attributeInterpolate4;
}
function \u0275\u0275attributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
  }
  return \u0275\u0275attributeInterpolate5;
}
function \u0275\u0275attributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
  }
  return \u0275\u0275attributeInterpolate6;
}
function \u0275\u0275attributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
  }
  return \u0275\u0275attributeInterpolate7;
}
function \u0275\u0275attributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
  }
  return \u0275\u0275attributeInterpolate8;
}
function \u0275\u0275attributeInterpolateV(attrName, values, sanitizer, namespace) {
  const lView = getLView();
  const interpolated = interpolationV(lView, values);
  if (interpolated !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);
    if (ngDevMode) {
      const interpolationInBetween = [values[0]];
      for (let i = 2; i < values.length; i += 2) {
        interpolationInBetween.push(values[i]);
      }
      storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
    }
  }
  return \u0275\u0275attributeInterpolateV;
}
function toTStylingRange(prev, next) {
  ngDevMode && assertNumberInRange(
    prev,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  ngDevMode && assertNumberInRange(
    next,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return prev << 17 | next << 2;
}
function getTStylingRangePrev(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange >> 17 & 32767;
}
function getTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 2) == 2;
}
function setTStylingRangePrev(tStylingRange, previous) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  ngDevMode && assertNumberInRange(
    previous,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return tStylingRange & 131071 | previous << 17;
}
function setTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange | 2;
}
function getTStylingRangeNext(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 131068) >> 2;
}
function setTStylingRangeNext(tStylingRange, next) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  ngDevMode && assertNumberInRange(
    next,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return tStylingRange & -131069 | //
  next << 2;
}
function getTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 1) === 1;
}
function setTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange | 1;
}
function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {
  ngDevMode && assertFirstUpdatePass(getTView());
  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
  let tmplHead = getTStylingRangePrev(tBindings);
  let tmplTail = getTStylingRangeNext(tBindings);
  tData[index] = tStylingKeyWithStatic;
  let isKeyDuplicateOfStatic = false;
  let tStylingKey;
  if (Array.isArray(tStylingKeyWithStatic)) {
    const staticKeyValueArray = tStylingKeyWithStatic;
    tStylingKey = staticKeyValueArray[1];
    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
      isKeyDuplicateOfStatic = true;
    }
  } else {
    tStylingKey = tStylingKeyWithStatic;
  }
  if (isHostBinding) {
    const hasTemplateBindings = tmplTail !== 0;
    if (hasTemplateBindings) {
      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
      tData[index + 1] = toTStylingRange(previousNode, tmplHead);
      if (previousNode !== 0) {
        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);
      }
      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
    } else {
      tData[index + 1] = toTStylingRange(tmplHead, 0);
      if (tmplHead !== 0) {
        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
      }
      tmplHead = index;
    }
  } else {
    tData[index + 1] = toTStylingRange(tmplTail, 0);
    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, "Adding template bindings after hostBindings is not allowed.");
    if (tmplHead === 0) {
      tmplHead = index;
    } else {
      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
    }
    tmplTail = index;
  }
  if (isKeyDuplicateOfStatic) {
    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
  }
  markDuplicates(tData, tStylingKey, index, true);
  markDuplicates(tData, tStylingKey, index, false);
  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
  tBindings = toTStylingRange(tmplHead, tmplTail);
  if (isClassBinding) {
    tNode.classBindings = tBindings;
  } else {
    tNode.styleBindings = tBindings;
  }
}
function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;
  if (residual != null && typeof tStylingKey == "string" && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
  }
}
function markDuplicates(tData, tStylingKey, index, isPrevDir) {
  const tStylingAtIndex = tData[index + 1];
  const isMap = tStylingKey === null;
  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
  let foundDuplicate = false;
  while (cursor !== 0 && (foundDuplicate === false || isMap)) {
    ngDevMode && assertIndexInRange(tData, cursor);
    const tStylingValueAtCursor = tData[cursor];
    const tStyleRangeAtCursor = tData[cursor + 1];
    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
      foundDuplicate = true;
      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
    }
    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);
  }
  if (foundDuplicate) {
    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);
  }
}
function isStylingMatch(tStylingKeyCursor, tStylingKey) {
  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, "Expected that 'tStylingKey' has been unwrapped");
  if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
  // location so we must assume that we have a match.
  tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
  // contains a match.
  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey) {
    return true;
  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === "string") {
    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0;
  }
  return false;
}
var parserState = {
  textEnd: 0,
  key: 0,
  keyEnd: 0,
  value: 0,
  valueEnd: 0
};
function getLastParsedKey(text) {
  return text.substring(parserState.key, parserState.keyEnd);
}
function getLastParsedValue(text) {
  return text.substring(parserState.value, parserState.valueEnd);
}
function parseClassName(text) {
  resetParserState(text);
  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
function parseClassNameNext(text, index) {
  const end = parserState.textEnd;
  if (end === index) {
    return -1;
  }
  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);
  return consumeWhitespace(text, index, end);
}
function parseStyle(text) {
  resetParserState(text);
  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
function parseStyleNext(text, startIndex) {
  const end = parserState.textEnd;
  let index = parserState.key = consumeWhitespace(text, startIndex, end);
  if (end === index) {
    return -1;
  }
  index = parserState.keyEnd = consumeStyleKey(text, index, end);
  index = consumeSeparator(
    text,
    index,
    end,
    58
    /* CharCode.COLON */
  );
  index = parserState.value = consumeWhitespace(text, index, end);
  index = parserState.valueEnd = consumeStyleValue(text, index, end);
  return consumeSeparator(
    text,
    index,
    end,
    59
    /* CharCode.SEMI_COLON */
  );
}
function resetParserState(text) {
  parserState.key = 0;
  parserState.keyEnd = 0;
  parserState.value = 0;
  parserState.valueEnd = 0;
  parserState.textEnd = text.length;
}
function consumeWhitespace(text, startIndex, endIndex) {
  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32) {
    startIndex++;
  }
  return startIndex;
}
function consumeClassToken(text, startIndex, endIndex) {
  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32) {
    startIndex++;
  }
  return startIndex;
}
function consumeStyleKey(text, startIndex, endIndex) {
  let ch;
  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45 || ch === 95 || (ch & -33) >= 65 && (ch & -33) <= 90 || ch >= 48 && ch <= 57)) {
    startIndex++;
  }
  return startIndex;
}
function consumeSeparator(text, startIndex, endIndex, separator) {
  startIndex = consumeWhitespace(text, startIndex, endIndex);
  if (startIndex < endIndex) {
    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {
      malformedStyleError(text, String.fromCharCode(separator), startIndex);
    }
    startIndex++;
  }
  return startIndex;
}
function consumeStyleValue(text, startIndex, endIndex) {
  let ch1 = -1;
  let ch2 = -1;
  let ch3 = -1;
  let i = startIndex;
  let lastChIndex = i;
  while (i < endIndex) {
    const ch = text.charCodeAt(i++);
    if (ch === 59) {
      return lastChIndex;
    } else if (ch === 34 || ch === 39) {
      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);
    } else if (startIndex === i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
    ch3 === 85 && ch2 === 82 && ch1 === 76 && ch === 40) {
      lastChIndex = i = consumeQuotedText(text, 41, i, endIndex);
    } else if (ch > 32) {
      lastChIndex = i;
    }
    ch3 = ch2;
    ch2 = ch1;
    ch1 = ch & -33;
  }
  return lastChIndex;
}
function consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {
  let ch1 = -1;
  let index = startIndex;
  while (index < endIndex) {
    const ch = text.charCodeAt(index++);
    if (ch == quoteCharCode && ch1 !== 92) {
      return index;
    }
    if (ch == 92 && ch1 === 92) {
      ch1 = 0;
    } else {
      ch1 = ch;
    }
  }
  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();
}
function malformedStyleError(text, expecting, index) {
  ngDevMode && assertEqual(typeof text === "string", true, "String expected here");
  throw throwError2(`Malformed style at location ${index} in string '` + text.substring(0, index) + "[>>" + text.substring(index, index + 1) + "<<]" + text.slice(index + 1) + `'. Expecting '${expecting}'.`);
}
function \u0275\u0275property(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275property;
}
function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
  setAllInputsForProperty(tNode, tView, lView, isClassBased ? "class" : "style", value);
}
function \u0275\u0275styleProp(prop, value, suffix) {
  checkStylingProperty(prop, value, suffix, false);
  return \u0275\u0275styleProp;
}
function \u0275\u0275classProp(className, value) {
  checkStylingProperty(className, value, null, true);
  return \u0275\u0275classProp;
}
function \u0275\u0275styleMap(styles) {
  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
}
function styleStringParser(keyValueArray, text) {
  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {
    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));
  }
}
function \u0275\u0275classMap(classes) {
  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);
}
function classStringParser(keyValueArray, text) {
  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);
  }
}
function checkStylingProperty(prop, value, suffix, isClassBased) {
  const lView = getLView();
  const tView = getTView();
  const bindingIndex = incrementBindingIndex(2);
  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
  }
  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    const tNode = tView.data[getSelectedIndex()];
    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
  }
}
function checkStylingMap(keyValueArraySet2, stringParser, value, isClassBased) {
  const tView = getTView();
  const bindingIndex = incrementBindingIndex(2);
  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
  }
  const lView = getLView();
  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    const tNode = tView.data[getSelectedIndex()];
    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
      if (ngDevMode) {
        const tStylingKey = tView.data[bindingIndex];
        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, "Styling linked list shadow input should be marked as 'false'");
      }
      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(";"), true, "Expecting static portion to end with ';'");
      if (staticPrefix !== null) {
        value = concatStringsWithSpace(staticPrefix, value ? value : "");
      }
      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
    } else {
      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet2, stringParser, value), isClassBased, bindingIndex);
    }
  }
}
function isInHostBindings(tView, bindingIndex) {
  return bindingIndex >= tView.expandoStartIndex;
}
function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
  ngDevMode && assertFirstUpdatePass(tView);
  const tData = tView.data;
  if (tData[bindingIndex + 1] === null) {
    const tNode = tData[getSelectedIndex()];
    ngDevMode && assertDefined(tNode, "TNode expected");
    const isHostBindings = isInHostBindings(tView, bindingIndex);
    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
      tStylingKey = false;
    }
    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
  }
}
function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
  const hostDirectiveDef = getCurrentDirectiveDef(tData);
  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
  if (hostDirectiveDef === null) {
    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;
    if (isFirstStylingInstructionInTemplate) {
      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);
      residual = null;
    }
  } else {
    const directiveStylingLast = tNode.directiveStylingLast;
    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;
    if (isFirstStylingInstructionInHostBinding) {
      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);
      if (residual === null) {
        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);
        if (templateStylingKey !== void 0 && Array.isArray(templateStylingKey)) {
          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1], isClassBased);
          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
        }
      } else {
        residual = collectResidual(tData, tNode, isClassBased);
      }
    }
  }
  if (residual !== void 0) {
    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;
  }
  return stylingKey;
}
function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
  if (getTStylingRangeNext(bindings) === 0) {
    return void 0;
  }
  return tData[getTStylingRangePrev(bindings)];
}
function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, "Expecting to have at least one template styling binding.");
  tData[getTStylingRangePrev(bindings)] = tStylingKey;
}
function collectResidual(tData, tNode, isClassBased) {
  let residual = void 0;
  const directiveEnd = tNode.directiveEnd;
  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, "By the time this function gets called at least one hostBindings-node styling instruction must have executed.");
  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
    const attrs = tData[i].hostAttrs;
    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
  }
  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
}
function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
  let currentDirective = null;
  const directiveEnd = tNode.directiveEnd;
  let directiveStylingLast = tNode.directiveStylingLast;
  if (directiveStylingLast === -1) {
    directiveStylingLast = tNode.directiveStart;
  } else {
    directiveStylingLast++;
  }
  while (directiveStylingLast < directiveEnd) {
    currentDirective = tData[directiveStylingLast];
    ngDevMode && assertDefined(currentDirective, "expected to be defined");
    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
    if (currentDirective === hostDirectiveDef) break;
    directiveStylingLast++;
  }
  if (hostDirectiveDef !== null) {
    tNode.directiveStylingLast = directiveStylingLast;
  }
  return stylingKey;
}
function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
  const desiredMarker = isClassBased ? 1 : 2;
  let currentMarker = -1;
  if (attrs !== null) {
    for (let i = 0; i < attrs.length; i++) {
      const item = attrs[i];
      if (typeof item === "number") {
        currentMarker = item;
      } else {
        if (currentMarker === desiredMarker) {
          if (!Array.isArray(stylingKey)) {
            stylingKey = stylingKey === void 0 ? [] : ["", stylingKey];
          }
          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
        }
      }
    }
  }
  return stylingKey === void 0 ? null : stylingKey;
}
function toStylingKeyValueArray(keyValueArraySet2, stringParser, value) {
  if (value == null || value === "") return EMPTY_ARRAY;
  const styleKeyValueArray = [];
  const unwrappedValue = unwrapSafeValue(value);
  if (Array.isArray(unwrappedValue)) {
    for (let i = 0; i < unwrappedValue.length; i++) {
      keyValueArraySet2(styleKeyValueArray, unwrappedValue[i], true);
    }
  } else if (typeof unwrappedValue === "object") {
    for (const key in unwrappedValue) {
      if (unwrappedValue.hasOwnProperty(key)) {
        keyValueArraySet2(styleKeyValueArray, key, unwrappedValue[key]);
      }
    }
  } else if (typeof unwrappedValue === "string") {
    stringParser(styleKeyValueArray, unwrappedValue);
  } else {
    ngDevMode && throwError2("Unsupported styling type: " + typeof unwrappedValue + " (" + unwrappedValue + ")");
  }
  return styleKeyValueArray;
}
function styleKeyValueArraySet(keyValueArray, key, value) {
  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
}
function classKeyValueArraySet(keyValueArray, key, value) {
  const stringKey = String(key);
  if (stringKey !== "" && !stringKey.includes(" ")) {
    keyValueArraySet(keyValueArray, stringKey, value);
  }
}
function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
  if (oldKeyValueArray === NO_CHANGE) {
    oldKeyValueArray = EMPTY_ARRAY;
  }
  let oldIndex = 0;
  let newIndex = 0;
  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;
  while (oldKey !== null || newKey !== null) {
    ngDevMode && assertLessThan(oldIndex, 999, "Are we stuck in infinite loop?");
    ngDevMode && assertLessThan(newIndex, 999, "Are we stuck in infinite loop?");
    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : void 0;
    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : void 0;
    let setKey = null;
    let setValue = void 0;
    if (oldKey === newKey) {
      oldIndex += 2;
      newIndex += 2;
      if (oldValue !== newValue) {
        setKey = newKey;
        setValue = newValue;
      }
    } else if (newKey === null || oldKey !== null && oldKey < newKey) {
      oldIndex += 2;
      setKey = oldKey;
    } else {
      ngDevMode && assertDefined(newKey, "Expecting to have a valid key");
      newIndex += 2;
      setKey = newKey;
      setValue = newValue;
    }
    if (setKey !== null) {
      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);
    }
    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
  }
}
function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
  if (!(tNode.type & 3)) {
    return;
  }
  const tData = tView.data;
  const tRange = tData[bindingIndex + 1];
  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : void 0;
  if (!isStylingValuePresent(higherPriorityValue)) {
    if (!isStylingValuePresent(value)) {
      if (getTStylingRangePrevDuplicate(tRange)) {
        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
      }
    }
    const rNode = getNativeByIndex(getSelectedIndex(), lView);
    applyStyling(renderer, isClassBased, rNode, prop, value);
  }
}
function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
  const isPrevDirection = tNode === null;
  let value = void 0;
  while (index > 0) {
    const rawKey = tData[index];
    const containsStatics = Array.isArray(rawKey);
    const key = containsStatics ? rawKey[1] : rawKey;
    const isStylingMap = key === null;
    let valueAtLViewIndex = lView[index + 1];
    if (valueAtLViewIndex === NO_CHANGE) {
      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : void 0;
    }
    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : void 0;
    if (containsStatics && !isStylingValuePresent(currentValue)) {
      currentValue = keyValueArrayGet(rawKey, prop);
    }
    if (isStylingValuePresent(currentValue)) {
      value = currentValue;
      if (isPrevDirection) {
        return value;
      }
    }
    const tRange = tData[index + 1];
    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
  }
  if (tNode !== null) {
    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
    if (residual != null) {
      value = keyValueArrayGet(residual, prop);
    }
  }
  return value;
}
function isStylingValuePresent(value) {
  return value !== void 0;
}
function normalizeSuffix(value, suffix) {
  if (value == null || value === "") ;
  else if (typeof suffix === "string") {
    value = value + suffix;
  } else if (typeof value === "object") {
    value = stringify(unwrapSafeValue(value));
  }
  return value;
}
function hasStylingInputShadow(tNode, isClassBased) {
  return (tNode.flags & (isClassBased ? 8 : 16)) !== 0;
}
function \u0275\u0275classMapInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolateV(values) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275componentInstance() {
  const instance = getLView()[DECLARATION_COMPONENT_VIEW][CONTEXT];
  ngDevMode && assertDefined(instance, "Expected component instance to be defined");
  return instance;
}
var LiveCollection = class {
  destroy(item) {
  }
  updateValue(index, value) {
  }
  // operations below could be implemented on top of the operations defined so far, but having
  // them explicitly allow clear expression of intent and potentially more performant
  // implementations
  swap(index1, index2) {
    const startIdx = Math.min(index1, index2);
    const endIdx = Math.max(index1, index2);
    const endItem = this.detach(endIdx);
    if (endIdx - startIdx > 1) {
      const startItem = this.detach(startIdx);
      this.attach(startIdx, endItem);
      this.attach(endIdx, startItem);
    } else {
      this.attach(startIdx, endItem);
    }
  }
  move(prevIndex, newIdx) {
    this.attach(newIdx, this.detach(prevIndex));
  }
};
function valuesMatching(liveIdx, liveValue, newIdx, newValue, trackBy) {
  if (liveIdx === newIdx && Object.is(liveValue, newValue)) {
    return 1;
  } else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {
    return -1;
  }
  return 0;
}
function recordDuplicateKeys(keyToIdx, key, idx) {
  const idxSoFar = keyToIdx.get(key);
  if (idxSoFar !== void 0) {
    idxSoFar.add(idx);
  } else {
    keyToIdx.set(key, /* @__PURE__ */ new Set([idx]));
  }
}
function reconcile(liveCollection, newCollection, trackByFn) {
  let detachedItems = void 0;
  let liveKeysInTheFuture = void 0;
  let liveStartIdx = 0;
  let liveEndIdx = liveCollection.length - 1;
  const duplicateKeys = ngDevMode ? /* @__PURE__ */ new Map() : void 0;
  if (Array.isArray(newCollection)) {
    let newEndIdx = newCollection.length - 1;
    while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {
      const liveStartValue = liveCollection.at(liveStartIdx);
      const newStartValue = newCollection[liveStartIdx];
      if (ngDevMode) {
        recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newStartValue), liveStartIdx);
      }
      const isStartMatching = valuesMatching(liveStartIdx, liveStartValue, liveStartIdx, newStartValue, trackByFn);
      if (isStartMatching !== 0) {
        if (isStartMatching < 0) {
          liveCollection.updateValue(liveStartIdx, newStartValue);
        }
        liveStartIdx++;
        continue;
      }
      const liveEndValue = liveCollection.at(liveEndIdx);
      const newEndValue = newCollection[newEndIdx];
      if (ngDevMode) {
        recordDuplicateKeys(duplicateKeys, trackByFn(newEndIdx, newEndValue), newEndIdx);
      }
      const isEndMatching = valuesMatching(liveEndIdx, liveEndValue, newEndIdx, newEndValue, trackByFn);
      if (isEndMatching !== 0) {
        if (isEndMatching < 0) {
          liveCollection.updateValue(liveEndIdx, newEndValue);
        }
        liveEndIdx--;
        newEndIdx--;
        continue;
      }
      const liveStartKey = trackByFn(liveStartIdx, liveStartValue);
      const liveEndKey = trackByFn(liveEndIdx, liveEndValue);
      const newStartKey = trackByFn(liveStartIdx, newStartValue);
      if (Object.is(newStartKey, liveEndKey)) {
        const newEndKey = trackByFn(newEndIdx, newEndValue);
        if (Object.is(newEndKey, liveStartKey)) {
          liveCollection.swap(liveStartIdx, liveEndIdx);
          liveCollection.updateValue(liveEndIdx, newEndValue);
          newEndIdx--;
          liveEndIdx--;
        } else {
          liveCollection.move(liveEndIdx, liveStartIdx);
        }
        liveCollection.updateValue(liveStartIdx, newStartValue);
        liveStartIdx++;
        continue;
      }
      detachedItems ??= new UniqueValueMultiKeyMap();
      liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);
      if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {
        liveCollection.updateValue(liveStartIdx, newStartValue);
        liveStartIdx++;
        liveEndIdx++;
      } else if (!liveKeysInTheFuture.has(newStartKey)) {
        const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);
        liveCollection.attach(liveStartIdx, newItem);
        liveStartIdx++;
        liveEndIdx++;
      } else {
        detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));
        liveEndIdx--;
      }
    }
    while (liveStartIdx <= newEndIdx) {
      createOrAttach(liveCollection, detachedItems, trackByFn, liveStartIdx, newCollection[liveStartIdx]);
      liveStartIdx++;
    }
  } else if (newCollection != null) {
    const newCollectionIterator = newCollection[Symbol.iterator]();
    let newIterationResult = newCollectionIterator.next();
    while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {
      const liveValue = liveCollection.at(liveStartIdx);
      const newValue = newIterationResult.value;
      if (ngDevMode) {
        recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newValue), liveStartIdx);
      }
      const isStartMatching = valuesMatching(liveStartIdx, liveValue, liveStartIdx, newValue, trackByFn);
      if (isStartMatching !== 0) {
        if (isStartMatching < 0) {
          liveCollection.updateValue(liveStartIdx, newValue);
        }
        liveStartIdx++;
        newIterationResult = newCollectionIterator.next();
      } else {
        detachedItems ??= new UniqueValueMultiKeyMap();
        liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);
        const newKey = trackByFn(liveStartIdx, newValue);
        if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {
          liveCollection.updateValue(liveStartIdx, newValue);
          liveStartIdx++;
          liveEndIdx++;
          newIterationResult = newCollectionIterator.next();
        } else if (!liveKeysInTheFuture.has(newKey)) {
          liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));
          liveStartIdx++;
          liveEndIdx++;
          newIterationResult = newCollectionIterator.next();
        } else {
          const liveKey = trackByFn(liveStartIdx, liveValue);
          detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));
          liveEndIdx--;
        }
      }
    }
    while (!newIterationResult.done) {
      createOrAttach(liveCollection, detachedItems, trackByFn, liveCollection.length, newIterationResult.value);
      newIterationResult = newCollectionIterator.next();
    }
  }
  while (liveStartIdx <= liveEndIdx) {
    liveCollection.destroy(liveCollection.detach(liveEndIdx--));
  }
  detachedItems?.forEach((item) => {
    liveCollection.destroy(item);
  });
  if (ngDevMode) {
    let duplicatedKeysMsg = [];
    for (const [key, idxSet] of duplicateKeys) {
      if (idxSet.size > 1) {
        const idx = [...idxSet].sort((a, b) => a - b);
        for (let i = 1; i < idx.length; i++) {
          duplicatedKeysMsg.push(`key "${stringifyForError(key)}" at index "${idx[i - 1]}" and "${idx[i]}"`);
        }
      }
    }
    if (duplicatedKeysMsg.length > 0) {
      const message = formatRuntimeError(-955, "The provided track expression resulted in duplicated keys for a given collection. Adjust the tracking expression such that it uniquely identifies all the items in the collection. Duplicated keys were: \n" + duplicatedKeysMsg.join(", \n") + ".");
      console.warn(message);
    }
  }
}
function attachPreviouslyDetached(prevCollection, detachedItems, index, key) {
  if (detachedItems !== void 0 && detachedItems.has(key)) {
    prevCollection.attach(index, detachedItems.get(key));
    detachedItems.delete(key);
    return true;
  }
  return false;
}
function createOrAttach(liveCollection, detachedItems, trackByFn, index, value) {
  if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {
    const newItem = liveCollection.create(index, value);
    liveCollection.attach(index, newItem);
  } else {
    liveCollection.updateValue(index, value);
  }
}
function initLiveItemsInTheFuture(liveCollection, start, end, trackByFn) {
  const keys = /* @__PURE__ */ new Set();
  for (let i = start; i <= end; i++) {
    keys.add(trackByFn(i, liveCollection.at(i)));
  }
  return keys;
}
var UniqueValueMultiKeyMap = class {
  // A map from a key to the first value corresponding to this key.
  kvMap = /* @__PURE__ */ new Map();
  // A map that acts as a linked list of values - each value maps to the next value in this "linked
  // list" (this only works if values are unique). Allocated lazily to avoid memory consumption when
  // there are no duplicated values.
  _vMap = void 0;
  has(key) {
    return this.kvMap.has(key);
  }
  delete(key) {
    if (!this.has(key)) return false;
    const value = this.kvMap.get(key);
    if (this._vMap !== void 0 && this._vMap.has(value)) {
      this.kvMap.set(key, this._vMap.get(value));
      this._vMap.delete(value);
    } else {
      this.kvMap.delete(key);
    }
    return true;
  }
  get(key) {
    return this.kvMap.get(key);
  }
  set(key, value) {
    if (this.kvMap.has(key)) {
      let prevValue = this.kvMap.get(key);
      if (ngDevMode && prevValue === value) {
        throw new Error(`Detected a duplicated value ${value} for the key ${key}`);
      }
      if (this._vMap === void 0) {
        this._vMap = /* @__PURE__ */ new Map();
      }
      const vMap = this._vMap;
      while (vMap.has(prevValue)) {
        prevValue = vMap.get(prevValue);
      }
      vMap.set(prevValue, value);
    } else {
      this.kvMap.set(key, value);
    }
  }
  forEach(cb) {
    for (let [key, value] of this.kvMap) {
      cb(value, key);
      if (this._vMap !== void 0) {
        const vMap = this._vMap;
        while (vMap.has(value)) {
          value = vMap.get(value);
          cb(value, key);
        }
      }
    }
  }
};
function \u0275\u0275conditional(matchingTemplateIndex, contextValue) {
  performanceMarkFeature("NgControlFlow");
  const hostLView = getLView();
  const bindingIndex = nextBindingIndex();
  const prevMatchingTemplateIndex = hostLView[bindingIndex] !== NO_CHANGE ? hostLView[bindingIndex] : -1;
  const prevContainer = prevMatchingTemplateIndex !== -1 ? getLContainer(hostLView, HEADER_OFFSET + prevMatchingTemplateIndex) : void 0;
  const viewInContainerIdx = 0;
  if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      if (prevContainer !== void 0) {
        removeLViewFromLContainer(prevContainer, viewInContainerIdx);
      }
      if (matchingTemplateIndex !== -1) {
        const nextLContainerIndex = HEADER_OFFSET + matchingTemplateIndex;
        const nextContainer = getLContainer(hostLView, nextLContainerIndex);
        const templateTNode = getExistingTNode(hostLView[TVIEW], nextLContainerIndex);
        const dehydratedView = findMatchingDehydratedView(nextContainer, templateTNode.tView.ssrId);
        const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, contextValue, {
          dehydratedView
        });
        addLViewToLContainer(nextContainer, embeddedLView, viewInContainerIdx, shouldAddViewToDom(templateTNode, dehydratedView));
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  } else if (prevContainer !== void 0) {
    const lView = getLViewFromLContainer(prevContainer, viewInContainerIdx);
    if (lView !== void 0) {
      lView[CONTEXT] = contextValue;
    }
  }
}
var RepeaterContext = class {
  lContainer;
  $implicit;
  $index;
  constructor(lContainer, $implicit, $index) {
    this.lContainer = lContainer;
    this.$implicit = $implicit;
    this.$index = $index;
  }
  get $count() {
    return this.lContainer.length - CONTAINER_HEADER_OFFSET;
  }
};
function \u0275\u0275repeaterTrackByIndex(index) {
  return index;
}
function \u0275\u0275repeaterTrackByIdentity(_, value) {
  return value;
}
var RepeaterMetadata = class {
  hasEmptyBlock;
  trackByFn;
  liveCollection;
  constructor(hasEmptyBlock, trackByFn, liveCollection) {
    this.hasEmptyBlock = hasEmptyBlock;
    this.trackByFn = trackByFn;
    this.liveCollection = liveCollection;
  }
};
function \u0275\u0275repeaterCreate(index, templateFn, decls, vars, tagName, attrsIndex, trackByFn, trackByUsesComponentInstance, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, emptyAttrsIndex) {
  performanceMarkFeature("NgControlFlow");
  ngDevMode && assertFunction(trackByFn, `A track expression must be a function, was ${typeof trackByFn} instead.`);
  const lView = getLView();
  const tView = getTView();
  const hasEmptyBlock = emptyTemplateFn !== void 0;
  const hostLView = getLView();
  const boundTrackBy = trackByUsesComponentInstance ? (
    // We only want to bind when necessary, because it produces a
    // new function. For pure functions it's not necessary.
    trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT])
  ) : trackByFn;
  const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);
  hostLView[HEADER_OFFSET + index] = metadata;
  declareTemplate(lView, tView, index + 1, templateFn, decls, vars, tagName, getConstant(tView.consts, attrsIndex));
  if (hasEmptyBlock) {
    ngDevMode && assertDefined(emptyDecls, "Missing number of declarations for the empty repeater block.");
    ngDevMode && assertDefined(emptyVars, "Missing number of bindings for the empty repeater block.");
    declareTemplate(lView, tView, index + 2, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, getConstant(tView.consts, emptyAttrsIndex));
  }
}
function isViewExpensiveToRecreate(lView) {
  return lView.length - HEADER_OFFSET > 2;
}
var OperationsCounter = class {
  created = 0;
  destroyed = 0;
  reset() {
    this.created = 0;
    this.destroyed = 0;
  }
  recordCreate() {
    this.created++;
  }
  recordDestroy() {
    this.destroyed++;
  }
  /**
   * A method indicating if the entire collection was re-created as part of the reconciliation pass.
   * Used to warn developers about the usage of a tracking function that might result in excessive
   * amount of view creation / destroy operations.
   *
   * @returns boolean value indicating if a live collection was re-created
   */
  wasReCreated(collectionLen) {
    return collectionLen > 0 && this.created === this.destroyed && this.created === collectionLen;
  }
};
var LiveCollectionLContainerImpl = class extends LiveCollection {
  lContainer;
  hostLView;
  templateTNode;
  operationsCounter = ngDevMode ? new OperationsCounter() : void 0;
  /**
   Property indicating if indexes in the repeater context need to be updated following the live
   collection changes. Index updates are necessary if and only if views are inserted / removed in
   the middle of LContainer. Adds and removals at the end don't require index updates.
  */
  needsIndexUpdate = false;
  constructor(lContainer, hostLView, templateTNode) {
    super();
    this.lContainer = lContainer;
    this.hostLView = hostLView;
    this.templateTNode = templateTNode;
  }
  get length() {
    return this.lContainer.length - CONTAINER_HEADER_OFFSET;
  }
  at(index) {
    return this.getLView(index)[CONTEXT].$implicit;
  }
  attach(index, lView) {
    const dehydratedView = lView[HYDRATION];
    this.needsIndexUpdate ||= index !== this.length;
    addLViewToLContainer(this.lContainer, lView, index, shouldAddViewToDom(this.templateTNode, dehydratedView));
  }
  detach(index) {
    this.needsIndexUpdate ||= index !== this.length - 1;
    return detachExistingView(this.lContainer, index);
  }
  create(index, value) {
    const dehydratedView = findMatchingDehydratedView(this.lContainer, this.templateTNode.tView.ssrId);
    const embeddedLView = createAndRenderEmbeddedLView(this.hostLView, this.templateTNode, new RepeaterContext(this.lContainer, value, index), {
      dehydratedView
    });
    this.operationsCounter?.recordCreate();
    return embeddedLView;
  }
  destroy(lView) {
    destroyLView(lView[TVIEW], lView);
    this.operationsCounter?.recordDestroy();
  }
  updateValue(index, value) {
    this.getLView(index)[CONTEXT].$implicit = value;
  }
  reset() {
    this.needsIndexUpdate = false;
    this.operationsCounter?.reset();
  }
  updateIndexes() {
    if (this.needsIndexUpdate) {
      for (let i = 0; i < this.length; i++) {
        this.getLView(i)[CONTEXT].$index = i;
      }
    }
  }
  getLView(index) {
    return getExistingLViewFromLContainer(this.lContainer, index);
  }
};
function \u0275\u0275repeater(collection) {
  const prevConsumer = setActiveConsumer(null);
  const metadataSlotIdx = getSelectedIndex();
  try {
    const hostLView = getLView();
    const hostTView = hostLView[TVIEW];
    const metadata = hostLView[metadataSlotIdx];
    const containerIndex = metadataSlotIdx + 1;
    const lContainer = getLContainer(hostLView, containerIndex);
    if (metadata.liveCollection === void 0) {
      const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);
      metadata.liveCollection = new LiveCollectionLContainerImpl(lContainer, hostLView, itemTemplateTNode);
    } else {
      metadata.liveCollection.reset();
    }
    const liveCollection = metadata.liveCollection;
    reconcile(liveCollection, collection, metadata.trackByFn);
    if (ngDevMode && metadata.trackByFn === \u0275\u0275repeaterTrackByIdentity && liveCollection.operationsCounter?.wasReCreated(liveCollection.length) && isViewExpensiveToRecreate(getExistingLViewFromLContainer(lContainer, 0))) {
      const message = formatRuntimeError(-956, `The configured tracking expression (track by identity) caused re-creation of the entire collection of size ${liveCollection.length}. This is an expensive operation requiring destruction and subsequent creation of DOM nodes, directives, components etc. Please review the "track expression" and make sure that it uniquely identifies items in a collection.`);
      console.warn(message);
    }
    liveCollection.updateIndexes();
    if (metadata.hasEmptyBlock) {
      const bindingIndex = nextBindingIndex();
      const isCollectionEmpty = liveCollection.length === 0;
      if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {
        const emptyTemplateIndex = metadataSlotIdx + 2;
        const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);
        if (isCollectionEmpty) {
          const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);
          const dehydratedView = findMatchingDehydratedView(lContainerForEmpty, emptyTemplateTNode.tView.ssrId);
          const embeddedLView = createAndRenderEmbeddedLView(hostLView, emptyTemplateTNode, void 0, {
            dehydratedView
          });
          addLViewToLContainer(lContainerForEmpty, embeddedLView, 0, shouldAddViewToDom(emptyTemplateTNode, dehydratedView));
        } else {
          removeLViewFromLContainer(lContainerForEmpty, 0);
        }
      }
    }
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function getLContainer(lView, index) {
  const lContainer = lView[index];
  ngDevMode && assertLContainer(lContainer);
  return lContainer;
}
function detachExistingView(lContainer, index) {
  const existingLView = detachView(lContainer, index);
  ngDevMode && assertLView(existingLView);
  return existingLView;
}
function getExistingLViewFromLContainer(lContainer, index) {
  const existingLView = getLViewFromLContainer(lContainer, index);
  ngDevMode && assertLView(existingLView);
  return existingLView;
}
function getExistingTNode(tView, index) {
  const tNode = getTNode(tView, index);
  ngDevMode && assertTNode(tNode);
  return tNode;
}
function \u0275\u0275elementStart(index, name, attrsIndex, localRefsIndex) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "elements should be created before any bindings");
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  const renderer = lView[RENDERER];
  const tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, name, findDirectiveDefMatches, getBindingsEnabled(), attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  const native = _locateOrCreateElementNode(tView, lView, tNode, renderer, name, index);
  lView[adjustedIndex] = native;
  const hasDirectives = isDirectiveHost(tNode);
  if (ngDevMode && tView.firstCreatePass) {
    validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);
  }
  setCurrentTNode(tNode, true);
  setupStaticAttributes(renderer, native, tNode);
  if (!isDetachedByI18n(tNode) && wasLastNodeCreated()) {
    appendChild(tView, lView, native, tNode);
  }
  if (getElementDepthCount() === 0 || hasDirectives) {
    attachPatchData(native, lView);
  }
  increaseElementDepthCount();
  if (hasDirectives) {
    createDirectivesInstances(tView, lView, tNode);
    executeContentQueries(tView, tNode, lView);
  }
  if (localRefsIndex !== null) {
    saveResolvedLocalsInData(lView, tNode);
  }
  return \u0275\u0275elementStart;
}
function \u0275\u0275elementEnd() {
  let currentTNode = getCurrentTNode();
  ngDevMode && assertDefined(currentTNode, "No parent node to close.");
  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(getCurrentTNode());
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }
  const tNode = currentTNode;
  ngDevMode && assertTNodeType(
    tNode,
    3
    /* TNodeType.AnyRNode */
  );
  if (isSkipHydrationRootTNode(tNode)) {
    leaveSkipHydrationBlock();
  }
  decreaseElementDepthCount();
  const tView = getTView();
  if (tView.firstCreatePass) {
    elementEndFirstCreatePass(tView, tNode);
  }
  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);
  }
  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);
  }
  return \u0275\u0275elementEnd;
}
function \u0275\u0275element(index, name, attrsIndex, localRefsIndex) {
  \u0275\u0275elementStart(index, name, attrsIndex, localRefsIndex);
  \u0275\u0275elementEnd();
  return \u0275\u0275element;
}
var _locateOrCreateElementNode = (tView, lView, tNode, renderer, name, index) => {
  lastNodeWasCreated(true);
  return createElementNode(renderer, name, getNamespace());
};
function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const attrs = getConstant(tViewConsts, attrsIndex);
  const tNode = getOrCreateTNode(tView, index, 8, "ng-container", attrs);
  if (attrs !== null) {
    computeStaticStyling(tNode, attrs, true);
  }
  const localRefs = getConstant(tViewConsts, localRefsIndex);
  if (getBindingsEnabled()) {
    resolveDirectives(tView, lView, tNode, localRefs, findDirectiveDefMatches);
  }
  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }
  return tNode;
}
function \u0275\u0275elementContainerStart(index, attrsIndex, localRefsIndex) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "element containers should be created before any bindings");
  const tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  setCurrentTNode(tNode, true);
  const comment = _locateOrCreateElementContainerNode(tView, lView, tNode, index);
  lView[adjustedIndex] = comment;
  if (wasLastNodeCreated()) {
    appendChild(tView, lView, comment, tNode);
  }
  attachPatchData(comment, lView);
  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(tView, lView, tNode);
    executeContentQueries(tView, tNode, lView);
  }
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode);
  }
  return \u0275\u0275elementContainerStart;
}
function \u0275\u0275elementContainerEnd() {
  let currentTNode = getCurrentTNode();
  const tView = getTView();
  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(currentTNode);
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }
  ngDevMode && assertTNodeType(
    currentTNode,
    8
    /* TNodeType.ElementContainer */
  );
  if (tView.firstCreatePass) {
    registerPostOrderHooks(tView, currentTNode);
    if (isContentQueryHost(currentTNode)) {
      tView.queries.elementEnd(currentTNode);
    }
  }
  return \u0275\u0275elementContainerEnd;
}
function \u0275\u0275elementContainer(index, attrsIndex, localRefsIndex) {
  \u0275\u0275elementContainerStart(index, attrsIndex, localRefsIndex);
  \u0275\u0275elementContainerEnd();
  return \u0275\u0275elementContainer;
}
var _locateOrCreateElementContainerNode = (tView, lView, tNode, index) => {
  lastNodeWasCreated(true);
  return createCommentNode(lView[RENDERER], ngDevMode ? "ng-container" : "");
};
function \u0275\u0275getCurrentView() {
  return getLView();
}
function \u0275\u0275hostProperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275hostProperty;
}
function \u0275\u0275syntheticHostProperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    const currentDef = getCurrentDirectiveDef(tView.data);
    const renderer = loadComponentRenderer(currentDef, tNode, lView);
    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275syntheticHostProperty;
}
var u = void 0;
function plural(val) {
  const i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\.?/, "").length;
  if (i === 1 && v === 0) return 1;
  return 5;
}
var localeEn = ["en", [["a", "p"], ["AM", "PM"], u], [["AM", "PM"], u, u], [["S", "M", "T", "W", "T", "F", "S"], ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]], u, [["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]], u, [["B", "A"], ["BC", "AD"], ["Before Christ", "Anno Domini"]], 0, [6, 0], ["M/d/yy", "MMM d, y", "MMMM d, y", "EEEE, MMMM d, y"], ["h:mm a", "h:mm:ss a", "h:mm:ss a z", "h:mm:ss a zzzz"], ["{1}, {0}", u, "{1} 'at' {0}", u], [".", ",", ";", "%", "+", "-", "E", "\xD7", "\u2030", "\u221E", "NaN", ":"], ["#,##0.###", "#,##0%", "\xA4#,##0.00", "#E0"], "USD", "$", "US Dollar", {}, "ltr", plural];
var LOCALE_DATA = {};
function findLocaleData(locale) {
  const normalizedLocale = normalizeLocale(locale);
  let match2 = getLocaleData(normalizedLocale);
  if (match2) {
    return match2;
  }
  const parentLocale = normalizedLocale.split("-")[0];
  match2 = getLocaleData(parentLocale);
  if (match2) {
    return match2;
  }
  if (parentLocale === "en") {
    return localeEn;
  }
  throw new RuntimeError(701, ngDevMode && `Missing locale data for the locale "${locale}".`);
}
function getLocalePluralCase(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.PluralCase];
}
function getLocaleData(normalizedLocale) {
  if (!(normalizedLocale in LOCALE_DATA)) {
    LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];
  }
  return LOCALE_DATA[normalizedLocale];
}
var LocaleDataIndex;
(function(LocaleDataIndex2) {
  LocaleDataIndex2[LocaleDataIndex2["LocaleId"] = 0] = "LocaleId";
  LocaleDataIndex2[LocaleDataIndex2["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
  LocaleDataIndex2[LocaleDataIndex2["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
  LocaleDataIndex2[LocaleDataIndex2["DaysFormat"] = 3] = "DaysFormat";
  LocaleDataIndex2[LocaleDataIndex2["DaysStandalone"] = 4] = "DaysStandalone";
  LocaleDataIndex2[LocaleDataIndex2["MonthsFormat"] = 5] = "MonthsFormat";
  LocaleDataIndex2[LocaleDataIndex2["MonthsStandalone"] = 6] = "MonthsStandalone";
  LocaleDataIndex2[LocaleDataIndex2["Eras"] = 7] = "Eras";
  LocaleDataIndex2[LocaleDataIndex2["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
  LocaleDataIndex2[LocaleDataIndex2["WeekendRange"] = 9] = "WeekendRange";
  LocaleDataIndex2[LocaleDataIndex2["DateFormat"] = 10] = "DateFormat";
  LocaleDataIndex2[LocaleDataIndex2["TimeFormat"] = 11] = "TimeFormat";
  LocaleDataIndex2[LocaleDataIndex2["DateTimeFormat"] = 12] = "DateTimeFormat";
  LocaleDataIndex2[LocaleDataIndex2["NumberSymbols"] = 13] = "NumberSymbols";
  LocaleDataIndex2[LocaleDataIndex2["NumberFormats"] = 14] = "NumberFormats";
  LocaleDataIndex2[LocaleDataIndex2["CurrencyCode"] = 15] = "CurrencyCode";
  LocaleDataIndex2[LocaleDataIndex2["CurrencySymbol"] = 16] = "CurrencySymbol";
  LocaleDataIndex2[LocaleDataIndex2["CurrencyName"] = 17] = "CurrencyName";
  LocaleDataIndex2[LocaleDataIndex2["Currencies"] = 18] = "Currencies";
  LocaleDataIndex2[LocaleDataIndex2["Directionality"] = 19] = "Directionality";
  LocaleDataIndex2[LocaleDataIndex2["PluralCase"] = 20] = "PluralCase";
  LocaleDataIndex2[LocaleDataIndex2["ExtraData"] = 21] = "ExtraData";
})(LocaleDataIndex || (LocaleDataIndex = {}));
function normalizeLocale(locale) {
  return locale.toLowerCase().replace(/_/g, "-");
}
var pluralMapping = ["zero", "one", "two", "few", "many"];
function getPluralCase(value, locale) {
  const plural2 = getLocalePluralCase(locale)(parseInt(value, 10));
  const result = pluralMapping[plural2];
  return result !== void 0 ? result : "other";
}
var DEFAULT_LOCALE_ID = "en-US";
var USD_CURRENCY_CODE = "USD";
var ELEMENT_MARKER = {
  marker: "element"
};
var ICU_MARKER = {
  marker: "ICU"
};
var I18nCreateOpCode;
(function(I18nCreateOpCode2) {
  I18nCreateOpCode2[I18nCreateOpCode2["SHIFT"] = 2] = "SHIFT";
  I18nCreateOpCode2[I18nCreateOpCode2["APPEND_EAGERLY"] = 1] = "APPEND_EAGERLY";
  I18nCreateOpCode2[I18nCreateOpCode2["COMMENT"] = 2] = "COMMENT";
})(I18nCreateOpCode || (I18nCreateOpCode = {}));
var LOCALE_ID$1 = DEFAULT_LOCALE_ID;
function setLocaleId(localeId) {
  ngDevMode && assertDefined(localeId, `Expected localeId to be defined`);
  if (typeof localeId === "string") {
    LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, "-");
  }
}
function getLocaleId() {
  return LOCALE_ID$1;
}
var changeMask = 0;
var changeMaskCounter = 0;
function setMaskBit(hasChange) {
  if (hasChange) {
    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);
  }
  changeMaskCounter++;
}
function applyI18n(tView, lView, index) {
  if (changeMaskCounter > 0) {
    ngDevMode && assertDefined(tView, `tView should be defined`);
    const tI18n = tView.data[index];
    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;
    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;
    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);
  }
  changeMask = 0;
  changeMaskCounter = 0;
}
function createNodeWithoutHydration(lView, textOrName, nodeType) {
  const renderer = lView[RENDERER];
  switch (nodeType) {
    case Node.COMMENT_NODE:
      return createCommentNode(renderer, textOrName);
    case Node.TEXT_NODE:
      return createTextNode(renderer, textOrName);
    case Node.ELEMENT_NODE:
      return createElementNode(renderer, textOrName, null);
  }
}
var _locateOrCreateNode = (lView, index, textOrName, nodeType) => {
  lastNodeWasCreated(true);
  return createNodeWithoutHydration(lView, textOrName, nodeType);
};
function applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {
  const renderer = lView[RENDERER];
  for (let i = 0; i < createOpCodes.length; i++) {
    const opCode = createOpCodes[i++];
    const text = createOpCodes[i];
    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    const index = opCode >>> I18nCreateOpCode.SHIFT;
    let rNode = lView[index];
    let lastNodeWasCreated2 = false;
    if (rNode === null) {
      rNode = lView[index] = _locateOrCreateNode(lView, index, text, isComment ? Node.COMMENT_NODE : Node.TEXT_NODE);
      lastNodeWasCreated2 = wasLastNodeCreated();
    }
    if (appendNow && parentRNode !== null && lastNodeWasCreated2) {
      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);
    }
  }
}
function applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {
  ngDevMode && assertDomNode(anchorRNode);
  const renderer = lView[RENDERER];
  let rootIdx = null;
  let rootRNode;
  for (let i = 0; i < mutableOpCodes.length; i++) {
    const opCode = mutableOpCodes[i];
    if (typeof opCode == "string") {
      const textNodeIndex = mutableOpCodes[++i];
      if (lView[textNodeIndex] === null) {
        ngDevMode && ngDevMode.rendererCreateTextNode++;
        ngDevMode && assertIndexInRange(lView, textNodeIndex);
        lView[textNodeIndex] = _locateOrCreateNode(lView, textNodeIndex, opCode, Node.TEXT_NODE);
      }
    } else if (typeof opCode == "number") {
      switch (opCode & 1) {
        case 0:
          const parentIdx = getParentFromIcuCreateOpCode(opCode);
          if (rootIdx === null) {
            rootIdx = parentIdx;
            rootRNode = renderer.parentNode(anchorRNode);
          }
          let insertInFrontOf;
          let parentRNode;
          if (parentIdx === rootIdx) {
            insertInFrontOf = anchorRNode;
            parentRNode = rootRNode;
          } else {
            insertInFrontOf = null;
            parentRNode = unwrapRNode(lView[parentIdx]);
          }
          if (parentRNode !== null) {
            ngDevMode && assertDomNode(parentRNode);
            const refIdx = getRefFromIcuCreateOpCode(opCode);
            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, "Missing ref");
            const child = lView[refIdx];
            ngDevMode && assertDomNode(child);
            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);
            const tIcu = getTIcu(tView, refIdx);
            if (tIcu !== null && typeof tIcu === "object") {
              ngDevMode && assertTIcu(tIcu);
              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);
              if (caseIndex !== null) {
                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);
              }
            }
          }
          break;
        case 1:
          const elementNodeIndex = opCode >>> 1;
          const attrName = mutableOpCodes[++i];
          const attrValue = mutableOpCodes[++i];
          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);
          break;
        default:
          if (ngDevMode) {
            throw new RuntimeError(700, `Unable to determine the type of mutate operation for "${opCode}"`);
          }
      }
    } else {
      switch (opCode) {
        case ICU_MARKER:
          const commentValue = mutableOpCodes[++i];
          const commentNodeIndex = mutableOpCodes[++i];
          if (lView[commentNodeIndex] === null) {
            ngDevMode && assertEqual(typeof commentValue, "string", `Expected "${commentValue}" to be a comment node value`);
            ngDevMode && ngDevMode.rendererCreateComment++;
            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);
            const commentRNode = lView[commentNodeIndex] = _locateOrCreateNode(lView, commentNodeIndex, commentValue, Node.COMMENT_NODE);
            attachPatchData(commentRNode, lView);
          }
          break;
        case ELEMENT_MARKER:
          const tagName = mutableOpCodes[++i];
          const elementNodeIndex = mutableOpCodes[++i];
          if (lView[elementNodeIndex] === null) {
            ngDevMode && assertEqual(typeof tagName, "string", `Expected "${tagName}" to be an element node tag name`);
            ngDevMode && ngDevMode.rendererCreateElement++;
            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);
            const elementRNode = lView[elementNodeIndex] = _locateOrCreateNode(lView, elementNodeIndex, tagName, Node.ELEMENT_NODE);
            attachPatchData(elementRNode, lView);
          }
          break;
        default:
          ngDevMode && throwError2(`Unable to determine the type of mutate operation for "${opCode}"`);
      }
    }
  }
}
function applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask2) {
  for (let i = 0; i < updateOpCodes.length; i++) {
    const checkBit = updateOpCodes[i];
    const skipCodes = updateOpCodes[++i];
    if (checkBit & changeMask2) {
      let value = "";
      for (let j = i + 1; j <= i + skipCodes; j++) {
        const opCode = updateOpCodes[j];
        if (typeof opCode == "string") {
          value += opCode;
        } else if (typeof opCode == "number") {
          if (opCode < 0) {
            value += renderStringify(lView[bindingsStartIndex - opCode]);
          } else {
            const nodeIndex = opCode >>> 2;
            switch (opCode & 3) {
              case 1:
                const propName = updateOpCodes[++j];
                const sanitizeFn = updateOpCodes[++j];
                const tNodeOrTagName = tView.data[nodeIndex];
                ngDevMode && assertDefined(tNodeOrTagName, "Experting TNode or string");
                if (typeof tNodeOrTagName === "string") {
                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);
                } else {
                  elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);
                }
                break;
              case 0:
                const rText = lView[nodeIndex];
                rText !== null && updateTextNode(lView[RENDERER], rText, value);
                break;
              case 2:
                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);
                break;
              case 3:
                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);
                break;
            }
          }
        }
      }
    } else {
      const opCode = updateOpCodes[i + 1];
      if (opCode > 0 && (opCode & 3) === 3) {
        const nodeIndex = opCode >>> 2;
        const tIcu = getTIcu(tView, nodeIndex);
        const currentIndex = lView[tIcu.currentCaseLViewIndex];
        if (currentIndex < 0) {
          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);
        }
      }
    }
    i += skipCodes;
  }
}
function applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {
  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];
  if (activeCaseIndex !== null) {
    let mask = changeMask;
    if (activeCaseIndex < 0) {
      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;
      mask = -1;
    }
    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
  }
}
function applyIcuSwitchCase(tView, tIcu, lView, value) {
  const caseIndex = getCaseIndex(tIcu, value);
  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
  if (activeCaseIndex !== caseIndex) {
    applyIcuSwitchCaseRemove(tView, tIcu, lView);
    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;
    if (caseIndex !== null) {
      const anchorRNode = lView[tIcu.anchorIdx];
      if (anchorRNode) {
        ngDevMode && assertDomNode(anchorRNode);
        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);
      }
      claimDehydratedIcuCase(lView, tIcu.anchorIdx, caseIndex);
    }
  }
}
function applyIcuSwitchCaseRemove(tView, tIcu, lView) {
  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
  if (activeCaseIndex !== null) {
    const removeCodes = tIcu.remove[activeCaseIndex];
    for (let i = 0; i < removeCodes.length; i++) {
      const nodeOrIcuIndex = removeCodes[i];
      if (nodeOrIcuIndex > 0) {
        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);
        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);
      } else {
        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);
      }
    }
  }
}
function getCaseIndex(icuExpression, bindingValue) {
  let index = icuExpression.cases.indexOf(bindingValue);
  if (index === -1) {
    switch (icuExpression.type) {
      case 1: {
        const resolvedCase = getPluralCase(bindingValue, getLocaleId());
        index = icuExpression.cases.indexOf(resolvedCase);
        if (index === -1 && resolvedCase !== "other") {
          index = icuExpression.cases.indexOf("other");
        }
        break;
      }
      case 0: {
        index = icuExpression.cases.indexOf("other");
        break;
      }
    }
  }
  return index === -1 ? null : index;
}
function i18nCreateOpCodesToString(opcodes) {
  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);
  let lines = [];
  for (let i = 0; i < createOpCodes.length; i++) {
    const opCode = createOpCodes[i++];
    const text = createOpCodes[i];
    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    const index = opCode >>> I18nCreateOpCode.SHIFT;
    lines.push(`lView[${index}] = document.${isComment ? "createComment" : "createText"}(${JSON.stringify(text)});`);
    if (appendNow) {
      lines.push(`parent.appendChild(lView[${index}]);`);
    }
  }
  return lines;
}
function i18nUpdateOpCodesToString(opcodes) {
  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  let lines = [];
  function consumeOpCode(value) {
    const ref = value >>> 2;
    const opCode = value & 3;
    switch (opCode) {
      case 0:
        return `(lView[${ref}] as Text).textContent = $$$`;
      case 1:
        const attrName = parser.consumeString();
        const sanitizationFn = parser.consumeFunction();
        const value2 = sanitizationFn ? `(${sanitizationFn})($$$)` : "$$$";
        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value2})`;
      case 2:
        return `icuSwitchCase(${ref}, $$$)`;
      case 3:
        return `icuUpdateCase(${ref})`;
    }
    throw new Error("unexpected OpCode");
  }
  while (parser.hasMore()) {
    let mask = parser.consumeNumber();
    let size = parser.consumeNumber();
    const end = parser.i + size;
    const statements = [];
    let statement = "";
    while (parser.i < end) {
      let value = parser.consumeNumberOrString();
      if (typeof value === "string") {
        statement += value;
      } else if (value < 0) {
        statement += "${lView[i" + value + "]}";
      } else {
        const opCodeText = consumeOpCode(value);
        statements.push(opCodeText.replace("$$$", "`" + statement + "`") + ";");
        statement = "";
      }
    }
    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(" ")} }`);
  }
  return lines;
}
function icuCreateOpCodesToString(opcodes) {
  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  let lines = [];
  function consumeOpCode(opCode) {
    const parent = getParentFromIcuCreateOpCode(opCode);
    const ref = getRefFromIcuCreateOpCode(opCode);
    switch (getInstructionFromIcuCreateOpCode(opCode)) {
      case 0:
        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;
      case 1:
        return `(lView[${ref}] as Element).setAttribute("${parser.consumeString()}", "${parser.consumeString()}")`;
    }
    throw new Error("Unexpected OpCode: " + getInstructionFromIcuCreateOpCode(opCode));
  }
  let lastRef = -1;
  while (parser.hasMore()) {
    let value = parser.consumeNumberStringOrMarker();
    if (value === ICU_MARKER) {
      const text = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createComment("${text}")`);
    } else if (value === ELEMENT_MARKER) {
      const text = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createElement("${text}")`);
    } else if (typeof value === "string") {
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createTextNode("${value}")`);
    } else if (typeof value === "number") {
      const line = consumeOpCode(value);
      line && lines.push(line);
    } else {
      throw new Error("Unexpected value");
    }
  }
  return lines;
}
function i18nRemoveOpCodesToString(opcodes) {
  const removeCodes = opcodes || (Array.isArray(this) ? this : []);
  let lines = [];
  for (let i = 0; i < removeCodes.length; i++) {
    const nodeOrIcuIndex = removeCodes[i];
    if (nodeOrIcuIndex > 0) {
      lines.push(`remove(lView[${nodeOrIcuIndex}])`);
    } else {
      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);
    }
  }
  return lines;
}
var OpCodeParser = class {
  i = 0;
  codes;
  constructor(codes) {
    this.codes = codes;
  }
  hasMore() {
    return this.i < this.codes.length;
  }
  consumeNumber() {
    let value = this.codes[this.i++];
    assertNumber(value, "expecting number in OpCode");
    return value;
  }
  consumeString() {
    let value = this.codes[this.i++];
    assertString(value, "expecting string in OpCode");
    return value;
  }
  consumeFunction() {
    let value = this.codes[this.i++];
    if (value === null || typeof value === "function") {
      return value;
    }
    throw new Error("expecting function in OpCode");
  }
  consumeNumberOrString() {
    let value = this.codes[this.i++];
    if (typeof value === "string") {
      return value;
    }
    assertNumber(value, "expecting number or string in OpCode");
    return value;
  }
  consumeNumberStringOrMarker() {
    let value = this.codes[this.i++];
    if (typeof value === "string" || typeof value === "number" || value == ICU_MARKER || value == ELEMENT_MARKER) {
      return value;
    }
    assertNumber(value, "expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode");
    return value;
  }
};
var BINDING_REGEXP = /�(\d+):?\d*�/gi;
var ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
var NESTED_ICU = /�(\d+)�/;
var ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/;
var MARKER = `\uFFFD`;
var SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
var PH_REGEXP = /�(\/?[#*]\d+):?\d*�/gi;
var NGSP_UNICODE_REGEXP = /\uE500/g;
function replaceNgsp(value) {
  return value.replace(NGSP_UNICODE_REGEXP, " ");
}
function attachDebugGetter(obj, debugGetter) {
  if (ngDevMode) {
    Object.defineProperty(obj, "debug", {
      get: debugGetter,
      enumerable: false
    });
  } else {
    throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");
  }
}
function i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {
  const rootTNode = getCurrentParentTNode();
  const createOpCodes = [];
  const updateOpCodes = [];
  const existingTNodeStack = [[]];
  const astStack = [[]];
  if (ngDevMode) {
    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  message = getTranslationForTemplate(message, subTemplateIndex);
  const msgParts = replaceNgsp(message).split(PH_REGEXP);
  for (let i = 0; i < msgParts.length; i++) {
    let value = msgParts[i];
    if ((i & 1) === 0) {
      const parts = i18nParseTextIntoPartsAndICU(value);
      for (let j = 0; j < parts.length; j++) {
        let part = parts[j];
        if ((j & 1) === 0) {
          const text = part;
          ngDevMode && assertString(text, "Parsed ICU part should be string");
          if (text !== "") {
            i18nStartFirstCreatePassProcessTextNode(astStack[0], tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);
          }
        } else {
          const icuExpression = part;
          if (typeof icuExpression !== "object") {
            throw new Error(`Unable to parse ICU expression in "${message}" message.`);
          }
          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : "", true);
          const icuNodeIndex = icuContainerTNode.index;
          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, "Index must be in absolute LView offset");
          icuStart(astStack[0], tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);
        }
      }
    } else {
      const isClosing = value.charCodeAt(0) === 47;
      const type = value.charCodeAt(isClosing ? 1 : 0);
      ngDevMode && assertOneOf(
        type,
        42,
        35
        /* CharCode.HASH */
      );
      const index2 = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));
      if (isClosing) {
        existingTNodeStack.shift();
        astStack.shift();
        setCurrentTNode(getCurrentParentTNode(), false);
      } else {
        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index2);
        existingTNodeStack.unshift([]);
        setCurrentTNode(tNode, true);
        const placeholderNode = {
          kind: 2,
          index: index2,
          children: [],
          type: type === 35 ? 0 : 1
          /* I18nPlaceholderType.SUBTEMPLATE */
        };
        astStack[0].push(placeholderNode);
        astStack.unshift(placeholderNode.children);
      }
    }
  }
  tView.data[index] = {
    create: createOpCodes,
    update: updateOpCodes,
    ast: astStack[0],
    parentTNodeIndex
  };
}
function createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {
  const i18nNodeIdx = allocExpando(tView, lView, 1, null);
  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;
  let parentTNode = getCurrentParentTNode();
  if (rootTNode === parentTNode) {
    parentTNode = null;
  }
  if (parentTNode === null) {
    opCode |= I18nCreateOpCode.APPEND_EAGERLY;
  }
  if (isICU) {
    opCode |= I18nCreateOpCode.COMMENT;
    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);
  }
  createOpCodes.push(opCode, text === null ? "" : text);
  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 : 1, text === null ? ngDevMode ? "{{?}}" : "" : text, null);
  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);
  const tNodeIdx = tNode.index;
  setCurrentTNode(
    tNode,
    false
    /* Text nodes are self closing */
  );
  if (parentTNode !== null && rootTNode !== parentTNode) {
    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);
  }
  return tNode;
}
function i18nStartFirstCreatePassProcessTextNode(ast, tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {
  const hasBinding = text.match(BINDING_REGEXP);
  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);
  const index = tNode.index;
  if (hasBinding) {
    generateBindingUpdateOpCodes(updateOpCodes, text, index, null, 0, null);
  }
  ast.push({
    kind: 0,
    index
  });
}
function i18nAttributesFirstPass(tView, index, values) {
  const previousElement = getCurrentTNode();
  const previousElementIndex = previousElement.index;
  const updateOpCodes = [];
  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  if (tView.firstCreatePass && tView.data[index] === null) {
    for (let i = 0; i < values.length; i += 2) {
      const attrName = values[i];
      const message = values[i + 1];
      if (message !== "") {
        if (ICU_REGEXP.test(message)) {
          throw new Error(`ICU expressions are not supported in attributes. Message: "${message}".`);
        }
        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);
      }
    }
    tView.data[index] = updateOpCodes;
  }
}
function generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {
  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, "Index must be in absolute LView offset");
  const maskIndex = updateOpCodes.length;
  const sizeIndex = maskIndex + 1;
  updateOpCodes.push(null, null);
  const startIndex = maskIndex + 2;
  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  const textParts = str.split(BINDING_REGEXP);
  let mask = 0;
  for (let j = 0; j < textParts.length; j++) {
    const textValue = textParts[j];
    if (j & 1) {
      const bindingIndex = bindingStart + parseInt(textValue, 10);
      updateOpCodes.push(-1 - bindingIndex);
      mask = mask | toMaskBit(bindingIndex);
    } else if (textValue !== "") {
      updateOpCodes.push(textValue);
    }
  }
  updateOpCodes.push(destinationNode << 2 | (attrName ? 1 : 0));
  if (attrName) {
    updateOpCodes.push(attrName, sanitizeFn);
  }
  updateOpCodes[maskIndex] = mask;
  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;
  return mask;
}
function countBindings(opCodes) {
  let count = 0;
  for (let i = 0; i < opCodes.length; i++) {
    const opCode = opCodes[i];
    if (typeof opCode === "number" && opCode < 0) {
      count++;
    }
  }
  return count;
}
function toMaskBit(bindingIndex) {
  return 1 << Math.min(bindingIndex, 31);
}
function removeInnerTemplateTranslation(message) {
  let match2;
  let res = "";
  let index = 0;
  let inTemplate = false;
  let tagMatched;
  while ((match2 = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
    if (!inTemplate) {
      res += message.substring(index, match2.index + match2[0].length);
      tagMatched = match2[1];
      inTemplate = true;
    } else {
      if (match2[0] === `${MARKER}/*${tagMatched}${MARKER}`) {
        index = match2.index;
        inTemplate = false;
      }
    }
  }
  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation "${message}"`);
  res += message.slice(index);
  return res;
}
function getTranslationForTemplate(message, subTemplateIndex) {
  if (isRootTemplateMessage(subTemplateIndex)) {
    return removeInnerTemplateTranslation(message);
  } else {
    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;
    const end = message.search(new RegExp(`${MARKER}\\/\\*\\d+:${subTemplateIndex}${MARKER}`));
    return removeInnerTemplateTranslation(message.substring(start, end));
  }
}
function icuStart(ast, tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {
  ngDevMode && assertDefined(icuExpression, "ICU expression must be defined");
  let bindingMask = 0;
  const tIcu = {
    type: icuExpression.type,
    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),
    anchorIdx,
    cases: [],
    create: [],
    remove: [],
    update: []
  };
  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);
  setTIcu(tView, anchorIdx, tIcu);
  const values = icuExpression.values;
  const cases = [];
  for (let i = 0; i < values.length; i++) {
    const valueArr = values[i];
    const nestedIcus = [];
    for (let j = 0; j < valueArr.length; j++) {
      const value = valueArr[j];
      if (typeof value !== "string") {
        const icuIndex = nestedIcus.push(value) - 1;
        valueArr[j] = `<!--\uFFFD${icuIndex}\uFFFD-->`;
      }
    }
    const caseAst = [];
    cases.push(caseAst);
    bindingMask = parseIcuCase(caseAst, tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(""), nestedIcus) | bindingMask;
  }
  if (bindingMask) {
    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);
  }
  ast.push({
    kind: 3,
    index: anchorIdx,
    cases,
    currentCaseLViewIndex: tIcu.currentCaseLViewIndex
  });
}
function parseICUBlock(pattern) {
  const cases = [];
  const values = [];
  let icuType = 1;
  let mainBinding = 0;
  pattern = pattern.replace(ICU_BLOCK_REGEXP, function(str, binding, type) {
    if (type === "select") {
      icuType = 0;
    } else {
      icuType = 1;
    }
    mainBinding = parseInt(binding.slice(1), 10);
    return "";
  });
  const parts = i18nParseTextIntoPartsAndICU(pattern);
  for (let pos = 0; pos < parts.length; ) {
    let key = parts[pos++].trim();
    if (icuType === 1) {
      key = key.replace(/\s*(?:=)?(\w+)\s*/, "$1");
    }
    if (key.length) {
      cases.push(key);
    }
    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);
    if (cases.length > values.length) {
      values.push(blocks);
    }
  }
  return {
    type: icuType,
    mainBinding,
    cases,
    values
  };
}
function i18nParseTextIntoPartsAndICU(pattern) {
  if (!pattern) {
    return [];
  }
  let prevPos = 0;
  const braceStack = [];
  const results = [];
  const braces = /[{}]/g;
  braces.lastIndex = 0;
  let match2;
  while (match2 = braces.exec(pattern)) {
    const pos = match2.index;
    if (match2[0] == "}") {
      braceStack.pop();
      if (braceStack.length == 0) {
        const block = pattern.substring(prevPos, pos);
        if (ICU_BLOCK_REGEXP.test(block)) {
          results.push(parseICUBlock(block));
        } else {
          results.push(block);
        }
        prevPos = pos + 1;
      }
    } else {
      if (braceStack.length == 0) {
        const substring2 = pattern.substring(prevPos, pos);
        results.push(substring2);
        prevPos = pos + 1;
      }
      braceStack.push("{");
    }
  }
  const substring = pattern.substring(prevPos);
  results.push(substring);
  return results;
}
function parseIcuCase(ast, tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {
  const create = [];
  const remove2 = [];
  const update = [];
  if (ngDevMode) {
    attachDebugGetter(create, icuCreateOpCodesToString);
    attachDebugGetter(remove2, i18nRemoveOpCodesToString);
    attachDebugGetter(update, i18nUpdateOpCodesToString);
  }
  tIcu.cases.push(caseName);
  tIcu.create.push(create);
  tIcu.remove.push(remove2);
  tIcu.update.push(update);
  const inertBodyHelper2 = getInertBodyHelper(getDocument());
  const inertBodyElement = inertBodyHelper2.getInertBodyElement(unsafeCaseHtml);
  ngDevMode && assertDefined(inertBodyElement, "Unable to generate inert body element");
  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;
  if (inertRootNode) {
    return walkIcuTree(ast, tView, tIcu, lView, updateOpCodes, create, remove2, update, inertRootNode, parentIdx, nestedIcus, 0);
  } else {
    return 0;
  }
}
function walkIcuTree(ast, tView, tIcu, lView, sharedUpdateOpCodes, create, remove2, update, parentNode, parentIdx, nestedIcus, depth) {
  let bindingMask = 0;
  let currentNode = parentNode.firstChild;
  while (currentNode) {
    const newIndex = allocExpando(tView, lView, 1, null);
    switch (currentNode.nodeType) {
      case Node.ELEMENT_NODE:
        const element = currentNode;
        const tagName = element.tagName.toLowerCase();
        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {
          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);
          tView.data[newIndex] = tagName;
          const elAttrs = element.attributes;
          for (let i = 0; i < elAttrs.length; i++) {
            const attr = elAttrs.item(i);
            const lowerAttrName = attr.name.toLowerCase();
            const hasBinding2 = !!attr.value.match(BINDING_REGEXP);
            if (hasBinding2) {
              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                if (URI_ATTRS[lowerAttrName]) {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);
                } else {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);
                }
              } else {
                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see ${XSS_SECURITY_URL})`);
              }
            } else {
              addCreateAttribute(create, newIndex, attr);
            }
          }
          const elementNode = {
            kind: 1,
            index: newIndex,
            children: []
          };
          ast.push(elementNode);
          bindingMask = walkIcuTree(elementNode.children, tView, tIcu, lView, sharedUpdateOpCodes, create, remove2, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;
          addRemoveNode(remove2, newIndex, depth);
        }
        break;
      case Node.TEXT_NODE:
        const value = currentNode.textContent || "";
        const hasBinding = value.match(BINDING_REGEXP);
        addCreateNodeAndAppend(create, null, hasBinding ? "" : value, parentIdx, newIndex);
        addRemoveNode(remove2, newIndex, depth);
        if (hasBinding) {
          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;
        }
        ast.push({
          kind: 0,
          index: newIndex
        });
        break;
      case Node.COMMENT_NODE:
        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || "");
        if (isNestedIcu) {
          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);
          const icuExpression = nestedIcus[nestedIcuIndex];
          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : "", parentIdx, newIndex);
          icuStart(ast, tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);
          addRemoveNestedIcu(remove2, newIndex, depth);
        }
        break;
    }
    currentNode = currentNode.nextSibling;
  }
  return bindingMask;
}
function addRemoveNode(remove2, index, depth) {
  if (depth === 0) {
    remove2.push(index);
  }
}
function addRemoveNestedIcu(remove2, index, depth) {
  if (depth === 0) {
    remove2.push(~index);
    remove2.push(index);
  }
}
function addUpdateIcuSwitch(update, icuExpression, index) {
  update.push(
    toMaskBit(icuExpression.mainBinding),
    2,
    -1 - icuExpression.mainBinding,
    index << 2 | 2
    /* I18nUpdateOpCode.IcuSwitch */
  );
}
function addUpdateIcuUpdate(update, bindingMask, index) {
  update.push(
    bindingMask,
    1,
    index << 2 | 3
    /* I18nUpdateOpCode.IcuUpdate */
  );
}
function addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {
  if (marker !== null) {
    create.push(marker);
  }
  create.push(text, createAtIdx, icuCreateOpCode(0, appendToParentIdx, createAtIdx));
}
function addCreateAttribute(create, newIndex, attr) {
  create.push(newIndex << 1 | 1, attr.name, attr.value);
}
var ROOT_TEMPLATE_ID = 0;
var PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
var PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
var PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
var PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
var PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
var PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
var PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
function i18nPostprocess(message, replacements = {}) {
  let result = message;
  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
    const matches = {};
    const templateIdsStack = [ROOT_TEMPLATE_ID];
    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {
      const content = phs || tmpl;
      const placeholders = matches[content] || [];
      if (!placeholders.length) {
        content.split("|").forEach((placeholder2) => {
          const match2 = placeholder2.match(PP_TEMPLATE_ID_REGEXP);
          const templateId2 = match2 ? parseInt(match2[1], 10) : ROOT_TEMPLATE_ID;
          const isCloseTemplateTag2 = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder2);
          placeholders.push([templateId2, isCloseTemplateTag2, placeholder2]);
        });
        matches[content] = placeholders;
      }
      if (!placeholders.length) {
        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);
      }
      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
      let idx = 0;
      for (let i = 0; i < placeholders.length; i++) {
        if (placeholders[i][0] === currentTemplateId) {
          idx = i;
          break;
        }
      }
      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];
      if (isCloseTemplateTag) {
        templateIdsStack.pop();
      } else if (currentTemplateId !== templateId) {
        templateIdsStack.push(templateId);
      }
      placeholders.splice(idx, 1);
      return placeholder;
    });
  }
  if (!Object.keys(replacements).length) {
    return result;
  }
  result = result.replace(PP_ICU_VARS_REGEXP, (match2, start, key, _type, _idx, end) => {
    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match2;
  });
  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match2, key) => {
    return replacements.hasOwnProperty(key) ? replacements[key] : match2;
  });
  result = result.replace(PP_ICUS_REGEXP, (match2, key) => {
    if (replacements.hasOwnProperty(key)) {
      const list = replacements[key];
      if (!list.length) {
        throw new Error(`i18n postprocess: unmatched ICU - ${match2} with key: ${key}`);
      }
      return list.shift();
    }
    return match2;
  });
  return result;
}
function \u0275\u0275i18nStart(index, messageIndex, subTemplateIndex = -1) {
  const tView = getTView();
  const lView = getLView();
  const adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertDefined(tView, `tView should be defined`);
  const message = getConstant(tView.consts, messageIndex);
  const parentTNode = getCurrentParentTNode();
  if (tView.firstCreatePass) {
    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);
  }
  if (tView.type === 2) {
    const componentLView = lView[DECLARATION_COMPONENT_VIEW];
    componentLView[FLAGS] |= 32;
  } else {
    lView[FLAGS] |= 32;
  }
  const tI18n = tView.data[adjustedIndex];
  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;
  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);
  const insertInFrontOf = parentTNode && parentTNode.type & 8 ? lView[parentTNode.index] : null;
  prepareI18nBlockForHydration(lView, adjustedIndex, parentTNode, subTemplateIndex);
  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);
  setInI18nBlock(true);
}
function \u0275\u0275i18nEnd() {
  setInI18nBlock(false);
}
function \u0275\u0275i18n(index, messageIndex, subTemplateIndex) {
  \u0275\u0275i18nStart(index, messageIndex, subTemplateIndex);
  \u0275\u0275i18nEnd();
}
function \u0275\u0275i18nAttributes(index, attrsIndex) {
  const tView = getTView();
  ngDevMode && assertDefined(tView, `tView should be defined`);
  const attrs = getConstant(tView.consts, attrsIndex);
  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);
}
function \u0275\u0275i18nExp(value) {
  const lView = getLView();
  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
  return \u0275\u0275i18nExp;
}
function \u0275\u0275i18nApply(index) {
  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);
}
function \u0275\u0275i18nPostprocess(message, replacements = {}) {
  return i18nPostprocess(message, replacements);
}
function wrapListener(tNode, lView, listenerFn) {
  return function wrapListenerIn_markDirtyAndPreventDefault(e2) {
    if (e2 === Function) {
      return listenerFn;
    }
    const startView = isComponentHost(tNode) ? getComponentLViewByIndex(tNode.index, lView) : lView;
    markViewDirty(
      startView,
      5
      /* NotificationSource.Listener */
    );
    const context2 = lView[CONTEXT];
    let result = executeListenerWithErrorHandling(lView, context2, listenerFn, e2);
    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;
    while (nextListenerFn) {
      result = executeListenerWithErrorHandling(lView, context2, nextListenerFn, e2) && result;
      nextListenerFn = nextListenerFn.__ngNextListenerFn__;
    }
    return result;
  };
}
function executeListenerWithErrorHandling(lView, context2, listenerFn, e2) {
  const prevConsumer = setActiveConsumer(null);
  try {
    profiler(6, context2, listenerFn);
    return listenerFn(e2) !== false;
  } catch (error) {
    handleError(lView, error);
    return false;
  } finally {
    profiler(7, context2, listenerFn);
    setActiveConsumer(prevConsumer);
  }
}
function handleError(lView, error) {
  const injector = lView[INJECTOR];
  const errorHandler2 = injector ? injector.get(ErrorHandler, null) : null;
  errorHandler2 && errorHandler2.handleError(error);
}
function listenToOutput(tNode, lView, directiveIndex, lookupName, eventName, listenerFn) {
  ngDevMode && assertIndexInRange(lView, directiveIndex);
  const instance = lView[directiveIndex];
  const tView = lView[TVIEW];
  const def = tView.data[directiveIndex];
  const propertyName = def.outputs[lookupName];
  const output2 = instance[propertyName];
  if (ngDevMode && !isOutputSubscribable(output2)) {
    throw new Error(`@Output ${propertyName} not initialized in '${instance.constructor.name}'.`);
  }
  const tCleanup = tView.firstCreatePass ? getOrCreateTViewCleanup(tView) : null;
  const lCleanup = getOrCreateLViewCleanup(lView);
  const subscription = output2.subscribe(listenerFn);
  const idx = lCleanup.length;
  lCleanup.push(listenerFn, subscription);
  tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
}
function isOutputSubscribable(value) {
  return value != null && typeof value.subscribe === "function";
}
var stashEventListener = (el, eventName, listenerFn) => {
};
function \u0275\u0275listener(eventName, listenerFn, useCapture, eventTargetResolver) {
  const lView = getLView();
  const tView = getTView();
  const tNode = getCurrentTNode();
  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);
  return \u0275\u0275listener;
}
function \u0275\u0275syntheticHostListener(eventName, listenerFn) {
  const tNode = getCurrentTNode();
  const lView = getLView();
  const tView = getTView();
  const currentDef = getCurrentDirectiveDef(tView.data);
  const renderer = loadComponentRenderer(currentDef, tNode, lView);
  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);
  return \u0275\u0275syntheticHostListener;
}
function findExistingListener(tView, lView, eventName, tNodeIdx) {
  const tCleanup = tView.cleanup;
  if (tCleanup != null) {
    for (let i = 0; i < tCleanup.length - 1; i += 2) {
      const cleanupEventName = tCleanup[i];
      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
        const lCleanup = lView[CLEANUP];
        const listenerIdxInLCleanup = tCleanup[i + 2];
        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
      }
      if (typeof cleanupEventName === "string") {
        i += 2;
      }
    }
  }
  return null;
}
function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {
  const isTNodeDirectiveHost = isDirectiveHost(tNode);
  const firstCreatePass = tView.firstCreatePass;
  const tCleanup = firstCreatePass ? getOrCreateTViewCleanup(tView) : null;
  const lCleanup = getOrCreateLViewCleanup(lView);
  ngDevMode && assertTNodeType(
    tNode,
    3 | 12
    /* TNodeType.AnyContainer */
  );
  let processOutputs = true;
  if (tNode.type & 3 || eventTargetResolver) {
    const native = getNativeByTNode(tNode, lView);
    const target = eventTargetResolver ? eventTargetResolver(native) : native;
    const lCleanupIndex = lCleanup.length;
    const idxOrTargetGetter = eventTargetResolver ? (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index;
    let existingListener = null;
    if (!eventTargetResolver && isTNodeDirectiveHost) {
      existingListener = findExistingListener(tView, lView, eventName, tNode.index);
    }
    if (existingListener !== null) {
      const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
      lastListenerFn.__ngNextListenerFn__ = listenerFn;
      existingListener.__ngLastListenerFn__ = listenerFn;
      processOutputs = false;
    } else {
      listenerFn = wrapListener(tNode, lView, listenerFn);
      stashEventListener(target, eventName, listenerFn);
      const cleanupFn = renderer.listen(target, eventName, listenerFn);
      ngDevMode && ngDevMode.rendererAddEventListener++;
      lCleanup.push(listenerFn, cleanupFn);
      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
    }
  } else {
    listenerFn = wrapListener(tNode, lView, listenerFn);
  }
  if (processOutputs) {
    const outputConfig = tNode.outputs?.[eventName];
    const hostDirectiveOutputConfig = tNode.hostDirectiveOutputs?.[eventName];
    if (hostDirectiveOutputConfig && hostDirectiveOutputConfig.length) {
      for (let i = 0; i < hostDirectiveOutputConfig.length; i += 2) {
        const index = hostDirectiveOutputConfig[i];
        const lookupName = hostDirectiveOutputConfig[i + 1];
        listenToOutput(tNode, lView, index, lookupName, eventName, listenerFn);
      }
    }
    if (outputConfig && outputConfig.length) {
      for (const index of outputConfig) {
        listenToOutput(tNode, lView, index, eventName, eventName, listenerFn);
      }
    }
  }
}
function \u0275\u0275nextContext(level = 1) {
  return nextContextImpl(level);
}
function matchingProjectionSlotIndex(tNode, projectionSlots) {
  let wildcardNgContentIndex = null;
  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);
  for (let i = 0; i < projectionSlots.length; i++) {
    const slotValue = projectionSlots[i];
    if (slotValue === "*") {
      wildcardNgContentIndex = i;
      continue;
    }
    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(
      tNode,
      slotValue,
      /* isProjectionMode */
      true
    ) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
      return i;
    }
  }
  return wildcardNgContentIndex;
}
function \u0275\u0275projectionDef(projectionSlots) {
  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];
  if (!componentNode.projection) {
    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);
    const tails = projectionHeads.slice();
    let componentChild = componentNode.child;
    while (componentChild !== null) {
      if (componentChild.type !== 128) {
        const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;
        if (slotIndex !== null) {
          if (tails[slotIndex]) {
            tails[slotIndex].projectionNext = componentChild;
          } else {
            projectionHeads[slotIndex] = componentChild;
          }
          tails[slotIndex] = componentChild;
        }
      }
      componentChild = componentChild.next;
    }
  }
}
function \u0275\u0275projection(nodeIndex, selectorIndex = 0, attrs, fallbackTemplateFn, fallbackDecls, fallbackVars) {
  const lView = getLView();
  const tView = getTView();
  const fallbackIndex = fallbackTemplateFn ? nodeIndex + 1 : null;
  if (fallbackIndex !== null) {
    declareTemplate(lView, tView, fallbackIndex, fallbackTemplateFn, fallbackDecls, fallbackVars, null, attrs);
  }
  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16, null, attrs || null);
  if (tProjectionNode.projection === null) {
    tProjectionNode.projection = selectorIndex;
  }
  setCurrentTNodeAsNotParent();
  const hydrationInfo = lView[HYDRATION];
  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();
  const componentHostNode = lView[DECLARATION_COMPONENT_VIEW][T_HOST];
  const isEmpty = componentHostNode.projection[tProjectionNode.projection] === null;
  if (isEmpty && fallbackIndex !== null) {
    insertFallbackContent(lView, tView, fallbackIndex);
  } else if (isNodeCreationMode && !isDetachedByI18n(tProjectionNode)) {
    applyProjection(tView, lView, tProjectionNode);
  }
}
function insertFallbackContent(lView, tView, fallbackIndex) {
  const adjustedIndex = HEADER_OFFSET + fallbackIndex;
  const fallbackTNode = tView.data[adjustedIndex];
  const fallbackLContainer = lView[adjustedIndex];
  ngDevMode && assertTNode(fallbackTNode);
  ngDevMode && assertLContainer(fallbackLContainer);
  const dehydratedView = findMatchingDehydratedView(fallbackLContainer, fallbackTNode.tView.ssrId);
  const fallbackLView = createAndRenderEmbeddedLView(lView, fallbackTNode, void 0, {
    dehydratedView
  });
  addLViewToLContainer(fallbackLContainer, fallbackLView, 0, shouldAddViewToDom(fallbackTNode, dehydratedView));
}
function \u0275\u0275propertyInterpolate(propName, v0, sanitizer) {
  \u0275\u0275propertyInterpolate1(propName, "", v0, "", sanitizer);
  return \u0275\u0275propertyInterpolate;
}
function \u0275\u0275propertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
  }
  return \u0275\u0275propertyInterpolate1;
}
function \u0275\u0275propertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
  }
  return \u0275\u0275propertyInterpolate2;
}
function \u0275\u0275propertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
  }
  return \u0275\u0275propertyInterpolate3;
}
function \u0275\u0275propertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
  }
  return \u0275\u0275propertyInterpolate4;
}
function \u0275\u0275propertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
  }
  return \u0275\u0275propertyInterpolate5;
}
function \u0275\u0275propertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
  }
  return \u0275\u0275propertyInterpolate6;
}
function \u0275\u0275propertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
  }
  return \u0275\u0275propertyInterpolate7;
}
function \u0275\u0275propertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
  }
  return \u0275\u0275propertyInterpolate8;
}
function \u0275\u0275propertyInterpolateV(propName, values, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    if (ngDevMode) {
      const interpolationInBetween = [values[0]];
      for (let i = 2; i < values.length; i += 2) {
        interpolationInBetween.push(values[i]);
      }
      storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
    }
  }
  return \u0275\u0275propertyInterpolateV;
}
function \u0275\u0275contentQuery(directiveIndex, predicate, flags, read) {
  createContentQuery(directiveIndex, predicate, flags, read);
}
function \u0275\u0275viewQuery(predicate, flags, read) {
  createViewQuery(predicate, flags, read);
}
function \u0275\u0275queryRefresh(queryList) {
  const lView = getLView();
  const tView = getTView();
  const queryIndex = getCurrentQueryIndex();
  setCurrentQueryIndex(queryIndex + 1);
  const tQuery = getTQuery(tView, queryIndex);
  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2) === 2)) {
    if (tQuery.matches === null) {
      queryList.reset([]);
    } else {
      const result = getQueryResults(lView, queryIndex);
      queryList.reset(result, unwrapElementRef);
      queryList.notifyOnChanges();
    }
    return true;
  }
  return false;
}
function \u0275\u0275loadQuery() {
  return loadQueryInternal(getLView(), getCurrentQueryIndex());
}
function \u0275\u0275contentQuerySignal(directiveIndex, target, predicate, flags, read) {
  bindQueryToSignal(target, createContentQuery(directiveIndex, predicate, flags, read));
}
function \u0275\u0275viewQuerySignal(target, predicate, flags, read) {
  bindQueryToSignal(target, createViewQuery(predicate, flags, read));
}
function \u0275\u0275queryAdvance(indexOffset = 1) {
  setCurrentQueryIndex(getCurrentQueryIndex() + indexOffset);
}
function store(tView, lView, index, value) {
  if (index >= tView.data.length) {
    tView.data[index] = null;
    tView.blueprint[index] = null;
  }
  lView[index] = value;
}
function \u0275\u0275reference(index) {
  const contextLView = getContextLView();
  return load(contextLView, HEADER_OFFSET + index);
}
function \u0275\u0275styleMapInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolateV(values) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275stylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate1;
}
function \u0275\u0275stylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate2;
}
function \u0275\u0275stylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate3;
}
function \u0275\u0275stylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate4;
}
function \u0275\u0275stylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate5;
}
function \u0275\u0275stylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate6;
}
function \u0275\u0275stylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate7;
}
function \u0275\u0275stylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate8;
}
function \u0275\u0275stylePropInterpolateV(prop, values, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolateV;
}
function \u0275\u0275text(index, value = "") {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "text nodes should be created before any bindings");
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1, value, null) : tView.data[adjustedIndex];
  const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);
  lView[adjustedIndex] = textNative;
  if (wasLastNodeCreated()) {
    appendChild(tView, lView, textNative, tNode);
  }
  setCurrentTNode(tNode, false);
}
var _locateOrCreateTextNode = (tView, lView, tNode, value, index) => {
  lastNodeWasCreated(true);
  return createTextNode(lView[RENDERER], value);
};
function \u0275\u0275textInterpolate(v0) {
  \u0275\u0275textInterpolate1("", v0, "");
  return \u0275\u0275textInterpolate;
}
function \u0275\u0275textInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolated = interpolation1(lView, prefix, v0, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate1;
}
function \u0275\u0275textInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate2;
}
function \u0275\u0275textInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate3;
}
function \u0275\u0275textInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate4;
}
function \u0275\u0275textInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const lView = getLView();
  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate5;
}
function \u0275\u0275textInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const lView = getLView();
  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate6;
}
function \u0275\u0275textInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate7;
}
function \u0275\u0275textInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate8;
}
function \u0275\u0275textInterpolateV(values) {
  const lView = getLView();
  const interpolated = interpolationV(lView, values);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolateV;
}
function textBindingInternal(lView, index, value) {
  ngDevMode && assertString(value, "Value should be a string");
  ngDevMode && assertNotSame(value, NO_CHANGE, "value should not be NO_CHANGE");
  ngDevMode && assertIndexInRange(lView, index);
  const element = getNativeByIndex(index, lView);
  ngDevMode && assertDefined(element, "native element should exist");
  updateTextNode(lView[RENDERER], element, value);
}
function \u0275\u0275twoWayProperty(propName, value, sanitizer) {
  if (isWritableSignal(value)) {
    value = value();
  }
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275twoWayProperty;
}
function \u0275\u0275twoWayBindingSet(target, value) {
  const canWrite = isWritableSignal(target);
  canWrite && target.set(value);
  return canWrite;
}
function \u0275\u0275twoWayListener(eventName, listenerFn) {
  const lView = getLView();
  const tView = getTView();
  const tNode = getCurrentTNode();
  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn);
  return \u0275\u0275twoWayListener;
}
var UNINITIALIZED_LET = {};
function \u0275\u0275declareLet(index) {
  const tView = getTView();
  const lView = getLView();
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = getOrCreateTNode(tView, adjustedIndex, 128, null, null);
  setCurrentTNode(tNode, false);
  store(tView, lView, adjustedIndex, UNINITIALIZED_LET);
  return \u0275\u0275declareLet;
}
function \u0275\u0275storeLet(value) {
  performanceMarkFeature("NgLet");
  const tView = getTView();
  const lView = getLView();
  const index = getSelectedIndex();
  store(tView, lView, index, value);
  return value;
}
function \u0275\u0275readContextLet(index) {
  const contextLView = getContextLView();
  const value = load(contextLView, HEADER_OFFSET + index);
  if (value === UNINITIALIZED_LET) {
    throw new RuntimeError(314, ngDevMode && "Attempting to access a @let declaration whose value is not available yet");
  }
  return value;
}
function \u0275\u0275attachSourceLocations(templatePath, locations) {
  const tView = getTView();
  const lView = getLView();
  const renderer = lView[RENDERER];
  const attributeName = "data-ng-source-location";
  for (const [index, offset, line, column] of locations) {
    const tNode = getTNode(tView, index + HEADER_OFFSET);
    ngDevMode && assertTNodeType(
      tNode,
      2
      /* TNodeType.Element */
    );
    const node = getNativeByIndex(index + HEADER_OFFSET, lView);
    if (!node.hasAttribute(attributeName)) {
      const attributeValue = `${templatePath}@o:${offset},l:${line},c:${column}`;
      renderer.setAttribute(node, attributeName, attributeValue);
    }
  }
}
function providersResolver(def, providers, viewProviders) {
  const tView = getTView();
  if (tView.firstCreatePass) {
    const isComponent2 = isComponentDef(def);
    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent2, true);
    resolveProvider(providers, tView.data, tView.blueprint, isComponent2, false);
  }
}
function resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent2, isViewProvider) {
  provider = resolveForwardRef(provider);
  if (Array.isArray(provider)) {
    for (let i = 0; i < provider.length; i++) {
      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent2, isViewProvider);
    }
  } else {
    const tView = getTView();
    const lView = getLView();
    const tNode = getCurrentTNode();
    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
    const providerFactory = providerToFactory(provider);
    if (ngDevMode) {
      const injector = new NodeInjector(tNode, lView);
      runInInjectorProfilerContext(injector, token, () => {
        emitProviderConfiguredEvent(provider, isViewProvider);
      });
    }
    const beginIndex = tNode.providerIndexes & 1048575;
    const endIndex = tNode.directiveStart;
    const cptViewProvidersCount = tNode.providerIndexes >> 20;
    if (isTypeProvider(provider) || !provider.multi) {
      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, \u0275\u0275directiveInject);
      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);
      if (existingFactoryIndex === -1) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;
        if (isViewProvider) {
          tNode.providerIndexes += 1048576;
        }
        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        lInjectablesBlueprint[existingFactoryIndex] = factory;
        lView[existingFactoryIndex] = factory;
      }
    } else {
      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];
      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];
      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent2, providerFactory);
        if (!isViewProvider && doesViewProvidersFactoryExist) {
          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;
        }
        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;
        if (isViewProvider) {
          tNode.providerIndexes += 1048576;
        }
        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent2);
        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);
      }
      if (!isViewProvider && isComponent2 && doesViewProvidersFactoryExist) {
        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
      }
    }
  }
}
function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
  const providerIsTypeProvider = isTypeProvider(provider);
  const providerIsClassProvider = isClassProvider(provider);
  if (providerIsTypeProvider || providerIsClassProvider) {
    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;
    const prototype = classToken.prototype;
    const ngOnDestroy = prototype.ngOnDestroy;
    if (ngOnDestroy) {
      const hooks = tView.destroyHooks || (tView.destroyHooks = []);
      if (!providerIsTypeProvider && provider.multi) {
        ngDevMode && assertDefined(indexInFactory, "indexInFactory when registering multi factory destroy hook");
        const existingCallbacksIndex = hooks.indexOf(contextIndex);
        if (existingCallbacksIndex === -1) {
          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
        } else {
          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
        }
      } else {
        hooks.push(contextIndex, ngOnDestroy);
      }
    }
  }
}
function multiFactoryAdd(multiFactory2, factory, isComponentProvider) {
  if (isComponentProvider) {
    multiFactory2.componentProviders++;
  }
  return multiFactory2.multi.push(factory) - 1;
}
function indexOf(item, arr, begin, end) {
  for (let i = begin; i < end; i++) {
    if (arr[i] === item) return i;
  }
  return -1;
}
function multiProvidersFactoryResolver(_, tData, lData, tNode) {
  return multiResolve(this.multi, []);
}
function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
  const factories = this.multi;
  let result;
  if (this.providerFactory) {
    const componentCount = this.providerFactory.componentProviders;
    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);
    result = multiProviders.slice(0, componentCount);
    multiResolve(factories, result);
    for (let i = componentCount; i < multiProviders.length; i++) {
      result.push(multiProviders[i]);
    }
  } else {
    result = [];
    multiResolve(factories, result);
  }
  return result;
}
function multiResolve(factories, result) {
  for (let i = 0; i < factories.length; i++) {
    const factory = factories[i];
    result.push(factory());
  }
  return result;
}
function multiFactory(factoryFn, index, isViewProvider, isComponent2, f) {
  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, \u0275\u0275directiveInject);
  factory.multi = [];
  factory.index = index;
  factory.componentProviders = 0;
  multiFactoryAdd(factory, f, isComponent2 && !isViewProvider);
  return factory;
}
function \u0275\u0275ProvidersFeature(providers, viewProviders = []) {
  return (definition) => {
    definition.providersResolver = (def, processProvidersFn) => {
      return providersResolver(
        def,
        //
        processProvidersFn ? processProvidersFn(providers) : providers,
        //
        viewProviders
      );
    };
  };
}
function \u0275\u0275ExternalStylesFeature(styleUrls) {
  return (definition) => {
    if (styleUrls.length < 1) {
      return;
    }
    definition.getExternalStyles = (encapsulationId) => {
      const urls = styleUrls.map((value) => value + "?ngcomp" + (encapsulationId ? "=" + encodeURIComponent(encapsulationId) : "") + "&e=" + definition.encapsulation);
      return urls;
    };
  };
}
function \u0275\u0275setComponentScope(type, directives, pipes) {
  const def = type.\u0275cmp;
  def.directiveDefs = extractDefListOrFactory(
    directives,
    /* pipeDef */
    false
  );
  def.pipeDefs = extractDefListOrFactory(
    pipes,
    /* pipeDef */
    true
  );
}
function \u0275\u0275setNgModuleScope(type, scope) {
  return noSideEffects(() => {
    const ngModuleDef = getNgModuleDef(type, true);
    ngModuleDef.declarations = convertToTypeArray(scope.declarations || EMPTY_ARRAY);
    ngModuleDef.imports = convertToTypeArray(scope.imports || EMPTY_ARRAY);
    ngModuleDef.exports = convertToTypeArray(scope.exports || EMPTY_ARRAY);
    if (scope.bootstrap) {
      ngModuleDef.bootstrap = convertToTypeArray(scope.bootstrap);
    }
    depsTracker.registerNgModule(type, scope);
  });
}
function convertToTypeArray(values) {
  if (typeof values === "function") {
    return values;
  }
  const flattenValues = flatten(values);
  if (flattenValues.some(isForwardRef)) {
    return () => flattenValues.map(resolveForwardRef).map(maybeUnwrapModuleWithProviders);
  } else {
    return flattenValues.map(maybeUnwrapModuleWithProviders);
  }
}
function maybeUnwrapModuleWithProviders(value) {
  return isModuleWithProviders(value) ? value.ngModule : value;
}
function \u0275\u0275pureFunction0(slotOffset, pureFn, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);
}
function \u0275\u0275pureFunction1(slotOffset, pureFn, exp, thisArg) {
  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
}
function \u0275\u0275pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
}
function \u0275\u0275pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
}
function \u0275\u0275pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
}
function \u0275\u0275pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);
}
function \u0275\u0275pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);
}
function \u0275\u0275pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);
}
function \u0275\u0275pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);
}
function \u0275\u0275pureFunctionV(slotOffset, pureFn, exps, thisArg) {
  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
}
function getPureFunctionReturnValue(lView, returnValueIndex) {
  ngDevMode && assertIndexInRange(lView, returnValueIndex);
  const lastReturnValue = lView[returnValueIndex];
  return lastReturnValue === NO_CHANGE ? void 0 : lastReturnValue;
}
function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);
}
function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);
}
function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);
}
function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);
}
function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
  let bindingIndex = bindingRoot + slotOffset;
  let different = false;
  for (let i = 0; i < exps.length; i++) {
    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
  }
  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);
}
function \u0275\u0275pipe(index, pipeName) {
  const tView = getTView();
  let pipeDef;
  const adjustedIndex = index + HEADER_OFFSET;
  if (tView.firstCreatePass) {
    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);
    tView.data[adjustedIndex] = pipeDef;
    if (pipeDef.onDestroy) {
      (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);
    }
  } else {
    pipeDef = tView.data[adjustedIndex];
  }
  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
  let previousInjectorProfilerContext;
  if (ngDevMode) {
    previousInjectorProfilerContext = setInjectorProfilerContext({
      injector: new NodeInjector(getCurrentTNode(), getLView()),
      token: pipeDef.type
    });
  }
  const previousInjectImplementation = setInjectImplementation(\u0275\u0275directiveInject);
  try {
    const previousIncludeViewProviders = setIncludeViewProviders(false);
    const pipeInstance = pipeFactory();
    setIncludeViewProviders(previousIncludeViewProviders);
    store(tView, getLView(), adjustedIndex, pipeInstance);
    return pipeInstance;
  } finally {
    setInjectImplementation(previousInjectImplementation);
    ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext);
  }
}
function getPipeDef(name, registry) {
  if (registry) {
    if (ngDevMode) {
      const pipes = registry.filter((pipe2) => pipe2.name === name);
      if (pipes.length > 1) {
        console.warn(formatRuntimeError(313, getMultipleMatchingPipesMessage(name)));
      }
    }
    for (let i = registry.length - 1; i >= 0; i--) {
      const pipeDef = registry[i];
      if (name === pipeDef.name) {
        return pipeDef;
      }
    }
  }
  if (ngDevMode) {
    throw new RuntimeError(-302, getPipeNotFoundErrorMessage(name));
  }
  return;
}
function getMultipleMatchingPipesMessage(name) {
  const lView = getLView();
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  const hostIsStandalone = isHostComponentStandalone(lView);
  const componentInfoMessage = context2 ? ` in the '${context2.constructor.name}' component` : "";
  const verifyMessage = `check ${hostIsStandalone ? "'@Component.imports' of this component" : "the imports of this module"}`;
  const errorMessage = `Multiple pipes match the name \`${name}\`${componentInfoMessage}. ${verifyMessage}`;
  return errorMessage;
}
function getPipeNotFoundErrorMessage(name) {
  const lView = getLView();
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  const hostIsStandalone = isHostComponentStandalone(lView);
  const componentInfoMessage = context2 ? ` in the '${context2.constructor.name}' component` : "";
  const verifyMessage = `Verify that it is ${hostIsStandalone ? "included in the '@Component.imports' of this component" : "declared or imported in this module"}`;
  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;
  return errorMessage;
}
function \u0275\u0275pipeBind1(index, offset, v1) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), offset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);
}
function \u0275\u0275pipeBind2(index, slotOffset, v1, v2) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);
}
function \u0275\u0275pipeBind3(index, slotOffset, v1, v2, v3) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);
}
function \u0275\u0275pipeBind4(index, slotOffset, v1, v2, v3, v4) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);
}
function \u0275\u0275pipeBindV(index, slotOffset, values) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);
}
function isPure(lView, index) {
  return lView[TVIEW].data[index].pure;
}
function \u0275\u0275templateRefExtractor(tNode, lView) {
  return createTemplateRef(tNode, lView);
}
function \u0275\u0275getComponentDepsFactory(type, rawImports) {
  return () => {
    try {
      return depsTracker.getComponentDependencies(type, rawImports).dependencies;
    } catch (e2) {
      console.error(`Computing dependencies in local compilation mode for the component "${type.name}" failed with the exception:`, e2);
      throw e2;
    }
  };
}
function \u0275setClassDebugInfo(type, debugInfo) {
  const def = getComponentDef(type);
  if (def !== null) {
    def.debugInfo = debugInfo;
  }
}
function \u0275\u0275replaceMetadata(type, applyMetadata, namespaces, locals, importMeta = null, id = null) {
  ngDevMode && assertComponentDef(type);
  const currentDef = getComponentDef(type);
  applyMetadata.apply(null, [type, namespaces, ...locals]);
  const {
    newDef,
    oldDef
  } = mergeWithExistingDefinition(currentDef, getComponentDef(type));
  type[NG_COMP_DEF] = newDef;
  if (oldDef.tView) {
    const trackedViews = getTrackedLViews().values();
    for (const root of trackedViews) {
      if (isRootView(root) && root[PARENT] === null) {
        recreateMatchingLViews(importMeta, id, newDef, oldDef, root);
      }
    }
  }
}
function mergeWithExistingDefinition(currentDef, newDef) {
  const clone = __spreadValues({}, currentDef);
  const replacement = Object.assign(currentDef, newDef, {
    // We need to keep the existing directive and pipe defs, because they can get patched on
    // by a call to `setComponentScope` from a module file. That call won't make it into the
    // HMR replacement function, because it lives in an entirely different file.
    directiveDefs: clone.directiveDefs,
    pipeDefs: clone.pipeDefs,
    // Preserve the old `setInput` function, because it has some state.
    // This is fine, because the component instance is preserved as well.
    setInput: clone.setInput,
    // Externally this is redundant since we redeclare the definition using the original type.
    // Internally we may receive a definition with an alternate, but identical, type so we have
    // to ensure that the original one is preserved.
    type: clone.type
  });
  ngDevMode && assertEqual(replacement, currentDef, "Expected definition to be merged in place");
  return {
    newDef: replacement,
    oldDef: clone
  };
}
function recreateMatchingLViews(importMeta, id, newDef, oldDef, rootLView) {
  ngDevMode && assertDefined(oldDef.tView, "Expected a component definition that has been instantiated at least once");
  const tView = rootLView[TVIEW];
  if (tView === oldDef.tView) {
    ngDevMode && assertComponentDef(oldDef.type);
    recreateLView(importMeta, id, newDef, oldDef, rootLView);
    return;
  }
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    const current = rootLView[i];
    if (isLContainer(current)) {
      if (isLView(current[HOST])) {
        recreateMatchingLViews(importMeta, id, newDef, oldDef, current[HOST]);
      }
      for (let j = CONTAINER_HEADER_OFFSET; j < current.length; j++) {
        recreateMatchingLViews(importMeta, id, newDef, oldDef, current[j]);
      }
    } else if (isLView(current)) {
      recreateMatchingLViews(importMeta, id, newDef, oldDef, current);
    }
  }
}
function clearRendererCache(factory, def) {
  factory.componentReplaced?.(def.id);
}
function recreateLView(importMeta, id, newDef, oldDef, lView) {
  const instance = lView[CONTEXT];
  let host = lView[HOST];
  const parentLView = lView[PARENT];
  ngDevMode && assertLView(parentLView);
  const tNode = lView[T_HOST];
  ngDevMode && assertTNodeType(
    tNode,
    2
    /* TNodeType.Element */
  );
  ngDevMode && assertNotEqual(newDef, oldDef, "Expected different component definition");
  const zone = lView[INJECTOR].get(NgZone, null);
  const recreate = () => {
    if (oldDef.encapsulation === ViewEncapsulation.ShadowDom) {
      const newHost = host.cloneNode(false);
      host.replaceWith(newHost);
      host = newHost;
    }
    const newTView = getOrCreateComponentTView(newDef);
    const newLView = createLView(
      parentLView,
      newTView,
      instance,
      getInitialLViewFlagsFromDef(newDef),
      host,
      tNode,
      null,
      null,
      // The renderer will be created a bit further down once the old one is destroyed.
      null,
      null,
      null
    );
    replaceLViewInTree(parentLView, lView, newLView, tNode.index);
    destroyLView(lView[TVIEW], lView);
    const rendererFactory = lView[ENVIRONMENT].rendererFactory;
    clearRendererCache(rendererFactory, oldDef);
    newLView[RENDERER] = rendererFactory.createRenderer(host, newDef);
    removeViewFromDOM(lView[TVIEW], lView);
    resetProjectionState(tNode);
    renderView(newTView, newLView, instance);
    refreshView(newTView, newLView, newTView.template, instance);
  };
  if (zone === null) {
    executeWithInvalidateFallback(importMeta, id, recreate);
  } else {
    zone.run(() => executeWithInvalidateFallback(importMeta, id, recreate));
  }
}
function executeWithInvalidateFallback(importMeta, id, callback) {
  try {
    callback();
  } catch (e2) {
    const error = e2;
    if (id !== null && error.message) {
      const toLog = error.message + (error.stack ? "\n" + error.stack : "");
      importMeta?.hot?.send?.("angular:invalidate", {
        id,
        message: toLog,
        error: true
      });
    }
    throw e2;
  }
}
function replaceLViewInTree(parentLView, oldLView, newLView, index) {
  for (let i = HEADER_OFFSET; i < parentLView[TVIEW].bindingStartIndex; i++) {
    const current = parentLView[i];
    if ((isLView(current) || isLContainer(current)) && current[NEXT] === oldLView) {
      current[NEXT] = newLView;
      break;
    }
  }
  if (parentLView[CHILD_HEAD] === oldLView) {
    parentLView[CHILD_HEAD] = newLView;
  }
  if (parentLView[CHILD_TAIL] === oldLView) {
    parentLView[CHILD_TAIL] = newLView;
  }
  newLView[NEXT] = oldLView[NEXT];
  oldLView[NEXT] = null;
  parentLView[index] = newLView;
}
function resetProjectionState(tNode) {
  if (tNode.projection !== null) {
    for (const current of tNode.projection) {
      if (isTNodeShape(current)) {
        current.projectionNext = null;
        current.flags &= -3;
      }
    }
    tNode.projection = null;
  }
}
var angularCoreEnv = /* @__PURE__ */ (() => ({
  "\u0275\u0275attribute": \u0275\u0275attribute,
  "\u0275\u0275attributeInterpolate1": \u0275\u0275attributeInterpolate1,
  "\u0275\u0275attributeInterpolate2": \u0275\u0275attributeInterpolate2,
  "\u0275\u0275attributeInterpolate3": \u0275\u0275attributeInterpolate3,
  "\u0275\u0275attributeInterpolate4": \u0275\u0275attributeInterpolate4,
  "\u0275\u0275attributeInterpolate5": \u0275\u0275attributeInterpolate5,
  "\u0275\u0275attributeInterpolate6": \u0275\u0275attributeInterpolate6,
  "\u0275\u0275attributeInterpolate7": \u0275\u0275attributeInterpolate7,
  "\u0275\u0275attributeInterpolate8": \u0275\u0275attributeInterpolate8,
  "\u0275\u0275attributeInterpolateV": \u0275\u0275attributeInterpolateV,
  "\u0275\u0275defineComponent": \u0275\u0275defineComponent,
  "\u0275\u0275defineDirective": \u0275\u0275defineDirective,
  "\u0275\u0275defineInjectable": \u0275\u0275defineInjectable,
  "\u0275\u0275defineInjector": \u0275\u0275defineInjector,
  "\u0275\u0275defineNgModule": \u0275\u0275defineNgModule,
  "\u0275\u0275definePipe": \u0275\u0275definePipe,
  "\u0275\u0275directiveInject": \u0275\u0275directiveInject,
  "\u0275\u0275getInheritedFactory": \u0275\u0275getInheritedFactory,
  "\u0275\u0275inject": \u0275\u0275inject,
  "\u0275\u0275injectAttribute": \u0275\u0275injectAttribute,
  "\u0275\u0275invalidFactory": \u0275\u0275invalidFactory,
  "\u0275\u0275invalidFactoryDep": \u0275\u0275invalidFactoryDep,
  "\u0275\u0275templateRefExtractor": \u0275\u0275templateRefExtractor,
  "\u0275\u0275resetView": \u0275\u0275resetView,
  "\u0275\u0275HostDirectivesFeature": \u0275\u0275HostDirectivesFeature,
  "\u0275\u0275NgOnChangesFeature": \u0275\u0275NgOnChangesFeature,
  "\u0275\u0275ProvidersFeature": \u0275\u0275ProvidersFeature,
  "\u0275\u0275CopyDefinitionFeature": \u0275\u0275CopyDefinitionFeature,
  "\u0275\u0275InheritDefinitionFeature": \u0275\u0275InheritDefinitionFeature,
  "\u0275\u0275ExternalStylesFeature": \u0275\u0275ExternalStylesFeature,
  "\u0275\u0275nextContext": \u0275\u0275nextContext,
  "\u0275\u0275namespaceHTML": \u0275\u0275namespaceHTML,
  "\u0275\u0275namespaceMathML": \u0275\u0275namespaceMathML,
  "\u0275\u0275namespaceSVG": \u0275\u0275namespaceSVG,
  "\u0275\u0275enableBindings": \u0275\u0275enableBindings,
  "\u0275\u0275disableBindings": \u0275\u0275disableBindings,
  "\u0275\u0275elementStart": \u0275\u0275elementStart,
  "\u0275\u0275elementEnd": \u0275\u0275elementEnd,
  "\u0275\u0275element": \u0275\u0275element,
  "\u0275\u0275elementContainerStart": \u0275\u0275elementContainerStart,
  "\u0275\u0275elementContainerEnd": \u0275\u0275elementContainerEnd,
  "\u0275\u0275elementContainer": \u0275\u0275elementContainer,
  "\u0275\u0275pureFunction0": \u0275\u0275pureFunction0,
  "\u0275\u0275pureFunction1": \u0275\u0275pureFunction1,
  "\u0275\u0275pureFunction2": \u0275\u0275pureFunction2,
  "\u0275\u0275pureFunction3": \u0275\u0275pureFunction3,
  "\u0275\u0275pureFunction4": \u0275\u0275pureFunction4,
  "\u0275\u0275pureFunction5": \u0275\u0275pureFunction5,
  "\u0275\u0275pureFunction6": \u0275\u0275pureFunction6,
  "\u0275\u0275pureFunction7": \u0275\u0275pureFunction7,
  "\u0275\u0275pureFunction8": \u0275\u0275pureFunction8,
  "\u0275\u0275pureFunctionV": \u0275\u0275pureFunctionV,
  "\u0275\u0275getCurrentView": \u0275\u0275getCurrentView,
  "\u0275\u0275restoreView": \u0275\u0275restoreView,
  "\u0275\u0275listener": \u0275\u0275listener,
  "\u0275\u0275projection": \u0275\u0275projection,
  "\u0275\u0275syntheticHostProperty": \u0275\u0275syntheticHostProperty,
  "\u0275\u0275syntheticHostListener": \u0275\u0275syntheticHostListener,
  "\u0275\u0275pipeBind1": \u0275\u0275pipeBind1,
  "\u0275\u0275pipeBind2": \u0275\u0275pipeBind2,
  "\u0275\u0275pipeBind3": \u0275\u0275pipeBind3,
  "\u0275\u0275pipeBind4": \u0275\u0275pipeBind4,
  "\u0275\u0275pipeBindV": \u0275\u0275pipeBindV,
  "\u0275\u0275projectionDef": \u0275\u0275projectionDef,
  "\u0275\u0275hostProperty": \u0275\u0275hostProperty,
  "\u0275\u0275property": \u0275\u0275property,
  "\u0275\u0275propertyInterpolate": \u0275\u0275propertyInterpolate,
  "\u0275\u0275propertyInterpolate1": \u0275\u0275propertyInterpolate1,
  "\u0275\u0275propertyInterpolate2": \u0275\u0275propertyInterpolate2,
  "\u0275\u0275propertyInterpolate3": \u0275\u0275propertyInterpolate3,
  "\u0275\u0275propertyInterpolate4": \u0275\u0275propertyInterpolate4,
  "\u0275\u0275propertyInterpolate5": \u0275\u0275propertyInterpolate5,
  "\u0275\u0275propertyInterpolate6": \u0275\u0275propertyInterpolate6,
  "\u0275\u0275propertyInterpolate7": \u0275\u0275propertyInterpolate7,
  "\u0275\u0275propertyInterpolate8": \u0275\u0275propertyInterpolate8,
  "\u0275\u0275propertyInterpolateV": \u0275\u0275propertyInterpolateV,
  "\u0275\u0275pipe": \u0275\u0275pipe,
  "\u0275\u0275queryRefresh": \u0275\u0275queryRefresh,
  "\u0275\u0275queryAdvance": \u0275\u0275queryAdvance,
  "\u0275\u0275viewQuery": \u0275\u0275viewQuery,
  "\u0275\u0275viewQuerySignal": \u0275\u0275viewQuerySignal,
  "\u0275\u0275loadQuery": \u0275\u0275loadQuery,
  "\u0275\u0275contentQuery": \u0275\u0275contentQuery,
  "\u0275\u0275contentQuerySignal": \u0275\u0275contentQuerySignal,
  "\u0275\u0275reference": \u0275\u0275reference,
  "\u0275\u0275classMap": \u0275\u0275classMap,
  "\u0275\u0275classMapInterpolate1": \u0275\u0275classMapInterpolate1,
  "\u0275\u0275classMapInterpolate2": \u0275\u0275classMapInterpolate2,
  "\u0275\u0275classMapInterpolate3": \u0275\u0275classMapInterpolate3,
  "\u0275\u0275classMapInterpolate4": \u0275\u0275classMapInterpolate4,
  "\u0275\u0275classMapInterpolate5": \u0275\u0275classMapInterpolate5,
  "\u0275\u0275classMapInterpolate6": \u0275\u0275classMapInterpolate6,
  "\u0275\u0275classMapInterpolate7": \u0275\u0275classMapInterpolate7,
  "\u0275\u0275classMapInterpolate8": \u0275\u0275classMapInterpolate8,
  "\u0275\u0275classMapInterpolateV": \u0275\u0275classMapInterpolateV,
  "\u0275\u0275styleMap": \u0275\u0275styleMap,
  "\u0275\u0275styleMapInterpolate1": \u0275\u0275styleMapInterpolate1,
  "\u0275\u0275styleMapInterpolate2": \u0275\u0275styleMapInterpolate2,
  "\u0275\u0275styleMapInterpolate3": \u0275\u0275styleMapInterpolate3,
  "\u0275\u0275styleMapInterpolate4": \u0275\u0275styleMapInterpolate4,
  "\u0275\u0275styleMapInterpolate5": \u0275\u0275styleMapInterpolate5,
  "\u0275\u0275styleMapInterpolate6": \u0275\u0275styleMapInterpolate6,
  "\u0275\u0275styleMapInterpolate7": \u0275\u0275styleMapInterpolate7,
  "\u0275\u0275styleMapInterpolate8": \u0275\u0275styleMapInterpolate8,
  "\u0275\u0275styleMapInterpolateV": \u0275\u0275styleMapInterpolateV,
  "\u0275\u0275styleProp": \u0275\u0275styleProp,
  "\u0275\u0275stylePropInterpolate1": \u0275\u0275stylePropInterpolate1,
  "\u0275\u0275stylePropInterpolate2": \u0275\u0275stylePropInterpolate2,
  "\u0275\u0275stylePropInterpolate3": \u0275\u0275stylePropInterpolate3,
  "\u0275\u0275stylePropInterpolate4": \u0275\u0275stylePropInterpolate4,
  "\u0275\u0275stylePropInterpolate5": \u0275\u0275stylePropInterpolate5,
  "\u0275\u0275stylePropInterpolate6": \u0275\u0275stylePropInterpolate6,
  "\u0275\u0275stylePropInterpolate7": \u0275\u0275stylePropInterpolate7,
  "\u0275\u0275stylePropInterpolate8": \u0275\u0275stylePropInterpolate8,
  "\u0275\u0275stylePropInterpolateV": \u0275\u0275stylePropInterpolateV,
  "\u0275\u0275classProp": \u0275\u0275classProp,
  "\u0275\u0275advance": \u0275\u0275advance,
  "\u0275\u0275template": \u0275\u0275template,
  "\u0275\u0275conditional": \u0275\u0275conditional,
  "\u0275\u0275defer": \u0275\u0275defer,
  "\u0275\u0275deferWhen": \u0275\u0275deferWhen,
  "\u0275\u0275deferOnIdle": \u0275\u0275deferOnIdle,
  "\u0275\u0275deferOnImmediate": \u0275\u0275deferOnImmediate,
  "\u0275\u0275deferOnTimer": \u0275\u0275deferOnTimer,
  "\u0275\u0275deferOnHover": \u0275\u0275deferOnHover,
  "\u0275\u0275deferOnInteraction": \u0275\u0275deferOnInteraction,
  "\u0275\u0275deferOnViewport": \u0275\u0275deferOnViewport,
  "\u0275\u0275deferPrefetchWhen": \u0275\u0275deferPrefetchWhen,
  "\u0275\u0275deferPrefetchOnIdle": \u0275\u0275deferPrefetchOnIdle,
  "\u0275\u0275deferPrefetchOnImmediate": \u0275\u0275deferPrefetchOnImmediate,
  "\u0275\u0275deferPrefetchOnTimer": \u0275\u0275deferPrefetchOnTimer,
  "\u0275\u0275deferPrefetchOnHover": \u0275\u0275deferPrefetchOnHover,
  "\u0275\u0275deferPrefetchOnInteraction": \u0275\u0275deferPrefetchOnInteraction,
  "\u0275\u0275deferPrefetchOnViewport": \u0275\u0275deferPrefetchOnViewport,
  "\u0275\u0275deferHydrateWhen": \u0275\u0275deferHydrateWhen,
  "\u0275\u0275deferHydrateNever": \u0275\u0275deferHydrateNever,
  "\u0275\u0275deferHydrateOnIdle": \u0275\u0275deferHydrateOnIdle,
  "\u0275\u0275deferHydrateOnImmediate": \u0275\u0275deferHydrateOnImmediate,
  "\u0275\u0275deferHydrateOnTimer": \u0275\u0275deferHydrateOnTimer,
  "\u0275\u0275deferHydrateOnHover": \u0275\u0275deferHydrateOnHover,
  "\u0275\u0275deferHydrateOnInteraction": \u0275\u0275deferHydrateOnInteraction,
  "\u0275\u0275deferHydrateOnViewport": \u0275\u0275deferHydrateOnViewport,
  "\u0275\u0275deferEnableTimerScheduling": \u0275\u0275deferEnableTimerScheduling,
  "\u0275\u0275repeater": \u0275\u0275repeater,
  "\u0275\u0275repeaterCreate": \u0275\u0275repeaterCreate,
  "\u0275\u0275repeaterTrackByIndex": \u0275\u0275repeaterTrackByIndex,
  "\u0275\u0275repeaterTrackByIdentity": \u0275\u0275repeaterTrackByIdentity,
  "\u0275\u0275componentInstance": \u0275\u0275componentInstance,
  "\u0275\u0275text": \u0275\u0275text,
  "\u0275\u0275textInterpolate": \u0275\u0275textInterpolate,
  "\u0275\u0275textInterpolate1": \u0275\u0275textInterpolate1,
  "\u0275\u0275textInterpolate2": \u0275\u0275textInterpolate2,
  "\u0275\u0275textInterpolate3": \u0275\u0275textInterpolate3,
  "\u0275\u0275textInterpolate4": \u0275\u0275textInterpolate4,
  "\u0275\u0275textInterpolate5": \u0275\u0275textInterpolate5,
  "\u0275\u0275textInterpolate6": \u0275\u0275textInterpolate6,
  "\u0275\u0275textInterpolate7": \u0275\u0275textInterpolate7,
  "\u0275\u0275textInterpolate8": \u0275\u0275textInterpolate8,
  "\u0275\u0275textInterpolateV": \u0275\u0275textInterpolateV,
  "\u0275\u0275i18n": \u0275\u0275i18n,
  "\u0275\u0275i18nAttributes": \u0275\u0275i18nAttributes,
  "\u0275\u0275i18nExp": \u0275\u0275i18nExp,
  "\u0275\u0275i18nStart": \u0275\u0275i18nStart,
  "\u0275\u0275i18nEnd": \u0275\u0275i18nEnd,
  "\u0275\u0275i18nApply": \u0275\u0275i18nApply,
  "\u0275\u0275i18nPostprocess": \u0275\u0275i18nPostprocess,
  "\u0275\u0275resolveWindow": \u0275\u0275resolveWindow,
  "\u0275\u0275resolveDocument": \u0275\u0275resolveDocument,
  "\u0275\u0275resolveBody": \u0275\u0275resolveBody,
  "\u0275\u0275setComponentScope": \u0275\u0275setComponentScope,
  "\u0275\u0275setNgModuleScope": \u0275\u0275setNgModuleScope,
  "\u0275\u0275registerNgModuleType": registerNgModuleType,
  "\u0275\u0275getComponentDepsFactory": \u0275\u0275getComponentDepsFactory,
  "\u0275setClassDebugInfo": \u0275setClassDebugInfo,
  "\u0275\u0275declareLet": \u0275\u0275declareLet,
  "\u0275\u0275storeLet": \u0275\u0275storeLet,
  "\u0275\u0275readContextLet": \u0275\u0275readContextLet,
  "\u0275\u0275attachSourceLocations": \u0275\u0275attachSourceLocations,
  "\u0275\u0275sanitizeHtml": \u0275\u0275sanitizeHtml,
  "\u0275\u0275sanitizeStyle": \u0275\u0275sanitizeStyle,
  "\u0275\u0275sanitizeResourceUrl": \u0275\u0275sanitizeResourceUrl,
  "\u0275\u0275sanitizeScript": \u0275\u0275sanitizeScript,
  "\u0275\u0275sanitizeUrl": \u0275\u0275sanitizeUrl,
  "\u0275\u0275sanitizeUrlOrResourceUrl": \u0275\u0275sanitizeUrlOrResourceUrl,
  "\u0275\u0275trustConstantHtml": \u0275\u0275trustConstantHtml,
  "\u0275\u0275trustConstantResourceUrl": \u0275\u0275trustConstantResourceUrl,
  "\u0275\u0275validateIframeAttribute": \u0275\u0275validateIframeAttribute,
  "forwardRef": forwardRef,
  "resolveForwardRef": resolveForwardRef,
  "\u0275\u0275twoWayProperty": \u0275\u0275twoWayProperty,
  "\u0275\u0275twoWayBindingSet": \u0275\u0275twoWayBindingSet,
  "\u0275\u0275twoWayListener": \u0275\u0275twoWayListener,
  "\u0275\u0275replaceMetadata": \u0275\u0275replaceMetadata
}))();
var jitOptions = null;
function setJitOptions(options) {
  if (jitOptions !== null) {
    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
      ngDevMode && console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set.");
      return;
    }
    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
      ngDevMode && console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set.");
      return;
    }
  }
  jitOptions = options;
}
function getJitOptions() {
  return jitOptions;
}
var moduleQueue = [];
function enqueueModuleForDelayedScoping(moduleType, ngModule) {
  moduleQueue.push({
    moduleType,
    ngModule
  });
}
var flushingModuleQueue = false;
function flushModuleScopingQueueAsMuchAsPossible() {
  if (!flushingModuleQueue) {
    flushingModuleQueue = true;
    try {
      for (let i = moduleQueue.length - 1; i >= 0; i--) {
        const {
          moduleType,
          ngModule
        } = moduleQueue[i];
        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
          moduleQueue.splice(i, 1);
          setScopeOnDeclaredComponents(moduleType, ngModule);
        }
      }
    } finally {
      flushingModuleQueue = false;
    }
  }
}
function isResolvedDeclaration(declaration) {
  if (Array.isArray(declaration)) {
    return declaration.every(isResolvedDeclaration);
  }
  return !!resolveForwardRef(declaration);
}
function compileNgModule(moduleType, ngModule = {}) {
  compileNgModuleDefs(moduleType, ngModule);
  if (ngModule.id !== void 0) {
    registerNgModuleType(moduleType, ngModule.id);
  }
  enqueueModuleForDelayedScoping(moduleType, ngModule);
}
function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {
  ngDevMode && assertDefined(moduleType, "Required value moduleType");
  ngDevMode && assertDefined(ngModule, "Required value ngModule");
  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  let ngModuleDef = null;
  Object.defineProperty(moduleType, NG_MOD_DEF, {
    configurable: true,
    get: () => {
      if (ngModuleDef === null) {
        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);
        }
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "NgModule",
          type: moduleType
        });
        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/\u0275mod.js`, {
          type: moduleType,
          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),
          declarations: declarations.map(resolveForwardRef),
          imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
          id: ngModule.id || null
        });
        if (!ngModuleDef.schemas) {
          ngModuleDef.schemas = [];
        }
      }
      return ngModuleDef;
    }
  });
  let ngFactoryDef = null;
  Object.defineProperty(moduleType, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "NgModule",
          type: moduleType
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/\u0275fac.js`, {
          name: moduleType.name,
          type: moduleType,
          deps: reflectDependencies(moduleType),
          target: compiler.FactoryTarget.NgModule,
          typeArgumentCount: 0
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  let ngInjectorDef = null;
  Object.defineProperty(moduleType, NG_INJ_DEF, {
    get: () => {
      if (ngInjectorDef === null) {
        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
        const meta = {
          name: moduleType.name,
          type: moduleType,
          providers: ngModule.providers || EMPTY_ARRAY,
          imports: [(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)]
        };
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "NgModule",
          type: moduleType
        });
        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/\u0275inj.js`, meta);
      }
      return ngInjectorDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function generateStandaloneInDeclarationsError(type, location2) {
  const prefix = `Unexpected "${stringifyForError(type)}" found in the "declarations" array of the`;
  const suffix = `"${stringifyForError(type)}" is marked as standalone and can't be declared in any NgModule - did you intend to import it instead (by adding it to the "imports" array)?`;
  return `${prefix} ${location2}, ${suffix}`;
}
function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
  if (verifiedNgModule.get(moduleType)) return;
  if (isStandalone(moduleType)) return;
  verifiedNgModule.set(moduleType, true);
  moduleType = resolveForwardRef(moduleType);
  let ngModuleDef;
  if (importingModule) {
    ngModuleDef = getNgModuleDef(moduleType);
    if (!ngModuleDef) {
      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
    }
  } else {
    ngModuleDef = getNgModuleDef(moduleType, true);
  }
  const errors = [];
  const declarations = maybeUnwrapFn(ngModuleDef.declarations);
  const imports = maybeUnwrapFn(ngModuleDef.imports);
  flatten(imports).map(unwrapModuleWithProvidersImports).forEach((modOrStandaloneCmpt) => {
    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);
    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);
  });
  const exports = maybeUnwrapFn(ngModuleDef.exports);
  declarations.forEach(verifyDeclarationsHaveDefinitions);
  declarations.forEach(verifyDirectivesHaveSelector);
  declarations.forEach((declarationType) => verifyNotStandalone(declarationType, moduleType));
  const combinedDeclarations = [...declarations.map(resolveForwardRef), ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)];
  exports.forEach(verifyExportsAreDeclaredOrReExported);
  declarations.forEach((decl) => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));
  const ngModule = getAnnotation(moduleType, "NgModule");
  if (ngModule) {
    ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach((mod) => {
      verifySemanticsOfNgModuleImport(mod, moduleType);
      verifySemanticsOfNgModuleDef(mod, false, moduleType);
    });
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
  }
  if (errors.length) {
    throw new Error(errors.join("\n"));
  }
  function verifyDeclarationsHaveDefinitions(type) {
    type = resolveForwardRef(type);
    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
    if (!def) {
      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);
    }
  }
  function verifyDirectivesHaveSelector(type) {
    type = resolveForwardRef(type);
    const def = getDirectiveDef(type);
    if (!getComponentDef(type) && def && def.selectors.length == 0) {
      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);
    }
  }
  function verifyNotStandalone(type, moduleType2) {
    type = resolveForwardRef(type);
    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
    if (def?.standalone) {
      const location2 = `"${stringifyForError(moduleType2)}" NgModule`;
      errors.push(generateStandaloneInDeclarationsError(type, location2));
    }
  }
  function verifyExportsAreDeclaredOrReExported(type) {
    type = resolveForwardRef(type);
    const kind = getComponentDef(type) && "component" || getDirectiveDef(type) && "directive" || getPipeDef$1(type) && "pipe";
    if (kind) {
      if (combinedDeclarations.lastIndexOf(type) === -1) {
        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);
      }
    }
  }
  function verifyDeclarationIsUnique(type, suppressErrors) {
    type = resolveForwardRef(type);
    const existingModule = ownerNgModule.get(type);
    if (existingModule && existingModule !== moduleType) {
      if (!suppressErrors) {
        const modules2 = [existingModule, moduleType].map(stringifyForError).sort();
        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules2[0]} and ${modules2[1]}! Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules2[0]} and ${modules2[1]}. You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules2[0]} and ${modules2[1]}.`);
      }
    } else {
      ownerNgModule.set(type, moduleType);
    }
  }
  function verifyComponentIsPartOfNgModule(type) {
    type = resolveForwardRef(type);
    const existingModule = ownerNgModule.get(type);
    if (!existingModule && !isStandalone(type)) {
      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);
    }
  }
  function verifyCorrectBootstrapType(type) {
    type = resolveForwardRef(type);
    if (!getComponentDef(type)) {
      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);
    }
    if (isStandalone(type)) {
      errors.push(`The \`${stringifyForError(type)}\` class is a standalone component, which can not be used in the \`@NgModule.bootstrap\` array. Use the \`bootstrapApplication\` function for bootstrap instead.`);
    }
  }
  function verifySemanticsOfNgModuleImport(type, importingModule2) {
    type = resolveForwardRef(type);
    const directiveDef = getComponentDef(type) || getDirectiveDef(type);
    if (directiveDef !== null && !directiveDef.standalone) {
      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule2.name}'. Please add an @NgModule annotation.`);
    }
    const pipeDef = getPipeDef$1(type);
    if (pipeDef !== null && !pipeDef.standalone) {
      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule2.name}'. Please add an @NgModule annotation.`);
    }
  }
}
function unwrapModuleWithProvidersImports(typeOrWithProviders) {
  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
  return typeOrWithProviders.ngModule || typeOrWithProviders;
}
function getAnnotation(type, name) {
  let annotation = null;
  collect(type.__annotations__);
  collect(type.decorators);
  return annotation;
  function collect(annotations) {
    if (annotations) {
      annotations.forEach(readAnnotation);
    }
  }
  function readAnnotation(decorator) {
    if (!annotation) {
      const proto = Object.getPrototypeOf(decorator);
      if (proto.ngMetadataName == name) {
        annotation = decorator;
      } else if (decorator.type) {
        const proto2 = Object.getPrototypeOf(decorator.type);
        if (proto2.ngMetadataName == name) {
          annotation = decorator.args[0];
        }
      }
    }
  }
}
var ownerNgModule = /* @__PURE__ */ new WeakMap();
var verifiedNgModule = /* @__PURE__ */ new WeakMap();
function computeCombinedExports(type) {
  type = resolveForwardRef(type);
  const ngModuleDef = getNgModuleDef(type);
  if (ngModuleDef === null) {
    return [type];
  }
  return flatten(maybeUnwrapFn(ngModuleDef.exports).map((type2) => {
    const ngModuleDef2 = getNgModuleDef(type2);
    if (ngModuleDef2) {
      verifySemanticsOfNgModuleDef(type2, false);
      return computeCombinedExports(type2);
    } else {
      return type2;
    }
  }));
}
function setScopeOnDeclaredComponents(moduleType, ngModule) {
  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  const transitiveScopes = transitiveScopesFor(moduleType);
  declarations.forEach((declaration) => {
    declaration = resolveForwardRef(declaration);
    if (declaration.hasOwnProperty(NG_COMP_DEF)) {
      const component = declaration;
      const componentDef = getComponentDef(component);
      patchComponentDefWithScope(componentDef, transitiveScopes);
    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
      declaration.ngSelectorScope = moduleType;
    }
  });
}
function patchComponentDefWithScope(componentDef, transitiveScopes) {
  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map((dir) => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir)).filter((def) => !!def);
  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map((pipe2) => getPipeDef$1(pipe2));
  componentDef.schemas = transitiveScopes.schemas;
  componentDef.tView = null;
}
function transitiveScopesFor(type) {
  if (isNgModule(type)) {
    {
      const scope = depsTracker.getNgModuleScope(type);
      const def = getNgModuleDef(type, true);
      return __spreadValues({
        schemas: def.schemas || null
      }, scope);
    }
  } else if (isStandalone(type)) {
    const directiveDef = getComponentDef(type) || getDirectiveDef(type);
    if (directiveDef !== null) {
      return {
        schemas: null,
        compilation: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set()
        },
        exported: {
          directives: /* @__PURE__ */ new Set([type]),
          pipes: /* @__PURE__ */ new Set()
        }
      };
    }
    const pipeDef = getPipeDef$1(type);
    if (pipeDef !== null) {
      return {
        schemas: null,
        compilation: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set()
        },
        exported: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set([type])
        }
      };
    }
  }
  throw new Error(`${type.name} does not have a module def (\u0275mod property)`);
}
function expandModuleWithProviders(value) {
  if (isModuleWithProviders(value)) {
    return value.ngModule;
  }
  return value;
}
var compilationDepth = 0;
function compileComponent(type, metadata) {
  (typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode();
  let ngComponentDef = null;
  maybeQueueResolutionOfComponentResources(type, metadata);
  addDirectiveFactoryDef(type, metadata);
  Object.defineProperty(type, NG_COMP_DEF, {
    get: () => {
      if (ngComponentDef === null) {
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "component",
          type
        });
        if (componentNeedsResolution(metadata)) {
          const error = [`Component '${type.name}' is not resolved:`];
          if (metadata.templateUrl) {
            error.push(` - templateUrl: ${metadata.templateUrl}`);
          }
          if (metadata.styleUrls && metadata.styleUrls.length) {
            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);
          }
          if (metadata.styleUrl) {
            error.push(` - styleUrl: ${metadata.styleUrl}`);
          }
          error.push(`Did you run and wait for 'resolveComponentResources()'?`);
          throw new Error(error.join("\n"));
        }
        const options = getJitOptions();
        let preserveWhitespaces = metadata.preserveWhitespaces;
        if (preserveWhitespaces === void 0) {
          if (options !== null && options.preserveWhitespaces !== void 0) {
            preserveWhitespaces = options.preserveWhitespaces;
          } else {
            preserveWhitespaces = false;
          }
        }
        let encapsulation = metadata.encapsulation;
        if (encapsulation === void 0) {
          if (options !== null && options.defaultEncapsulation !== void 0) {
            encapsulation = options.defaultEncapsulation;
          } else {
            encapsulation = ViewEncapsulation.Emulated;
          }
        }
        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;
        const meta = __spreadProps(__spreadValues({}, directiveMetadata(type, metadata)), {
          typeSourceSpan: compiler.createParseSourceSpan("Component", type.name, templateUrl),
          template: metadata.template || "",
          preserveWhitespaces,
          styles: typeof metadata.styles === "string" ? [metadata.styles] : metadata.styles || EMPTY_ARRAY,
          animations: metadata.animations,
          // JIT components are always compiled against an empty set of `declarations`. Instead, the
          // `directiveDefs` and `pipeDefs` are updated at a later point:
          //  * for NgModule-based components, they're set when the NgModule which declares the
          //    component resolves in the module scoping queue
          //  * for standalone components, they're set just below, after `compileComponent`.
          declarations: [],
          changeDetection: metadata.changeDetection,
          encapsulation,
          interpolation: metadata.interpolation,
          viewProviders: metadata.viewProviders || null
        });
        compilationDepth++;
        try {
          if (meta.usesInheritance) {
            addDirectiveDefToUndecoratedParents(type);
          }
          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
          if (meta.isStandalone) {
            const imports = flatten(metadata.imports || EMPTY_ARRAY);
            const {
              directiveDefs,
              pipeDefs
            } = getStandaloneDefFunctions(type, imports);
            ngComponentDef.directiveDefs = directiveDefs;
            ngComponentDef.pipeDefs = pipeDefs;
            ngComponentDef.dependencies = () => imports.map(resolveForwardRef);
          }
        } finally {
          compilationDepth--;
        }
        if (compilationDepth === 0) {
          flushModuleScopingQueueAsMuchAsPossible();
        }
        if (hasSelectorScope(type)) {
          const scopes = transitiveScopesFor(type.ngSelectorScope);
          patchComponentDefWithScope(ngComponentDef, scopes);
        }
        if (metadata.schemas) {
          if (meta.isStandalone) {
            ngComponentDef.schemas = metadata.schemas;
          } else {
            throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);
          }
        } else if (meta.isStandalone) {
          ngComponentDef.schemas = [];
        }
      }
      return ngComponentDef;
    },
    set: (def) => {
      ngComponentDef = def;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getStandaloneDefFunctions(type, imports) {
  const directiveDefs = () => {
    {
      if (ngDevMode) {
        for (const rawDep of imports) {
          verifyStandaloneImport(rawDep, type);
        }
      }
      if (!isComponent(type)) {
        return [];
      }
      const scope = depsTracker.getStandaloneComponentScope(type, imports);
      return [...scope.compilation.directives].map((p) => getComponentDef(p) || getDirectiveDef(p)).filter((d) => d !== null);
    }
  };
  const pipeDefs = () => {
    {
      if (ngDevMode) {
        for (const rawDep of imports) {
          verifyStandaloneImport(rawDep, type);
        }
      }
      if (!isComponent(type)) {
        return [];
      }
      const scope = depsTracker.getStandaloneComponentScope(type, imports);
      return [...scope.compilation.pipes].map((p) => getPipeDef$1(p)).filter((d) => d !== null);
    }
  };
  return {
    directiveDefs,
    pipeDefs
  };
}
function hasSelectorScope(component) {
  return component.ngSelectorScope !== void 0;
}
function compileDirective(type, directive) {
  let ngDirectiveDef = null;
  addDirectiveFactoryDef(type, directive || {});
  Object.defineProperty(type, NG_DIR_DEF, {
    get: () => {
      if (ngDirectiveDef === null) {
        const meta = getDirectiveMetadata(type, directive || {});
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "directive",
          type
        });
        ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
      }
      return ngDirectiveDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getDirectiveMetadata(type, metadata) {
  const name = type && type.name;
  const sourceMapUrl = `ng:///${name}/\u0275dir.js`;
  const compiler = getCompilerFacade({
    usage: 0,
    kind: "directive",
    type
  });
  const facade = directiveMetadata(type, metadata);
  facade.typeSourceSpan = compiler.createParseSourceSpan("Directive", name, sourceMapUrl);
  if (facade.usesInheritance) {
    addDirectiveDefToUndecoratedParents(type);
  }
  return {
    metadata: facade,
    sourceMapUrl
  };
}
function addDirectiveFactoryDef(type, metadata) {
  let ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const meta = getDirectiveMetadata(type, metadata);
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "directive",
          type
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/\u0275fac.js`, {
          name: meta.metadata.name,
          type: meta.metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Directive
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function extendsDirectlyFromObject(type) {
  return Object.getPrototypeOf(type.prototype) === Object.prototype;
}
function directiveMetadata(type, metadata) {
  const reflect = getReflect();
  const propMetadata = reflect.ownPropMetadata(type);
  return {
    name: type.name,
    type,
    selector: metadata.selector !== void 0 ? metadata.selector : null,
    host: metadata.host || EMPTY_OBJ,
    propMetadata,
    inputs: metadata.inputs || EMPTY_ARRAY,
    outputs: metadata.outputs || EMPTY_ARRAY,
    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
    lifecycle: {
      usesOnChanges: reflect.hasLifecycleHook(type, "ngOnChanges")
    },
    typeSourceSpan: null,
    usesInheritance: !extendsDirectlyFromObject(type),
    exportAs: extractExportAs(metadata.exportAs),
    providers: metadata.providers || null,
    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),
    isStandalone: metadata.standalone === void 0 ? true : !!metadata.standalone,
    isSignal: !!metadata.signals,
    hostDirectives: metadata.hostDirectives?.map((directive) => typeof directive === "function" ? {
      directive
    } : directive) || null
  };
}
function addDirectiveDefToUndecoratedParents(type) {
  const objPrototype = Object.prototype;
  let parent = Object.getPrototypeOf(type.prototype).constructor;
  while (parent && parent !== objPrototype) {
    if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {
      compileDirective(parent, null);
    }
    parent = Object.getPrototypeOf(parent);
  }
}
function convertToR3QueryPredicate(selector) {
  return typeof selector === "string" ? splitByComma(selector) : resolveForwardRef(selector);
}
function convertToR3QueryMetadata(propertyName, ann) {
  return {
    propertyName,
    predicate: convertToR3QueryPredicate(ann.selector),
    descendants: ann.descendants,
    first: ann.first,
    read: ann.read ? ann.read : null,
    static: !!ann.static,
    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,
    isSignal: !!ann.isSignal
  };
}
function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
  const queriesMeta = [];
  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      const annotations = propMetadata[field];
      annotations.forEach((ann) => {
        if (isQueryAnn(ann)) {
          if (!ann.selector) {
            throw new Error(`Can't construct a query for the property "${field}" of "${stringifyForError(type)}" since the query selector wasn't defined.`);
          }
          if (annotations.some(isInputAnnotation)) {
            throw new Error(`Cannot combine @Input decorators with query decorators`);
          }
          queriesMeta.push(convertToR3QueryMetadata(field, ann));
        }
      });
    }
  }
  return queriesMeta;
}
function extractExportAs(exportAs) {
  return exportAs === void 0 ? null : splitByComma(exportAs);
}
function isContentQuery(value) {
  const name = value.ngMetadataName;
  return name === "ContentChild" || name === "ContentChildren";
}
function isViewQuery(value) {
  const name = value.ngMetadataName;
  return name === "ViewChild" || name === "ViewChildren";
}
function isInputAnnotation(value) {
  return value.ngMetadataName === "Input";
}
function splitByComma(value) {
  return value.split(",").map((piece) => piece.trim());
}
var LIFECYCLE_HOOKS = ["ngOnChanges", "ngOnInit", "ngOnDestroy", "ngDoCheck", "ngAfterViewInit", "ngAfterViewChecked", "ngAfterContentInit", "ngAfterContentChecked"];
function shouldAddAbstractDirective(type) {
  const reflect = getReflect();
  if (LIFECYCLE_HOOKS.some((hookName) => reflect.hasLifecycleHook(type, hookName))) {
    return true;
  }
  const propMetadata = reflect.propMetadata(type);
  for (const field in propMetadata) {
    const annotations = propMetadata[field];
    for (let i = 0; i < annotations.length; i++) {
      const current = annotations[i];
      const metadataName = current.ngMetadataName;
      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === "Output" || metadataName === "HostBinding" || metadataName === "HostListener") {
        return true;
      }
    }
  }
  return false;
}
function compilePipe(type, meta) {
  let ngPipeDef = null;
  let ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const metadata = getPipeMetadata(type, meta);
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "pipe",
          type: metadata.type
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/\u0275fac.js`, {
          name: metadata.name,
          type: metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Pipe
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  Object.defineProperty(type, NG_PIPE_DEF, {
    get: () => {
      if (ngPipeDef === null) {
        const metadata = getPipeMetadata(type, meta);
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "pipe",
          type: metadata.type
        });
        ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/\u0275pipe.js`, metadata);
      }
      return ngPipeDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getPipeMetadata(type, meta) {
  return {
    type,
    name: type.name,
    pipeName: meta.name,
    pure: meta.pure !== void 0 ? meta.pure : true,
    isStandalone: meta.standalone === void 0 ? true : !!meta.standalone
  };
}
var Directive = makeDecorator("Directive", (dir = {}) => dir, void 0, void 0, (type, meta) => compileDirective(type, meta));
var Component = makeDecorator("Component", (c = {}) => __spreadValues({
  changeDetection: ChangeDetectionStrategy.Default
}, c), Directive, void 0, (type, meta) => compileComponent(type, meta));
var Pipe = makeDecorator("Pipe", (p) => __spreadValues({
  pure: true
}, p), void 0, void 0, (type, meta) => compilePipe(type, meta));
var Input = makePropDecorator("Input", (arg) => {
  if (!arg) {
    return {};
  }
  return typeof arg === "string" ? {
    alias: arg
  } : arg;
});
var Output = makePropDecorator("Output", (alias) => ({
  alias
}));
var HostBinding = makePropDecorator("HostBinding", (hostPropertyName) => ({
  hostPropertyName
}));
var HostListener = makePropDecorator("HostListener", (eventName, args) => ({
  eventName,
  args
}));
var NgModule = makeDecorator(
  "NgModule",
  (ngModule) => ngModule,
  void 0,
  void 0,
  /**
   * Decorator that marks the following class as an NgModule, and supplies
   * configuration metadata for it.
   *
   * * The `declarations` option configures the compiler
   * with information about what belongs to the NgModule.
   * * The `providers` options configures the NgModule's injector to provide
   * dependencies the NgModule members.
   * * The `imports` and `exports` options bring in members from other modules, and make
   * this module's members available to others.
   */
  (type, meta) => compileNgModule(type, meta)
);
var Version = class {
  full;
  major;
  minor;
  patch;
  constructor(full) {
    this.full = full;
    const parts = full.split(".");
    this.major = parts[0];
    this.minor = parts[1];
    this.patch = parts.slice(2).join(".");
  }
};
var VERSION = new Version("19.2.6");
var ModuleWithComponentFactories = class {
  ngModuleFactory;
  componentFactories;
  constructor(ngModuleFactory, componentFactories) {
    this.ngModuleFactory = ngModuleFactory;
    this.componentFactories = componentFactories;
  }
};
var Compiler = class _Compiler {
  /**
   * Compiles the given NgModule and all of its components. All templates of the components
   * have to be inlined.
   */
  compileModuleSync(moduleType) {
    return new NgModuleFactory2(moduleType);
  }
  /**
   * Compiles the given NgModule and all of its components
   */
  compileModuleAsync(moduleType) {
    return Promise.resolve(this.compileModuleSync(moduleType));
  }
  /**
   * Same as {@link Compiler#compileModuleSync compileModuleSync} but also creates ComponentFactories for all components.
   */
  compileModuleAndAllComponentsSync(moduleType) {
    const ngModuleFactory = this.compileModuleSync(moduleType);
    const moduleDef = getNgModuleDef(moduleType);
    const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {
      const componentDef = getComponentDef(declaration);
      componentDef && factories.push(new ComponentFactory2(componentDef));
      return factories;
    }, []);
    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
  }
  /**
   * Same as {@link Compiler#compileModuleAsync compileModuleAsync} but also creates ComponentFactories for all components.
   */
  compileModuleAndAllComponentsAsync(moduleType) {
    return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));
  }
  /**
   * Clears all caches.
   */
  clearCache() {
  }
  /**
   * Clears the cache for the given component/ngModule.
   */
  clearCacheFor(type) {
  }
  /**
   * Returns the id for a given NgModule, if one is defined and known to the compiler.
   */
  getModuleId(moduleType) {
    return void 0;
  }
  static \u0275fac = function Compiler_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Compiler)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _Compiler,
    factory: _Compiler.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Compiler, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var COMPILER_OPTIONS = new InjectionToken(ngDevMode ? "compilerOptions" : "");
function compileNgModuleFactory(injector, options, moduleType) {
  ngDevMode && assertNgModuleType(moduleType);
  const moduleFactory = new NgModuleFactory2(moduleType);
  if (true) {
    return Promise.resolve(moduleFactory);
  }
  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);
  setJitOptions({
    defaultEncapsulation: _lastDefined(compilerOptions.map((opts) => opts.defaultEncapsulation)),
    preserveWhitespaces: _lastDefined(compilerOptions.map((opts) => opts.preserveWhitespaces))
  });
  if (isComponentResourceResolutionQueueEmpty()) {
    return Promise.resolve(moduleFactory);
  }
  const compilerProviders = compilerOptions.flatMap((option) => option.providers ?? []);
  if (compilerProviders.length === 0) {
    return Promise.resolve(moduleFactory);
  }
  const compiler = getCompilerFacade({
    usage: 0,
    kind: "NgModule",
    type: moduleType
  });
  const compilerInjector = Injector.create({
    providers: compilerProviders
  });
  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);
  return resolveComponentResources((url) => Promise.resolve(resourceLoader.get(url))).then(() => moduleFactory);
}
function _lastDefined(args) {
  for (let i = args.length - 1; i >= 0; i--) {
    if (args[i] !== void 0) {
      return args[i];
    }
  }
  return void 0;
}
var NgZoneChangeDetectionScheduler = class _NgZoneChangeDetectionScheduler {
  zone = inject(NgZone);
  changeDetectionScheduler = inject(ChangeDetectionScheduler);
  applicationRef = inject(ApplicationRef);
  _onMicrotaskEmptySubscription;
  initialize() {
    if (this._onMicrotaskEmptySubscription) {
      return;
    }
    this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({
      next: () => {
        if (this.changeDetectionScheduler.runningTick) {
          return;
        }
        this.zone.run(() => {
          this.applicationRef.tick();
        });
      }
    });
  }
  ngOnDestroy() {
    this._onMicrotaskEmptySubscription?.unsubscribe();
  }
  static \u0275fac = function NgZoneChangeDetectionScheduler_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgZoneChangeDetectionScheduler)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _NgZoneChangeDetectionScheduler,
    factory: _NgZoneChangeDetectionScheduler.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgZoneChangeDetectionScheduler, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var PROVIDED_NG_ZONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "provideZoneChangeDetection token" : "", {
  factory: () => false
});
function internalProvideZoneChangeDetection({
  ngZoneFactory,
  ignoreChangesOutsideZone,
  scheduleInRootZone
}) {
  ngZoneFactory ??= () => new NgZone(__spreadProps(__spreadValues({}, getNgZoneOptions()), {
    scheduleInRootZone
  }));
  return [
    {
      provide: NgZone,
      useFactory: ngZoneFactory
    },
    {
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, {
          optional: true
        });
        if ((typeof ngDevMode === "undefined" || ngDevMode) && ngZoneChangeDetectionScheduler === null) {
          throw new RuntimeError(402, `A required Injectable was not found in the dependency injection tree. If you are bootstrapping an NgModule, make sure that the \`BrowserModule\` is imported.`);
        }
        return () => ngZoneChangeDetectionScheduler.initialize();
      }
    },
    {
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const service = inject(ZoneStablePendingTask);
        return () => {
          service.initialize();
        };
      }
    },
    // Always disable scheduler whenever explicitly disabled, even if another place called
    // `provideZoneChangeDetection` without the 'ignore' option.
    ignoreChangesOutsideZone === true ? {
      provide: ZONELESS_SCHEDULER_DISABLED,
      useValue: true
    } : [],
    {
      provide: SCHEDULE_IN_ROOT_ZONE,
      useValue: scheduleInRootZone ?? SCHEDULE_IN_ROOT_ZONE_DEFAULT
    }
  ];
}
function provideZoneChangeDetection(options) {
  const ignoreChangesOutsideZone = options?.ignoreChangesOutsideZone;
  const scheduleInRootZone = options?.scheduleInRootZone;
  const zoneProviders = internalProvideZoneChangeDetection({
    ngZoneFactory: () => {
      const ngZoneOptions = getNgZoneOptions(options);
      ngZoneOptions.scheduleInRootZone = scheduleInRootZone;
      if (ngZoneOptions.shouldCoalesceEventChangeDetection) {
        performanceMarkFeature("NgZone_CoalesceEvent");
      }
      return new NgZone(ngZoneOptions);
    },
    ignoreChangesOutsideZone,
    scheduleInRootZone
  });
  return makeEnvironmentProviders([{
    provide: PROVIDED_NG_ZONE,
    useValue: true
  }, {
    provide: ZONELESS_ENABLED,
    useValue: false
  }, zoneProviders]);
}
function getNgZoneOptions(options) {
  return {
    enableLongStackTrace: typeof ngDevMode === "undefined" ? false : !!ngDevMode,
    shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,
    shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false
  };
}
var ZoneStablePendingTask = class _ZoneStablePendingTask {
  subscription = new Subscription();
  initialized = false;
  zone = inject(NgZone);
  pendingTasks = inject(PendingTasksInternal);
  initialize() {
    if (this.initialized) {
      return;
    }
    this.initialized = true;
    let task = null;
    if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {
      task = this.pendingTasks.add();
    }
    this.zone.runOutsideAngular(() => {
      this.subscription.add(this.zone.onStable.subscribe(() => {
        NgZone.assertNotInAngularZone();
        queueMicrotask(() => {
          if (task !== null && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {
            this.pendingTasks.remove(task);
            task = null;
          }
        });
      }));
    });
    this.subscription.add(this.zone.onUnstable.subscribe(() => {
      NgZone.assertInAngularZone();
      task ??= this.pendingTasks.add();
    }));
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
  static \u0275fac = function ZoneStablePendingTask_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ZoneStablePendingTask)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _ZoneStablePendingTask,
    factory: _ZoneStablePendingTask.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ZoneStablePendingTask, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT = 100;
var consecutiveMicrotaskNotifications = 0;
var stackFromLastFewNotifications = [];
function trackMicrotaskNotificationForDebugging() {
  consecutiveMicrotaskNotifications++;
  if (CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT - consecutiveMicrotaskNotifications < 5) {
    const stack = new Error().stack;
    if (stack) {
      stackFromLastFewNotifications.push(stack);
    }
  }
  if (consecutiveMicrotaskNotifications === CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT) {
    throw new RuntimeError(103, "Angular could not stabilize because there were endless change notifications within the browser event loop. The stack from the last several notifications: \n" + stackFromLastFewNotifications.join("\n"));
  }
}
var ChangeDetectionSchedulerImpl = class _ChangeDetectionSchedulerImpl {
  appRef = inject(ApplicationRef);
  taskService = inject(PendingTasksInternal);
  ngZone = inject(NgZone);
  zonelessEnabled = inject(ZONELESS_ENABLED);
  tracing = inject(TracingService, {
    optional: true
  });
  disableScheduling = inject(ZONELESS_SCHEDULER_DISABLED, {
    optional: true
  }) ?? false;
  zoneIsDefined = typeof Zone !== "undefined" && !!Zone.root.run;
  schedulerTickApplyArgs = [{
    data: {
      "__scheduler_tick__": true
    }
  }];
  subscriptions = new Subscription();
  angularZoneId = this.zoneIsDefined ? this.ngZone._inner?.get(angularZoneInstanceIdProperty) : null;
  scheduleInRootZone = !this.zonelessEnabled && this.zoneIsDefined && (inject(SCHEDULE_IN_ROOT_ZONE, {
    optional: true
  }) ?? false);
  cancelScheduledCallback = null;
  useMicrotaskScheduler = false;
  runningTick = false;
  pendingRenderTaskId = null;
  constructor() {
    this.subscriptions.add(this.appRef.afterTick.subscribe(() => {
      if (!this.runningTick) {
        this.cleanup();
      }
    }));
    this.subscriptions.add(this.ngZone.onUnstable.subscribe(() => {
      if (!this.runningTick) {
        this.cleanup();
      }
    }));
    this.disableScheduling ||= !this.zonelessEnabled && // NoopNgZone without enabling zoneless means no scheduling whatsoever
    (this.ngZone instanceof NoopNgZone || // The same goes for the lack of Zone without enabling zoneless scheduling
    !this.zoneIsDefined);
  }
  notify(source) {
    if (!this.zonelessEnabled && source === 5) {
      return;
    }
    let force = false;
    switch (source) {
      case 0: {
        this.appRef.dirtyFlags |= 2;
        break;
      }
      case 3:
      case 2:
      case 4:
      case 5:
      case 1: {
        this.appRef.dirtyFlags |= 4;
        break;
      }
      case 6: {
        this.appRef.dirtyFlags |= 2;
        force = true;
        break;
      }
      case 12: {
        this.appRef.dirtyFlags |= 16;
        force = true;
        break;
      }
      case 13: {
        this.appRef.dirtyFlags |= 2;
        force = true;
        break;
      }
      case 11: {
        force = true;
        break;
      }
      case 9:
      case 8:
      case 7:
      case 10:
      default: {
        this.appRef.dirtyFlags |= 8;
      }
    }
    this.appRef.tracingSnapshot = this.tracing?.snapshot(this.appRef.tracingSnapshot) ?? null;
    if (!this.shouldScheduleTick(force)) {
      return;
    }
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (this.useMicrotaskScheduler) {
        trackMicrotaskNotificationForDebugging();
      } else {
        consecutiveMicrotaskNotifications = 0;
        stackFromLastFewNotifications.length = 0;
      }
    }
    const scheduleCallback = this.useMicrotaskScheduler ? scheduleCallbackWithMicrotask : scheduleCallbackWithRafRace;
    this.pendingRenderTaskId = this.taskService.add();
    if (this.scheduleInRootZone) {
      this.cancelScheduledCallback = Zone.root.run(() => scheduleCallback(() => this.tick()));
    } else {
      this.cancelScheduledCallback = this.ngZone.runOutsideAngular(() => scheduleCallback(() => this.tick()));
    }
  }
  shouldScheduleTick(force) {
    if (this.disableScheduling && !force || this.appRef.destroyed) {
      return false;
    }
    if (this.pendingRenderTaskId !== null || this.runningTick || this.appRef._runningTick) {
      return false;
    }
    if (!this.zonelessEnabled && this.zoneIsDefined && Zone.current.get(angularZoneInstanceIdProperty + this.angularZoneId)) {
      return false;
    }
    return true;
  }
  /**
   * Calls ApplicationRef._tick inside the `NgZone`.
   *
   * Calling `tick` directly runs change detection and cancels any change detection that had been
   * scheduled previously.
   *
   * @param shouldRefreshViews Passed directly to `ApplicationRef._tick` and skips straight to
   *     render hooks when `false`.
   */
  tick() {
    if (this.runningTick || this.appRef.destroyed) {
      return;
    }
    if (this.appRef.dirtyFlags === 0) {
      this.cleanup();
      return;
    }
    if (!this.zonelessEnabled && this.appRef.dirtyFlags & 7) {
      this.appRef.dirtyFlags |= 1;
    }
    const task = this.taskService.add();
    try {
      this.ngZone.run(() => {
        this.runningTick = true;
        this.appRef._tick();
      }, void 0, this.schedulerTickApplyArgs);
    } catch (e2) {
      this.taskService.remove(task);
      throw e2;
    } finally {
      this.cleanup();
    }
    this.useMicrotaskScheduler = true;
    scheduleCallbackWithMicrotask(() => {
      this.useMicrotaskScheduler = false;
      this.taskService.remove(task);
    });
  }
  ngOnDestroy() {
    this.subscriptions.unsubscribe();
    this.cleanup();
  }
  cleanup() {
    this.runningTick = false;
    this.cancelScheduledCallback?.();
    this.cancelScheduledCallback = null;
    if (this.pendingRenderTaskId !== null) {
      const taskId = this.pendingRenderTaskId;
      this.pendingRenderTaskId = null;
      this.taskService.remove(taskId);
    }
  }
  static \u0275fac = function ChangeDetectionSchedulerImpl_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ChangeDetectionSchedulerImpl)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _ChangeDetectionSchedulerImpl,
    factory: _ChangeDetectionSchedulerImpl.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChangeDetectionSchedulerImpl, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function getGlobalLocale() {
  if (false) {
    return goog.LOCALE;
  } else {
    return typeof $localize !== "undefined" && $localize.locale || DEFAULT_LOCALE_ID;
  }
}
var LOCALE_ID = new InjectionToken(ngDevMode ? "LocaleId" : "", {
  providedIn: "root",
  factory: () => inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale()
});
var DEFAULT_CURRENCY_CODE = new InjectionToken(ngDevMode ? "DefaultCurrencyCode" : "", {
  providedIn: "root",
  factory: () => USD_CURRENCY_CODE
});
var TRANSLATIONS = new InjectionToken(ngDevMode ? "Translations" : "");
var TRANSLATIONS_FORMAT = new InjectionToken(ngDevMode ? "TranslationsFormat" : "");
var MissingTranslationStrategy;
(function(MissingTranslationStrategy2) {
  MissingTranslationStrategy2[MissingTranslationStrategy2["Error"] = 0] = "Error";
  MissingTranslationStrategy2[MissingTranslationStrategy2["Warning"] = 1] = "Warning";
  MissingTranslationStrategy2[MissingTranslationStrategy2["Ignore"] = 2] = "Ignore";
})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
var SCAN_DELAY = 200;
var OVERSIZED_IMAGE_TOLERANCE = 1200;
var ImagePerformanceWarning = class _ImagePerformanceWarning {
  // Map of full image URLs -> original `ngSrc` values.
  window = null;
  observer = null;
  options = inject(IMAGE_CONFIG);
  lcpImageUrl;
  start() {
    if (typeof PerformanceObserver === "undefined" || this.options?.disableImageSizeWarning && this.options?.disableImageLazyLoadWarning) {
      return;
    }
    this.observer = this.initPerformanceObserver();
    const doc = getDocument();
    const win = doc.defaultView;
    if (win) {
      this.window = win;
      const waitToScan = () => {
        setTimeout(this.scanImages.bind(this), SCAN_DELAY);
      };
      const setup = () => {
        if (doc.readyState === "complete") {
          waitToScan();
        } else {
          this.window?.addEventListener("load", waitToScan, {
            once: true
          });
        }
      };
      if (typeof Zone !== "undefined") {
        Zone.root.run(() => setup());
      } else {
        setup();
      }
    }
  }
  ngOnDestroy() {
    this.observer?.disconnect();
  }
  initPerformanceObserver() {
    if (typeof PerformanceObserver === "undefined") {
      return null;
    }
    const observer = new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries();
      if (entries.length === 0) return;
      const lcpElement = entries[entries.length - 1];
      const imgSrc = lcpElement.element?.src ?? "";
      if (imgSrc.startsWith("data:") || imgSrc.startsWith("blob:")) return;
      this.lcpImageUrl = imgSrc;
    });
    observer.observe({
      type: "largest-contentful-paint",
      buffered: true
    });
    return observer;
  }
  scanImages() {
    const images = getDocument().querySelectorAll("img");
    let lcpElementFound, lcpElementLoadedCorrectly = false;
    images.forEach((image) => {
      if (!this.options?.disableImageSizeWarning) {
        if (!image.getAttribute("ng-img") && this.isOversized(image)) {
          logOversizedImageWarning(image.src);
        }
      }
      if (!this.options?.disableImageLazyLoadWarning && this.lcpImageUrl) {
        if (image.src === this.lcpImageUrl) {
          lcpElementFound = true;
          if (image.loading !== "lazy" || image.getAttribute("ng-img")) {
            lcpElementLoadedCorrectly = true;
          }
        }
      }
    });
    if (lcpElementFound && !lcpElementLoadedCorrectly && this.lcpImageUrl && !this.options?.disableImageLazyLoadWarning) {
      logLazyLCPWarning(this.lcpImageUrl);
    }
  }
  isOversized(image) {
    if (!this.window) {
      return false;
    }
    const nonOversizedImageExtentions = [
      // SVG images are vector-based, which means they can scale
      // to any size without losing quality.
      ".svg"
    ];
    const imageSource = (image.src || "").toLowerCase();
    if (nonOversizedImageExtentions.some((extension) => imageSource.endsWith(extension))) {
      return false;
    }
    const computedStyle = this.window.getComputedStyle(image);
    let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
    let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
    const boxSizing = computedStyle.getPropertyValue("box-sizing");
    const objectFit = computedStyle.getPropertyValue("object-fit");
    if (objectFit === `cover`) {
      return false;
    }
    if (boxSizing === "border-box") {
      const paddingTop = computedStyle.getPropertyValue("padding-top");
      const paddingRight = computedStyle.getPropertyValue("padding-right");
      const paddingBottom = computedStyle.getPropertyValue("padding-bottom");
      const paddingLeft = computedStyle.getPropertyValue("padding-left");
      renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);
      renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);
    }
    const intrinsicWidth = image.naturalWidth;
    const intrinsicHeight = image.naturalHeight;
    const recommendedWidth = this.window.devicePixelRatio * renderedWidth;
    const recommendedHeight = this.window.devicePixelRatio * renderedHeight;
    const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE;
    const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE;
    return oversizedWidth || oversizedHeight;
  }
  static \u0275fac = function ImagePerformanceWarning_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ImagePerformanceWarning)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _ImagePerformanceWarning,
    factory: _ImagePerformanceWarning.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ImagePerformanceWarning, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
function logLazyLCPWarning(src) {
  console.warn(formatRuntimeError(-913, `An image with src ${src} is the Largest Contentful Paint (LCP) element but was given a "loading" value of "lazy", which can negatively impact application loading performance. This warning can be addressed by changing the loading value of the LCP image to "eager", or by using the NgOptimizedImage directive's prioritization utilities. For more information about addressing or disabling this warning, see https://angular.dev/errors/NG0913`));
}
function logOversizedImageWarning(src) {
  console.warn(formatRuntimeError(-913, `An image with src ${src} has intrinsic file dimensions much larger than its rendered size. This can negatively impact application loading performance. For more information about addressing or disabling this warning, see https://angular.dev/errors/NG0913`));
}
var PLATFORM_DESTROY_LISTENERS = new InjectionToken(ngDevMode ? "PlatformDestroyListeners" : "");
var ENABLE_ROOT_COMPONENT_BOOTSTRAP = new InjectionToken(ngDevMode ? "ENABLE_ROOT_COMPONENT_BOOTSTRAP" : "");
function isApplicationBootstrapConfig(config2) {
  return !config2.moduleRef;
}
function bootstrap(config2) {
  const envInjector = isApplicationBootstrapConfig(config2) ? config2.r3Injector : config2.moduleRef.injector;
  const ngZone = envInjector.get(NgZone);
  return ngZone.run(() => {
    if (isApplicationBootstrapConfig(config2)) {
      config2.r3Injector.resolveInjectorInitializers();
    } else {
      config2.moduleRef.resolveInjectorInitializers();
    }
    const exceptionHandler = envInjector.get(ErrorHandler, null);
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (exceptionHandler === null) {
        const errorMessage = isApplicationBootstrapConfig(config2) ? "No `ErrorHandler` found in the Dependency Injection tree." : "No ErrorHandler. Is platform module (BrowserModule) included";
        throw new RuntimeError(402, errorMessage);
      }
      if (envInjector.get(PROVIDED_ZONELESS) && envInjector.get(PROVIDED_NG_ZONE)) {
        throw new RuntimeError(408, "Invalid change detection configuration: provideZoneChangeDetection and provideExperimentalZonelessChangeDetection cannot be used together.");
      }
    }
    let onErrorSubscription;
    ngZone.runOutsideAngular(() => {
      onErrorSubscription = ngZone.onError.subscribe({
        next: (error) => {
          exceptionHandler.handleError(error);
        }
      });
    });
    if (isApplicationBootstrapConfig(config2)) {
      const destroyListener = () => envInjector.destroy();
      const onPlatformDestroyListeners = config2.platformInjector.get(PLATFORM_DESTROY_LISTENERS);
      onPlatformDestroyListeners.add(destroyListener);
      envInjector.onDestroy(() => {
        onErrorSubscription.unsubscribe();
        onPlatformDestroyListeners.delete(destroyListener);
      });
    } else {
      const destroyListener = () => config2.moduleRef.destroy();
      const onPlatformDestroyListeners = config2.platformInjector.get(PLATFORM_DESTROY_LISTENERS);
      onPlatformDestroyListeners.add(destroyListener);
      config2.moduleRef.onDestroy(() => {
        remove(config2.allPlatformModules, config2.moduleRef);
        onErrorSubscription.unsubscribe();
        onPlatformDestroyListeners.delete(destroyListener);
      });
    }
    return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {
      const initStatus = envInjector.get(ApplicationInitStatus);
      initStatus.runInitializers();
      return initStatus.donePromise.then(() => {
        const localeId = envInjector.get(LOCALE_ID, DEFAULT_LOCALE_ID);
        setLocaleId(localeId || DEFAULT_LOCALE_ID);
        const enableRootComponentBoostrap = envInjector.get(ENABLE_ROOT_COMPONENT_BOOTSTRAP, true);
        if (!enableRootComponentBoostrap) {
          if (isApplicationBootstrapConfig(config2)) {
            return envInjector.get(ApplicationRef);
          }
          config2.allPlatformModules.push(config2.moduleRef);
          return config2.moduleRef;
        }
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          const imagePerformanceService = envInjector.get(ImagePerformanceWarning);
          imagePerformanceService.start();
        }
        if (isApplicationBootstrapConfig(config2)) {
          const appRef = envInjector.get(ApplicationRef);
          if (config2.rootComponent !== void 0) {
            appRef.bootstrap(config2.rootComponent);
          }
          return appRef;
        } else {
          moduleDoBootstrap(config2.moduleRef, config2.allPlatformModules);
          return config2.moduleRef;
        }
      });
    });
  });
}
function moduleDoBootstrap(moduleRef, allPlatformModules) {
  const appRef = moduleRef.injector.get(ApplicationRef);
  if (moduleRef._bootstrapComponents.length > 0) {
    moduleRef._bootstrapComponents.forEach((f) => appRef.bootstrap(f));
  } else if (moduleRef.instance.ngDoBootstrap) {
    moduleRef.instance.ngDoBootstrap(appRef);
  } else {
    throw new RuntimeError(-403, ngDevMode && `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`);
  }
  allPlatformModules.push(moduleRef);
}
function _callAndReportToErrorHandler(errorHandler2, ngZone, callback) {
  try {
    const result = callback();
    if (isPromise2(result)) {
      return result.catch((e2) => {
        ngZone.runOutsideAngular(() => errorHandler2.handleError(e2));
        throw e2;
      });
    }
    return result;
  } catch (e2) {
    ngZone.runOutsideAngular(() => errorHandler2.handleError(e2));
    throw e2;
  }
}
var PlatformRef = class _PlatformRef {
  _injector;
  _modules = [];
  _destroyListeners = [];
  _destroyed = false;
  /** @internal */
  constructor(_injector) {
    this._injector = _injector;
  }
  /**
   * Creates an instance of an `@NgModule` for the given platform.
   *
   * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function
   *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.
   */
  bootstrapModuleFactory(moduleFactory, options) {
    const scheduleInRootZone = options?.scheduleInRootZone;
    const ngZoneFactory = () => getNgZone(options?.ngZone, __spreadProps(__spreadValues({}, getNgZoneOptions({
      eventCoalescing: options?.ngZoneEventCoalescing,
      runCoalescing: options?.ngZoneRunCoalescing
    })), {
      scheduleInRootZone
    }));
    const ignoreChangesOutsideZone = options?.ignoreChangesOutsideZone;
    const allAppProviders = [internalProvideZoneChangeDetection({
      ngZoneFactory,
      ignoreChangesOutsideZone
    }), {
      provide: ChangeDetectionScheduler,
      useExisting: ChangeDetectionSchedulerImpl
    }];
    const moduleRef = createNgModuleRefWithProviders(moduleFactory.moduleType, this.injector, allAppProviders);
    return bootstrap({
      moduleRef,
      allPlatformModules: this._modules,
      platformInjector: this.injector
    });
  }
  /**
   * Creates an instance of an `@NgModule` for a given platform.
   *
   * @usageNotes
   * ### Simple Example
   *
   * ```ts
   * @NgModule({
   *   imports: [BrowserModule]
   * })
   * class MyModule {}
   *
   * let moduleRef = platformBrowser().bootstrapModule(MyModule);
   * ```
   *
   */
  bootstrapModule(moduleType, compilerOptions = []) {
    const options = optionsReducer({}, compilerOptions);
    return compileNgModuleFactory(this.injector, options, moduleType).then((moduleFactory) => this.bootstrapModuleFactory(moduleFactory, options));
  }
  /**
   * Registers a listener to be called when the platform is destroyed.
   */
  onDestroy(callback) {
    this._destroyListeners.push(callback);
  }
  /**
   * Retrieves the platform {@link Injector}, which is the parent injector for
   * every Angular application on the page and provides singleton providers.
   */
  get injector() {
    return this._injector;
  }
  /**
   * Destroys the current Angular platform and all Angular applications on the page.
   * Destroys all modules and listeners registered with the platform.
   */
  destroy() {
    if (this._destroyed) {
      throw new RuntimeError(404, ngDevMode && "The platform has already been destroyed!");
    }
    this._modules.slice().forEach((module) => module.destroy());
    this._destroyListeners.forEach((listener) => listener());
    const destroyListeners = this._injector.get(PLATFORM_DESTROY_LISTENERS, null);
    if (destroyListeners) {
      destroyListeners.forEach((listener) => listener());
      destroyListeners.clear();
    }
    this._destroyed = true;
  }
  /**
   * Indicates whether this instance was destroyed.
   */
  get destroyed() {
    return this._destroyed;
  }
  static \u0275fac = function PlatformRef_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _PlatformRef)(\u0275\u0275inject(Injector));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _PlatformRef,
    factory: _PlatformRef.\u0275fac,
    providedIn: "platform"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformRef, [{
    type: Injectable,
    args: [{
      providedIn: "platform"
    }]
  }], () => [{
    type: Injector
  }], null);
})();
var _platformInjector = null;
var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken(ngDevMode ? "AllowMultipleToken" : "");
function createPlatform(injector) {
  if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
    throw new RuntimeError(400, ngDevMode && "There can be only one platform. Destroy the previous one to create a new one.");
  }
  publishDefaultGlobalUtils();
  publishSignalConfiguration();
  _platformInjector = injector;
  const platform = injector.get(PlatformRef);
  runPlatformInitializers(injector);
  return platform;
}
function createPlatformFactory(parentPlatformFactory, name, providers = []) {
  const desc = `Platform: ${name}`;
  const marker = new InjectionToken(desc);
  return (extraProviders = []) => {
    let platform = getPlatform();
    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
      const platformProviders = [...providers, ...extraProviders, {
        provide: marker,
        useValue: true
      }];
      if (parentPlatformFactory) {
        parentPlatformFactory(platformProviders);
      } else {
        createPlatform(createPlatformInjector(platformProviders, desc));
      }
    }
    return assertPlatform(marker);
  };
}
function createPlatformInjector(providers = [], name) {
  return Injector.create({
    name,
    providers: [{
      provide: INJECTOR_SCOPE,
      useValue: "platform"
    }, {
      provide: PLATFORM_DESTROY_LISTENERS,
      useValue: /* @__PURE__ */ new Set([() => _platformInjector = null])
    }, ...providers]
  });
}
function assertPlatform(requiredToken) {
  const platform = getPlatform();
  if (!platform) {
    throw new RuntimeError(401, ngDevMode && "No platform exists!");
  }
  if ((typeof ngDevMode === "undefined" || ngDevMode) && !platform.injector.get(requiredToken, null)) {
    throw new RuntimeError(400, "A platform with a different configuration has been created. Please destroy it first.");
  }
  return platform;
}
function getPlatform() {
  return _platformInjector?.get(PlatformRef) ?? null;
}
function createOrReusePlatformInjector(providers = []) {
  if (_platformInjector) return _platformInjector;
  publishDefaultGlobalUtils();
  const injector = createPlatformInjector(providers);
  _platformInjector = injector;
  publishSignalConfiguration();
  runPlatformInitializers(injector);
  return injector;
}
function runPlatformInitializers(injector) {
  const inits = injector.get(PLATFORM_INITIALIZER, null);
  runInInjectionContext(injector, () => {
    inits?.forEach((init) => init());
  });
}
var ChangeDetectorRef = class {
  /**
   * @internal
   * @nocollapse
   */
  static __NG_ELEMENT_ID__ = injectChangeDetectorRef;
};
function injectChangeDetectorRef(flags) {
  return createViewRef(
    getCurrentTNode(),
    getLView(),
    (flags & 16) === 16
    /* InternalInjectFlags.ForPipe */
  );
}
function createViewRef(tNode, lView, isPipe2) {
  if (isComponentHost(tNode) && !isPipe2) {
    const componentView = getComponentLViewByIndex(tNode.index, lView);
    return new ViewRef$1(componentView, componentView);
  } else if (tNode.type & (3 | 12 | 32 | 128)) {
    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW];
    return new ViewRef$1(hostComponentView, lView);
  }
  return null;
}
var DefaultIterableDifferFactory = class {
  constructor() {
  }
  supports(obj) {
    return isListLikeIterable(obj);
  }
  create(trackByFn) {
    return new DefaultIterableDiffer(trackByFn);
  }
};
var trackByIdentity = (index, item) => item;
var DefaultIterableDiffer = class {
  length = 0;
  // TODO: confirm the usage of `collection` as it's unused, readonly and on a non public API.
  collection;
  // Keeps track of the used records at any point in time (during & across `_check()` calls)
  _linkedRecords = null;
  // Keeps track of the removed records at any point in time during `_check()` calls.
  _unlinkedRecords = null;
  _previousItHead = null;
  _itHead = null;
  _itTail = null;
  _additionsHead = null;
  _additionsTail = null;
  _movesHead = null;
  _movesTail = null;
  _removalsHead = null;
  _removalsTail = null;
  // Keeps track of records where custom track by is the same, but item identity has changed
  _identityChangesHead = null;
  _identityChangesTail = null;
  _trackByFn;
  constructor(trackByFn) {
    this._trackByFn = trackByFn || trackByIdentity;
  }
  forEachItem(fn) {
    let record;
    for (record = this._itHead; record !== null; record = record._next) {
      fn(record);
    }
  }
  forEachOperation(fn) {
    let nextIt = this._itHead;
    let nextRemove = this._removalsHead;
    let addRemoveOffset = 0;
    let moveOffsets = null;
    while (nextIt || nextRemove) {
      const record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
      const currentIndex = record.currentIndex;
      if (record === nextRemove) {
        addRemoveOffset--;
        nextRemove = nextRemove._nextRemoved;
      } else {
        nextIt = nextIt._next;
        if (record.previousIndex == null) {
          addRemoveOffset++;
        } else {
          if (!moveOffsets) moveOffsets = [];
          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
          const localCurrentIndex = currentIndex - addRemoveOffset;
          if (localMovePreviousIndex != localCurrentIndex) {
            for (let i = 0; i < localMovePreviousIndex; i++) {
              const offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
              const index = offset + i;
              if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                moveOffsets[i] = offset + 1;
              }
            }
            const previousIndex = record.previousIndex;
            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
          }
        }
      }
      if (adjPreviousIndex !== currentIndex) {
        fn(record, adjPreviousIndex, currentIndex);
      }
    }
  }
  forEachPreviousItem(fn) {
    let record;
    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
      fn(record);
    }
  }
  forEachAddedItem(fn) {
    let record;
    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
      fn(record);
    }
  }
  forEachMovedItem(fn) {
    let record;
    for (record = this._movesHead; record !== null; record = record._nextMoved) {
      fn(record);
    }
  }
  forEachRemovedItem(fn) {
    let record;
    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
      fn(record);
    }
  }
  forEachIdentityChange(fn) {
    let record;
    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
      fn(record);
    }
  }
  diff(collection) {
    if (collection == null) collection = [];
    if (!isListLikeIterable(collection)) {
      throw new RuntimeError(900, ngDevMode && `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);
    }
    if (this.check(collection)) {
      return this;
    } else {
      return null;
    }
  }
  onDestroy() {
  }
  check(collection) {
    this._reset();
    let record = this._itHead;
    let mayBeDirty = false;
    let index;
    let item;
    let itemTrackBy;
    if (Array.isArray(collection)) {
      this.length = collection.length;
      for (let index2 = 0; index2 < this.length; index2++) {
        item = collection[index2];
        itemTrackBy = this._trackByFn(index2, item);
        if (record === null || !Object.is(record.trackById, itemTrackBy)) {
          record = this._mismatch(record, item, itemTrackBy, index2);
          mayBeDirty = true;
        } else {
          if (mayBeDirty) {
            record = this._verifyReinsertion(record, item, itemTrackBy, index2);
          }
          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
        }
        record = record._next;
      }
    } else {
      index = 0;
      iterateListLike(collection, (item2) => {
        itemTrackBy = this._trackByFn(index, item2);
        if (record === null || !Object.is(record.trackById, itemTrackBy)) {
          record = this._mismatch(record, item2, itemTrackBy, index);
          mayBeDirty = true;
        } else {
          if (mayBeDirty) {
            record = this._verifyReinsertion(record, item2, itemTrackBy, index);
          }
          if (!Object.is(record.item, item2)) this._addIdentityChange(record, item2);
        }
        record = record._next;
        index++;
      });
      this.length = index;
    }
    this._truncate(record);
    this.collection = collection;
    return this.isDirty;
  }
  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
   * changes.
   */
  get isDirty() {
    return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
  }
  /**
   * Reset the state of the change objects to show no changes. This means set previousKey to
   * currentKey, and clear all of the queues (additions, moves, removals).
   * Set the previousIndexes of moved and added items to their currentIndexes
   * Reset the list of additions, moves and removals
   *
   * @internal
   */
  _reset() {
    if (this.isDirty) {
      let record;
      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
        record._nextPrevious = record._next;
      }
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        record.previousIndex = record.currentIndex;
      }
      this._additionsHead = this._additionsTail = null;
      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        record.previousIndex = record.currentIndex;
      }
      this._movesHead = this._movesTail = null;
      this._removalsHead = this._removalsTail = null;
      this._identityChangesHead = this._identityChangesTail = null;
    }
  }
  /**
   * This is the core function which handles differences between collections.
   *
   * - `record` is the record which we saw at this position last time. If null then it is a new
   *   item.
   * - `item` is the current item in the collection
   * - `index` is the position of the item in the collection
   *
   * @internal
   */
  _mismatch(record, item, itemTrackBy, index) {
    let previousRecord;
    if (record === null) {
      previousRecord = this._itTail;
    } else {
      previousRecord = record._prev;
      this._remove(record);
    }
    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
    if (record !== null) {
      if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
      this._reinsertAfter(record, previousRecord, index);
    } else {
      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
      if (record !== null) {
        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
        this._moveAfter(record, previousRecord, index);
      } else {
        record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
      }
    }
    return record;
  }
  /**
   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
   *
   * Use case: `[a, a]` => `[b, a, a]`
   *
   * If we did not have this check then the insertion of `b` would:
   *   1) evict first `a`
   *   2) insert `b` at `0` index.
   *   3) leave `a` at index `1` as is. <-- this is wrong!
   *   3) reinsert `a` at index 2. <-- this is wrong!
   *
   * The correct behavior is:
   *   1) evict first `a`
   *   2) insert `b` at `0` index.
   *   3) reinsert `a` at index 1.
   *   3) move `a` at from `1` to `2`.
   *
   *
   * Double check that we have not evicted a duplicate item. We need to check if the item type may
   * have already been removed:
   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
   * at the end.
   *
   * @internal
   */
  _verifyReinsertion(record, item, itemTrackBy, index) {
    let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
    if (reinsertRecord !== null) {
      record = this._reinsertAfter(reinsertRecord, record._prev, index);
    } else if (record.currentIndex != index) {
      record.currentIndex = index;
      this._addToMoves(record, index);
    }
    return record;
  }
  /**
   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
   *
   * - `record` The first excess {@link IterableChangeRecord_}.
   *
   * @internal
   */
  _truncate(record) {
    while (record !== null) {
      const nextRecord = record._next;
      this._addToRemovals(this._unlink(record));
      record = nextRecord;
    }
    if (this._unlinkedRecords !== null) {
      this._unlinkedRecords.clear();
    }
    if (this._additionsTail !== null) {
      this._additionsTail._nextAdded = null;
    }
    if (this._movesTail !== null) {
      this._movesTail._nextMoved = null;
    }
    if (this._itTail !== null) {
      this._itTail._next = null;
    }
    if (this._removalsTail !== null) {
      this._removalsTail._nextRemoved = null;
    }
    if (this._identityChangesTail !== null) {
      this._identityChangesTail._nextIdentityChange = null;
    }
  }
  /** @internal */
  _reinsertAfter(record, prevRecord, index) {
    if (this._unlinkedRecords !== null) {
      this._unlinkedRecords.remove(record);
    }
    const prev = record._prevRemoved;
    const next = record._nextRemoved;
    if (prev === null) {
      this._removalsHead = next;
    } else {
      prev._nextRemoved = next;
    }
    if (next === null) {
      this._removalsTail = prev;
    } else {
      next._prevRemoved = prev;
    }
    this._insertAfter(record, prevRecord, index);
    this._addToMoves(record, index);
    return record;
  }
  /** @internal */
  _moveAfter(record, prevRecord, index) {
    this._unlink(record);
    this._insertAfter(record, prevRecord, index);
    this._addToMoves(record, index);
    return record;
  }
  /** @internal */
  _addAfter(record, prevRecord, index) {
    this._insertAfter(record, prevRecord, index);
    if (this._additionsTail === null) {
      this._additionsTail = this._additionsHead = record;
    } else {
      this._additionsTail = this._additionsTail._nextAdded = record;
    }
    return record;
  }
  /** @internal */
  _insertAfter(record, prevRecord, index) {
    const next = prevRecord === null ? this._itHead : prevRecord._next;
    record._next = next;
    record._prev = prevRecord;
    if (next === null) {
      this._itTail = record;
    } else {
      next._prev = record;
    }
    if (prevRecord === null) {
      this._itHead = record;
    } else {
      prevRecord._next = record;
    }
    if (this._linkedRecords === null) {
      this._linkedRecords = new _DuplicateMap();
    }
    this._linkedRecords.put(record);
    record.currentIndex = index;
    return record;
  }
  /** @internal */
  _remove(record) {
    return this._addToRemovals(this._unlink(record));
  }
  /** @internal */
  _unlink(record) {
    if (this._linkedRecords !== null) {
      this._linkedRecords.remove(record);
    }
    const prev = record._prev;
    const next = record._next;
    if (prev === null) {
      this._itHead = next;
    } else {
      prev._next = next;
    }
    if (next === null) {
      this._itTail = prev;
    } else {
      next._prev = prev;
    }
    return record;
  }
  /** @internal */
  _addToMoves(record, toIndex) {
    if (record.previousIndex === toIndex) {
      return record;
    }
    if (this._movesTail === null) {
      this._movesTail = this._movesHead = record;
    } else {
      this._movesTail = this._movesTail._nextMoved = record;
    }
    return record;
  }
  _addToRemovals(record) {
    if (this._unlinkedRecords === null) {
      this._unlinkedRecords = new _DuplicateMap();
    }
    this._unlinkedRecords.put(record);
    record.currentIndex = null;
    record._nextRemoved = null;
    if (this._removalsTail === null) {
      this._removalsTail = this._removalsHead = record;
      record._prevRemoved = null;
    } else {
      record._prevRemoved = this._removalsTail;
      this._removalsTail = this._removalsTail._nextRemoved = record;
    }
    return record;
  }
  /** @internal */
  _addIdentityChange(record, item) {
    record.item = item;
    if (this._identityChangesTail === null) {
      this._identityChangesTail = this._identityChangesHead = record;
    } else {
      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
    }
    return record;
  }
};
var IterableChangeRecord_ = class {
  item;
  trackById;
  currentIndex = null;
  previousIndex = null;
  /** @internal */
  _nextPrevious = null;
  /** @internal */
  _prev = null;
  /** @internal */
  _next = null;
  /** @internal */
  _prevDup = null;
  /** @internal */
  _nextDup = null;
  /** @internal */
  _prevRemoved = null;
  /** @internal */
  _nextRemoved = null;
  /** @internal */
  _nextAdded = null;
  /** @internal */
  _nextMoved = null;
  /** @internal */
  _nextIdentityChange = null;
  constructor(item, trackById) {
    this.item = item;
    this.trackById = trackById;
  }
};
var _DuplicateItemRecordList = class {
  /** @internal */
  _head = null;
  /** @internal */
  _tail = null;
  /**
   * Append the record to the list of duplicates.
   *
   * Note: by design all records in the list of duplicates hold the same value in record.item.
   */
  add(record) {
    if (this._head === null) {
      this._head = this._tail = record;
      record._nextDup = null;
      record._prevDup = null;
    } else {
      this._tail._nextDup = record;
      record._prevDup = this._tail;
      record._nextDup = null;
      this._tail = record;
    }
  }
  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
  // IterableChangeRecord_.currentIndex >= atOrAfterIndex
  get(trackById, atOrAfterIndex) {
    let record;
    for (record = this._head; record !== null; record = record._nextDup) {
      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {
        return record;
      }
    }
    return null;
  }
  /**
   * Remove one {@link IterableChangeRecord_} from the list of duplicates.
   *
   * Returns whether the list of duplicates is empty.
   */
  remove(record) {
    const prev = record._prevDup;
    const next = record._nextDup;
    if (prev === null) {
      this._head = next;
    } else {
      prev._nextDup = next;
    }
    if (next === null) {
      this._tail = prev;
    } else {
      next._prevDup = prev;
    }
    return this._head === null;
  }
};
var _DuplicateMap = class {
  map = /* @__PURE__ */ new Map();
  put(record) {
    const key = record.trackById;
    let duplicates = this.map.get(key);
    if (!duplicates) {
      duplicates = new _DuplicateItemRecordList();
      this.map.set(key, duplicates);
    }
    duplicates.add(record);
  }
  /**
   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
   *
   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
   * have any more `a`s needs to return the second `a`.
   */
  get(trackById, atOrAfterIndex) {
    const key = trackById;
    const recordList = this.map.get(key);
    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
  }
  /**
   * Removes a {@link IterableChangeRecord_} from the list of duplicates.
   *
   * The list of duplicates also is removed from the map if it gets empty.
   */
  remove(record) {
    const key = record.trackById;
    const recordList = this.map.get(key);
    if (recordList.remove(record)) {
      this.map.delete(key);
    }
    return record;
  }
  get isEmpty() {
    return this.map.size === 0;
  }
  clear() {
    this.map.clear();
  }
};
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
  const previousIndex = item.previousIndex;
  if (previousIndex === null) return previousIndex;
  let moveOffset = 0;
  if (moveOffsets && previousIndex < moveOffsets.length) {
    moveOffset = moveOffsets[previousIndex];
  }
  return previousIndex + addRemoveOffset + moveOffset;
}
var DefaultKeyValueDifferFactory = class {
  constructor() {
  }
  supports(obj) {
    return obj instanceof Map || isJsObject(obj);
  }
  create() {
    return new DefaultKeyValueDiffer();
  }
};
var DefaultKeyValueDiffer = class {
  _records = /* @__PURE__ */ new Map();
  _mapHead = null;
  // _appendAfter is used in the check loop
  _appendAfter = null;
  _previousMapHead = null;
  _changesHead = null;
  _changesTail = null;
  _additionsHead = null;
  _additionsTail = null;
  _removalsHead = null;
  _removalsTail = null;
  get isDirty() {
    return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
  }
  forEachItem(fn) {
    let record;
    for (record = this._mapHead; record !== null; record = record._next) {
      fn(record);
    }
  }
  forEachPreviousItem(fn) {
    let record;
    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
      fn(record);
    }
  }
  forEachChangedItem(fn) {
    let record;
    for (record = this._changesHead; record !== null; record = record._nextChanged) {
      fn(record);
    }
  }
  forEachAddedItem(fn) {
    let record;
    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
      fn(record);
    }
  }
  forEachRemovedItem(fn) {
    let record;
    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
      fn(record);
    }
  }
  diff(map2) {
    if (!map2) {
      map2 = /* @__PURE__ */ new Map();
    } else if (!(map2 instanceof Map || isJsObject(map2))) {
      throw new RuntimeError(900, ngDevMode && `Error trying to diff '${stringify(map2)}'. Only maps and objects are allowed`);
    }
    return this.check(map2) ? this : null;
  }
  onDestroy() {
  }
  /**
   * Check the current state of the map vs the previous.
   * The algorithm is optimised for when the keys do no change.
   */
  check(map2) {
    this._reset();
    let insertBefore = this._mapHead;
    this._appendAfter = null;
    this._forEach(map2, (value, key) => {
      if (insertBefore && insertBefore.key === key) {
        this._maybeAddToChanges(insertBefore, value);
        this._appendAfter = insertBefore;
        insertBefore = insertBefore._next;
      } else {
        const record = this._getOrCreateRecordForKey(key, value);
        insertBefore = this._insertBeforeOrAppend(insertBefore, record);
      }
    });
    if (insertBefore) {
      if (insertBefore._prev) {
        insertBefore._prev._next = null;
      }
      this._removalsHead = insertBefore;
      for (let record = insertBefore; record !== null; record = record._nextRemoved) {
        if (record === this._mapHead) {
          this._mapHead = null;
        }
        this._records.delete(record.key);
        record._nextRemoved = record._next;
        record.previousValue = record.currentValue;
        record.currentValue = null;
        record._prev = null;
        record._next = null;
      }
    }
    if (this._changesTail) this._changesTail._nextChanged = null;
    if (this._additionsTail) this._additionsTail._nextAdded = null;
    return this.isDirty;
  }
  /**
   * Inserts a record before `before` or append at the end of the list when `before` is null.
   *
   * Notes:
   * - This method appends at `this._appendAfter`,
   * - This method updates `this._appendAfter`,
   * - The return value is the new value for the insertion pointer.
   */
  _insertBeforeOrAppend(before, record) {
    if (before) {
      const prev = before._prev;
      record._next = before;
      record._prev = prev;
      before._prev = record;
      if (prev) {
        prev._next = record;
      }
      if (before === this._mapHead) {
        this._mapHead = record;
      }
      this._appendAfter = before;
      return before;
    }
    if (this._appendAfter) {
      this._appendAfter._next = record;
      record._prev = this._appendAfter;
    } else {
      this._mapHead = record;
    }
    this._appendAfter = record;
    return null;
  }
  _getOrCreateRecordForKey(key, value) {
    if (this._records.has(key)) {
      const record2 = this._records.get(key);
      this._maybeAddToChanges(record2, value);
      const prev = record2._prev;
      const next = record2._next;
      if (prev) {
        prev._next = next;
      }
      if (next) {
        next._prev = prev;
      }
      record2._next = null;
      record2._prev = null;
      return record2;
    }
    const record = new KeyValueChangeRecord_(key);
    this._records.set(key, record);
    record.currentValue = value;
    this._addToAdditions(record);
    return record;
  }
  /** @internal */
  _reset() {
    if (this.isDirty) {
      let record;
      this._previousMapHead = this._mapHead;
      for (record = this._previousMapHead; record !== null; record = record._next) {
        record._nextPrevious = record._next;
      }
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        record.previousValue = record.currentValue;
      }
      for (record = this._additionsHead; record != null; record = record._nextAdded) {
        record.previousValue = record.currentValue;
      }
      this._changesHead = this._changesTail = null;
      this._additionsHead = this._additionsTail = null;
      this._removalsHead = null;
    }
  }
  // Add the record or a given key to the list of changes only when the value has actually changed
  _maybeAddToChanges(record, newValue) {
    if (!Object.is(newValue, record.currentValue)) {
      record.previousValue = record.currentValue;
      record.currentValue = newValue;
      this._addToChanges(record);
    }
  }
  _addToAdditions(record) {
    if (this._additionsHead === null) {
      this._additionsHead = this._additionsTail = record;
    } else {
      this._additionsTail._nextAdded = record;
      this._additionsTail = record;
    }
  }
  _addToChanges(record) {
    if (this._changesHead === null) {
      this._changesHead = this._changesTail = record;
    } else {
      this._changesTail._nextChanged = record;
      this._changesTail = record;
    }
  }
  /** @internal */
  _forEach(obj, fn) {
    if (obj instanceof Map) {
      obj.forEach(fn);
    } else {
      Object.keys(obj).forEach((k) => fn(obj[k], k));
    }
  }
};
var KeyValueChangeRecord_ = class {
  key;
  previousValue = null;
  currentValue = null;
  /** @internal */
  _nextPrevious = null;
  /** @internal */
  _next = null;
  /** @internal */
  _prev = null;
  /** @internal */
  _nextAdded = null;
  /** @internal */
  _nextRemoved = null;
  /** @internal */
  _nextChanged = null;
  constructor(key) {
    this.key = key;
  }
};
function defaultIterableDiffersFactory() {
  return new IterableDiffers([new DefaultIterableDifferFactory()]);
}
var IterableDiffers = class _IterableDiffers {
  factories;
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _IterableDiffers,
      providedIn: "root",
      factory: defaultIterableDiffersFactory
    })
  );
  constructor(factories) {
    this.factories = factories;
  }
  static create(factories, parent) {
    if (parent != null) {
      const copied = parent.factories.slice();
      factories = factories.concat(copied);
    }
    return new _IterableDiffers(factories);
  }
  /**
   * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
   * inherited {@link IterableDiffers} instance with the provided factories and return a new
   * {@link IterableDiffers} instance.
   *
   * @usageNotes
   * ### Example
   *
   * The following example shows how to extend an existing list of factories,
   * which will only be applied to the injector for this component and its children.
   * This step is all that's required to make a new {@link IterableDiffer} available.
   *
   * ```ts
   * @Component({
   *   viewProviders: [
   *     IterableDiffers.extend([new ImmutableListDiffer()])
   *   ]
   * })
   * ```
   */
  static extend(factories) {
    return {
      provide: _IterableDiffers,
      useFactory: (parent) => {
        return _IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());
      },
      // Dependency technically isn't optional, but we can provide a better error message this way.
      deps: [[_IterableDiffers, new SkipSelf(), new Optional()]]
    };
  }
  find(iterable) {
    const factory = this.factories.find((f) => f.supports(iterable));
    if (factory != null) {
      return factory;
    } else {
      throw new RuntimeError(901, ngDevMode && `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);
    }
  }
};
function getTypeNameForDebugging(type) {
  return type["name"] || typeof type;
}
function defaultKeyValueDiffersFactory() {
  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
}
var KeyValueDiffers = class _KeyValueDiffers {
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _KeyValueDiffers,
      providedIn: "root",
      factory: defaultKeyValueDiffersFactory
    })
  );
  factories;
  constructor(factories) {
    this.factories = factories;
  }
  static create(factories, parent) {
    if (parent) {
      const copied = parent.factories.slice();
      factories = factories.concat(copied);
    }
    return new _KeyValueDiffers(factories);
  }
  /**
   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
   * {@link KeyValueDiffers} instance.
   *
   * @usageNotes
   * ### Example
   *
   * The following example shows how to extend an existing list of factories,
   * which will only be applied to the injector for this component and its children.
   * This step is all that's required to make a new {@link KeyValueDiffer} available.
   *
   * ```ts
   * @Component({
   *   viewProviders: [
   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
   *   ]
   * })
   * ```
   */
  static extend(factories) {
    return {
      provide: _KeyValueDiffers,
      useFactory: (parent) => {
        return _KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());
      },
      // Dependency technically isn't optional, but we can provide a better error message this way.
      deps: [[_KeyValueDiffers, new SkipSelf(), new Optional()]]
    };
  }
  find(kv) {
    const factory = this.factories.find((f) => f.supports(kv));
    if (factory) {
      return factory;
    }
    throw new RuntimeError(901, ngDevMode && `Cannot find a differ supporting object '${kv}'`);
  }
};
var keyValDiff = [new DefaultKeyValueDifferFactory()];
var iterableDiff = [new DefaultIterableDifferFactory()];
var defaultIterableDiffers = new IterableDiffers(iterableDiff);
var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
var platformCore = createPlatformFactory(null, "core", []);
var ApplicationModule = class _ApplicationModule {
  // Inject ApplicationRef to make it eager...
  constructor(appRef) {
  }
  static \u0275fac = function ApplicationModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ApplicationModule)(\u0275\u0275inject(ApplicationRef));
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
    type: _ApplicationModule
  });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationModule, [{
    type: NgModule
  }], () => [{
    type: ApplicationRef
  }], null);
})();
function internalCreateApplication(config2) {
  profiler(
    8
    /* ProfilerEvent.BootstrapApplicationStart */
  );
  try {
    const {
      rootComponent,
      appProviders,
      platformProviders
    } = config2;
    if ((typeof ngDevMode === "undefined" || ngDevMode) && rootComponent !== void 0) {
      assertStandaloneComponentType(rootComponent);
    }
    const platformInjector = createOrReusePlatformInjector(platformProviders);
    const allAppProviders = [internalProvideZoneChangeDetection({}), {
      provide: ChangeDetectionScheduler,
      useExisting: ChangeDetectionSchedulerImpl
    }, ...appProviders || []];
    const adapter = new EnvironmentNgModuleRefAdapter({
      providers: allAppProviders,
      parent: platformInjector,
      debugName: typeof ngDevMode === "undefined" || ngDevMode ? "Environment Injector" : "",
      // We skip environment initializers because we need to run them inside the NgZone, which
      // happens after we get the NgZone instance from the Injector.
      runEnvironmentInitializers: false
    });
    return bootstrap({
      r3Injector: adapter.injector,
      platformInjector,
      rootComponent
    });
  } catch (e2) {
    return Promise.reject(e2);
  } finally {
    profiler(
      9
      /* ProfilerEvent.BootstrapApplicationEnd */
    );
  }
}
function booleanAttribute(value) {
  return typeof value === "boolean" ? value : value != null && value !== "false";
}
function numberAttribute(value, fallbackValue = NaN) {
  const isNumberValue = !isNaN(parseFloat(value)) && !isNaN(Number(value));
  return isNumberValue ? Number(value) : fallbackValue;
}
function untracked2(nonReactiveReadsFn) {
  return untracked(nonReactiveReadsFn);
}
function computed(computation, options) {
  const getter = createComputed(computation, options?.equal);
  if (ngDevMode) {
    getter.toString = () => `[Computed: ${getter()}]`;
    getter[SIGNAL].debugName = options?.debugName;
  }
  return getter;
}
var EffectRefImpl = class {
  [SIGNAL];
  constructor(node) {
    this[SIGNAL] = node;
  }
  destroy() {
    this[SIGNAL].destroy();
  }
};
function effect(effectFn, options) {
  ngDevMode && assertNotInReactiveContext(effect, "Call `effect` outside of a reactive context. For example, schedule the effect inside the component constructor.");
  !options?.injector && assertInInjectionContext(effect);
  if (ngDevMode && options?.allowSignalWrites !== void 0) {
    console.warn(`The 'allowSignalWrites' flag is deprecated and no longer impacts effect() (writes are always allowed)`);
  }
  const injector = options?.injector ?? inject(Injector);
  let destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;
  let node;
  const viewContext = injector.get(ViewContext, null, {
    optional: true
  });
  const notifier = injector.get(ChangeDetectionScheduler);
  if (viewContext !== null && !options?.forceRoot) {
    node = createViewEffect(viewContext.view, notifier, effectFn);
    if (destroyRef instanceof NodeInjectorDestroyRef && destroyRef._lView === viewContext.view) {
      destroyRef = null;
    }
  } else {
    node = createRootEffect(effectFn, injector.get(EffectScheduler), notifier);
  }
  node.injector = injector;
  if (destroyRef !== null) {
    node.onDestroyFn = destroyRef.onDestroy(() => node.destroy());
  }
  const effectRef = new EffectRefImpl(node);
  if (ngDevMode) {
    node.debugName = options?.debugName ?? "";
    const prevInjectorProfilerContext = setInjectorProfilerContext({
      injector,
      token: null
    });
    try {
      emitEffectCreatedEvent(effectRef);
    } finally {
      setInjectorProfilerContext(prevInjectorProfilerContext);
    }
  }
  return effectRef;
}
var BASE_EFFECT_NODE = /* @__PURE__ */ (() => __spreadProps(__spreadValues({}, REACTIVE_NODE), {
  consumerIsAlwaysLive: true,
  consumerAllowSignalWrites: true,
  dirty: true,
  hasRun: false,
  cleanupFns: void 0,
  zone: null,
  kind: "effect",
  onDestroyFn: noop2,
  run() {
    this.dirty = false;
    if (ngDevMode && isInNotificationPhase()) {
      throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);
    }
    if (this.hasRun && !consumerPollProducersForChange(this)) {
      return;
    }
    this.hasRun = true;
    const registerCleanupFn = (cleanupFn) => (this.cleanupFns ??= []).push(cleanupFn);
    const prevNode = consumerBeforeComputation(this);
    const prevRefreshingViews = setIsRefreshingViews(false);
    try {
      this.maybeCleanup();
      this.fn(registerCleanupFn);
    } finally {
      setIsRefreshingViews(prevRefreshingViews);
      consumerAfterComputation(this, prevNode);
    }
  },
  maybeCleanup() {
    if (!this.cleanupFns?.length) {
      return;
    }
    try {
      while (this.cleanupFns.length) {
        this.cleanupFns.pop()();
      }
    } finally {
      this.cleanupFns = [];
    }
  }
}))();
var ROOT_EFFECT_NODE = /* @__PURE__ */ (() => __spreadProps(__spreadValues({}, BASE_EFFECT_NODE), {
  consumerMarkedDirty() {
    this.scheduler.schedule(this);
    this.notifier.notify(
      12
      /* NotificationSource.RootEffect */
    );
  },
  destroy() {
    consumerDestroy(this);
    this.onDestroyFn();
    this.maybeCleanup();
    this.scheduler.remove(this);
  }
}))();
var VIEW_EFFECT_NODE = /* @__PURE__ */ (() => __spreadProps(__spreadValues({}, BASE_EFFECT_NODE), {
  consumerMarkedDirty() {
    this.view[FLAGS] |= 8192;
    markAncestorsForTraversal(this.view);
    this.notifier.notify(
      13
      /* NotificationSource.ViewEffect */
    );
  },
  destroy() {
    consumerDestroy(this);
    this.onDestroyFn();
    this.maybeCleanup();
    this.view[EFFECTS]?.delete(this);
  }
}))();
function createViewEffect(view, notifier, fn) {
  const node = Object.create(VIEW_EFFECT_NODE);
  node.view = view;
  node.zone = typeof Zone !== "undefined" ? Zone.current : null;
  node.notifier = notifier;
  node.fn = fn;
  view[EFFECTS] ??= /* @__PURE__ */ new Set();
  view[EFFECTS].add(node);
  node.consumerMarkedDirty(node);
  return node;
}
function createRootEffect(fn, scheduler, notifier) {
  const node = Object.create(ROOT_EFFECT_NODE);
  node.fn = fn;
  node.scheduler = scheduler;
  node.notifier = notifier;
  node.zone = typeof Zone !== "undefined" ? Zone.current : null;
  node.scheduler.schedule(node);
  node.notifier.notify(
    12
    /* NotificationSource.RootEffect */
  );
  return node;
}
var ResourceStatus;
(function(ResourceStatus2) {
  ResourceStatus2[ResourceStatus2["Idle"] = 0] = "Idle";
  ResourceStatus2[ResourceStatus2["Error"] = 1] = "Error";
  ResourceStatus2[ResourceStatus2["Loading"] = 2] = "Loading";
  ResourceStatus2[ResourceStatus2["Reloading"] = 3] = "Reloading";
  ResourceStatus2[ResourceStatus2["Resolved"] = 4] = "Resolved";
  ResourceStatus2[ResourceStatus2["Local"] = 5] = "Local";
})(ResourceStatus || (ResourceStatus = {}));
var NOT_SET = Symbol("NOT_SET");
function reflectComponentType(component) {
  const componentDef = getComponentDef(component);
  if (!componentDef) return null;
  const factory = new ComponentFactory2(componentDef);
  return {
    get selector() {
      return factory.selector;
    },
    get type() {
      return factory.componentType;
    },
    get inputs() {
      return factory.inputs;
    },
    get outputs() {
      return factory.outputs;
    },
    get ngContentSelectors() {
      return factory.ngContentSelectors;
    },
    get isStandalone() {
      return componentDef.standalone;
    },
    get isSignal() {
      return componentDef.signals;
    }
  };
}
var REQUEST = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "REQUEST" : "", {
  providedIn: "platform",
  factory: () => null
});
var RESPONSE_INIT = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "RESPONSE_INIT" : "", {
  providedIn: "platform",
  factory: () => null
});
var REQUEST_CONTEXT = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "REQUEST_CONTEXT" : "", {
  providedIn: "platform",
  factory: () => null
});

// node_modules/@angular/common/fesm2022/dom_tokens-rA0ACyx7.mjs
var DOCUMENT2 = new InjectionToken(ngDevMode ? "DocumentToken" : "");

// node_modules/@angular/common/fesm2022/location-DpBxd_aX.mjs
var _DOM = null;
function getDOM() {
  return _DOM;
}
function setRootDomAdapter(adapter) {
  _DOM ??= adapter;
}
var DomAdapter = class {
};
var PlatformLocation = class _PlatformLocation {
  historyGo(relativePosition) {
    throw new Error(ngDevMode ? "Not implemented" : "");
  }
  static \u0275fac = function PlatformLocation_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _PlatformLocation)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _PlatformLocation,
    factory: () => (() => inject(BrowserPlatformLocation))(),
    providedIn: "platform"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformLocation, [{
    type: Injectable,
    args: [{
      providedIn: "platform",
      useFactory: () => inject(BrowserPlatformLocation)
    }]
  }], null, null);
})();
var LOCATION_INITIALIZED = new InjectionToken(ngDevMode ? "Location Initialized" : "");
var BrowserPlatformLocation = class _BrowserPlatformLocation extends PlatformLocation {
  _location;
  _history;
  _doc = inject(DOCUMENT2);
  constructor() {
    super();
    this._location = window.location;
    this._history = window.history;
  }
  getBaseHrefFromDOM() {
    return getDOM().getBaseHref(this._doc);
  }
  onPopState(fn) {
    const window2 = getDOM().getGlobalEventTarget(this._doc, "window");
    window2.addEventListener("popstate", fn, false);
    return () => window2.removeEventListener("popstate", fn);
  }
  onHashChange(fn) {
    const window2 = getDOM().getGlobalEventTarget(this._doc, "window");
    window2.addEventListener("hashchange", fn, false);
    return () => window2.removeEventListener("hashchange", fn);
  }
  get href() {
    return this._location.href;
  }
  get protocol() {
    return this._location.protocol;
  }
  get hostname() {
    return this._location.hostname;
  }
  get port() {
    return this._location.port;
  }
  get pathname() {
    return this._location.pathname;
  }
  get search() {
    return this._location.search;
  }
  get hash() {
    return this._location.hash;
  }
  set pathname(newPath) {
    this._location.pathname = newPath;
  }
  pushState(state, title, url) {
    this._history.pushState(state, title, url);
  }
  replaceState(state, title, url) {
    this._history.replaceState(state, title, url);
  }
  forward() {
    this._history.forward();
  }
  back() {
    this._history.back();
  }
  historyGo(relativePosition = 0) {
    this._history.go(relativePosition);
  }
  getState() {
    return this._history.state;
  }
  static \u0275fac = function BrowserPlatformLocation_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _BrowserPlatformLocation)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _BrowserPlatformLocation,
    factory: () => (() => new _BrowserPlatformLocation())(),
    providedIn: "platform"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserPlatformLocation, [{
    type: Injectable,
    args: [{
      providedIn: "platform",
      useFactory: () => new BrowserPlatformLocation()
    }]
  }], () => [], null);
})();
function joinWithSlash(start, end) {
  if (!start) return end;
  if (!end) return start;
  if (start.endsWith("/")) {
    return end.startsWith("/") ? start + end.slice(1) : start + end;
  }
  return end.startsWith("/") ? start + end : `${start}/${end}`;
}
function stripTrailingSlash(url) {
  const pathEndIdx = url.search(/#|\?|$/);
  return url[pathEndIdx - 1] === "/" ? url.slice(0, pathEndIdx - 1) + url.slice(pathEndIdx) : url;
}
function normalizeQueryParams(params) {
  return params && params[0] !== "?" ? `?${params}` : params;
}
var LocationStrategy = class _LocationStrategy {
  historyGo(relativePosition) {
    throw new Error(ngDevMode ? "Not implemented" : "");
  }
  static \u0275fac = function LocationStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _LocationStrategy)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _LocationStrategy,
    factory: () => (() => inject(PathLocationStrategy))(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LocationStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(PathLocationStrategy)
    }]
  }], null, null);
})();
var APP_BASE_HREF = new InjectionToken(ngDevMode ? "appBaseHref" : "");
var PathLocationStrategy = class _PathLocationStrategy extends LocationStrategy {
  _platformLocation;
  _baseHref;
  _removeListenerFns = [];
  constructor(_platformLocation, href) {
    super();
    this._platformLocation = _platformLocation;
    this._baseHref = href ?? this._platformLocation.getBaseHrefFromDOM() ?? inject(DOCUMENT2).location?.origin ?? "";
  }
  /** @nodoc */
  ngOnDestroy() {
    while (this._removeListenerFns.length) {
      this._removeListenerFns.pop()();
    }
  }
  onPopState(fn) {
    this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
  }
  getBaseHref() {
    return this._baseHref;
  }
  prepareExternalUrl(internal) {
    return joinWithSlash(this._baseHref, internal);
  }
  path(includeHash = false) {
    const pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
    const hash = this._platformLocation.hash;
    return hash && includeHash ? `${pathname}${hash}` : pathname;
  }
  pushState(state, title, url, queryParams) {
    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
    this._platformLocation.pushState(state, title, externalUrl);
  }
  replaceState(state, title, url, queryParams) {
    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
    this._platformLocation.replaceState(state, title, externalUrl);
  }
  forward() {
    this._platformLocation.forward();
  }
  back() {
    this._platformLocation.back();
  }
  getState() {
    return this._platformLocation.getState();
  }
  historyGo(relativePosition = 0) {
    this._platformLocation.historyGo?.(relativePosition);
  }
  static \u0275fac = function PathLocationStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _PathLocationStrategy)(\u0275\u0275inject(PlatformLocation), \u0275\u0275inject(APP_BASE_HREF, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _PathLocationStrategy,
    factory: _PathLocationStrategy.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PathLocationStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: PlatformLocation
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [APP_BASE_HREF]
    }]
  }], null);
})();
var Location = class _Location {
  /** @internal */
  _subject = new Subject();
  /** @internal */
  _basePath;
  /** @internal */
  _locationStrategy;
  /** @internal */
  _urlChangeListeners = [];
  /** @internal */
  _urlChangeSubscription = null;
  constructor(locationStrategy) {
    this._locationStrategy = locationStrategy;
    const baseHref = this._locationStrategy.getBaseHref();
    this._basePath = _stripOrigin(stripTrailingSlash(_stripIndexHtml(baseHref)));
    this._locationStrategy.onPopState((ev) => {
      this._subject.next({
        "url": this.path(true),
        "pop": true,
        "state": ev.state,
        "type": ev.type
      });
    });
  }
  /** @nodoc */
  ngOnDestroy() {
    this._urlChangeSubscription?.unsubscribe();
    this._urlChangeListeners = [];
  }
  /**
   * Normalizes the URL path for this location.
   *
   * @param includeHash True to include an anchor fragment in the path.
   *
   * @returns The normalized URL path.
   */
  // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
  // removed.
  path(includeHash = false) {
    return this.normalize(this._locationStrategy.path(includeHash));
  }
  /**
   * Reports the current state of the location history.
   * @returns The current value of the `history.state` object.
   */
  getState() {
    return this._locationStrategy.getState();
  }
  /**
   * Normalizes the given path and compares to the current normalized path.
   *
   * @param path The given URL path.
   * @param query Query parameters.
   *
   * @returns True if the given URL path is equal to the current normalized path, false
   * otherwise.
   */
  isCurrentPathEqualTo(path, query = "") {
    return this.path() == this.normalize(path + normalizeQueryParams(query));
  }
  /**
   * Normalizes a URL path by stripping any trailing slashes.
   *
   * @param url String representing a URL.
   *
   * @returns The normalized URL string.
   */
  normalize(url) {
    return _Location.stripTrailingSlash(_stripBasePath(this._basePath, _stripIndexHtml(url)));
  }
  /**
   * Normalizes an external URL path.
   * If the given URL doesn't begin with a leading slash (`'/'`), adds one
   * before normalizing. Adds a hash if `HashLocationStrategy` is
   * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
   *
   * @param url String representing a URL.
   *
   * @returns  A normalized platform-specific URL.
   */
  prepareExternalUrl(url) {
    if (url && url[0] !== "/") {
      url = "/" + url;
    }
    return this._locationStrategy.prepareExternalUrl(url);
  }
  // TODO: rename this method to pushState
  /**
   * Changes the browser's URL to a normalized version of a given URL, and pushes a
   * new item onto the platform's history.
   *
   * @param path  URL path to normalize.
   * @param query Query parameters.
   * @param state Location history state.
   *
   */
  go(path, query = "", state = null) {
    this._locationStrategy.pushState(state, "", path, query);
    this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
  }
  /**
   * Changes the browser's URL to a normalized version of the given URL, and replaces
   * the top item on the platform's history stack.
   *
   * @param path  URL path to normalize.
   * @param query Query parameters.
   * @param state Location history state.
   */
  replaceState(path, query = "", state = null) {
    this._locationStrategy.replaceState(state, "", path, query);
    this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
  }
  /**
   * Navigates forward in the platform's history.
   */
  forward() {
    this._locationStrategy.forward();
  }
  /**
   * Navigates back in the platform's history.
   */
  back() {
    this._locationStrategy.back();
  }
  /**
   * Navigate to a specific page from session history, identified by its relative position to the
   * current page.
   *
   * @param relativePosition  Position of the target page in the history relative to the current
   *     page.
   * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`
   * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go
   * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs
   * when `relativePosition` equals 0.
   * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history
   */
  historyGo(relativePosition = 0) {
    this._locationStrategy.historyGo?.(relativePosition);
  }
  /**
   * Registers a URL change listener. Use to catch updates performed by the Angular
   * framework that are not detectible through "popstate" or "hashchange" events.
   *
   * @param fn The change handler function, which take a URL and a location history state.
   * @returns A function that, when executed, unregisters a URL change listener.
   */
  onUrlChange(fn) {
    this._urlChangeListeners.push(fn);
    this._urlChangeSubscription ??= this.subscribe((v) => {
      this._notifyUrlChangeListeners(v.url, v.state);
    });
    return () => {
      const fnIndex = this._urlChangeListeners.indexOf(fn);
      this._urlChangeListeners.splice(fnIndex, 1);
      if (this._urlChangeListeners.length === 0) {
        this._urlChangeSubscription?.unsubscribe();
        this._urlChangeSubscription = null;
      }
    };
  }
  /** @internal */
  _notifyUrlChangeListeners(url = "", state) {
    this._urlChangeListeners.forEach((fn) => fn(url, state));
  }
  /**
   * Subscribes to the platform's `popState` events.
   *
   * Note: `Location.go()` does not trigger the `popState` event in the browser. Use
   * `Location.onUrlChange()` to subscribe to URL changes instead.
   *
   * @param value Event that is triggered when the state history changes.
   * @param exception The exception to throw.
   *
   * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)
   *
   * @returns Subscribed events.
   */
  subscribe(onNext, onThrow, onReturn) {
    return this._subject.subscribe({
      next: onNext,
      error: onThrow ?? void 0,
      complete: onReturn ?? void 0
    });
  }
  /**
   * Normalizes URL parameters by prepending with `?` if needed.
   *
   * @param  params String of URL parameters.
   *
   * @returns The normalized URL parameters string.
   */
  static normalizeQueryParams = normalizeQueryParams;
  /**
   * Joins two parts of a URL with a slash if needed.
   *
   * @param start  URL string
   * @param end    URL string
   *
   *
   * @returns The joined URL string.
   */
  static joinWithSlash = joinWithSlash;
  /**
   * Removes a trailing slash from a URL string if needed.
   * Looks for the first occurrence of either `#`, `?`, or the end of the
   * line as `/` characters and removes the trailing slash if one exists.
   *
   * @param url URL string.
   *
   * @returns The URL string, modified if needed.
   */
  static stripTrailingSlash = stripTrailingSlash;
  static \u0275fac = function Location_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Location)(\u0275\u0275inject(LocationStrategy));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _Location,
    factory: () => createLocation(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Location, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      // See #23917
      useFactory: createLocation
    }]
  }], () => [{
    type: LocationStrategy
  }], null);
})();
function createLocation() {
  return new Location(\u0275\u0275inject(LocationStrategy));
}
function _stripBasePath(basePath, url) {
  if (!basePath || !url.startsWith(basePath)) {
    return url;
  }
  const strippedUrl = url.substring(basePath.length);
  if (strippedUrl === "" || ["/", ";", "?", "#"].includes(strippedUrl[0])) {
    return strippedUrl;
  }
  return url;
}
function _stripIndexHtml(url) {
  return url.replace(/\/index.html$/, "");
}
function _stripOrigin(baseHref) {
  const isAbsoluteUrl2 = new RegExp("^(https?:)?//").test(baseHref);
  if (isAbsoluteUrl2) {
    const [, pathname] = baseHref.split(/\/\/[^\/]+/);
    return pathname;
  }
  return baseHref;
}

// node_modules/@angular/common/fesm2022/common_module-CBrzkrmd.mjs
var HashLocationStrategy = class _HashLocationStrategy extends LocationStrategy {
  _platformLocation;
  _baseHref = "";
  _removeListenerFns = [];
  constructor(_platformLocation, _baseHref) {
    super();
    this._platformLocation = _platformLocation;
    if (_baseHref != null) {
      this._baseHref = _baseHref;
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    while (this._removeListenerFns.length) {
      this._removeListenerFns.pop()();
    }
  }
  onPopState(fn) {
    this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
  }
  getBaseHref() {
    return this._baseHref;
  }
  path(includeHash = false) {
    const path = this._platformLocation.hash ?? "#";
    return path.length > 0 ? path.substring(1) : path;
  }
  prepareExternalUrl(internal) {
    const url = joinWithSlash(this._baseHref, internal);
    return url.length > 0 ? "#" + url : url;
  }
  pushState(state, title, path, queryParams) {
    const url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams)) || this._platformLocation.pathname;
    this._platformLocation.pushState(state, title, url);
  }
  replaceState(state, title, path, queryParams) {
    const url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams)) || this._platformLocation.pathname;
    this._platformLocation.replaceState(state, title, url);
  }
  forward() {
    this._platformLocation.forward();
  }
  back() {
    this._platformLocation.back();
  }
  getState() {
    return this._platformLocation.getState();
  }
  historyGo(relativePosition = 0) {
    this._platformLocation.historyGo?.(relativePosition);
  }
  static \u0275fac = function HashLocationStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HashLocationStrategy)(\u0275\u0275inject(PlatformLocation), \u0275\u0275inject(APP_BASE_HREF, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _HashLocationStrategy,
    factory: _HashLocationStrategy.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HashLocationStrategy, [{
    type: Injectable
  }], () => [{
    type: PlatformLocation
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [APP_BASE_HREF]
    }]
  }], null);
})();
var CURRENCIES_EN = {
  "ADP": [void 0, void 0, 0],
  "AFN": [void 0, "\u060B", 0],
  "ALL": [void 0, void 0, 0],
  "AMD": [void 0, "\u058F", 2],
  "AOA": [void 0, "Kz"],
  "ARS": [void 0, "$"],
  "AUD": ["A$", "$"],
  "AZN": [void 0, "\u20BC"],
  "BAM": [void 0, "KM"],
  "BBD": [void 0, "$"],
  "BDT": [void 0, "\u09F3"],
  "BHD": [void 0, void 0, 3],
  "BIF": [void 0, void 0, 0],
  "BMD": [void 0, "$"],
  "BND": [void 0, "$"],
  "BOB": [void 0, "Bs"],
  "BRL": ["R$"],
  "BSD": [void 0, "$"],
  "BWP": [void 0, "P"],
  "BYN": [void 0, void 0, 2],
  "BYR": [void 0, void 0, 0],
  "BZD": [void 0, "$"],
  "CAD": ["CA$", "$", 2],
  "CHF": [void 0, void 0, 2],
  "CLF": [void 0, void 0, 4],
  "CLP": [void 0, "$", 0],
  "CNY": ["CN\xA5", "\xA5"],
  "COP": [void 0, "$", 2],
  "CRC": [void 0, "\u20A1", 2],
  "CUC": [void 0, "$"],
  "CUP": [void 0, "$"],
  "CZK": [void 0, "K\u010D", 2],
  "DJF": [void 0, void 0, 0],
  "DKK": [void 0, "kr", 2],
  "DOP": [void 0, "$"],
  "EGP": [void 0, "E\xA3"],
  "ESP": [void 0, "\u20A7", 0],
  "EUR": ["\u20AC"],
  "FJD": [void 0, "$"],
  "FKP": [void 0, "\xA3"],
  "GBP": ["\xA3"],
  "GEL": [void 0, "\u20BE"],
  "GHS": [void 0, "GH\u20B5"],
  "GIP": [void 0, "\xA3"],
  "GNF": [void 0, "FG", 0],
  "GTQ": [void 0, "Q"],
  "GYD": [void 0, "$", 2],
  "HKD": ["HK$", "$"],
  "HNL": [void 0, "L"],
  "HRK": [void 0, "kn"],
  "HUF": [void 0, "Ft", 2],
  "IDR": [void 0, "Rp", 2],
  "ILS": ["\u20AA"],
  "INR": ["\u20B9"],
  "IQD": [void 0, void 0, 0],
  "IRR": [void 0, void 0, 0],
  "ISK": [void 0, "kr", 0],
  "ITL": [void 0, void 0, 0],
  "JMD": [void 0, "$"],
  "JOD": [void 0, void 0, 3],
  "JPY": ["\xA5", void 0, 0],
  "KHR": [void 0, "\u17DB"],
  "KMF": [void 0, "CF", 0],
  "KPW": [void 0, "\u20A9", 0],
  "KRW": ["\u20A9", void 0, 0],
  "KWD": [void 0, void 0, 3],
  "KYD": [void 0, "$"],
  "KZT": [void 0, "\u20B8"],
  "LAK": [void 0, "\u20AD", 0],
  "LBP": [void 0, "L\xA3", 0],
  "LKR": [void 0, "Rs"],
  "LRD": [void 0, "$"],
  "LTL": [void 0, "Lt"],
  "LUF": [void 0, void 0, 0],
  "LVL": [void 0, "Ls"],
  "LYD": [void 0, void 0, 3],
  "MGA": [void 0, "Ar", 0],
  "MGF": [void 0, void 0, 0],
  "MMK": [void 0, "K", 0],
  "MNT": [void 0, "\u20AE", 2],
  "MRO": [void 0, void 0, 0],
  "MUR": [void 0, "Rs", 2],
  "MXN": ["MX$", "$"],
  "MYR": [void 0, "RM"],
  "NAD": [void 0, "$"],
  "NGN": [void 0, "\u20A6"],
  "NIO": [void 0, "C$"],
  "NOK": [void 0, "kr", 2],
  "NPR": [void 0, "Rs"],
  "NZD": ["NZ$", "$"],
  "OMR": [void 0, void 0, 3],
  "PHP": ["\u20B1"],
  "PKR": [void 0, "Rs", 2],
  "PLN": [void 0, "z\u0142"],
  "PYG": [void 0, "\u20B2", 0],
  "RON": [void 0, "lei"],
  "RSD": [void 0, void 0, 0],
  "RUB": [void 0, "\u20BD"],
  "RWF": [void 0, "RF", 0],
  "SBD": [void 0, "$"],
  "SEK": [void 0, "kr", 2],
  "SGD": [void 0, "$"],
  "SHP": [void 0, "\xA3"],
  "SLE": [void 0, void 0, 2],
  "SLL": [void 0, void 0, 0],
  "SOS": [void 0, void 0, 0],
  "SRD": [void 0, "$"],
  "SSP": [void 0, "\xA3"],
  "STD": [void 0, void 0, 0],
  "STN": [void 0, "Db"],
  "SYP": [void 0, "\xA3", 0],
  "THB": [void 0, "\u0E3F"],
  "TMM": [void 0, void 0, 0],
  "TND": [void 0, void 0, 3],
  "TOP": [void 0, "T$"],
  "TRL": [void 0, void 0, 0],
  "TRY": [void 0, "\u20BA"],
  "TTD": [void 0, "$"],
  "TWD": ["NT$", "$", 2],
  "TZS": [void 0, void 0, 2],
  "UAH": [void 0, "\u20B4"],
  "UGX": [void 0, void 0, 0],
  "USD": ["$"],
  "UYI": [void 0, void 0, 0],
  "UYU": [void 0, "$"],
  "UYW": [void 0, void 0, 4],
  "UZS": [void 0, void 0, 2],
  "VEF": [void 0, "Bs", 2],
  "VND": ["\u20AB", void 0, 0],
  "VUV": [void 0, void 0, 0],
  "XAF": ["FCFA", void 0, 0],
  "XCD": ["EC$", "$"],
  "XOF": ["F\u202FCFA", void 0, 0],
  "XPF": ["CFPF", void 0, 0],
  "XXX": ["\xA4"],
  "YER": [void 0, void 0, 0],
  "ZAR": [void 0, "R"],
  "ZMK": [void 0, void 0, 0],
  "ZMW": [void 0, "ZK"],
  "ZWD": [void 0, void 0, 0]
};
var NumberFormatStyle;
(function(NumberFormatStyle2) {
  NumberFormatStyle2[NumberFormatStyle2["Decimal"] = 0] = "Decimal";
  NumberFormatStyle2[NumberFormatStyle2["Percent"] = 1] = "Percent";
  NumberFormatStyle2[NumberFormatStyle2["Currency"] = 2] = "Currency";
  NumberFormatStyle2[NumberFormatStyle2["Scientific"] = 3] = "Scientific";
})(NumberFormatStyle || (NumberFormatStyle = {}));
var Plural;
(function(Plural2) {
  Plural2[Plural2["Zero"] = 0] = "Zero";
  Plural2[Plural2["One"] = 1] = "One";
  Plural2[Plural2["Two"] = 2] = "Two";
  Plural2[Plural2["Few"] = 3] = "Few";
  Plural2[Plural2["Many"] = 4] = "Many";
  Plural2[Plural2["Other"] = 5] = "Other";
})(Plural || (Plural = {}));
var FormStyle;
(function(FormStyle2) {
  FormStyle2[FormStyle2["Format"] = 0] = "Format";
  FormStyle2[FormStyle2["Standalone"] = 1] = "Standalone";
})(FormStyle || (FormStyle = {}));
var TranslationWidth;
(function(TranslationWidth2) {
  TranslationWidth2[TranslationWidth2["Narrow"] = 0] = "Narrow";
  TranslationWidth2[TranslationWidth2["Abbreviated"] = 1] = "Abbreviated";
  TranslationWidth2[TranslationWidth2["Wide"] = 2] = "Wide";
  TranslationWidth2[TranslationWidth2["Short"] = 3] = "Short";
})(TranslationWidth || (TranslationWidth = {}));
var FormatWidth;
(function(FormatWidth2) {
  FormatWidth2[FormatWidth2["Short"] = 0] = "Short";
  FormatWidth2[FormatWidth2["Medium"] = 1] = "Medium";
  FormatWidth2[FormatWidth2["Long"] = 2] = "Long";
  FormatWidth2[FormatWidth2["Full"] = 3] = "Full";
})(FormatWidth || (FormatWidth = {}));
var NumberSymbol = {
  /**
   * Decimal separator.
   * For `en-US`, the dot character.
   * Example: 2,345`.`67
   */
  Decimal: 0,
  /**
   * Grouping separator, typically for thousands.
   * For `en-US`, the comma character.
   * Example: 2`,`345.67
   */
  Group: 1,
  /**
   * List-item separator.
   * Example: "one, two, and three"
   */
  List: 2,
  /**
   * Sign for percentage (out of 100).
   * Example: 23.4%
   */
  PercentSign: 3,
  /**
   * Sign for positive numbers.
   * Example: +23
   */
  PlusSign: 4,
  /**
   * Sign for negative numbers.
   * Example: -23
   */
  MinusSign: 5,
  /**
   * Computer notation for exponential value (n times a power of 10).
   * Example: 1.2E3
   */
  Exponential: 6,
  /**
   * Human-readable format of exponential.
   * Example: 1.2x103
   */
  SuperscriptingExponent: 7,
  /**
   * Sign for permille (out of 1000).
   * Example: 23.4‰
   */
  PerMille: 8,
  /**
   * Infinity, can be used with plus and minus.
   * Example: ∞, +∞, -∞
   */
  Infinity: 9,
  /**
   * Not a number.
   * Example: NaN
   */
  NaN: 10,
  /**
   * Symbol used between time units.
   * Example: 10:52
   */
  TimeSeparator: 11,
  /**
   * Decimal separator for currency values (fallback to `Decimal`).
   * Example: $2,345.67
   */
  CurrencyDecimal: 12,
  /**
   * Group separator for currency values (fallback to `Group`).
   * Example: $2,345.67
   */
  CurrencyGroup: 13
};
var WeekDay;
(function(WeekDay2) {
  WeekDay2[WeekDay2["Sunday"] = 0] = "Sunday";
  WeekDay2[WeekDay2["Monday"] = 1] = "Monday";
  WeekDay2[WeekDay2["Tuesday"] = 2] = "Tuesday";
  WeekDay2[WeekDay2["Wednesday"] = 3] = "Wednesday";
  WeekDay2[WeekDay2["Thursday"] = 4] = "Thursday";
  WeekDay2[WeekDay2["Friday"] = 5] = "Friday";
  WeekDay2[WeekDay2["Saturday"] = 6] = "Saturday";
})(WeekDay || (WeekDay = {}));
function getLocaleId2(locale) {
  return findLocaleData(locale)[LocaleDataIndex.LocaleId];
}
function getLocaleDayPeriods(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const amPmData = [data[LocaleDataIndex.DayPeriodsFormat], data[LocaleDataIndex.DayPeriodsStandalone]];
  const amPm = getLastDefinedValue(amPmData, formStyle);
  return getLastDefinedValue(amPm, width);
}
function getLocaleDayNames(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const daysData = [data[LocaleDataIndex.DaysFormat], data[LocaleDataIndex.DaysStandalone]];
  const days = getLastDefinedValue(daysData, formStyle);
  return getLastDefinedValue(days, width);
}
function getLocaleMonthNames(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const monthsData = [data[LocaleDataIndex.MonthsFormat], data[LocaleDataIndex.MonthsStandalone]];
  const months = getLastDefinedValue(monthsData, formStyle);
  return getLastDefinedValue(months, width);
}
function getLocaleEraNames(locale, width) {
  const data = findLocaleData(locale);
  const erasData = data[LocaleDataIndex.Eras];
  return getLastDefinedValue(erasData, width);
}
function getLocaleDateFormat(locale, width) {
  const data = findLocaleData(locale);
  return getLastDefinedValue(data[LocaleDataIndex.DateFormat], width);
}
function getLocaleTimeFormat(locale, width) {
  const data = findLocaleData(locale);
  return getLastDefinedValue(data[LocaleDataIndex.TimeFormat], width);
}
function getLocaleDateTimeFormat(locale, width) {
  const data = findLocaleData(locale);
  const dateTimeFormatData = data[LocaleDataIndex.DateTimeFormat];
  return getLastDefinedValue(dateTimeFormatData, width);
}
function getLocaleNumberSymbol(locale, symbol) {
  const data = findLocaleData(locale);
  const res = data[LocaleDataIndex.NumberSymbols][symbol];
  if (typeof res === "undefined") {
    if (symbol === NumberSymbol.CurrencyDecimal) {
      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];
    } else if (symbol === NumberSymbol.CurrencyGroup) {
      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Group];
    }
  }
  return res;
}
function getLocaleNumberFormat(locale, type) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.NumberFormats][type];
}
function getLocaleCurrencies(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.Currencies];
}
var getLocalePluralCase2 = getLocalePluralCase;
function checkFullData(data) {
  if (!data[LocaleDataIndex.ExtraData]) {
    throw new Error(`Missing extra locale data for the locale "${data[LocaleDataIndex.LocaleId]}". Use "registerLocaleData" to load new data. See the "I18n guide" on angular.io to know more.`);
  }
}
function getLocaleExtraDayPeriodRules(locale) {
  const data = findLocaleData(locale);
  checkFullData(data);
  const rules = data[LocaleDataIndex.ExtraData][
    2
    /* ɵExtraLocaleDataIndex.ExtraDayPeriodsRules */
  ] || [];
  return rules.map((rule) => {
    if (typeof rule === "string") {
      return extractTime(rule);
    }
    return [extractTime(rule[0]), extractTime(rule[1])];
  });
}
function getLocaleExtraDayPeriods(locale, formStyle, width) {
  const data = findLocaleData(locale);
  checkFullData(data);
  const dayPeriodsData = [data[LocaleDataIndex.ExtraData][
    0
    /* ɵExtraLocaleDataIndex.ExtraDayPeriodFormats */
  ], data[LocaleDataIndex.ExtraData][
    1
    /* ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone */
  ]];
  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
  return getLastDefinedValue(dayPeriods, width) || [];
}
function getLastDefinedValue(data, index) {
  for (let i = index; i > -1; i--) {
    if (typeof data[i] !== "undefined") {
      return data[i];
    }
  }
  throw new Error("Locale data API: locale data undefined");
}
function extractTime(time) {
  const [h, m] = time.split(":");
  return {
    hours: +h,
    minutes: +m
  };
}
function getCurrencySymbol(code, format, locale = "en") {
  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
  const symbolNarrow = currency[
    1
    /* ɵCurrencyIndex.SymbolNarrow */
  ];
  if (format === "narrow" && typeof symbolNarrow === "string") {
    return symbolNarrow;
  }
  return currency[
    0
    /* ɵCurrencyIndex.Symbol */
  ] || code;
}
var DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
function getNumberOfCurrencyDigits(code) {
  let digits;
  const currency = CURRENCIES_EN[code];
  if (currency) {
    digits = currency[
      2
      /* ɵCurrencyIndex.NbOfDigits */
    ];
  }
  return typeof digits === "number" ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
}
var ISO8601_DATE_REGEX = /^(\d{4,})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
var NAMED_FORMATS = {};
var DATE_FORMATS_SPLIT = /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
function formatDate(value, format, locale, timezone) {
  let date = toDate(value);
  const namedFormat = getNamedFormat(locale, format);
  format = namedFormat || format;
  let parts = [];
  let match2;
  while (format) {
    match2 = DATE_FORMATS_SPLIT.exec(format);
    if (match2) {
      parts = parts.concat(match2.slice(1));
      const part = parts.pop();
      if (!part) {
        break;
      }
      format = part;
    } else {
      parts.push(format);
      break;
    }
  }
  let dateTimezoneOffset = date.getTimezoneOffset();
  if (timezone) {
    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    date = convertTimezoneToLocal(date, timezone);
  }
  let text = "";
  parts.forEach((value2) => {
    const dateFormatter = getDateFormatter(value2);
    text += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value2 === "''" ? "'" : value2.replace(/(^'|'$)/g, "").replace(/''/g, "'");
  });
  return text;
}
function createDate(year, month, date) {
  const newDate = /* @__PURE__ */ new Date(0);
  newDate.setFullYear(year, month, date);
  newDate.setHours(0, 0, 0);
  return newDate;
}
function getNamedFormat(locale, format) {
  const localeId = getLocaleId2(locale);
  NAMED_FORMATS[localeId] ??= {};
  if (NAMED_FORMATS[localeId][format]) {
    return NAMED_FORMATS[localeId][format];
  }
  let formatValue2 = "";
  switch (format) {
    case "shortDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Short);
      break;
    case "mediumDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Medium);
      break;
    case "longDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Long);
      break;
    case "fullDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Full);
      break;
    case "shortTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Short);
      break;
    case "mediumTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Medium);
      break;
    case "longTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Long);
      break;
    case "fullTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Full);
      break;
    case "short":
      const shortTime = getNamedFormat(locale, "shortTime");
      const shortDate = getNamedFormat(locale, "shortDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);
      break;
    case "medium":
      const mediumTime = getNamedFormat(locale, "mediumTime");
      const mediumDate = getNamedFormat(locale, "mediumDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);
      break;
    case "long":
      const longTime = getNamedFormat(locale, "longTime");
      const longDate = getNamedFormat(locale, "longDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);
      break;
    case "full":
      const fullTime = getNamedFormat(locale, "fullTime");
      const fullDate = getNamedFormat(locale, "fullDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);
      break;
  }
  if (formatValue2) {
    NAMED_FORMATS[localeId][format] = formatValue2;
  }
  return formatValue2;
}
function formatDateTime(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{([^}]+)}/g, function(match2, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match2;
    });
  }
  return str;
}
function padNumber(num, digits, minusSign = "-", trim, negWrap) {
  let neg = "";
  if (num < 0 || negWrap && num <= 0) {
    if (negWrap) {
      num = -num + 1;
    } else {
      num = -num;
      neg = minusSign;
    }
  }
  let strNum = String(num);
  while (strNum.length < digits) {
    strNum = "0" + strNum;
  }
  if (trim) {
    strNum = strNum.slice(strNum.length - digits);
  }
  return neg + strNum;
}
function formatFractionalSeconds(milliseconds, digits) {
  const strMs = padNumber(milliseconds, 3);
  return strMs.substring(0, digits);
}
function dateGetter(name, size, offset = 0, trim = false, negWrap = false) {
  return function(date, locale) {
    let part = getDatePart(name, date);
    if (offset > 0 || part > -offset) {
      part += offset;
    }
    if (name === 3) {
      if (part === 0 && offset === -12) {
        part = 12;
      }
    } else if (name === 6) {
      return formatFractionalSeconds(part, size);
    }
    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    return padNumber(part, size, localeMinus, trim, negWrap);
  };
}
function getDatePart(part, date) {
  switch (part) {
    case 0:
      return date.getFullYear();
    case 1:
      return date.getMonth();
    case 2:
      return date.getDate();
    case 3:
      return date.getHours();
    case 4:
      return date.getMinutes();
    case 5:
      return date.getSeconds();
    case 6:
      return date.getMilliseconds();
    case 7:
      return date.getDay();
    default:
      throw new Error(`Unknown DateType value "${part}".`);
  }
}
function dateStrGetter(name, width, form = FormStyle.Format, extended = false) {
  return function(date, locale) {
    return getDateTranslation(date, locale, name, width, form, extended);
  };
}
function getDateTranslation(date, locale, name, width, form, extended) {
  switch (name) {
    case 2:
      return getLocaleMonthNames(locale, form, width)[date.getMonth()];
    case 1:
      return getLocaleDayNames(locale, form, width)[date.getDay()];
    case 0:
      const currentHours = date.getHours();
      const currentMinutes = date.getMinutes();
      if (extended) {
        const rules = getLocaleExtraDayPeriodRules(locale);
        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);
        const index = rules.findIndex((rule) => {
          if (Array.isArray(rule)) {
            const [from2, to] = rule;
            const afterFrom = currentHours >= from2.hours && currentMinutes >= from2.minutes;
            const beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes;
            if (from2.hours < to.hours) {
              if (afterFrom && beforeTo) {
                return true;
              }
            } else if (afterFrom || beforeTo) {
              return true;
            }
          } else {
            if (rule.hours === currentHours && rule.minutes === currentMinutes) {
              return true;
            }
          }
          return false;
        });
        if (index !== -1) {
          return dayPeriods[index];
        }
      }
      return getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];
    case 3:
      return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];
    default:
      const unexpected = name;
      throw new Error(`unexpected translation type ${unexpected}`);
  }
}
function timeZoneGetter(width) {
  return function(date, locale, offset) {
    const zone = -1 * offset;
    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);
    switch (width) {
      case 0:
        return (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);
      case 1:
        return "GMT" + (zone >= 0 ? "+" : "") + padNumber(hours, 1, minusSign);
      case 2:
        return "GMT" + (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + ":" + padNumber(Math.abs(zone % 60), 2, minusSign);
      case 3:
        if (offset === 0) {
          return "Z";
        } else {
          return (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + ":" + padNumber(Math.abs(zone % 60), 2, minusSign);
        }
      default:
        throw new Error(`Unknown zone width "${width}"`);
    }
  };
}
var JANUARY = 0;
var THURSDAY = 4;
function getFirstThursdayOfYear(year) {
  const firstDayOfYear = createDate(year, JANUARY, 1).getDay();
  return createDate(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
}
function getThursdayThisIsoWeek(datetime) {
  const currentDay = datetime.getDay();
  const deltaToThursday = currentDay === 0 ? -3 : THURSDAY - currentDay;
  return createDate(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + deltaToThursday);
}
function weekGetter(size, monthBased = false) {
  return function(date, locale) {
    let result;
    if (monthBased) {
      const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
      const today = date.getDate();
      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
    } else {
      const thisThurs = getThursdayThisIsoWeek(date);
      const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());
      const diff = thisThurs.getTime() - firstThurs.getTime();
      result = 1 + Math.round(diff / 6048e5);
    }
    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  };
}
function weekNumberingYearGetter(size, trim = false) {
  return function(date, locale) {
    const thisThurs = getThursdayThisIsoWeek(date);
    const weekNumberingYear = thisThurs.getFullYear();
    return padNumber(weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);
  };
}
var DATE_FORMATS = {};
function getDateFormatter(format) {
  if (DATE_FORMATS[format]) {
    return DATE_FORMATS[format];
  }
  let formatter;
  switch (format) {
    // Era name (AD/BC)
    case "G":
    case "GG":
    case "GGG":
      formatter = dateStrGetter(3, TranslationWidth.Abbreviated);
      break;
    case "GGGG":
      formatter = dateStrGetter(3, TranslationWidth.Wide);
      break;
    case "GGGGG":
      formatter = dateStrGetter(3, TranslationWidth.Narrow);
      break;
    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)
    case "y":
      formatter = dateGetter(0, 1, 0, false, true);
      break;
    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
    case "yy":
      formatter = dateGetter(0, 2, 0, true, true);
      break;
    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)
    case "yyy":
      formatter = dateGetter(0, 3, 0, false, true);
      break;
    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)
    case "yyyy":
      formatter = dateGetter(0, 4, 0, false, true);
      break;
    // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)
    case "Y":
      formatter = weekNumberingYearGetter(1);
      break;
    // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD
    // 2010 => 10)
    case "YY":
      formatter = weekNumberingYearGetter(2, true);
      break;
    // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD
    // 2010 => 2010)
    case "YYY":
      formatter = weekNumberingYearGetter(3);
      break;
    // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)
    case "YYYY":
      formatter = weekNumberingYearGetter(4);
      break;
    // Month of the year (1-12), numeric
    case "M":
    case "L":
      formatter = dateGetter(1, 1, 1);
      break;
    case "MM":
    case "LL":
      formatter = dateGetter(1, 2, 1);
      break;
    // Month of the year (January, ...), string, format
    case "MMM":
      formatter = dateStrGetter(2, TranslationWidth.Abbreviated);
      break;
    case "MMMM":
      formatter = dateStrGetter(2, TranslationWidth.Wide);
      break;
    case "MMMMM":
      formatter = dateStrGetter(2, TranslationWidth.Narrow);
      break;
    // Month of the year (January, ...), string, standalone
    case "LLL":
      formatter = dateStrGetter(2, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;
    case "LLLL":
      formatter = dateStrGetter(2, TranslationWidth.Wide, FormStyle.Standalone);
      break;
    case "LLLLL":
      formatter = dateStrGetter(2, TranslationWidth.Narrow, FormStyle.Standalone);
      break;
    // Week of the year (1, ... 52)
    case "w":
      formatter = weekGetter(1);
      break;
    case "ww":
      formatter = weekGetter(2);
      break;
    // Week of the month (1, ...)
    case "W":
      formatter = weekGetter(1, true);
      break;
    // Day of the month (1-31)
    case "d":
      formatter = dateGetter(2, 1);
      break;
    case "dd":
      formatter = dateGetter(2, 2);
      break;
    // Day of the Week StandAlone (1, 1, Mon, Monday, M, Mo)
    case "c":
    case "cc":
      formatter = dateGetter(7, 1);
      break;
    case "ccc":
      formatter = dateStrGetter(1, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;
    case "cccc":
      formatter = dateStrGetter(1, TranslationWidth.Wide, FormStyle.Standalone);
      break;
    case "ccccc":
      formatter = dateStrGetter(1, TranslationWidth.Narrow, FormStyle.Standalone);
      break;
    case "cccccc":
      formatter = dateStrGetter(1, TranslationWidth.Short, FormStyle.Standalone);
      break;
    // Day of the Week
    case "E":
    case "EE":
    case "EEE":
      formatter = dateStrGetter(1, TranslationWidth.Abbreviated);
      break;
    case "EEEE":
      formatter = dateStrGetter(1, TranslationWidth.Wide);
      break;
    case "EEEEE":
      formatter = dateStrGetter(1, TranslationWidth.Narrow);
      break;
    case "EEEEEE":
      formatter = dateStrGetter(1, TranslationWidth.Short);
      break;
    // Generic period of the day (am-pm)
    case "a":
    case "aa":
    case "aaa":
      formatter = dateStrGetter(0, TranslationWidth.Abbreviated);
      break;
    case "aaaa":
      formatter = dateStrGetter(0, TranslationWidth.Wide);
      break;
    case "aaaaa":
      formatter = dateStrGetter(0, TranslationWidth.Narrow);
      break;
    // Extended period of the day (midnight, at night, ...), standalone
    case "b":
    case "bb":
    case "bbb":
      formatter = dateStrGetter(0, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
      break;
    case "bbbb":
      formatter = dateStrGetter(0, TranslationWidth.Wide, FormStyle.Standalone, true);
      break;
    case "bbbbb":
      formatter = dateStrGetter(0, TranslationWidth.Narrow, FormStyle.Standalone, true);
      break;
    // Extended period of the day (midnight, night, ...), standalone
    case "B":
    case "BB":
    case "BBB":
      formatter = dateStrGetter(0, TranslationWidth.Abbreviated, FormStyle.Format, true);
      break;
    case "BBBB":
      formatter = dateStrGetter(0, TranslationWidth.Wide, FormStyle.Format, true);
      break;
    case "BBBBB":
      formatter = dateStrGetter(0, TranslationWidth.Narrow, FormStyle.Format, true);
      break;
    // Hour in AM/PM, (1-12)
    case "h":
      formatter = dateGetter(3, 1, -12);
      break;
    case "hh":
      formatter = dateGetter(3, 2, -12);
      break;
    // Hour of the day (0-23)
    case "H":
      formatter = dateGetter(3, 1);
      break;
    // Hour in day, padded (00-23)
    case "HH":
      formatter = dateGetter(3, 2);
      break;
    // Minute of the hour (0-59)
    case "m":
      formatter = dateGetter(4, 1);
      break;
    case "mm":
      formatter = dateGetter(4, 2);
      break;
    // Second of the minute (0-59)
    case "s":
      formatter = dateGetter(5, 1);
      break;
    case "ss":
      formatter = dateGetter(5, 2);
      break;
    // Fractional second
    case "S":
      formatter = dateGetter(6, 1);
      break;
    case "SS":
      formatter = dateGetter(6, 2);
      break;
    case "SSS":
      formatter = dateGetter(6, 3);
      break;
    // Timezone ISO8601 short format (-0430)
    case "Z":
    case "ZZ":
    case "ZZZ":
      formatter = timeZoneGetter(
        0
        /* ZoneWidth.Short */
      );
      break;
    // Timezone ISO8601 extended format (-04:30)
    case "ZZZZZ":
      formatter = timeZoneGetter(
        3
        /* ZoneWidth.Extended */
      );
      break;
    // Timezone GMT short format (GMT+4)
    case "O":
    case "OO":
    case "OOO":
    // Should be location, but fallback to format O instead because we don't have the data yet
    case "z":
    case "zz":
    case "zzz":
      formatter = timeZoneGetter(
        1
        /* ZoneWidth.ShortGMT */
      );
      break;
    // Timezone GMT long format (GMT+0430)
    case "OOOO":
    case "ZZZZ":
    // Should be location, but fallback to format O instead because we don't have the data yet
    case "zzzz":
      formatter = timeZoneGetter(
        2
        /* ZoneWidth.Long */
      );
      break;
    default:
      return null;
  }
  DATE_FORMATS[format] = formatter;
  return formatter;
}
function timezoneToOffset(timezone, fallback) {
  timezone = timezone.replace(/:/g, "");
  const requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}
function addDateMinutes(date, minutes) {
  date = new Date(date.getTime());
  date.setMinutes(date.getMinutes() + minutes);
  return date;
}
function convertTimezoneToLocal(date, timezone, reverse) {
  const reverseValue = -1;
  const dateTimezoneOffset = date.getTimezoneOffset();
  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
}
function toDate(value) {
  if (isDate(value)) {
    return value;
  }
  if (typeof value === "number" && !isNaN(value)) {
    return new Date(value);
  }
  if (typeof value === "string") {
    value = value.trim();
    if (/^(\d{4}(-\d{1,2}(-\d{1,2})?)?)$/.test(value)) {
      const [y, m = 1, d = 1] = value.split("-").map((val) => +val);
      return createDate(y, m - 1, d);
    }
    const parsedNb = parseFloat(value);
    if (!isNaN(value - parsedNb)) {
      return new Date(parsedNb);
    }
    let match2;
    if (match2 = value.match(ISO8601_DATE_REGEX)) {
      return isoStringToDate(match2);
    }
  }
  const date = new Date(value);
  if (!isDate(date)) {
    throw new Error(`Unable to convert "${value}" into a date`);
  }
  return date;
}
function isoStringToDate(match2) {
  const date = /* @__PURE__ */ new Date(0);
  let tzHour = 0;
  let tzMin = 0;
  const dateSetter = match2[8] ? date.setUTCFullYear : date.setFullYear;
  const timeSetter = match2[8] ? date.setUTCHours : date.setHours;
  if (match2[9]) {
    tzHour = Number(match2[9] + match2[10]);
    tzMin = Number(match2[9] + match2[11]);
  }
  dateSetter.call(date, Number(match2[1]), Number(match2[2]) - 1, Number(match2[3]));
  const h = Number(match2[4] || 0) - tzHour;
  const m = Number(match2[5] || 0) - tzMin;
  const s = Number(match2[6] || 0);
  const ms = Math.floor(parseFloat("0." + (match2[7] || 0)) * 1e3);
  timeSetter.call(date, h, m, s, ms);
  return date;
}
function isDate(value) {
  return value instanceof Date && !isNaN(value.valueOf());
}
var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
var MAX_DIGITS = 22;
var DECIMAL_SEP = ".";
var ZERO_CHAR = "0";
var PATTERN_SEP = ";";
var GROUP_SEP = ",";
var DIGIT_CHAR = "#";
var CURRENCY_CHAR = "\xA4";
var PERCENT_CHAR = "%";
function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {
  let formattedText = "";
  let isZero = false;
  if (!isFinite(value)) {
    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
  } else {
    let parsedNumber = parseNumber(value);
    if (isPercent) {
      parsedNumber = toPercent(parsedNumber);
    }
    let minInt = pattern.minInt;
    let minFraction = pattern.minFrac;
    let maxFraction = pattern.maxFrac;
    if (digitsInfo) {
      const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
      if (parts === null) {
        throw new Error(`${digitsInfo} is not a valid digit info`);
      }
      const minIntPart = parts[1];
      const minFractionPart = parts[3];
      const maxFractionPart = parts[5];
      if (minIntPart != null) {
        minInt = parseIntAutoRadix(minIntPart);
      }
      if (minFractionPart != null) {
        minFraction = parseIntAutoRadix(minFractionPart);
      }
      if (maxFractionPart != null) {
        maxFraction = parseIntAutoRadix(maxFractionPart);
      } else if (minFractionPart != null && minFraction > maxFraction) {
        maxFraction = minFraction;
      }
    }
    roundNumber(parsedNumber, minFraction, maxFraction);
    let digits = parsedNumber.digits;
    let integerLen = parsedNumber.integerLen;
    const exponent = parsedNumber.exponent;
    let decimals = [];
    isZero = digits.every((d) => !d);
    for (; integerLen < minInt; integerLen++) {
      digits.unshift(0);
    }
    for (; integerLen < 0; integerLen++) {
      digits.unshift(0);
    }
    if (integerLen > 0) {
      decimals = digits.splice(integerLen, digits.length);
    } else {
      decimals = digits;
      digits = [0];
    }
    const groups = [];
    if (digits.length >= pattern.lgSize) {
      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(""));
    }
    while (digits.length > pattern.gSize) {
      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(""));
    }
    if (digits.length) {
      groups.unshift(digits.join(""));
    }
    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));
    if (decimals.length) {
      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join("");
    }
    if (exponent) {
      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + "+" + exponent;
    }
  }
  if (value < 0 && !isZero) {
    formattedText = pattern.negPre + formattedText + pattern.negSuf;
  } else {
    formattedText = pattern.posPre + formattedText + pattern.posSuf;
  }
  return formattedText;
}
function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);
  pattern.maxFrac = pattern.minFrac;
  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
  return res.replace(CURRENCY_CHAR, currency).replace(CURRENCY_CHAR, "").trim();
}
function formatPercent(value, locale, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
  return res.replace(new RegExp(PERCENT_CHAR, "g"), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
}
function formatNumber(value, locale, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
}
function parseNumberFormat(format, minusSign = "-") {
  const p = {
    minInt: 1,
    minFrac: 0,
    maxFrac: 0,
    posPre: "",
    posSuf: "",
    negPre: "",
    negSuf: "",
    gSize: 0,
    lgSize: 0
  };
  const patternParts = format.split(PATTERN_SEP);
  const positive = patternParts[0];
  const negative = patternParts[1];
  const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1), positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)], integer = positiveParts[0], fraction = positiveParts[1] || "";
  p.posPre = integer.substring(0, integer.indexOf(DIGIT_CHAR));
  for (let i = 0; i < fraction.length; i++) {
    const ch = fraction.charAt(i);
    if (ch === ZERO_CHAR) {
      p.minFrac = p.maxFrac = i + 1;
    } else if (ch === DIGIT_CHAR) {
      p.maxFrac = i + 1;
    } else {
      p.posSuf += ch;
    }
  }
  const groups = integer.split(GROUP_SEP);
  p.gSize = groups[1] ? groups[1].length : 0;
  p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;
  if (negative) {
    const trunkLen = positive.length - p.posPre.length - p.posSuf.length, pos = negative.indexOf(DIGIT_CHAR);
    p.negPre = negative.substring(0, pos).replace(/'/g, "");
    p.negSuf = negative.slice(pos + trunkLen).replace(/'/g, "");
  } else {
    p.negPre = minusSign + p.posPre;
    p.negSuf = p.posSuf;
  }
  return p;
}
function toPercent(parsedNumber) {
  if (parsedNumber.digits[0] === 0) {
    return parsedNumber;
  }
  const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;
  if (parsedNumber.exponent) {
    parsedNumber.exponent += 2;
  } else {
    if (fractionLen === 0) {
      parsedNumber.digits.push(0, 0);
    } else if (fractionLen === 1) {
      parsedNumber.digits.push(0);
    }
    parsedNumber.integerLen += 2;
  }
  return parsedNumber;
}
function parseNumber(num) {
  let numStr = Math.abs(num) + "";
  let exponent = 0, digits, integerLen;
  let i, j, zeros;
  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
    numStr = numStr.replace(DECIMAL_SEP, "");
  }
  if ((i = numStr.search(/e/i)) > 0) {
    if (integerLen < 0) integerLen = i;
    integerLen += +numStr.slice(i + 1);
    numStr = numStr.substring(0, i);
  } else if (integerLen < 0) {
    integerLen = numStr.length;
  }
  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
  }
  if (i === (zeros = numStr.length)) {
    digits = [0];
    integerLen = 1;
  } else {
    zeros--;
    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;
    integerLen -= i;
    digits = [];
    for (j = 0; i <= zeros; i++, j++) {
      digits[j] = Number(numStr.charAt(i));
    }
  }
  if (integerLen > MAX_DIGITS) {
    digits = digits.splice(0, MAX_DIGITS - 1);
    exponent = integerLen - 1;
    integerLen = 1;
  }
  return {
    digits,
    exponent,
    integerLen
  };
}
function roundNumber(parsedNumber, minFrac, maxFrac) {
  if (minFrac > maxFrac) {
    throw new Error(`The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);
  }
  let digits = parsedNumber.digits;
  let fractionLen = digits.length - parsedNumber.integerLen;
  const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);
  let roundAt = fractionSize + parsedNumber.integerLen;
  let digit = digits[roundAt];
  if (roundAt > 0) {
    digits.splice(Math.max(parsedNumber.integerLen, roundAt));
    for (let j = roundAt; j < digits.length; j++) {
      digits[j] = 0;
    }
  } else {
    fractionLen = Math.max(0, fractionLen);
    parsedNumber.integerLen = 1;
    digits.length = Math.max(1, roundAt = fractionSize + 1);
    digits[0] = 0;
    for (let i = 1; i < roundAt; i++) digits[i] = 0;
  }
  if (digit >= 5) {
    if (roundAt - 1 < 0) {
      for (let k = 0; k > roundAt; k--) {
        digits.unshift(0);
        parsedNumber.integerLen++;
      }
      digits.unshift(1);
      parsedNumber.integerLen++;
    } else {
      digits[roundAt - 1]++;
    }
  }
  for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);
  let dropTrailingZeros = fractionSize !== 0;
  const minLen = minFrac + parsedNumber.integerLen;
  const carry = digits.reduceRight(function(carry2, d, i, digits2) {
    d = d + carry2;
    digits2[i] = d < 10 ? d : d - 10;
    if (dropTrailingZeros) {
      if (digits2[i] === 0 && i >= minLen) {
        digits2.pop();
      } else {
        dropTrailingZeros = false;
      }
    }
    return d >= 10 ? 1 : 0;
  }, 0);
  if (carry) {
    digits.unshift(carry);
    parsedNumber.integerLen++;
  }
}
function parseIntAutoRadix(text) {
  const result = parseInt(text);
  if (isNaN(result)) {
    throw new Error("Invalid integer literal when parsing " + text);
  }
  return result;
}
var NgLocalization = class _NgLocalization {
  static \u0275fac = function NgLocalization_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgLocalization)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _NgLocalization,
    factory: function NgLocalization_Factory(__ngFactoryType__) {
      let __ngConditionalFactory__ = null;
      if (__ngFactoryType__) {
        __ngConditionalFactory__ = new __ngFactoryType__();
      } else {
        __ngConditionalFactory__ = ((locale) => new NgLocaleLocalization(locale))(\u0275\u0275inject(LOCALE_ID));
      }
      return __ngConditionalFactory__;
    },
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgLocalization, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: (locale) => new NgLocaleLocalization(locale),
      deps: [LOCALE_ID]
    }]
  }], null, null);
})();
function getPluralCategory(value, cases, ngLocalization, locale) {
  let key = `=${value}`;
  if (cases.indexOf(key) > -1) {
    return key;
  }
  key = ngLocalization.getPluralCategory(value, locale);
  if (cases.indexOf(key) > -1) {
    return key;
  }
  if (cases.indexOf("other") > -1) {
    return "other";
  }
  throw new Error(`No plural message found for value "${value}"`);
}
var NgLocaleLocalization = class _NgLocaleLocalization extends NgLocalization {
  locale;
  constructor(locale) {
    super();
    this.locale = locale;
  }
  getPluralCategory(value, locale) {
    const plural2 = getLocalePluralCase2(locale || this.locale)(value);
    switch (plural2) {
      case Plural.Zero:
        return "zero";
      case Plural.One:
        return "one";
      case Plural.Two:
        return "two";
      case Plural.Few:
        return "few";
      case Plural.Many:
        return "many";
      default:
        return "other";
    }
  }
  static \u0275fac = function NgLocaleLocalization_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgLocaleLocalization)(\u0275\u0275inject(LOCALE_ID));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _NgLocaleLocalization,
    factory: _NgLocaleLocalization.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgLocaleLocalization, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }], null);
})();
var WS_REGEXP = /\s+/;
var EMPTY_ARRAY2 = [];
var NgClass = class _NgClass {
  _ngEl;
  _renderer;
  initialClasses = EMPTY_ARRAY2;
  rawClass;
  stateMap = /* @__PURE__ */ new Map();
  constructor(_ngEl, _renderer) {
    this._ngEl = _ngEl;
    this._renderer = _renderer;
  }
  set klass(value) {
    this.initialClasses = value != null ? value.trim().split(WS_REGEXP) : EMPTY_ARRAY2;
  }
  set ngClass(value) {
    this.rawClass = typeof value === "string" ? value.trim().split(WS_REGEXP) : value;
  }
  /*
  The NgClass directive uses the custom change detection algorithm for its inputs. The custom
  algorithm is necessary since inputs are represented as complex object or arrays that need to be
  deeply-compared.
     This algorithm is perf-sensitive since NgClass is used very frequently and its poor performance
  might negatively impact runtime performance of the entire change detection cycle. The design of
  this algorithm is making sure that:
  - there is no unnecessary DOM manipulation (CSS classes are added / removed from the DOM only when
  needed), even if references to bound objects change;
  - there is no memory allocation if nothing changes (even relatively modest memory allocation
  during the change detection cycle can result in GC pauses for some of the CD cycles).
     The algorithm works by iterating over the set of bound classes, staring with [class] binding and
  then going over [ngClass] binding. For each CSS class name:
  - check if it was seen before (this information is tracked in the state map) and if its value
  changed;
  - mark it as "touched" - names that are not marked are not present in the latest set of binding
  and we can remove such class name from the internal data structures;
     After iteration over all the CSS class names we've got data structure with all the information
  necessary to synchronize changes to the DOM - it is enough to iterate over the state map, flush
  changes to the DOM and reset internal data structures so those are ready for the next change
  detection cycle.
   */
  ngDoCheck() {
    for (const klass of this.initialClasses) {
      this._updateState(klass, true);
    }
    const rawClass = this.rawClass;
    if (Array.isArray(rawClass) || rawClass instanceof Set) {
      for (const klass of rawClass) {
        this._updateState(klass, true);
      }
    } else if (rawClass != null) {
      for (const klass of Object.keys(rawClass)) {
        this._updateState(klass, Boolean(rawClass[klass]));
      }
    }
    this._applyStateDiff();
  }
  _updateState(klass, nextEnabled) {
    const state = this.stateMap.get(klass);
    if (state !== void 0) {
      if (state.enabled !== nextEnabled) {
        state.changed = true;
        state.enabled = nextEnabled;
      }
      state.touched = true;
    } else {
      this.stateMap.set(klass, {
        enabled: nextEnabled,
        changed: true,
        touched: true
      });
    }
  }
  _applyStateDiff() {
    for (const stateEntry of this.stateMap) {
      const klass = stateEntry[0];
      const state = stateEntry[1];
      if (state.changed) {
        this._toggleClass(klass, state.enabled);
        state.changed = false;
      } else if (!state.touched) {
        if (state.enabled) {
          this._toggleClass(klass, false);
        }
        this.stateMap.delete(klass);
      }
      state.touched = false;
    }
  }
  _toggleClass(klass, enabled) {
    if (ngDevMode) {
      if (typeof klass !== "string") {
        throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${stringify(klass)}`);
      }
    }
    klass = klass.trim();
    if (klass.length > 0) {
      klass.split(WS_REGEXP).forEach((klass2) => {
        if (enabled) {
          this._renderer.addClass(this._ngEl.nativeElement, klass2);
        } else {
          this._renderer.removeClass(this._ngEl.nativeElement, klass2);
        }
      });
    }
  }
  static \u0275fac = function NgClass_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgClass)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgClass,
    selectors: [["", "ngClass", ""]],
    inputs: {
      klass: [0, "class", "klass"],
      ngClass: "ngClass"
    }
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgClass, [{
    type: Directive,
    args: [{
      selector: "[ngClass]"
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }], {
    klass: [{
      type: Input,
      args: ["class"]
    }],
    ngClass: [{
      type: Input,
      args: ["ngClass"]
    }]
  });
})();
var NgComponentOutlet = class _NgComponentOutlet {
  _viewContainerRef;
  // TODO(crisbeto): this should be `Type<T>`, but doing so broke a few
  // targets in a TGP so we need to do it in a major version.
  /** Component that should be rendered in the outlet. */
  ngComponentOutlet = null;
  ngComponentOutletInputs;
  ngComponentOutletInjector;
  ngComponentOutletContent;
  ngComponentOutletNgModule;
  /**
   * @deprecated This input is deprecated, use `ngComponentOutletNgModule` instead.
   */
  ngComponentOutletNgModuleFactory;
  _componentRef;
  _moduleRef;
  /**
   * A helper data structure that allows us to track inputs that were part of the
   * ngComponentOutletInputs expression. Tracking inputs is necessary for proper removal of ones
   * that are no longer referenced.
   */
  _inputsUsed = /* @__PURE__ */ new Map();
  /**
   * Gets the instance of the currently-rendered component.
   * Will be null if no component has been rendered.
   */
  get componentInstance() {
    return this._componentRef?.instance ?? null;
  }
  constructor(_viewContainerRef) {
    this._viewContainerRef = _viewContainerRef;
  }
  _needToReCreateNgModuleInstance(changes) {
    return changes["ngComponentOutletNgModule"] !== void 0 || changes["ngComponentOutletNgModuleFactory"] !== void 0;
  }
  _needToReCreateComponentInstance(changes) {
    return changes["ngComponentOutlet"] !== void 0 || changes["ngComponentOutletContent"] !== void 0 || changes["ngComponentOutletInjector"] !== void 0 || this._needToReCreateNgModuleInstance(changes);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (this._needToReCreateComponentInstance(changes)) {
      this._viewContainerRef.clear();
      this._inputsUsed.clear();
      this._componentRef = void 0;
      if (this.ngComponentOutlet) {
        const injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
        if (this._needToReCreateNgModuleInstance(changes)) {
          this._moduleRef?.destroy();
          if (this.ngComponentOutletNgModule) {
            this._moduleRef = createNgModule(this.ngComponentOutletNgModule, getParentInjector(injector));
          } else if (this.ngComponentOutletNgModuleFactory) {
            this._moduleRef = this.ngComponentOutletNgModuleFactory.create(getParentInjector(injector));
          } else {
            this._moduleRef = void 0;
          }
        }
        this._componentRef = this._viewContainerRef.createComponent(this.ngComponentOutlet, {
          injector,
          ngModuleRef: this._moduleRef,
          projectableNodes: this.ngComponentOutletContent
        });
      }
    }
  }
  /** @nodoc */
  ngDoCheck() {
    if (this._componentRef) {
      if (this.ngComponentOutletInputs) {
        for (const inputName of Object.keys(this.ngComponentOutletInputs)) {
          this._inputsUsed.set(inputName, true);
        }
      }
      this._applyInputStateDiff(this._componentRef);
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    this._moduleRef?.destroy();
  }
  _applyInputStateDiff(componentRef) {
    for (const [inputName, touched] of this._inputsUsed) {
      if (!touched) {
        componentRef.setInput(inputName, void 0);
        this._inputsUsed.delete(inputName);
      } else {
        componentRef.setInput(inputName, this.ngComponentOutletInputs[inputName]);
        this._inputsUsed.set(inputName, false);
      }
    }
  }
  static \u0275fac = function NgComponentOutlet_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgComponentOutlet)(\u0275\u0275directiveInject(ViewContainerRef));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgComponentOutlet,
    selectors: [["", "ngComponentOutlet", ""]],
    inputs: {
      ngComponentOutlet: "ngComponentOutlet",
      ngComponentOutletInputs: "ngComponentOutletInputs",
      ngComponentOutletInjector: "ngComponentOutletInjector",
      ngComponentOutletContent: "ngComponentOutletContent",
      ngComponentOutletNgModule: "ngComponentOutletNgModule",
      ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory"
    },
    exportAs: ["ngComponentOutlet"],
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgComponentOutlet, [{
    type: Directive,
    args: [{
      selector: "[ngComponentOutlet]",
      exportAs: "ngComponentOutlet"
    }]
  }], () => [{
    type: ViewContainerRef
  }], {
    ngComponentOutlet: [{
      type: Input
    }],
    ngComponentOutletInputs: [{
      type: Input
    }],
    ngComponentOutletInjector: [{
      type: Input
    }],
    ngComponentOutletContent: [{
      type: Input
    }],
    ngComponentOutletNgModule: [{
      type: Input
    }],
    ngComponentOutletNgModuleFactory: [{
      type: Input
    }]
  });
})();
function getParentInjector(injector) {
  const parentNgModule = injector.get(NgModuleRef$1);
  return parentNgModule.injector;
}
var NgForOfContext = class {
  $implicit;
  ngForOf;
  index;
  count;
  constructor($implicit, ngForOf, index, count) {
    this.$implicit = $implicit;
    this.ngForOf = ngForOf;
    this.index = index;
    this.count = count;
  }
  // Indicates whether this is the first item in the collection.
  get first() {
    return this.index === 0;
  }
  // Indicates whether this is the last item in the collection.
  get last() {
    return this.index === this.count - 1;
  }
  // Indicates whether an index of this item in the collection is even.
  get even() {
    return this.index % 2 === 0;
  }
  // Indicates whether an index of this item in the collection is odd.
  get odd() {
    return !this.even;
  }
};
var NgForOf = class _NgForOf {
  _viewContainer;
  _template;
  _differs;
  /**
   * The value of the iterable expression, which can be used as a
   * [template input variable](guide/directives/structural-directives#shorthand).
   */
  set ngForOf(ngForOf) {
    this._ngForOf = ngForOf;
    this._ngForOfDirty = true;
  }
  /**
   * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.
   *
   * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object
   * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)
   * as the key.
   *
   * `NgForOf` uses the computed key to associate items in an iterable with DOM elements
   * it produces for these items.
   *
   * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an
   * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a
   * primary key), and this iterable could be updated with new object instances that still
   * represent the same underlying entity (for example, when data is re-fetched from the server,
   * and the iterable is recreated and re-rendered, but most of the data is still the same).
   *
   * @see {@link TrackByFunction}
   */
  set ngForTrackBy(fn) {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && fn != null && typeof fn !== "function") {
      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}. See https://angular.io/api/common/NgForOf#change-propagation for more information.`);
    }
    this._trackByFn = fn;
  }
  get ngForTrackBy() {
    return this._trackByFn;
  }
  _ngForOf = null;
  _ngForOfDirty = true;
  _differ = null;
  // waiting for microsoft/typescript#43662 to allow the return type `TrackByFunction|undefined` for
  // the getter
  _trackByFn;
  constructor(_viewContainer, _template, _differs) {
    this._viewContainer = _viewContainer;
    this._template = _template;
    this._differs = _differs;
  }
  /**
   * A reference to the template that is stamped out for each item in the iterable.
   * @see [template reference variable](guide/templates/variables#template-reference-variables)
   */
  set ngForTemplate(value) {
    if (value) {
      this._template = value;
    }
  }
  /**
   * Applies the changes when needed.
   * @nodoc
   */
  ngDoCheck() {
    if (this._ngForOfDirty) {
      this._ngForOfDirty = false;
      const value = this._ngForOf;
      if (!this._differ && value) {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          try {
            this._differ = this._differs.find(value).create(this.ngForTrackBy);
          } catch {
            let errorMessage = `Cannot find a differ supporting object '${value}' of type '${getTypeName(value)}'. NgFor only supports binding to Iterables, such as Arrays.`;
            if (typeof value === "object") {
              errorMessage += " Did you mean to use the keyvalue pipe?";
            }
            throw new RuntimeError(-2200, errorMessage);
          }
        } else {
          this._differ = this._differs.find(value).create(this.ngForTrackBy);
        }
      }
    }
    if (this._differ) {
      const changes = this._differ.diff(this._ngForOf);
      if (changes) this._applyChanges(changes);
    }
  }
  _applyChanges(changes) {
    const viewContainer = this._viewContainer;
    changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {
      if (item.previousIndex == null) {
        viewContainer.createEmbeddedView(this._template, new NgForOfContext(item.item, this._ngForOf, -1, -1), currentIndex === null ? void 0 : currentIndex);
      } else if (currentIndex == null) {
        viewContainer.remove(adjustedPreviousIndex === null ? void 0 : adjustedPreviousIndex);
      } else if (adjustedPreviousIndex !== null) {
        const view = viewContainer.get(adjustedPreviousIndex);
        viewContainer.move(view, currentIndex);
        applyViewChange(view, item);
      }
    });
    for (let i = 0, ilen = viewContainer.length; i < ilen; i++) {
      const viewRef = viewContainer.get(i);
      const context2 = viewRef.context;
      context2.index = i;
      context2.count = ilen;
      context2.ngForOf = this._ngForOf;
    }
    changes.forEachIdentityChange((record) => {
      const viewRef = viewContainer.get(record.currentIndex);
      applyViewChange(viewRef, record);
    });
  }
  /**
   * Asserts the correct type of the context for the template that `NgForOf` will render.
   *
   * The presence of this method is a signal to the Ivy template type-check compiler that the
   * `NgForOf` structural directive renders its template with a specific context type.
   */
  static ngTemplateContextGuard(dir, ctx) {
    return true;
  }
  static \u0275fac = function NgForOf_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgForOf)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(IterableDiffers));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgForOf,
    selectors: [["", "ngFor", "", "ngForOf", ""]],
    inputs: {
      ngForOf: "ngForOf",
      ngForTrackBy: "ngForTrackBy",
      ngForTemplate: "ngForTemplate"
    }
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgForOf, [{
    type: Directive,
    args: [{
      selector: "[ngFor][ngForOf]"
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: IterableDiffers
  }], {
    ngForOf: [{
      type: Input
    }],
    ngForTrackBy: [{
      type: Input
    }],
    ngForTemplate: [{
      type: Input
    }]
  });
})();
function applyViewChange(view, record) {
  view.context.$implicit = record.item;
}
function getTypeName(type) {
  return type["name"] || typeof type;
}
var NgIf = class _NgIf {
  _viewContainer;
  _context = new NgIfContext();
  _thenTemplateRef = null;
  _elseTemplateRef = null;
  _thenViewRef = null;
  _elseViewRef = null;
  constructor(_viewContainer, templateRef) {
    this._viewContainer = _viewContainer;
    this._thenTemplateRef = templateRef;
  }
  /**
   * The Boolean expression to evaluate as the condition for showing a template.
   */
  set ngIf(condition) {
    this._context.$implicit = this._context.ngIf = condition;
    this._updateView();
  }
  /**
   * A template to show if the condition expression evaluates to true.
   */
  set ngIfThen(templateRef) {
    assertTemplate(templateRef, (typeof ngDevMode === "undefined" || ngDevMode) && "ngIfThen");
    this._thenTemplateRef = templateRef;
    this._thenViewRef = null;
    this._updateView();
  }
  /**
   * A template to show if the condition expression evaluates to false.
   */
  set ngIfElse(templateRef) {
    assertTemplate(templateRef, (typeof ngDevMode === "undefined" || ngDevMode) && "ngIfElse");
    this._elseTemplateRef = templateRef;
    this._elseViewRef = null;
    this._updateView();
  }
  _updateView() {
    if (this._context.$implicit) {
      if (!this._thenViewRef) {
        this._viewContainer.clear();
        this._elseViewRef = null;
        if (this._thenTemplateRef) {
          this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
        }
      }
    } else {
      if (!this._elseViewRef) {
        this._viewContainer.clear();
        this._thenViewRef = null;
        if (this._elseTemplateRef) {
          this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
        }
      }
    }
  }
  /** @internal */
  static ngIfUseIfTypeGuard;
  /**
   * Assert the correct type of the expression bound to the `ngIf` input within the template.
   *
   * The presence of this static field is a signal to the Ivy template type check compiler that
   * when the `NgIf` structural directive renders its template, the type of the expression bound
   * to `ngIf` should be narrowed in some way. For `NgIf`, the binding expression itself is used to
   * narrow its type, which allows the strictNullChecks feature of TypeScript to work with `NgIf`.
   */
  static ngTemplateGuard_ngIf;
  /**
   * Asserts the correct type of the context for the template that `NgIf` will render.
   *
   * The presence of this method is a signal to the Ivy template type-check compiler that the
   * `NgIf` structural directive renders its template with a specific context type.
   */
  static ngTemplateContextGuard(dir, ctx) {
    return true;
  }
  static \u0275fac = function NgIf_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgIf)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgIf,
    selectors: [["", "ngIf", ""]],
    inputs: {
      ngIf: "ngIf",
      ngIfThen: "ngIfThen",
      ngIfElse: "ngIfElse"
    }
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgIf, [{
    type: Directive,
    args: [{
      selector: "[ngIf]"
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }], {
    ngIf: [{
      type: Input
    }],
    ngIfThen: [{
      type: Input
    }],
    ngIfElse: [{
      type: Input
    }]
  });
})();
var NgIfContext = class {
  $implicit = null;
  ngIf = null;
};
function assertTemplate(templateRef, property) {
  if (templateRef && !templateRef.createEmbeddedView) {
    throw new RuntimeError(2020, (typeof ngDevMode === "undefined" || ngDevMode) && `${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);
  }
}
var SwitchView = class {
  _viewContainerRef;
  _templateRef;
  _created = false;
  constructor(_viewContainerRef, _templateRef) {
    this._viewContainerRef = _viewContainerRef;
    this._templateRef = _templateRef;
  }
  create() {
    this._created = true;
    this._viewContainerRef.createEmbeddedView(this._templateRef);
  }
  destroy() {
    this._created = false;
    this._viewContainerRef.clear();
  }
  enforceState(created) {
    if (created && !this._created) {
      this.create();
    } else if (!created && this._created) {
      this.destroy();
    }
  }
};
var NgSwitch = class _NgSwitch {
  _defaultViews = [];
  _defaultUsed = false;
  _caseCount = 0;
  _lastCaseCheckIndex = 0;
  _lastCasesMatched = false;
  _ngSwitch;
  set ngSwitch(newValue) {
    this._ngSwitch = newValue;
    if (this._caseCount === 0) {
      this._updateDefaultCases(true);
    }
  }
  /** @internal */
  _addCase() {
    return this._caseCount++;
  }
  /** @internal */
  _addDefault(view) {
    this._defaultViews.push(view);
  }
  /** @internal */
  _matchCase(value) {
    const matched = value === this._ngSwitch;
    this._lastCasesMatched ||= matched;
    this._lastCaseCheckIndex++;
    if (this._lastCaseCheckIndex === this._caseCount) {
      this._updateDefaultCases(!this._lastCasesMatched);
      this._lastCaseCheckIndex = 0;
      this._lastCasesMatched = false;
    }
    return matched;
  }
  _updateDefaultCases(useDefault) {
    if (this._defaultViews.length > 0 && useDefault !== this._defaultUsed) {
      this._defaultUsed = useDefault;
      for (const defaultView of this._defaultViews) {
        defaultView.enforceState(useDefault);
      }
    }
  }
  static \u0275fac = function NgSwitch_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgSwitch)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgSwitch,
    selectors: [["", "ngSwitch", ""]],
    inputs: {
      ngSwitch: "ngSwitch"
    }
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgSwitch, [{
    type: Directive,
    args: [{
      selector: "[ngSwitch]"
    }]
  }], null, {
    ngSwitch: [{
      type: Input
    }]
  });
})();
var NgSwitchCase = class _NgSwitchCase {
  ngSwitch;
  _view;
  /**
   * Stores the HTML template to be selected on match.
   */
  ngSwitchCase;
  constructor(viewContainer, templateRef, ngSwitch) {
    this.ngSwitch = ngSwitch;
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !ngSwitch) {
      throwNgSwitchProviderNotFoundError("ngSwitchCase", "NgSwitchCase");
    }
    ngSwitch._addCase();
    this._view = new SwitchView(viewContainer, templateRef);
  }
  /**
   * Performs case matching. For internal use only.
   * @nodoc
   */
  ngDoCheck() {
    this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
  }
  static \u0275fac = function NgSwitchCase_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgSwitchCase)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(NgSwitch, 9));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgSwitchCase,
    selectors: [["", "ngSwitchCase", ""]],
    inputs: {
      ngSwitchCase: "ngSwitchCase"
    }
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgSwitchCase, [{
    type: Directive,
    args: [{
      selector: "[ngSwitchCase]"
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: NgSwitch,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], {
    ngSwitchCase: [{
      type: Input
    }]
  });
})();
var NgSwitchDefault = class _NgSwitchDefault {
  constructor(viewContainer, templateRef, ngSwitch) {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !ngSwitch) {
      throwNgSwitchProviderNotFoundError("ngSwitchDefault", "NgSwitchDefault");
    }
    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
  }
  static \u0275fac = function NgSwitchDefault_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgSwitchDefault)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(NgSwitch, 9));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgSwitchDefault,
    selectors: [["", "ngSwitchDefault", ""]]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgSwitchDefault, [{
    type: Directive,
    args: [{
      selector: "[ngSwitchDefault]"
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: NgSwitch,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], null);
})();
function throwNgSwitchProviderNotFoundError(attrName, directiveName) {
  throw new RuntimeError(2e3, `An element with the "${attrName}" attribute (matching the "${directiveName}" directive) must be located inside an element with the "ngSwitch" attribute (matching "NgSwitch" directive)`);
}
var NgPlural = class _NgPlural {
  _localization;
  _activeView;
  _caseViews = {};
  constructor(_localization) {
    this._localization = _localization;
  }
  set ngPlural(value) {
    this._updateView(value);
  }
  addCase(value, switchView) {
    this._caseViews[value] = switchView;
  }
  _updateView(switchValue) {
    this._clearViews();
    const cases = Object.keys(this._caseViews);
    const key = getPluralCategory(switchValue, cases, this._localization);
    this._activateView(this._caseViews[key]);
  }
  _clearViews() {
    if (this._activeView) this._activeView.destroy();
  }
  _activateView(view) {
    if (view) {
      this._activeView = view;
      this._activeView.create();
    }
  }
  static \u0275fac = function NgPlural_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgPlural)(\u0275\u0275directiveInject(NgLocalization));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgPlural,
    selectors: [["", "ngPlural", ""]],
    inputs: {
      ngPlural: "ngPlural"
    }
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgPlural, [{
    type: Directive,
    args: [{
      selector: "[ngPlural]"
    }]
  }], () => [{
    type: NgLocalization
  }], {
    ngPlural: [{
      type: Input
    }]
  });
})();
var NgPluralCase = class _NgPluralCase {
  value;
  constructor(value, template, viewContainer, ngPlural) {
    this.value = value;
    const isANumber = !isNaN(Number(value));
    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));
  }
  static \u0275fac = function NgPluralCase_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgPluralCase)(\u0275\u0275injectAttribute("ngPluralCase"), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(NgPlural, 1));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgPluralCase,
    selectors: [["", "ngPluralCase", ""]]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgPluralCase, [{
    type: Directive,
    args: [{
      selector: "[ngPluralCase]"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Attribute,
      args: ["ngPluralCase"]
    }]
  }, {
    type: TemplateRef
  }, {
    type: ViewContainerRef
  }, {
    type: NgPlural,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var NgStyle = class _NgStyle {
  _ngEl;
  _differs;
  _renderer;
  _ngStyle = null;
  _differ = null;
  constructor(_ngEl, _differs, _renderer) {
    this._ngEl = _ngEl;
    this._differs = _differs;
    this._renderer = _renderer;
  }
  set ngStyle(values) {
    this._ngStyle = values;
    if (!this._differ && values) {
      this._differ = this._differs.find(values).create();
    }
  }
  ngDoCheck() {
    if (this._differ) {
      const changes = this._differ.diff(this._ngStyle);
      if (changes) {
        this._applyChanges(changes);
      }
    }
  }
  _setStyle(nameAndUnit, value) {
    const [name, unit] = nameAndUnit.split(".");
    const flags = name.indexOf("-") === -1 ? void 0 : RendererStyleFlags2.DashCase;
    if (value != null) {
      this._renderer.setStyle(this._ngEl.nativeElement, name, unit ? `${value}${unit}` : value, flags);
    } else {
      this._renderer.removeStyle(this._ngEl.nativeElement, name, flags);
    }
  }
  _applyChanges(changes) {
    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));
    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));
    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));
  }
  static \u0275fac = function NgStyle_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgStyle)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(KeyValueDiffers), \u0275\u0275directiveInject(Renderer2));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgStyle,
    selectors: [["", "ngStyle", ""]],
    inputs: {
      ngStyle: "ngStyle"
    }
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgStyle, [{
    type: Directive,
    args: [{
      selector: "[ngStyle]"
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: KeyValueDiffers
  }, {
    type: Renderer2
  }], {
    ngStyle: [{
      type: Input,
      args: ["ngStyle"]
    }]
  });
})();
var NgTemplateOutlet = class _NgTemplateOutlet {
  _viewContainerRef;
  _viewRef = null;
  /**
   * A context object to attach to the {@link EmbeddedViewRef}. This should be an
   * object, the object's keys will be available for binding by the local template `let`
   * declarations.
   * Using the key `$implicit` in the context object will set its value as default.
   */
  ngTemplateOutletContext = null;
  /**
   * A string defining the template reference and optionally the context object for the template.
   */
  ngTemplateOutlet = null;
  /** Injector to be used within the embedded view. */
  ngTemplateOutletInjector = null;
  constructor(_viewContainerRef) {
    this._viewContainerRef = _viewContainerRef;
  }
  ngOnChanges(changes) {
    if (this._shouldRecreateView(changes)) {
      const viewContainerRef = this._viewContainerRef;
      if (this._viewRef) {
        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
      }
      if (!this.ngTemplateOutlet) {
        this._viewRef = null;
        return;
      }
      const viewContext = this._createContextForwardProxy();
      this._viewRef = viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, viewContext, {
        injector: this.ngTemplateOutletInjector ?? void 0
      });
    }
  }
  /**
   * We need to re-create existing embedded view if either is true:
   * - the outlet changed.
   * - the injector changed.
   */
  _shouldRecreateView(changes) {
    return !!changes["ngTemplateOutlet"] || !!changes["ngTemplateOutletInjector"];
  }
  /**
   * For a given outlet instance, we create a proxy object that delegates
   * to the user-specified context. This allows changing, or swapping out
   * the context object completely without having to destroy/re-create the view.
   */
  _createContextForwardProxy() {
    return new Proxy({}, {
      set: (_target, prop, newValue) => {
        if (!this.ngTemplateOutletContext) {
          return false;
        }
        return Reflect.set(this.ngTemplateOutletContext, prop, newValue);
      },
      get: (_target, prop, receiver) => {
        if (!this.ngTemplateOutletContext) {
          return void 0;
        }
        return Reflect.get(this.ngTemplateOutletContext, prop, receiver);
      }
    });
  }
  static \u0275fac = function NgTemplateOutlet_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgTemplateOutlet)(\u0275\u0275directiveInject(ViewContainerRef));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgTemplateOutlet,
    selectors: [["", "ngTemplateOutlet", ""]],
    inputs: {
      ngTemplateOutletContext: "ngTemplateOutletContext",
      ngTemplateOutlet: "ngTemplateOutlet",
      ngTemplateOutletInjector: "ngTemplateOutletInjector"
    },
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgTemplateOutlet, [{
    type: Directive,
    args: [{
      selector: "[ngTemplateOutlet]"
    }]
  }], () => [{
    type: ViewContainerRef
  }], {
    ngTemplateOutletContext: [{
      type: Input
    }],
    ngTemplateOutlet: [{
      type: Input
    }],
    ngTemplateOutletInjector: [{
      type: Input
    }]
  });
})();
var COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
function invalidPipeArgumentError(type, value) {
  return new RuntimeError(2100, ngDevMode && `InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);
}
var SubscribableStrategy = class {
  createSubscription(async, updateLatestValue) {
    return untracked2(() => async.subscribe({
      next: updateLatestValue,
      error: (e2) => {
        throw e2;
      }
    }));
  }
  dispose(subscription) {
    untracked2(() => subscription.unsubscribe());
  }
};
var PromiseStrategy = class {
  createSubscription(async, updateLatestValue) {
    return async.then(updateLatestValue, (e2) => {
      throw e2;
    });
  }
  dispose(subscription) {
  }
};
var _promiseStrategy = new PromiseStrategy();
var _subscribableStrategy = new SubscribableStrategy();
var AsyncPipe = class _AsyncPipe {
  _ref;
  _latestValue = null;
  markForCheckOnValueUpdate = true;
  _subscription = null;
  _obj = null;
  _strategy = null;
  constructor(ref) {
    this._ref = ref;
  }
  ngOnDestroy() {
    if (this._subscription) {
      this._dispose();
    }
    this._ref = null;
  }
  transform(obj) {
    if (!this._obj) {
      if (obj) {
        try {
          this.markForCheckOnValueUpdate = false;
          this._subscribe(obj);
        } finally {
          this.markForCheckOnValueUpdate = true;
        }
      }
      return this._latestValue;
    }
    if (obj !== this._obj) {
      this._dispose();
      return this.transform(obj);
    }
    return this._latestValue;
  }
  _subscribe(obj) {
    this._obj = obj;
    this._strategy = this._selectStrategy(obj);
    this._subscription = this._strategy.createSubscription(obj, (value) => this._updateLatestValue(obj, value));
  }
  _selectStrategy(obj) {
    if (isPromise2(obj)) {
      return _promiseStrategy;
    }
    if (isSubscribable(obj)) {
      return _subscribableStrategy;
    }
    throw invalidPipeArgumentError(_AsyncPipe, obj);
  }
  _dispose() {
    this._strategy.dispose(this._subscription);
    this._latestValue = null;
    this._subscription = null;
    this._obj = null;
  }
  _updateLatestValue(async, value) {
    if (async === this._obj) {
      this._latestValue = value;
      if (this.markForCheckOnValueUpdate) {
        this._ref?.markForCheck();
      }
    }
  }
  static \u0275fac = function AsyncPipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AsyncPipe)(\u0275\u0275directiveInject(ChangeDetectorRef, 16));
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "async",
    type: _AsyncPipe,
    pure: false
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AsyncPipe, [{
    type: Pipe,
    args: [{
      name: "async",
      pure: false
    }]
  }], () => [{
    type: ChangeDetectorRef
  }], null);
})();
var LowerCasePipe = class _LowerCasePipe {
  transform(value) {
    if (value == null) return null;
    if (typeof value !== "string") {
      throw invalidPipeArgumentError(_LowerCasePipe, value);
    }
    return value.toLowerCase();
  }
  static \u0275fac = function LowerCasePipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _LowerCasePipe)();
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "lowercase",
    type: _LowerCasePipe,
    pure: true
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LowerCasePipe, [{
    type: Pipe,
    args: [{
      name: "lowercase"
    }]
  }], null, null);
})();
var unicodeWordMatch = /(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])\S*/g;
var TitleCasePipe = class _TitleCasePipe {
  transform(value) {
    if (value == null) return null;
    if (typeof value !== "string") {
      throw invalidPipeArgumentError(_TitleCasePipe, value);
    }
    return value.replace(unicodeWordMatch, (txt) => txt[0].toUpperCase() + txt.slice(1).toLowerCase());
  }
  static \u0275fac = function TitleCasePipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _TitleCasePipe)();
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "titlecase",
    type: _TitleCasePipe,
    pure: true
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TitleCasePipe, [{
    type: Pipe,
    args: [{
      name: "titlecase"
    }]
  }], null, null);
})();
var UpperCasePipe = class _UpperCasePipe {
  transform(value) {
    if (value == null) return null;
    if (typeof value !== "string") {
      throw invalidPipeArgumentError(_UpperCasePipe, value);
    }
    return value.toUpperCase();
  }
  static \u0275fac = function UpperCasePipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UpperCasePipe)();
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "uppercase",
    type: _UpperCasePipe,
    pure: true
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UpperCasePipe, [{
    type: Pipe,
    args: [{
      name: "uppercase"
    }]
  }], null, null);
})();
var DEFAULT_DATE_FORMAT = "mediumDate";
var DATE_PIPE_DEFAULT_TIMEZONE = new InjectionToken(ngDevMode ? "DATE_PIPE_DEFAULT_TIMEZONE" : "");
var DATE_PIPE_DEFAULT_OPTIONS = new InjectionToken(ngDevMode ? "DATE_PIPE_DEFAULT_OPTIONS" : "");
var DatePipe = class _DatePipe {
  locale;
  defaultTimezone;
  defaultOptions;
  constructor(locale, defaultTimezone, defaultOptions) {
    this.locale = locale;
    this.defaultTimezone = defaultTimezone;
    this.defaultOptions = defaultOptions;
  }
  transform(value, format, timezone, locale) {
    if (value == null || value === "" || value !== value) return null;
    try {
      const _format = format ?? this.defaultOptions?.dateFormat ?? DEFAULT_DATE_FORMAT;
      const _timezone = timezone ?? this.defaultOptions?.timezone ?? this.defaultTimezone ?? void 0;
      return formatDate(value, _format, locale || this.locale, _timezone);
    } catch (error) {
      throw invalidPipeArgumentError(_DatePipe, error.message);
    }
  }
  static \u0275fac = function DatePipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DatePipe)(\u0275\u0275directiveInject(LOCALE_ID, 16), \u0275\u0275directiveInject(DATE_PIPE_DEFAULT_TIMEZONE, 24), \u0275\u0275directiveInject(DATE_PIPE_DEFAULT_OPTIONS, 24));
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "date",
    type: _DatePipe,
    pure: true
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatePipe, [{
    type: Pipe,
    args: [{
      name: "date"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DATE_PIPE_DEFAULT_TIMEZONE]
    }, {
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DATE_PIPE_DEFAULT_OPTIONS]
    }, {
      type: Optional
    }]
  }], null);
})();
var _INTERPOLATION_REGEXP = /#/g;
var I18nPluralPipe = class _I18nPluralPipe {
  _localization;
  constructor(_localization) {
    this._localization = _localization;
  }
  /**
   * @param value the number to be formatted
   * @param pluralMap an object that mimics the ICU format, see
   * https://unicode-org.github.io/icu/userguide/format_parse/messages/.
   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
   * default).
   */
  transform(value, pluralMap, locale) {
    if (value == null) return "";
    if (typeof pluralMap !== "object" || pluralMap === null) {
      throw invalidPipeArgumentError(_I18nPluralPipe, pluralMap);
    }
    const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
  }
  static \u0275fac = function I18nPluralPipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _I18nPluralPipe)(\u0275\u0275directiveInject(NgLocalization, 16));
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "i18nPlural",
    type: _I18nPluralPipe,
    pure: true
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(I18nPluralPipe, [{
    type: Pipe,
    args: [{
      name: "i18nPlural"
    }]
  }], () => [{
    type: NgLocalization
  }], null);
})();
var I18nSelectPipe = class _I18nSelectPipe {
  /**
   * @param value a string to be internationalized.
   * @param mapping an object that indicates the text that should be displayed
   * for different values of the provided `value`.
   */
  transform(value, mapping) {
    if (value == null) return "";
    if (typeof mapping !== "object" || typeof value !== "string") {
      throw invalidPipeArgumentError(_I18nSelectPipe, mapping);
    }
    if (mapping.hasOwnProperty(value)) {
      return mapping[value];
    }
    if (mapping.hasOwnProperty("other")) {
      return mapping["other"];
    }
    return "";
  }
  static \u0275fac = function I18nSelectPipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _I18nSelectPipe)();
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "i18nSelect",
    type: _I18nSelectPipe,
    pure: true
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(I18nSelectPipe, [{
    type: Pipe,
    args: [{
      name: "i18nSelect"
    }]
  }], null, null);
})();
var JsonPipe = class _JsonPipe {
  /**
   * @param value A value of any type to convert into a JSON-format string.
   */
  transform(value) {
    return JSON.stringify(value, null, 2);
  }
  static \u0275fac = function JsonPipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _JsonPipe)();
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "json",
    type: _JsonPipe,
    pure: false
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(JsonPipe, [{
    type: Pipe,
    args: [{
      name: "json",
      pure: false
    }]
  }], null, null);
})();
function makeKeyValuePair(key, value) {
  return {
    key,
    value
  };
}
var KeyValuePipe = class _KeyValuePipe {
  differs;
  constructor(differs) {
    this.differs = differs;
  }
  differ;
  keyValues = [];
  compareFn = defaultComparator;
  transform(input2, compareFn = defaultComparator) {
    if (!input2 || !(input2 instanceof Map) && typeof input2 !== "object") {
      return null;
    }
    this.differ ??= this.differs.find(input2).create();
    const differChanges = this.differ.diff(input2);
    const compareFnChanged = compareFn !== this.compareFn;
    if (differChanges) {
      this.keyValues = [];
      differChanges.forEachItem((r) => {
        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
      });
    }
    if (differChanges || compareFnChanged) {
      if (compareFn) {
        this.keyValues.sort(compareFn);
      }
      this.compareFn = compareFn;
    }
    return this.keyValues;
  }
  static \u0275fac = function KeyValuePipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _KeyValuePipe)(\u0275\u0275directiveInject(KeyValueDiffers, 16));
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "keyvalue",
    type: _KeyValuePipe,
    pure: false
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(KeyValuePipe, [{
    type: Pipe,
    args: [{
      name: "keyvalue",
      pure: false
    }]
  }], () => [{
    type: KeyValueDiffers
  }], null);
})();
function defaultComparator(keyValueA, keyValueB) {
  const a = keyValueA.key;
  const b = keyValueB.key;
  if (a === b) return 0;
  if (a == null) return 1;
  if (b == null) return -1;
  if (typeof a == "string" && typeof b == "string") {
    return a < b ? -1 : 1;
  }
  if (typeof a == "number" && typeof b == "number") {
    return a - b;
  }
  if (typeof a == "boolean" && typeof b == "boolean") {
    return a < b ? -1 : 1;
  }
  const aString = String(a);
  const bString = String(b);
  return aString == bString ? 0 : aString < bString ? -1 : 1;
}
var DecimalPipe = class _DecimalPipe {
  _locale;
  constructor(_locale) {
    this._locale = _locale;
  }
  transform(value, digitsInfo, locale) {
    if (!isValue(value)) return null;
    locale ||= this._locale;
    try {
      const num = strToNumber(value);
      return formatNumber(num, locale, digitsInfo);
    } catch (error) {
      throw invalidPipeArgumentError(_DecimalPipe, error.message);
    }
  }
  static \u0275fac = function DecimalPipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DecimalPipe)(\u0275\u0275directiveInject(LOCALE_ID, 16));
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "number",
    type: _DecimalPipe,
    pure: true
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DecimalPipe, [{
    type: Pipe,
    args: [{
      name: "number"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }], null);
})();
var PercentPipe = class _PercentPipe {
  _locale;
  constructor(_locale) {
    this._locale = _locale;
  }
  /**
   *
   * @param value The number to be formatted as a percentage.
   * @param digitsInfo Decimal representation options, specified by a string
   * in the following format:<br>
   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
   * Default is `1`.
   *   - `minFractionDigits`: The minimum number of digits after the decimal point.
   * Default is `0`.
   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
   * Default is `0`.
   * @param locale A locale code for the locale format rules to use.
   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
   * See [Setting your app locale](guide/i18n/locale-id).
   */
  transform(value, digitsInfo, locale) {
    if (!isValue(value)) return null;
    locale ||= this._locale;
    try {
      const num = strToNumber(value);
      return formatPercent(num, locale, digitsInfo);
    } catch (error) {
      throw invalidPipeArgumentError(_PercentPipe, error.message);
    }
  }
  static \u0275fac = function PercentPipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _PercentPipe)(\u0275\u0275directiveInject(LOCALE_ID, 16));
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "percent",
    type: _PercentPipe,
    pure: true
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PercentPipe, [{
    type: Pipe,
    args: [{
      name: "percent"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }], null);
})();
var CurrencyPipe = class _CurrencyPipe {
  _locale;
  _defaultCurrencyCode;
  constructor(_locale, _defaultCurrencyCode = "USD") {
    this._locale = _locale;
    this._defaultCurrencyCode = _defaultCurrencyCode;
  }
  transform(value, currencyCode = this._defaultCurrencyCode, display = "symbol", digitsInfo, locale) {
    if (!isValue(value)) return null;
    locale ||= this._locale;
    if (typeof display === "boolean") {
      if ((typeof ngDevMode === "undefined" || ngDevMode) && console && console.warn) {
        console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are "code", "symbol" or "symbol-narrow".`);
      }
      display = display ? "symbol" : "code";
    }
    let currency = currencyCode || this._defaultCurrencyCode;
    if (display !== "code") {
      if (display === "symbol" || display === "symbol-narrow") {
        currency = getCurrencySymbol(currency, display === "symbol" ? "wide" : "narrow", locale);
      } else {
        currency = display;
      }
    }
    try {
      const num = strToNumber(value);
      return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
    } catch (error) {
      throw invalidPipeArgumentError(_CurrencyPipe, error.message);
    }
  }
  static \u0275fac = function CurrencyPipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CurrencyPipe)(\u0275\u0275directiveInject(LOCALE_ID, 16), \u0275\u0275directiveInject(DEFAULT_CURRENCY_CODE, 16));
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "currency",
    type: _CurrencyPipe,
    pure: true
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CurrencyPipe, [{
    type: Pipe,
    args: [{
      name: "currency"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DEFAULT_CURRENCY_CODE]
    }]
  }], null);
})();
function isValue(value) {
  return !(value == null || value === "" || value !== value);
}
function strToNumber(value) {
  if (typeof value === "string" && !isNaN(Number(value) - parseFloat(value))) {
    return Number(value);
  }
  if (typeof value !== "number") {
    throw new Error(`${value} is not a number`);
  }
  return value;
}
var SlicePipe = class _SlicePipe {
  transform(value, start, end) {
    if (value == null) return null;
    const supports = typeof value === "string" || Array.isArray(value);
    if (!supports) {
      throw invalidPipeArgumentError(_SlicePipe, value);
    }
    return value.slice(start, end);
  }
  static \u0275fac = function SlicePipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SlicePipe)();
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
    name: "slice",
    type: _SlicePipe,
    pure: false
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SlicePipe, [{
    type: Pipe,
    args: [{
      name: "slice",
      pure: false
    }]
  }], null, null);
})();
var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe];
var CommonModule = class _CommonModule {
  static \u0275fac = function CommonModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CommonModule)();
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
    type: _CommonModule
  });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CommonModule, [{
    type: NgModule,
    args: [{
      imports: [COMMON_DIRECTIVES, COMMON_PIPES],
      exports: [COMMON_DIRECTIVES, COMMON_PIPES]
    }]
  }], null, null);
})();

// node_modules/@angular/common/fesm2022/xhr-BfNfxNDv.mjs
function parseCookieValue(cookieStr, name) {
  name = encodeURIComponent(name);
  for (const cookie of cookieStr.split(";")) {
    const eqIndex = cookie.indexOf("=");
    const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ""] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];
    if (cookieName.trim() === name) {
      return decodeURIComponent(cookieValue);
    }
  }
  return null;
}
var PLATFORM_BROWSER_ID = "browser";
var PLATFORM_SERVER_ID = "server";
function isPlatformBrowser(platformId) {
  return platformId === PLATFORM_BROWSER_ID;
}
function isPlatformServer(platformId) {
  return platformId === PLATFORM_SERVER_ID;
}
var XhrFactory = class {
};

// node_modules/@angular/common/fesm2022/common.mjs
var VERSION2 = new Version("19.2.6");
var ViewportScroller = class _ViewportScroller {
  // De-sugared tree-shakable injection
  // See #23917
  /** @nocollapse */
  static \u0275prov = (
    /** @pureOrBreakMyCode */
    /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _ViewportScroller,
      providedIn: "root",
      factory: () => false ? new NullViewportScroller() : new BrowserViewportScroller(inject(DOCUMENT2), window)
    })
  );
};
var BrowserViewportScroller = class {
  document;
  window;
  offset = () => [0, 0];
  constructor(document2, window2) {
    this.document = document2;
    this.window = window2;
  }
  /**
   * Configures the top offset used when scrolling to an anchor.
   * @param offset A position in screen coordinates (a tuple with x and y values)
   * or a function that returns the top offset position.
   *
   */
  setOffset(offset) {
    if (Array.isArray(offset)) {
      this.offset = () => offset;
    } else {
      this.offset = offset;
    }
  }
  /**
   * Retrieves the current scroll position.
   * @returns The position in screen coordinates.
   */
  getScrollPosition() {
    return [this.window.scrollX, this.window.scrollY];
  }
  /**
   * Sets the scroll position.
   * @param position The new position in screen coordinates.
   */
  scrollToPosition(position) {
    this.window.scrollTo(position[0], position[1]);
  }
  /**
   * Scrolls to an element and attempts to focus the element.
   *
   * Note that the function name here is misleading in that the target string may be an ID for a
   * non-anchor element.
   *
   * @param target The ID of an element or name of the anchor.
   *
   * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document
   * @see https://html.spec.whatwg.org/#scroll-to-fragid
   */
  scrollToAnchor(target) {
    const elSelected = findAnchorFromDocument(this.document, target);
    if (elSelected) {
      this.scrollToElement(elSelected);
      elSelected.focus();
    }
  }
  /**
   * Disables automatic scroll restoration provided by the browser.
   */
  setHistoryScrollRestoration(scrollRestoration) {
    this.window.history.scrollRestoration = scrollRestoration;
  }
  /**
   * Scrolls to an element using the native offset and the specified offset set on this scroller.
   *
   * The offset can be used when we know that there is a floating header and scrolling naively to an
   * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.
   */
  scrollToElement(el) {
    const rect = el.getBoundingClientRect();
    const left = rect.left + this.window.pageXOffset;
    const top = rect.top + this.window.pageYOffset;
    const offset = this.offset();
    this.window.scrollTo(left - offset[0], top - offset[1]);
  }
};
function findAnchorFromDocument(document2, target) {
  const documentResult = document2.getElementById(target) || document2.getElementsByName(target)[0];
  if (documentResult) {
    return documentResult;
  }
  if (typeof document2.createTreeWalker === "function" && document2.body && typeof document2.body.attachShadow === "function") {
    const treeWalker = document2.createTreeWalker(document2.body, NodeFilter.SHOW_ELEMENT);
    let currentNode = treeWalker.currentNode;
    while (currentNode) {
      const shadowRoot = currentNode.shadowRoot;
      if (shadowRoot) {
        const result = shadowRoot.getElementById(target) || shadowRoot.querySelector(`[name="${target}"]`);
        if (result) {
          return result;
        }
      }
      currentNode = treeWalker.nextNode();
    }
  }
  return null;
}
var PLACEHOLDER_QUALITY = "20";
function getUrl(src, win) {
  return isAbsoluteUrl(src) ? new URL(src) : new URL(src, win.location.href);
}
function isAbsoluteUrl(src) {
  return /^https?:\/\//.test(src);
}
function extractHostname(url) {
  return isAbsoluteUrl(url) ? new URL(url).hostname : url;
}
function isValidPath(path) {
  const isString = typeof path === "string";
  if (!isString || path.trim() === "") {
    return false;
  }
  try {
    const url = new URL(path);
    return true;
  } catch {
    return false;
  }
}
function normalizePath(path) {
  return path.endsWith("/") ? path.slice(0, -1) : path;
}
function normalizeSrc(src) {
  return src.startsWith("/") ? src.slice(1) : src;
}
var noopImageLoader = (config2) => config2.src;
var IMAGE_LOADER = new InjectionToken(ngDevMode ? "ImageLoader" : "", {
  providedIn: "root",
  factory: () => noopImageLoader
});
function createImageLoader(buildUrlFn, exampleUrls) {
  return function provideImageLoader(path) {
    if (!isValidPath(path)) {
      throwInvalidPathError(path, exampleUrls || []);
    }
    path = normalizePath(path);
    const loaderFn = (config2) => {
      if (isAbsoluteUrl(config2.src)) {
        throwUnexpectedAbsoluteUrlError(path, config2.src);
      }
      return buildUrlFn(path, __spreadProps(__spreadValues({}, config2), {
        src: normalizeSrc(config2.src)
      }));
    };
    const providers = [{
      provide: IMAGE_LOADER,
      useValue: loaderFn
    }];
    return providers;
  };
}
function throwInvalidPathError(path, exampleUrls) {
  throw new RuntimeError(2959, ngDevMode && `Image loader has detected an invalid path (\`${path}\`). To fix this, supply a path using one of the following formats: ${exampleUrls.join(" or ")}`);
}
function throwUnexpectedAbsoluteUrlError(path, url) {
  throw new RuntimeError(2959, ngDevMode && `Image loader has detected a \`<img>\` tag with an invalid \`ngSrc\` attribute: ${url}. This image loader expects \`ngSrc\` to be a relative URL - however the provided value is an absolute URL. To fix this, provide \`ngSrc\` as a path relative to the base URL configured for this loader (\`${path}\`).`);
}
var provideCloudflareLoader = createImageLoader(createCloudflareUrl, ngDevMode ? ["https://<ZONE>/cdn-cgi/image/<OPTIONS>/<SOURCE-IMAGE>"] : void 0);
function createCloudflareUrl(path, config2) {
  let params = `format=auto`;
  if (config2.width) {
    params += `,width=${config2.width}`;
  }
  if (config2.isPlaceholder) {
    params += `,quality=${PLACEHOLDER_QUALITY}`;
  }
  return `${path}/cdn-cgi/image/${params}/${config2.src}`;
}
var cloudinaryLoaderInfo = {
  name: "Cloudinary",
  testUrl: isCloudinaryUrl
};
var CLOUDINARY_LOADER_REGEX = /https?\:\/\/[^\/]+\.cloudinary\.com\/.+/;
function isCloudinaryUrl(url) {
  return CLOUDINARY_LOADER_REGEX.test(url);
}
var provideCloudinaryLoader = createImageLoader(createCloudinaryUrl, ngDevMode ? ["https://res.cloudinary.com/mysite", "https://mysite.cloudinary.com", "https://subdomain.mysite.com"] : void 0);
function createCloudinaryUrl(path, config2) {
  const quality = config2.isPlaceholder ? "q_auto:low" : "q_auto";
  let params = `f_auto,${quality}`;
  if (config2.width) {
    params += `,w_${config2.width}`;
  }
  if (config2.loaderParams?.["rounded"]) {
    params += `,r_max`;
  }
  return `${path}/image/upload/${params}/${config2.src}`;
}
var imageKitLoaderInfo = {
  name: "ImageKit",
  testUrl: isImageKitUrl
};
var IMAGE_KIT_LOADER_REGEX = /https?\:\/\/[^\/]+\.imagekit\.io\/.+/;
function isImageKitUrl(url) {
  return IMAGE_KIT_LOADER_REGEX.test(url);
}
var provideImageKitLoader = createImageLoader(createImagekitUrl, ngDevMode ? ["https://ik.imagekit.io/mysite", "https://subdomain.mysite.com"] : void 0);
function createImagekitUrl(path, config2) {
  const {
    src,
    width
  } = config2;
  const params = [];
  if (width) {
    params.push(`w-${width}`);
  }
  if (config2.isPlaceholder) {
    params.push(`q-${PLACEHOLDER_QUALITY}`);
  }
  const urlSegments = params.length ? [path, `tr:${params.join(",")}`, src] : [path, src];
  const url = new URL(urlSegments.join("/"));
  return url.href;
}
var imgixLoaderInfo = {
  name: "Imgix",
  testUrl: isImgixUrl
};
var IMGIX_LOADER_REGEX = /https?\:\/\/[^\/]+\.imgix\.net\/.+/;
function isImgixUrl(url) {
  return IMGIX_LOADER_REGEX.test(url);
}
var provideImgixLoader = createImageLoader(createImgixUrl, ngDevMode ? ["https://somepath.imgix.net/"] : void 0);
function createImgixUrl(path, config2) {
  const url = new URL(`${path}/${config2.src}`);
  url.searchParams.set("auto", "format");
  if (config2.width) {
    url.searchParams.set("w", config2.width.toString());
  }
  if (config2.isPlaceholder) {
    url.searchParams.set("q", PLACEHOLDER_QUALITY);
  }
  return url.href;
}
var netlifyLoaderInfo = {
  name: "Netlify",
  testUrl: isNetlifyUrl
};
var NETLIFY_LOADER_REGEX = /https?\:\/\/[^\/]+\.netlify\.app\/.+/;
function isNetlifyUrl(url) {
  return NETLIFY_LOADER_REGEX.test(url);
}
function imgDirectiveDetails(ngSrc, includeNgSrc = true) {
  const ngSrcInfo = includeNgSrc ? `(activated on an <img> element with the \`ngSrc="${ngSrc}"\`) ` : "";
  return `The NgOptimizedImage directive ${ngSrcInfo}has detected that`;
}
function assertDevMode(checkName) {
  if (!ngDevMode) {
    throw new RuntimeError(2958, `Unexpected invocation of the ${checkName} in the prod mode. Please make sure that the prod mode is enabled for production builds.`);
  }
}
var LCPImageObserver = class _LCPImageObserver {
  // Map of full image URLs -> original `ngSrc` values.
  images = /* @__PURE__ */ new Map();
  window = null;
  observer = null;
  constructor() {
    const isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
    assertDevMode("LCP checker");
    const win = inject(DOCUMENT2).defaultView;
    if (isBrowser && typeof PerformanceObserver !== "undefined") {
      this.window = win;
      this.observer = this.initPerformanceObserver();
    }
  }
  /**
   * Inits PerformanceObserver and subscribes to LCP events.
   * Based on https://web.dev/lcp/#measure-lcp-in-javascript
   */
  initPerformanceObserver() {
    const observer = new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries();
      if (entries.length === 0) return;
      const lcpElement = entries[entries.length - 1];
      const imgSrc = lcpElement.element?.src ?? "";
      if (imgSrc.startsWith("data:") || imgSrc.startsWith("blob:")) return;
      const img = this.images.get(imgSrc);
      if (!img) return;
      if (!img.priority && !img.alreadyWarnedPriority) {
        img.alreadyWarnedPriority = true;
        logMissingPriorityError(imgSrc);
      }
      if (img.modified && !img.alreadyWarnedModified) {
        img.alreadyWarnedModified = true;
        logModifiedWarning(imgSrc);
      }
    });
    observer.observe({
      type: "largest-contentful-paint",
      buffered: true
    });
    return observer;
  }
  registerImage(rewrittenSrc, originalNgSrc, isPriority) {
    if (!this.observer) return;
    const newObservedImageState = {
      priority: isPriority,
      modified: false,
      alreadyWarnedModified: false,
      alreadyWarnedPriority: false
    };
    this.images.set(getUrl(rewrittenSrc, this.window).href, newObservedImageState);
  }
  unregisterImage(rewrittenSrc) {
    if (!this.observer) return;
    this.images.delete(getUrl(rewrittenSrc, this.window).href);
  }
  updateImage(originalSrc, newSrc) {
    if (!this.observer) return;
    const originalUrl = getUrl(originalSrc, this.window).href;
    const img = this.images.get(originalUrl);
    if (img) {
      img.modified = true;
      this.images.set(getUrl(newSrc, this.window).href, img);
      this.images.delete(originalUrl);
    }
  }
  ngOnDestroy() {
    if (!this.observer) return;
    this.observer.disconnect();
    this.images.clear();
  }
  static \u0275fac = function LCPImageObserver_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _LCPImageObserver)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _LCPImageObserver,
    factory: _LCPImageObserver.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LCPImageObserver, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function logMissingPriorityError(ngSrc) {
  const directiveDetails = imgDirectiveDetails(ngSrc);
  console.error(formatRuntimeError(2955, `${directiveDetails} this image is the Largest Contentful Paint (LCP) element but was not marked "priority". This image should be marked "priority" in order to prioritize its loading. To fix this, add the "priority" attribute.`));
}
function logModifiedWarning(ngSrc) {
  const directiveDetails = imgDirectiveDetails(ngSrc);
  console.warn(formatRuntimeError(2964, `${directiveDetails} this image is the Largest Contentful Paint (LCP) element and has had its "ngSrc" attribute modified. This can cause slower loading performance. It is recommended not to modify the "ngSrc" property on any image which could be the LCP element.`));
}
var INTERNAL_PRECONNECT_CHECK_BLOCKLIST = /* @__PURE__ */ new Set(["localhost", "127.0.0.1", "0.0.0.0"]);
var PRECONNECT_CHECK_BLOCKLIST = new InjectionToken(ngDevMode ? "PRECONNECT_CHECK_BLOCKLIST" : "");
var PreconnectLinkChecker = class _PreconnectLinkChecker {
  document = inject(DOCUMENT2);
  /**
   * Set of <link rel="preconnect"> tags found on this page.
   * The `null` value indicates that there was no DOM query operation performed.
   */
  preconnectLinks = null;
  /*
   * Keep track of all already seen origin URLs to avoid repeating the same check.
   */
  alreadySeen = /* @__PURE__ */ new Set();
  window = this.document.defaultView;
  blocklist = new Set(INTERNAL_PRECONNECT_CHECK_BLOCKLIST);
  constructor() {
    assertDevMode("preconnect link checker");
    const blocklist = inject(PRECONNECT_CHECK_BLOCKLIST, {
      optional: true
    });
    if (blocklist) {
      this.populateBlocklist(blocklist);
    }
  }
  populateBlocklist(origins) {
    if (Array.isArray(origins)) {
      deepForEach2(origins, (origin) => {
        this.blocklist.add(extractHostname(origin));
      });
    } else {
      this.blocklist.add(extractHostname(origins));
    }
  }
  /**
   * Checks that a preconnect resource hint exists in the head for the
   * given src.
   *
   * @param rewrittenSrc src formatted with loader
   * @param originalNgSrc ngSrc value
   */
  assertPreconnect(rewrittenSrc, originalNgSrc) {
    if (false) return;
    const imgUrl = getUrl(rewrittenSrc, this.window);
    if (this.blocklist.has(imgUrl.hostname) || this.alreadySeen.has(imgUrl.origin)) return;
    this.alreadySeen.add(imgUrl.origin);
    this.preconnectLinks ??= this.queryPreconnectLinks();
    if (!this.preconnectLinks.has(imgUrl.origin)) {
      console.warn(formatRuntimeError(2956, `${imgDirectiveDetails(originalNgSrc)} there is no preconnect tag present for this image. Preconnecting to the origin(s) that serve priority images ensures that these images are delivered as soon as possible. To fix this, please add the following element into the <head> of the document:
  <link rel="preconnect" href="${imgUrl.origin}">`));
    }
  }
  queryPreconnectLinks() {
    const preconnectUrls = /* @__PURE__ */ new Set();
    const selector = "link[rel=preconnect]";
    const links = Array.from(this.document.querySelectorAll(selector));
    for (let link of links) {
      const url = getUrl(link.href, this.window);
      preconnectUrls.add(url.origin);
    }
    return preconnectUrls;
  }
  ngOnDestroy() {
    this.preconnectLinks?.clear();
    this.alreadySeen.clear();
  }
  static \u0275fac = function PreconnectLinkChecker_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _PreconnectLinkChecker)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _PreconnectLinkChecker,
    factory: _PreconnectLinkChecker.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PreconnectLinkChecker, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function deepForEach2(input2, fn) {
  for (let value of input2) {
    Array.isArray(value) ? deepForEach2(value, fn) : fn(value);
  }
}
var DEFAULT_PRELOADED_IMAGES_LIMIT = 5;
var PRELOADED_IMAGES = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "NG_OPTIMIZED_PRELOADED_IMAGES" : "", {
  providedIn: "root",
  factory: () => /* @__PURE__ */ new Set()
});
var PreloadLinkCreator = class _PreloadLinkCreator {
  preloadedImages = inject(PRELOADED_IMAGES);
  document = inject(DOCUMENT2);
  /**
   * @description Add a preload `<link>` to the `<head>` of the `index.html` that is served from the
   * server while using Angular Universal and SSR to kick off image loads for high priority images.
   *
   * The `sizes` (passed in from the user) and `srcset` (parsed and formatted from `ngSrcset`)
   * properties used to set the corresponding attributes, `imagesizes` and `imagesrcset`
   * respectively, on the preload `<link>` tag so that the correctly sized image is preloaded from
   * the CDN.
   *
   * {@link https://web.dev/preload-responsive-images/#imagesrcset-and-imagesizes}
   *
   * @param renderer The `Renderer2` passed in from the directive
   * @param src The original src of the image that is set on the `ngSrc` input.
   * @param srcset The parsed and formatted srcset created from the `ngSrcset` input
   * @param sizes The value of the `sizes` attribute passed in to the `<img>` tag
   */
  createPreloadLinkTag(renderer, src, srcset, sizes) {
    if (ngDevMode) {
      if (this.preloadedImages.size >= DEFAULT_PRELOADED_IMAGES_LIMIT) {
        throw new RuntimeError(2961, ngDevMode && `The \`NgOptimizedImage\` directive has detected that more than ${DEFAULT_PRELOADED_IMAGES_LIMIT} images were marked as priority. This might negatively affect an overall performance of the page. To fix this, remove the "priority" attribute from images with less priority.`);
      }
    }
    if (this.preloadedImages.has(src)) {
      return;
    }
    this.preloadedImages.add(src);
    const preload = renderer.createElement("link");
    renderer.setAttribute(preload, "as", "image");
    renderer.setAttribute(preload, "href", src);
    renderer.setAttribute(preload, "rel", "preload");
    renderer.setAttribute(preload, "fetchpriority", "high");
    if (sizes) {
      renderer.setAttribute(preload, "imageSizes", sizes);
    }
    if (srcset) {
      renderer.setAttribute(preload, "imageSrcset", srcset);
    }
    renderer.appendChild(this.document.head, preload);
  }
  static \u0275fac = function PreloadLinkCreator_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _PreloadLinkCreator)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _PreloadLinkCreator,
    factory: _PreloadLinkCreator.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PreloadLinkCreator, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var BASE64_IMG_MAX_LENGTH_IN_ERROR = 50;
var VALID_WIDTH_DESCRIPTOR_SRCSET = /^((\s*\d+w\s*(,|$)){1,})$/;
var VALID_DENSITY_DESCRIPTOR_SRCSET = /^((\s*\d+(\.\d+)?x\s*(,|$)){1,})$/;
var ABSOLUTE_SRCSET_DENSITY_CAP = 3;
var RECOMMENDED_SRCSET_DENSITY_CAP = 2;
var DENSITY_SRCSET_MULTIPLIERS = [1, 2];
var VIEWPORT_BREAKPOINT_CUTOFF = 640;
var ASPECT_RATIO_TOLERANCE = 0.1;
var OVERSIZED_IMAGE_TOLERANCE2 = 1e3;
var FIXED_SRCSET_WIDTH_LIMIT = 1920;
var FIXED_SRCSET_HEIGHT_LIMIT = 1080;
var PLACEHOLDER_BLUR_AMOUNT = 15;
var PLACEHOLDER_DIMENSION_LIMIT = 1e3;
var DATA_URL_WARN_LIMIT = 4e3;
var DATA_URL_ERROR_LIMIT = 1e4;
var BUILT_IN_LOADERS = [imgixLoaderInfo, imageKitLoaderInfo, cloudinaryLoaderInfo, netlifyLoaderInfo];
var PRIORITY_COUNT_THRESHOLD = 10;
var IMGS_WITH_PRIORITY_ATTR_COUNT = 0;
var NgOptimizedImage = class _NgOptimizedImage {
  imageLoader = inject(IMAGE_LOADER);
  config = processConfig(inject(IMAGE_CONFIG));
  renderer = inject(Renderer2);
  imgElement = inject(ElementRef).nativeElement;
  injector = inject(Injector);
  // An LCP image observer should be injected only in development mode.
  // Do not assign it to `null` to avoid having a redundant property in the production bundle.
  lcpObserver;
  /**
   * Calculate the rewritten `src` once and store it.
   * This is needed to avoid repetitive calculations and make sure the directive cleanup in the
   * `ngOnDestroy` does not rely on the `IMAGE_LOADER` logic (which in turn can rely on some other
   * instance that might be already destroyed).
   */
  _renderedSrc = null;
  /**
   * Name of the source image.
   * Image name will be processed by the image loader and the final URL will be applied as the `src`
   * property of the image.
   */
  ngSrc;
  /**
   * A comma separated list of width or density descriptors.
   * The image name will be taken from `ngSrc` and combined with the list of width or density
   * descriptors to generate the final `srcset` property of the image.
   *
   * Example:
   * ```html
   * <img ngSrc="hello.jpg" ngSrcset="100w, 200w" />  =>
   * <img src="path/hello.jpg" srcset="path/hello.jpg?w=100 100w, path/hello.jpg?w=200 200w" />
   * ```
   */
  ngSrcset;
  /**
   * The base `sizes` attribute passed through to the `<img>` element.
   * Providing sizes causes the image to create an automatic responsive srcset.
   */
  sizes;
  /**
   * For responsive images: the intrinsic width of the image in pixels.
   * For fixed size images: the desired rendered width of the image in pixels.
   */
  width;
  /**
   * For responsive images: the intrinsic height of the image in pixels.
   * For fixed size images: the desired rendered height of the image in pixels.
   */
  height;
  /**
   * The desired loading behavior (lazy, eager, or auto). Defaults to `lazy`,
   * which is recommended for most images.
   *
   * Warning: Setting images as loading="eager" or loading="auto" marks them
   * as non-priority images and can hurt loading performance. For images which
   * may be the LCP element, use the `priority` attribute instead of `loading`.
   */
  loading;
  /**
   * Indicates whether this image should have a high priority.
   */
  priority = false;
  /**
   * Data to pass through to custom loaders.
   */
  loaderParams;
  /**
   * Disables automatic srcset generation for this image.
   */
  disableOptimizedSrcset = false;
  /**
   * Sets the image to "fill mode", which eliminates the height/width requirement and adds
   * styles such that the image fills its containing element.
   */
  fill = false;
  /**
   * A URL or data URL for an image to be used as a placeholder while this image loads.
   */
  placeholder;
  /**
   * Configuration object for placeholder settings. Options:
   *   * blur: Setting this to false disables the automatic CSS blur.
   */
  placeholderConfig;
  /**
   * Value of the `src` attribute if set on the host `<img>` element.
   * This input is exclusively read to assert that `src` is not set in conflict
   * with `ngSrc` and that images don't start to load until a lazy loading strategy is set.
   * @internal
   */
  src;
  /**
   * Value of the `srcset` attribute if set on the host `<img>` element.
   * This input is exclusively read to assert that `srcset` is not set in conflict
   * with `ngSrcset` and that images don't start to load until a lazy loading strategy is set.
   * @internal
   */
  srcset;
  constructor() {
    if (ngDevMode) {
      this.lcpObserver = this.injector.get(LCPImageObserver);
      const destroyRef = inject(DestroyRef);
      destroyRef.onDestroy(() => {
        if (!this.priority && this._renderedSrc !== null) {
          this.lcpObserver.unregisterImage(this._renderedSrc);
        }
      });
    }
  }
  /** @nodoc */
  ngOnInit() {
    performanceMarkFeature("NgOptimizedImage");
    if (ngDevMode) {
      const ngZone = this.injector.get(NgZone);
      assertNonEmptyInput(this, "ngSrc", this.ngSrc);
      assertValidNgSrcset(this, this.ngSrcset);
      assertNoConflictingSrc(this);
      if (this.ngSrcset) {
        assertNoConflictingSrcset(this);
      }
      assertNotBase64Image(this);
      assertNotBlobUrl(this);
      if (this.fill) {
        assertEmptyWidthAndHeight(this);
        ngZone.runOutsideAngular(() => assertNonZeroRenderedHeight(this, this.imgElement, this.renderer));
      } else {
        assertNonEmptyWidthAndHeight(this);
        if (this.height !== void 0) {
          assertGreaterThanZero(this, this.height, "height");
        }
        if (this.width !== void 0) {
          assertGreaterThanZero(this, this.width, "width");
        }
        ngZone.runOutsideAngular(() => assertNoImageDistortion(this, this.imgElement, this.renderer));
      }
      assertValidLoadingInput(this);
      if (!this.ngSrcset) {
        assertNoComplexSizes(this);
      }
      assertValidPlaceholder(this, this.imageLoader);
      assertNotMissingBuiltInLoader(this.ngSrc, this.imageLoader);
      assertNoNgSrcsetWithoutLoader(this, this.imageLoader);
      assertNoLoaderParamsWithoutLoader(this, this.imageLoader);
      ngZone.runOutsideAngular(() => {
        this.lcpObserver.registerImage(this.getRewrittenSrc(), this.ngSrc, this.priority);
      });
      if (this.priority) {
        const checker = this.injector.get(PreconnectLinkChecker);
        checker.assertPreconnect(this.getRewrittenSrc(), this.ngSrc);
        if (true) {
          const applicationRef = this.injector.get(ApplicationRef);
          assetPriorityCountBelowThreshold(applicationRef);
        }
      }
    }
    if (this.placeholder) {
      this.removePlaceholderOnLoad(this.imgElement);
    }
    this.setHostAttributes();
  }
  setHostAttributes() {
    if (this.fill) {
      this.sizes ||= "100vw";
    } else {
      this.setHostAttribute("width", this.width.toString());
      this.setHostAttribute("height", this.height.toString());
    }
    this.setHostAttribute("loading", this.getLoadingBehavior());
    this.setHostAttribute("fetchpriority", this.getFetchPriority());
    this.setHostAttribute("ng-img", "true");
    const rewrittenSrcset = this.updateSrcAndSrcset();
    if (this.sizes) {
      if (this.getLoadingBehavior() === "lazy") {
        this.setHostAttribute("sizes", "auto, " + this.sizes);
      } else {
        this.setHostAttribute("sizes", this.sizes);
      }
    } else {
      if (this.ngSrcset && VALID_WIDTH_DESCRIPTOR_SRCSET.test(this.ngSrcset) && this.getLoadingBehavior() === "lazy") {
        this.setHostAttribute("sizes", "auto, 100vw");
      }
    }
    if (false) {
      const preloadLinkCreator = this.injector.get(PreloadLinkCreator);
      preloadLinkCreator.createPreloadLinkTag(this.renderer, this.getRewrittenSrc(), rewrittenSrcset, this.sizes);
    }
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (ngDevMode) {
      assertNoPostInitInputChange(this, changes, ["ngSrcset", "width", "height", "priority", "fill", "loading", "sizes", "loaderParams", "disableOptimizedSrcset"]);
    }
    if (changes["ngSrc"] && !changes["ngSrc"].isFirstChange()) {
      const oldSrc = this._renderedSrc;
      this.updateSrcAndSrcset(true);
      if (ngDevMode) {
        const newSrc = this._renderedSrc;
        if (oldSrc && newSrc && oldSrc !== newSrc) {
          const ngZone = this.injector.get(NgZone);
          ngZone.runOutsideAngular(() => {
            this.lcpObserver.updateImage(oldSrc, newSrc);
          });
        }
      }
    }
    if (ngDevMode && changes["placeholder"]?.currentValue && true && true) {
      assertPlaceholderDimensions(this, this.imgElement);
    }
  }
  callImageLoader(configWithoutCustomParams) {
    let augmentedConfig = configWithoutCustomParams;
    if (this.loaderParams) {
      augmentedConfig.loaderParams = this.loaderParams;
    }
    return this.imageLoader(augmentedConfig);
  }
  getLoadingBehavior() {
    if (!this.priority && this.loading !== void 0) {
      return this.loading;
    }
    return this.priority ? "eager" : "lazy";
  }
  getFetchPriority() {
    return this.priority ? "high" : "auto";
  }
  getRewrittenSrc() {
    if (!this._renderedSrc) {
      const imgConfig = {
        src: this.ngSrc
      };
      this._renderedSrc = this.callImageLoader(imgConfig);
    }
    return this._renderedSrc;
  }
  getRewrittenSrcset() {
    const widthSrcSet = VALID_WIDTH_DESCRIPTOR_SRCSET.test(this.ngSrcset);
    const finalSrcs = this.ngSrcset.split(",").filter((src) => src !== "").map((srcStr) => {
      srcStr = srcStr.trim();
      const width = widthSrcSet ? parseFloat(srcStr) : parseFloat(srcStr) * this.width;
      return `${this.callImageLoader({
        src: this.ngSrc,
        width
      })} ${srcStr}`;
    });
    return finalSrcs.join(", ");
  }
  getAutomaticSrcset() {
    if (this.sizes) {
      return this.getResponsiveSrcset();
    } else {
      return this.getFixedSrcset();
    }
  }
  getResponsiveSrcset() {
    const {
      breakpoints
    } = this.config;
    let filteredBreakpoints = breakpoints;
    if (this.sizes?.trim() === "100vw") {
      filteredBreakpoints = breakpoints.filter((bp) => bp >= VIEWPORT_BREAKPOINT_CUTOFF);
    }
    const finalSrcs = filteredBreakpoints.map((bp) => `${this.callImageLoader({
      src: this.ngSrc,
      width: bp
    })} ${bp}w`);
    return finalSrcs.join(", ");
  }
  updateSrcAndSrcset(forceSrcRecalc = false) {
    if (forceSrcRecalc) {
      this._renderedSrc = null;
    }
    const rewrittenSrc = this.getRewrittenSrc();
    this.setHostAttribute("src", rewrittenSrc);
    let rewrittenSrcset = void 0;
    if (this.ngSrcset) {
      rewrittenSrcset = this.getRewrittenSrcset();
    } else if (this.shouldGenerateAutomaticSrcset()) {
      rewrittenSrcset = this.getAutomaticSrcset();
    }
    if (rewrittenSrcset) {
      this.setHostAttribute("srcset", rewrittenSrcset);
    }
    return rewrittenSrcset;
  }
  getFixedSrcset() {
    const finalSrcs = DENSITY_SRCSET_MULTIPLIERS.map((multiplier) => `${this.callImageLoader({
      src: this.ngSrc,
      width: this.width * multiplier
    })} ${multiplier}x`);
    return finalSrcs.join(", ");
  }
  shouldGenerateAutomaticSrcset() {
    let oversizedImage = false;
    if (!this.sizes) {
      oversizedImage = this.width > FIXED_SRCSET_WIDTH_LIMIT || this.height > FIXED_SRCSET_HEIGHT_LIMIT;
    }
    return !this.disableOptimizedSrcset && !this.srcset && this.imageLoader !== noopImageLoader && !oversizedImage;
  }
  /**
   * Returns an image url formatted for use with the CSS background-image property. Expects one of:
   * * A base64 encoded image, which is wrapped and passed through.
   * * A boolean. If true, calls the image loader to generate a small placeholder url.
   */
  generatePlaceholder(placeholderInput) {
    const {
      placeholderResolution
    } = this.config;
    if (placeholderInput === true) {
      return `url(${this.callImageLoader({
        src: this.ngSrc,
        width: placeholderResolution,
        isPlaceholder: true
      })})`;
    } else if (typeof placeholderInput === "string") {
      return `url(${placeholderInput})`;
    }
    return null;
  }
  /**
   * Determines if blur should be applied, based on an optional boolean
   * property `blur` within the optional configuration object `placeholderConfig`.
   */
  shouldBlurPlaceholder(placeholderConfig) {
    if (!placeholderConfig || !placeholderConfig.hasOwnProperty("blur")) {
      return true;
    }
    return Boolean(placeholderConfig.blur);
  }
  removePlaceholderOnLoad(img) {
    const callback = () => {
      const changeDetectorRef = this.injector.get(ChangeDetectorRef);
      removeLoadListenerFn();
      removeErrorListenerFn();
      this.placeholder = false;
      changeDetectorRef.markForCheck();
    };
    const removeLoadListenerFn = this.renderer.listen(img, "load", callback);
    const removeErrorListenerFn = this.renderer.listen(img, "error", callback);
    callOnLoadIfImageIsLoaded(img, callback);
  }
  setHostAttribute(name, value) {
    this.renderer.setAttribute(this.imgElement, name, value);
  }
  static \u0275fac = function NgOptimizedImage_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NgOptimizedImage)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _NgOptimizedImage,
    selectors: [["img", "ngSrc", ""]],
    hostVars: 18,
    hostBindings: function NgOptimizedImage_HostBindings(rf, ctx) {
      if (rf & 2) {
        \u0275\u0275styleProp("position", ctx.fill ? "absolute" : null)("width", ctx.fill ? "100%" : null)("height", ctx.fill ? "100%" : null)("inset", ctx.fill ? "0" : null)("background-size", ctx.placeholder ? "cover" : null)("background-position", ctx.placeholder ? "50% 50%" : null)("background-repeat", ctx.placeholder ? "no-repeat" : null)("background-image", ctx.placeholder ? ctx.generatePlaceholder(ctx.placeholder) : null)("filter", ctx.placeholder && ctx.shouldBlurPlaceholder(ctx.placeholderConfig) ? "blur(15px)" : null);
      }
    },
    inputs: {
      ngSrc: [2, "ngSrc", "ngSrc", unwrapSafeUrl],
      ngSrcset: "ngSrcset",
      sizes: "sizes",
      width: [2, "width", "width", numberAttribute],
      height: [2, "height", "height", numberAttribute],
      loading: "loading",
      priority: [2, "priority", "priority", booleanAttribute],
      loaderParams: "loaderParams",
      disableOptimizedSrcset: [2, "disableOptimizedSrcset", "disableOptimizedSrcset", booleanAttribute],
      fill: [2, "fill", "fill", booleanAttribute],
      placeholder: [2, "placeholder", "placeholder", booleanOrUrlAttribute],
      placeholderConfig: "placeholderConfig",
      src: "src",
      srcset: "srcset"
    },
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgOptimizedImage, [{
    type: Directive,
    args: [{
      selector: "img[ngSrc]",
      host: {
        "[style.position]": 'fill ? "absolute" : null',
        "[style.width]": 'fill ? "100%" : null',
        "[style.height]": 'fill ? "100%" : null',
        "[style.inset]": 'fill ? "0" : null',
        "[style.background-size]": 'placeholder ? "cover" : null',
        "[style.background-position]": 'placeholder ? "50% 50%" : null',
        "[style.background-repeat]": 'placeholder ? "no-repeat" : null',
        "[style.background-image]": "placeholder ? generatePlaceholder(placeholder) : null",
        "[style.filter]": `placeholder && shouldBlurPlaceholder(placeholderConfig) ? "blur(${PLACEHOLDER_BLUR_AMOUNT}px)" : null`
      }
    }]
  }], () => [], {
    ngSrc: [{
      type: Input,
      args: [{
        required: true,
        transform: unwrapSafeUrl
      }]
    }],
    ngSrcset: [{
      type: Input
    }],
    sizes: [{
      type: Input
    }],
    width: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    height: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    loading: [{
      type: Input
    }],
    priority: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    loaderParams: [{
      type: Input
    }],
    disableOptimizedSrcset: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    fill: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    placeholder: [{
      type: Input,
      args: [{
        transform: booleanOrUrlAttribute
      }]
    }],
    placeholderConfig: [{
      type: Input
    }],
    src: [{
      type: Input
    }],
    srcset: [{
      type: Input
    }]
  });
})();
function processConfig(config2) {
  let sortedBreakpoints = {};
  if (config2.breakpoints) {
    sortedBreakpoints.breakpoints = config2.breakpoints.sort((a, b) => a - b);
  }
  return Object.assign({}, IMAGE_CONFIG_DEFAULTS, config2, sortedBreakpoints);
}
function assertNoConflictingSrc(dir) {
  if (dir.src) {
    throw new RuntimeError(2950, `${imgDirectiveDetails(dir.ngSrc)} both \`src\` and \`ngSrc\` have been set. Supplying both of these attributes breaks lazy loading. The NgOptimizedImage directive sets \`src\` itself based on the value of \`ngSrc\`. To fix this, please remove the \`src\` attribute.`);
  }
}
function assertNoConflictingSrcset(dir) {
  if (dir.srcset) {
    throw new RuntimeError(2951, `${imgDirectiveDetails(dir.ngSrc)} both \`srcset\` and \`ngSrcset\` have been set. Supplying both of these attributes breaks lazy loading. The NgOptimizedImage directive sets \`srcset\` itself based on the value of \`ngSrcset\`. To fix this, please remove the \`srcset\` attribute.`);
  }
}
function assertNotBase64Image(dir) {
  let ngSrc = dir.ngSrc.trim();
  if (ngSrc.startsWith("data:")) {
    if (ngSrc.length > BASE64_IMG_MAX_LENGTH_IN_ERROR) {
      ngSrc = ngSrc.substring(0, BASE64_IMG_MAX_LENGTH_IN_ERROR) + "...";
    }
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`ngSrc\` is a Base64-encoded string (${ngSrc}). NgOptimizedImage does not support Base64-encoded strings. To fix this, disable the NgOptimizedImage directive for this element by removing \`ngSrc\` and using a standard \`src\` attribute instead.`);
  }
}
function assertNoComplexSizes(dir) {
  let sizes = dir.sizes;
  if (sizes?.match(/((\)|,)\s|^)\d+px/)) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`sizes\` was set to a string including pixel values. For automatic \`srcset\` generation, \`sizes\` must only include responsive values, such as \`sizes="50vw"\` or \`sizes="(min-width: 768px) 50vw, 100vw"\`. To fix this, modify the \`sizes\` attribute, or provide your own \`ngSrcset\` value directly.`);
  }
}
function assertValidPlaceholder(dir, imageLoader) {
  assertNoPlaceholderConfigWithoutPlaceholder(dir);
  assertNoRelativePlaceholderWithoutLoader(dir, imageLoader);
  assertNoOversizedDataUrl(dir);
}
function assertNoPlaceholderConfigWithoutPlaceholder(dir) {
  if (dir.placeholderConfig && !dir.placeholder) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`placeholderConfig\` options were provided for an image that does not use the \`placeholder\` attribute, and will have no effect.`);
  }
}
function assertNoRelativePlaceholderWithoutLoader(dir, imageLoader) {
  if (dir.placeholder === true && imageLoader === noopImageLoader) {
    throw new RuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to true but no image loader is configured (i.e. the default one is being used), which would result in the same image being used for the primary image and its placeholder. To fix this, provide a loader or remove the \`placeholder\` attribute from the image.`);
  }
}
function assertNoOversizedDataUrl(dir) {
  if (dir.placeholder && typeof dir.placeholder === "string" && dir.placeholder.startsWith("data:")) {
    if (dir.placeholder.length > DATA_URL_ERROR_LIMIT) {
      throw new RuntimeError(2965, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to a data URL which is longer than ${DATA_URL_ERROR_LIMIT} characters. This is strongly discouraged, as large inline placeholders directly increase the bundle size of Angular and hurt page load performance. To fix this, generate a smaller data URL placeholder.`);
    }
    if (dir.placeholder.length > DATA_URL_WARN_LIMIT) {
      console.warn(formatRuntimeError(2965, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to a data URL which is longer than ${DATA_URL_WARN_LIMIT} characters. This is discouraged, as large inline placeholders directly increase the bundle size of Angular and hurt page load performance. For better loading performance, generate a smaller data URL placeholder.`));
    }
  }
}
function assertNotBlobUrl(dir) {
  const ngSrc = dir.ngSrc.trim();
  if (ngSrc.startsWith("blob:")) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`ngSrc\` was set to a blob URL (${ngSrc}). Blob URLs are not supported by the NgOptimizedImage directive. To fix this, disable the NgOptimizedImage directive for this element by removing \`ngSrc\` and using a regular \`src\` attribute instead.`);
  }
}
function assertNonEmptyInput(dir, name, value) {
  const isString = typeof value === "string";
  const isEmptyString = isString && value.trim() === "";
  if (!isString || isEmptyString) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`${name}\` has an invalid value (\`${value}\`). To fix this, change the value to a non-empty string.`);
  }
}
function assertValidNgSrcset(dir, value) {
  if (value == null) return;
  assertNonEmptyInput(dir, "ngSrcset", value);
  const stringVal = value;
  const isValidWidthDescriptor = VALID_WIDTH_DESCRIPTOR_SRCSET.test(stringVal);
  const isValidDensityDescriptor = VALID_DENSITY_DESCRIPTOR_SRCSET.test(stringVal);
  if (isValidDensityDescriptor) {
    assertUnderDensityCap(dir, stringVal);
  }
  const isValidSrcset = isValidWidthDescriptor || isValidDensityDescriptor;
  if (!isValidSrcset) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`ngSrcset\` has an invalid value (\`${value}\`). To fix this, supply \`ngSrcset\` using a comma-separated list of one or more width descriptors (e.g. "100w, 200w") or density descriptors (e.g. "1x, 2x").`);
  }
}
function assertUnderDensityCap(dir, value) {
  const underDensityCap = value.split(",").every((num) => num === "" || parseFloat(num) <= ABSOLUTE_SRCSET_DENSITY_CAP);
  if (!underDensityCap) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`ngSrcset\` contains an unsupported image density:\`${value}\`. NgOptimizedImage generally recommends a max image density of ${RECOMMENDED_SRCSET_DENSITY_CAP}x but supports image densities up to ${ABSOLUTE_SRCSET_DENSITY_CAP}x. The human eye cannot distinguish between image densities greater than ${RECOMMENDED_SRCSET_DENSITY_CAP}x - which makes them unnecessary for most use cases. Images that will be pinch-zoomed are typically the primary use case for ${ABSOLUTE_SRCSET_DENSITY_CAP}x images. Please remove the high density descriptor and try again.`);
  }
}
function postInitInputChangeError(dir, inputName) {
  let reason;
  if (inputName === "width" || inputName === "height") {
    reason = `Changing \`${inputName}\` may result in different attribute value applied to the underlying image element and cause layout shifts on a page.`;
  } else {
    reason = `Changing the \`${inputName}\` would have no effect on the underlying image element, because the resource loading has already occurred.`;
  }
  return new RuntimeError(2953, `${imgDirectiveDetails(dir.ngSrc)} \`${inputName}\` was updated after initialization. The NgOptimizedImage directive will not react to this input change. ${reason} To fix this, either switch \`${inputName}\` to a static value or wrap the image element in an @if that is gated on the necessary value.`);
}
function assertNoPostInitInputChange(dir, changes, inputs) {
  inputs.forEach((input2) => {
    const isUpdated = changes.hasOwnProperty(input2);
    if (isUpdated && !changes[input2].isFirstChange()) {
      if (input2 === "ngSrc") {
        dir = {
          ngSrc: changes[input2].previousValue
        };
      }
      throw postInitInputChangeError(dir, input2);
    }
  });
}
function assertGreaterThanZero(dir, inputValue, inputName) {
  const validNumber = typeof inputValue === "number" && inputValue > 0;
  const validString = typeof inputValue === "string" && /^\d+$/.test(inputValue.trim()) && parseInt(inputValue) > 0;
  if (!validNumber && !validString) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`${inputName}\` has an invalid value. To fix this, provide \`${inputName}\` as a number greater than 0.`);
  }
}
function assertNoImageDistortion(dir, img, renderer) {
  const callback = () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
    const computedStyle = window.getComputedStyle(img);
    let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
    let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
    const boxSizing = computedStyle.getPropertyValue("box-sizing");
    if (boxSizing === "border-box") {
      const paddingTop = computedStyle.getPropertyValue("padding-top");
      const paddingRight = computedStyle.getPropertyValue("padding-right");
      const paddingBottom = computedStyle.getPropertyValue("padding-bottom");
      const paddingLeft = computedStyle.getPropertyValue("padding-left");
      renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);
      renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);
    }
    const renderedAspectRatio = renderedWidth / renderedHeight;
    const nonZeroRenderedDimensions = renderedWidth !== 0 && renderedHeight !== 0;
    const intrinsicWidth = img.naturalWidth;
    const intrinsicHeight = img.naturalHeight;
    const intrinsicAspectRatio = intrinsicWidth / intrinsicHeight;
    const suppliedWidth = dir.width;
    const suppliedHeight = dir.height;
    const suppliedAspectRatio = suppliedWidth / suppliedHeight;
    const inaccurateDimensions = Math.abs(suppliedAspectRatio - intrinsicAspectRatio) > ASPECT_RATIO_TOLERANCE;
    const stylingDistortion = nonZeroRenderedDimensions && Math.abs(intrinsicAspectRatio - renderedAspectRatio) > ASPECT_RATIO_TOLERANCE;
    if (inaccurateDimensions) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the image does not match the aspect ratio indicated by the width and height attributes. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h (aspect-ratio: ${round(intrinsicAspectRatio)}). 
Supplied width and height attributes: ${suppliedWidth}w x ${suppliedHeight}h (aspect-ratio: ${round(suppliedAspectRatio)}). 
To fix this, update the width and height attributes.`));
    } else if (stylingDistortion) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the rendered image does not match the image's intrinsic aspect ratio. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h (aspect-ratio: ${round(intrinsicAspectRatio)}). 
Rendered image size: ${renderedWidth}w x ${renderedHeight}h (aspect-ratio: ${round(renderedAspectRatio)}). 
This issue can occur if "width" and "height" attributes are added to an image without updating the corresponding image styling. To fix this, adjust image styling. In most cases, adding "height: auto" or "width: auto" to the image styling will fix this issue.`));
    } else if (!dir.ngSrcset && nonZeroRenderedDimensions) {
      const recommendedWidth = RECOMMENDED_SRCSET_DENSITY_CAP * renderedWidth;
      const recommendedHeight = RECOMMENDED_SRCSET_DENSITY_CAP * renderedHeight;
      const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE2;
      const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE2;
      if (oversizedWidth || oversizedHeight) {
        console.warn(formatRuntimeError(2960, `${imgDirectiveDetails(dir.ngSrc)} the intrinsic image is significantly larger than necessary. 
Rendered image size: ${renderedWidth}w x ${renderedHeight}h. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h. 
Recommended intrinsic image size: ${recommendedWidth}w x ${recommendedHeight}h. 
Note: Recommended intrinsic image size is calculated assuming a maximum DPR of ${RECOMMENDED_SRCSET_DENSITY_CAP}. To improve loading time, resize the image or consider using the "ngSrcset" and "sizes" attributes.`));
      }
    }
  };
  const removeLoadListenerFn = renderer.listen(img, "load", callback);
  const removeErrorListenerFn = renderer.listen(img, "error", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
  });
  callOnLoadIfImageIsLoaded(img, callback);
}
function assertNonEmptyWidthAndHeight(dir) {
  let missingAttributes = [];
  if (dir.width === void 0) missingAttributes.push("width");
  if (dir.height === void 0) missingAttributes.push("height");
  if (missingAttributes.length > 0) {
    throw new RuntimeError(2954, `${imgDirectiveDetails(dir.ngSrc)} these required attributes are missing: ${missingAttributes.map((attr) => `"${attr}"`).join(", ")}. Including "width" and "height" attributes will prevent image-related layout shifts. To fix this, include "width" and "height" attributes on the image tag or turn on "fill" mode with the \`fill\` attribute.`);
  }
}
function assertEmptyWidthAndHeight(dir) {
  if (dir.width || dir.height) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the attributes \`height\` and/or \`width\` are present along with the \`fill\` attribute. Because \`fill\` mode causes an image to fill its containing element, the size attributes have no effect and should be removed.`);
  }
}
function assertNonZeroRenderedHeight(dir, img, renderer) {
  const callback = () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
    const renderedHeight = img.clientHeight;
    if (dir.fill && renderedHeight === 0) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the height of the fill-mode image is zero. This is likely because the containing element does not have the CSS 'position' property set to one of the following: "relative", "fixed", or "absolute". To fix this problem, make sure the container element has the CSS 'position' property defined and the height of the element is not zero.`));
    }
  };
  const removeLoadListenerFn = renderer.listen(img, "load", callback);
  const removeErrorListenerFn = renderer.listen(img, "error", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
  });
  callOnLoadIfImageIsLoaded(img, callback);
}
function assertValidLoadingInput(dir) {
  if (dir.loading && dir.priority) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`loading\` attribute was used on an image that was marked "priority". Setting \`loading\` on priority images is not allowed because these images will always be eagerly loaded. To fix this, remove the \u201Cloading\u201D attribute from the priority image.`);
  }
  const validInputs = ["auto", "eager", "lazy"];
  if (typeof dir.loading === "string" && !validInputs.includes(dir.loading)) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`loading\` attribute has an invalid value (\`${dir.loading}\`). To fix this, provide a valid value ("lazy", "eager", or "auto").`);
  }
}
function assertNotMissingBuiltInLoader(ngSrc, imageLoader) {
  if (imageLoader === noopImageLoader) {
    let builtInLoaderName = "";
    for (const loader of BUILT_IN_LOADERS) {
      if (loader.testUrl(ngSrc)) {
        builtInLoaderName = loader.name;
        break;
      }
    }
    if (builtInLoaderName) {
      console.warn(formatRuntimeError(2962, `NgOptimizedImage: It looks like your images may be hosted on the ${builtInLoaderName} CDN, but your app is not using Angular's built-in loader for that CDN. We recommend switching to use the built-in by calling \`provide${builtInLoaderName}Loader()\` in your \`providers\` and passing it your instance's base URL. If you don't want to use the built-in loader, define a custom loader function using IMAGE_LOADER to silence this warning.`));
    }
  }
}
function assertNoNgSrcsetWithoutLoader(dir, imageLoader) {
  if (dir.ngSrcset && imageLoader === noopImageLoader) {
    console.warn(formatRuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`ngSrcset\` attribute is present but no image loader is configured (i.e. the default one is being used), which would result in the same image being used for all configured sizes. To fix this, provide a loader or remove the \`ngSrcset\` attribute from the image.`));
  }
}
function assertNoLoaderParamsWithoutLoader(dir, imageLoader) {
  if (dir.loaderParams && imageLoader === noopImageLoader) {
    console.warn(formatRuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`loaderParams\` attribute is present but no image loader is configured (i.e. the default one is being used), which means that the loaderParams data will not be consumed and will not affect the URL. To fix this, provide a custom loader or remove the \`loaderParams\` attribute from the image.`));
  }
}
function assetPriorityCountBelowThreshold(appRef) {
  return __async(this, null, function* () {
    if (IMGS_WITH_PRIORITY_ATTR_COUNT === 0) {
      IMGS_WITH_PRIORITY_ATTR_COUNT++;
      yield appRef.whenStable();
      if (IMGS_WITH_PRIORITY_ATTR_COUNT > PRIORITY_COUNT_THRESHOLD) {
        console.warn(formatRuntimeError(2966, `NgOptimizedImage: The "priority" attribute is set to true more than ${PRIORITY_COUNT_THRESHOLD} times (${IMGS_WITH_PRIORITY_ATTR_COUNT} times). Marking too many images as "high" priority can hurt your application's LCP (https://web.dev/lcp). "Priority" should only be set on the image expected to be the page's LCP element.`));
      }
    } else {
      IMGS_WITH_PRIORITY_ATTR_COUNT++;
    }
  });
}
function assertPlaceholderDimensions(dir, imgElement) {
  const computedStyle = window.getComputedStyle(imgElement);
  let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
  let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
  if (renderedWidth > PLACEHOLDER_DIMENSION_LIMIT || renderedHeight > PLACEHOLDER_DIMENSION_LIMIT) {
    console.warn(formatRuntimeError(2967, `${imgDirectiveDetails(dir.ngSrc)} it uses a placeholder image, but at least one of the dimensions attribute (height or width) exceeds the limit of ${PLACEHOLDER_DIMENSION_LIMIT}px. To fix this, use a smaller image as a placeholder.`));
  }
}
function callOnLoadIfImageIsLoaded(img, callback) {
  if (img.complete && img.naturalWidth) {
    callback();
  }
}
function round(input2) {
  return Number.isInteger(input2) ? input2 : input2.toFixed(2);
}
function unwrapSafeUrl(value) {
  if (typeof value === "string") {
    return value;
  }
  return unwrapSafeValue(value);
}
function booleanOrUrlAttribute(value) {
  if (typeof value === "string" && value !== "true" && value !== "false" && value !== "") {
    return value;
  }
  return booleanAttribute(value);
}

// node_modules/@angular/platform-browser/fesm2022/dom_renderer-DGKzginR.mjs
var EVENT_MANAGER_PLUGINS = new InjectionToken(ngDevMode ? "EventManagerPlugins" : "");
var EventManager = class _EventManager {
  _zone;
  _plugins;
  _eventNameToPlugin = /* @__PURE__ */ new Map();
  /**
   * Initializes an instance of the event-manager service.
   */
  constructor(plugins, _zone) {
    this._zone = _zone;
    plugins.forEach((plugin) => {
      plugin.manager = this;
    });
    this._plugins = plugins.slice().reverse();
  }
  /**
   * Registers a handler for a specific element and event.
   *
   * @param element The HTML element to receive event notifications.
   * @param eventName The name of the event to listen for.
   * @param handler A function to call when the notification occurs. Receives the
   * event object as an argument.
   * @param options Options that configure how the event listener is bound.
   * @returns  A callback function that can be used to remove the handler.
   */
  addEventListener(element, eventName, handler, options) {
    const plugin = this._findPluginFor(eventName);
    return plugin.addEventListener(element, eventName, handler, options);
  }
  /**
   * Retrieves the compilation zone in which event listeners are registered.
   */
  getZone() {
    return this._zone;
  }
  /** @internal */
  _findPluginFor(eventName) {
    let plugin = this._eventNameToPlugin.get(eventName);
    if (plugin) {
      return plugin;
    }
    const plugins = this._plugins;
    plugin = plugins.find((plugin2) => plugin2.supports(eventName));
    if (!plugin) {
      throw new RuntimeError(5101, (typeof ngDevMode === "undefined" || ngDevMode) && `No event manager plugin found for event ${eventName}`);
    }
    this._eventNameToPlugin.set(eventName, plugin);
    return plugin;
  }
  static \u0275fac = function EventManager_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EventManager)(\u0275\u0275inject(EVENT_MANAGER_PLUGINS), \u0275\u0275inject(NgZone));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _EventManager,
    factory: _EventManager.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EventManager, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [EVENT_MANAGER_PLUGINS]
    }]
  }, {
    type: NgZone
  }], null);
})();
var EventManagerPlugin = class {
  _doc;
  // TODO: remove (has some usage in G3)
  constructor(_doc) {
    this._doc = _doc;
  }
  // Using non-null assertion because it's set by EventManager's constructor
  manager;
};
var APP_ID_ATTRIBUTE_NAME = "ng-app-id";
function removeElements(elements) {
  for (const element of elements) {
    element.remove();
  }
}
function createStyleElement(style, doc) {
  const styleElement = doc.createElement("style");
  styleElement.textContent = style;
  return styleElement;
}
function addServerStyles(doc, appId, inline, external) {
  const elements = doc.head?.querySelectorAll(`style[${APP_ID_ATTRIBUTE_NAME}="${appId}"],link[${APP_ID_ATTRIBUTE_NAME}="${appId}"]`);
  if (elements) {
    for (const styleElement of elements) {
      styleElement.removeAttribute(APP_ID_ATTRIBUTE_NAME);
      if (styleElement instanceof HTMLLinkElement) {
        external.set(styleElement.href.slice(styleElement.href.lastIndexOf("/") + 1), {
          usage: 0,
          elements: [styleElement]
        });
      } else if (styleElement.textContent) {
        inline.set(styleElement.textContent, {
          usage: 0,
          elements: [styleElement]
        });
      }
    }
  }
}
function createLinkElement(url, doc) {
  const linkElement = doc.createElement("link");
  linkElement.setAttribute("rel", "stylesheet");
  linkElement.setAttribute("href", url);
  return linkElement;
}
var SharedStylesHost = class _SharedStylesHost {
  doc;
  appId;
  nonce;
  /**
   * Provides usage information for active inline style content and associated HTML <style> elements.
   * Embedded styles typically originate from the `styles` metadata of a rendered component.
   */
  inline = /* @__PURE__ */ new Map();
  /**
   * Provides usage information for active external style URLs and the associated HTML <link> elements.
   * External styles typically originate from the `ɵɵExternalStylesFeature` of a rendered component.
   */
  external = /* @__PURE__ */ new Map();
  /**
   * Set of host DOM nodes that will have styles attached.
   */
  hosts = /* @__PURE__ */ new Set();
  /**
   * Whether the application code is currently executing on a server.
   */
  isServer;
  constructor(doc, appId, nonce, platformId = {}) {
    this.doc = doc;
    this.appId = appId;
    this.nonce = nonce;
    this.isServer = isPlatformServer(platformId);
    addServerStyles(doc, appId, this.inline, this.external);
    this.hosts.add(doc.head);
  }
  /**
   * Adds embedded styles to the DOM via HTML `style` elements.
   * @param styles An array of style content strings.
   */
  addStyles(styles, urls) {
    for (const value of styles) {
      this.addUsage(value, this.inline, createStyleElement);
    }
    urls?.forEach((value) => this.addUsage(value, this.external, createLinkElement));
  }
  /**
   * Removes embedded styles from the DOM that were added as HTML `style` elements.
   * @param styles An array of style content strings.
   */
  removeStyles(styles, urls) {
    for (const value of styles) {
      this.removeUsage(value, this.inline);
    }
    urls?.forEach((value) => this.removeUsage(value, this.external));
  }
  addUsage(value, usages, creator) {
    const record = usages.get(value);
    if (record) {
      if ((typeof ngDevMode === "undefined" || ngDevMode) && record.usage === 0) {
        record.elements.forEach((element) => element.setAttribute("ng-style-reused", ""));
      }
      record.usage++;
    } else {
      usages.set(value, {
        usage: 1,
        elements: [...this.hosts].map((host) => this.addElement(host, creator(value, this.doc)))
      });
    }
  }
  removeUsage(value, usages) {
    const record = usages.get(value);
    if (record) {
      record.usage--;
      if (record.usage <= 0) {
        removeElements(record.elements);
        usages.delete(value);
      }
    }
  }
  ngOnDestroy() {
    for (const [, {
      elements
    }] of [...this.inline, ...this.external]) {
      removeElements(elements);
    }
    this.hosts.clear();
  }
  /**
   * Adds a host node to the set of style hosts and adds all existing style usage to
   * the newly added host node.
   *
   * This is currently only used for Shadow DOM encapsulation mode.
   */
  addHost(hostNode) {
    this.hosts.add(hostNode);
    for (const [style, {
      elements
    }] of this.inline) {
      elements.push(this.addElement(hostNode, createStyleElement(style, this.doc)));
    }
    for (const [url, {
      elements
    }] of this.external) {
      elements.push(this.addElement(hostNode, createLinkElement(url, this.doc)));
    }
  }
  removeHost(hostNode) {
    this.hosts.delete(hostNode);
  }
  addElement(host, element) {
    if (this.nonce) {
      element.setAttribute("nonce", this.nonce);
    }
    if (this.isServer) {
      element.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);
    }
    return host.appendChild(element);
  }
  static \u0275fac = function SharedStylesHost_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SharedStylesHost)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(APP_ID), \u0275\u0275inject(CSP_NONCE, 8), \u0275\u0275inject(PLATFORM_ID));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _SharedStylesHost,
    factory: _SharedStylesHost.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SharedStylesHost, [{
    type: Injectable
  }], () => [{
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [APP_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CSP_NONCE]
    }, {
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }], null);
})();
var NAMESPACE_URIS = {
  "svg": "http://www.w3.org/2000/svg",
  "xhtml": "http://www.w3.org/1999/xhtml",
  "xlink": "http://www.w3.org/1999/xlink",
  "xml": "http://www.w3.org/XML/1998/namespace",
  "xmlns": "http://www.w3.org/2000/xmlns/",
  "math": "http://www.w3.org/1998/Math/MathML"
};
var COMPONENT_REGEX = /%COMP%/g;
var SOURCEMAP_URL_REGEXP = /\/\*#\s*sourceMappingURL=(.+?)\s*\*\//;
var PROTOCOL_REGEXP = /^https?:/;
var COMPONENT_VARIABLE = "%COMP%";
var HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
var CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
var REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;
var REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken(ngDevMode ? "RemoveStylesOnCompDestroy" : "", {
  providedIn: "root",
  factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT
});
function shimContentAttribute(componentShortId) {
  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function shimHostAttribute(componentShortId) {
  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function shimStylesContent(compId, styles) {
  return styles.map((s) => s.replace(COMPONENT_REGEX, compId));
}
function addBaseHrefToCssSourceMap(baseHref, styles) {
  if (!baseHref) {
    return styles;
  }
  const absoluteBaseHrefUrl = new URL(baseHref, "http://localhost");
  return styles.map((cssContent) => {
    if (!cssContent.includes("sourceMappingURL=")) {
      return cssContent;
    }
    return cssContent.replace(SOURCEMAP_URL_REGEXP, (_, sourceMapUrl) => {
      if (sourceMapUrl[0] === "/" || sourceMapUrl.startsWith("data:") || PROTOCOL_REGEXP.test(sourceMapUrl)) {
        return `/*# sourceMappingURL=${sourceMapUrl} */`;
      }
      const {
        pathname: resolvedSourceMapUrl
      } = new URL(sourceMapUrl, absoluteBaseHrefUrl);
      return `/*# sourceMappingURL=${resolvedSourceMapUrl} */`;
    });
  });
}
var DomRendererFactory2 = class _DomRendererFactory2 {
  eventManager;
  sharedStylesHost;
  appId;
  removeStylesOnCompDestroy;
  doc;
  platformId;
  ngZone;
  nonce;
  tracingService;
  rendererByCompId = /* @__PURE__ */ new Map();
  defaultRenderer;
  platformIsServer;
  constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestroy, doc, platformId, ngZone, nonce = null, tracingService = null) {
    this.eventManager = eventManager;
    this.sharedStylesHost = sharedStylesHost;
    this.appId = appId;
    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;
    this.doc = doc;
    this.platformId = platformId;
    this.ngZone = ngZone;
    this.nonce = nonce;
    this.tracingService = tracingService;
    this.platformIsServer = isPlatformServer(platformId);
    this.defaultRenderer = new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer, this.tracingService);
  }
  createRenderer(element, type) {
    if (!element || !type) {
      return this.defaultRenderer;
    }
    if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {
      type = __spreadProps(__spreadValues({}, type), {
        encapsulation: ViewEncapsulation.Emulated
      });
    }
    const renderer = this.getOrCreateRenderer(element, type);
    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {
      renderer.applyToHost(element);
    } else if (renderer instanceof NoneEncapsulationDomRenderer) {
      renderer.applyStyles();
    }
    return renderer;
  }
  getOrCreateRenderer(element, type) {
    const rendererByCompId = this.rendererByCompId;
    let renderer = rendererByCompId.get(type.id);
    if (!renderer) {
      const doc = this.doc;
      const ngZone = this.ngZone;
      const eventManager = this.eventManager;
      const sharedStylesHost = this.sharedStylesHost;
      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;
      const platformIsServer = this.platformIsServer;
      const tracingService = this.tracingService;
      switch (type.encapsulation) {
        case ViewEncapsulation.Emulated:
          renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService);
          break;
        case ViewEncapsulation.ShadowDom:
          return new ShadowDomRenderer(eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce, platformIsServer, tracingService);
        default:
          renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService);
          break;
      }
      rendererByCompId.set(type.id, renderer);
    }
    return renderer;
  }
  ngOnDestroy() {
    this.rendererByCompId.clear();
  }
  /**
   * Used during HMR to clear any cached data about a component.
   * @param componentId ID of the component that is being replaced.
   */
  componentReplaced(componentId) {
    this.rendererByCompId.delete(componentId);
  }
  static \u0275fac = function DomRendererFactory2_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DomRendererFactory2)(\u0275\u0275inject(EventManager), \u0275\u0275inject(SharedStylesHost), \u0275\u0275inject(APP_ID), \u0275\u0275inject(REMOVE_STYLES_ON_COMPONENT_DESTROY), \u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(PLATFORM_ID), \u0275\u0275inject(NgZone), \u0275\u0275inject(CSP_NONCE), \u0275\u0275inject(TracingService, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DomRendererFactory2,
    factory: _DomRendererFactory2.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomRendererFactory2, [{
    type: Injectable
  }], () => [{
    type: EventManager
  }, {
    type: SharedStylesHost
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [APP_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [REMOVE_STYLES_ON_COMPONENT_DESTROY]
    }]
  }, {
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: Object,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CSP_NONCE]
    }]
  }, {
    type: TracingService,
    decorators: [{
      type: Inject,
      args: [TracingService]
    }, {
      type: Optional
    }]
  }], null);
})();
var DefaultDomRenderer2 = class {
  eventManager;
  doc;
  ngZone;
  platformIsServer;
  tracingService;
  data = /* @__PURE__ */ Object.create(null);
  /**
   * By default this renderer throws when encountering synthetic properties
   * This can be disabled for example by the AsyncAnimationRendererFactory
   */
  throwOnSyntheticProps = true;
  constructor(eventManager, doc, ngZone, platformIsServer, tracingService) {
    this.eventManager = eventManager;
    this.doc = doc;
    this.ngZone = ngZone;
    this.platformIsServer = platformIsServer;
    this.tracingService = tracingService;
  }
  destroy() {
  }
  destroyNode = null;
  createElement(name, namespace) {
    if (namespace) {
      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
    }
    return this.doc.createElement(name);
  }
  createComment(value) {
    return this.doc.createComment(value);
  }
  createText(value) {
    return this.doc.createTextNode(value);
  }
  appendChild(parent, newChild) {
    const targetParent = isTemplateNode(parent) ? parent.content : parent;
    targetParent.appendChild(newChild);
  }
  insertBefore(parent, newChild, refChild) {
    if (parent) {
      const targetParent = isTemplateNode(parent) ? parent.content : parent;
      targetParent.insertBefore(newChild, refChild);
    }
  }
  removeChild(_parent, oldChild) {
    oldChild.remove();
  }
  selectRootElement(selectorOrNode, preserveContent) {
    let el = typeof selectorOrNode === "string" ? this.doc.querySelector(selectorOrNode) : selectorOrNode;
    if (!el) {
      throw new RuntimeError(-5104, (typeof ngDevMode === "undefined" || ngDevMode) && `The selector "${selectorOrNode}" did not match any elements`);
    }
    if (!preserveContent) {
      el.textContent = "";
    }
    return el;
  }
  parentNode(node) {
    return node.parentNode;
  }
  nextSibling(node) {
    return node.nextSibling;
  }
  setAttribute(el, name, value, namespace) {
    if (namespace) {
      name = namespace + ":" + name;
      const namespaceUri = NAMESPACE_URIS[namespace];
      if (namespaceUri) {
        el.setAttributeNS(namespaceUri, name, value);
      } else {
        el.setAttribute(name, value);
      }
    } else {
      el.setAttribute(name, value);
    }
  }
  removeAttribute(el, name, namespace) {
    if (namespace) {
      const namespaceUri = NAMESPACE_URIS[namespace];
      if (namespaceUri) {
        el.removeAttributeNS(namespaceUri, name);
      } else {
        el.removeAttribute(`${namespace}:${name}`);
      }
    } else {
      el.removeAttribute(name);
    }
  }
  addClass(el, name) {
    el.classList.add(name);
  }
  removeClass(el, name) {
    el.classList.remove(name);
  }
  setStyle(el, style, value, flags) {
    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {
      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? "important" : "");
    } else {
      el.style[style] = value;
    }
  }
  removeStyle(el, style, flags) {
    if (flags & RendererStyleFlags2.DashCase) {
      el.style.removeProperty(style);
    } else {
      el.style[style] = "";
    }
  }
  setProperty(el, name, value) {
    if (el == null) {
      return;
    }
    (typeof ngDevMode === "undefined" || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(name, "property");
    el[name] = value;
  }
  setValue(node, value) {
    node.nodeValue = value;
  }
  listen(target, event, callback, options) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(event, "listener");
    if (typeof target === "string") {
      target = getDOM().getGlobalEventTarget(this.doc, target);
      if (!target) {
        throw new RuntimeError(5102, (typeof ngDevMode === "undefined" || ngDevMode) && `Unsupported event target ${target} for event ${event}`);
      }
    }
    let wrappedCallback = this.decoratePreventDefault(callback);
    if (this.tracingService?.wrapEventListener) {
      wrappedCallback = this.tracingService.wrapEventListener(target, event, wrappedCallback);
    }
    return this.eventManager.addEventListener(target, event, wrappedCallback, options);
  }
  decoratePreventDefault(eventHandler) {
    return (event) => {
      if (event === "__ngUnwrap__") {
        return eventHandler;
      }
      const allowDefaultBehavior = this.platformIsServer ? this.ngZone.runGuarded(() => eventHandler(event)) : eventHandler(event);
      if (allowDefaultBehavior === false) {
        event.preventDefault();
      }
      return void 0;
    };
  }
};
var AT_CHARCODE = (() => "@".charCodeAt(0))();
function checkNoSyntheticProp(name, nameKind) {
  if (name.charCodeAt(0) === AT_CHARCODE) {
    throw new RuntimeError(5105, `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:
  - Make sure \`provideAnimationsAsync()\`, \`provideAnimations()\` or \`provideNoopAnimations()\` call was added to a list of providers used to bootstrap an application.
  - There is a corresponding animation configuration named \`${name}\` defined in the \`animations\` field of the \`@Component\` decorator (see https://angular.dev/api/core/Component#animations).`);
  }
}
function isTemplateNode(node) {
  return node.tagName === "TEMPLATE" && node.content !== void 0;
}
var ShadowDomRenderer = class extends DefaultDomRenderer2 {
  sharedStylesHost;
  hostEl;
  shadowRoot;
  constructor(eventManager, sharedStylesHost, hostEl, component, doc, ngZone, nonce, platformIsServer, tracingService) {
    super(eventManager, doc, ngZone, platformIsServer, tracingService);
    this.sharedStylesHost = sharedStylesHost;
    this.hostEl = hostEl;
    this.shadowRoot = hostEl.attachShadow({
      mode: "open"
    });
    this.sharedStylesHost.addHost(this.shadowRoot);
    let styles = component.styles;
    if (ngDevMode) {
      const baseHref = getDOM().getBaseHref(doc) ?? "";
      styles = addBaseHrefToCssSourceMap(baseHref, styles);
    }
    styles = shimStylesContent(component.id, styles);
    for (const style of styles) {
      const styleEl = document.createElement("style");
      if (nonce) {
        styleEl.setAttribute("nonce", nonce);
      }
      styleEl.textContent = style;
      this.shadowRoot.appendChild(styleEl);
    }
    const styleUrls = component.getExternalStyles?.();
    if (styleUrls) {
      for (const styleUrl of styleUrls) {
        const linkEl = createLinkElement(styleUrl, doc);
        if (nonce) {
          linkEl.setAttribute("nonce", nonce);
        }
        this.shadowRoot.appendChild(linkEl);
      }
    }
  }
  nodeOrShadowRoot(node) {
    return node === this.hostEl ? this.shadowRoot : node;
  }
  appendChild(parent, newChild) {
    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);
  }
  insertBefore(parent, newChild, refChild) {
    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);
  }
  removeChild(_parent, oldChild) {
    return super.removeChild(null, oldChild);
  }
  parentNode(node) {
    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));
  }
  destroy() {
    this.sharedStylesHost.removeHost(this.shadowRoot);
  }
};
var NoneEncapsulationDomRenderer = class extends DefaultDomRenderer2 {
  sharedStylesHost;
  removeStylesOnCompDestroy;
  styles;
  styleUrls;
  constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService, compId) {
    super(eventManager, doc, ngZone, platformIsServer, tracingService);
    this.sharedStylesHost = sharedStylesHost;
    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;
    let styles = component.styles;
    if (ngDevMode) {
      const baseHref = getDOM().getBaseHref(doc) ?? "";
      styles = addBaseHrefToCssSourceMap(baseHref, styles);
    }
    this.styles = compId ? shimStylesContent(compId, styles) : styles;
    this.styleUrls = component.getExternalStyles?.(compId);
  }
  applyStyles() {
    this.sharedStylesHost.addStyles(this.styles, this.styleUrls);
  }
  destroy() {
    if (!this.removeStylesOnCompDestroy) {
      return;
    }
    this.sharedStylesHost.removeStyles(this.styles, this.styleUrls);
  }
};
var EmulatedEncapsulationDomRenderer2 = class extends NoneEncapsulationDomRenderer {
  contentAttr;
  hostAttr;
  constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService) {
    const compId = appId + "-" + component.id;
    super(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService, compId);
    this.contentAttr = shimContentAttribute(compId);
    this.hostAttr = shimHostAttribute(compId);
  }
  applyToHost(element) {
    this.applyStyles();
    this.setAttribute(element, this.hostAttr, "");
  }
  createElement(parent, name) {
    const el = super.createElement(parent, name);
    super.setAttribute(el, this.contentAttr, "");
    return el;
  }
};

// node_modules/@angular/platform-browser/fesm2022/browser-X3l5Bmdq.mjs
var BrowserDomAdapter = class _BrowserDomAdapter extends DomAdapter {
  supportsDOMEvents = true;
  static makeCurrent() {
    setRootDomAdapter(new _BrowserDomAdapter());
  }
  onAndCancel(el, evt, listener, options) {
    el.addEventListener(evt, listener, options);
    return () => {
      el.removeEventListener(evt, listener, options);
    };
  }
  dispatchEvent(el, evt) {
    el.dispatchEvent(evt);
  }
  remove(node) {
    node.remove();
  }
  createElement(tagName, doc) {
    doc = doc || this.getDefaultDocument();
    return doc.createElement(tagName);
  }
  createHtmlDocument() {
    return document.implementation.createHTMLDocument("fakeTitle");
  }
  getDefaultDocument() {
    return document;
  }
  isElementNode(node) {
    return node.nodeType === Node.ELEMENT_NODE;
  }
  isShadowRoot(node) {
    return node instanceof DocumentFragment;
  }
  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */
  getGlobalEventTarget(doc, target) {
    if (target === "window") {
      return window;
    }
    if (target === "document") {
      return doc;
    }
    if (target === "body") {
      return doc.body;
    }
    return null;
  }
  getBaseHref(doc) {
    const href = getBaseElementHref();
    return href == null ? null : relativePath(href);
  }
  resetBaseElement() {
    baseElement = null;
  }
  getUserAgent() {
    return window.navigator.userAgent;
  }
  getCookie(name) {
    return parseCookieValue(document.cookie, name);
  }
};
var baseElement = null;
function getBaseElementHref() {
  baseElement = baseElement || document.querySelector("base");
  return baseElement ? baseElement.getAttribute("href") : null;
}
function relativePath(url) {
  return new URL(url, document.baseURI).pathname;
}
var BrowserGetTestability = class {
  addToWindow(registry) {
    _global["getAngularTestability"] = (elem, findInAncestors = true) => {
      const testability = registry.findTestabilityInTree(elem, findInAncestors);
      if (testability == null) {
        throw new RuntimeError(5103, (typeof ngDevMode === "undefined" || ngDevMode) && "Could not find testability for element.");
      }
      return testability;
    };
    _global["getAllAngularTestabilities"] = () => registry.getAllTestabilities();
    _global["getAllAngularRootElements"] = () => registry.getAllRootElements();
    const whenAllStable = (callback) => {
      const testabilities = _global["getAllAngularTestabilities"]();
      let count = testabilities.length;
      const decrement = function() {
        count--;
        if (count == 0) {
          callback();
        }
      };
      testabilities.forEach((testability) => {
        testability.whenStable(decrement);
      });
    };
    if (!_global["frameworkStabilizers"]) {
      _global["frameworkStabilizers"] = [];
    }
    _global["frameworkStabilizers"].push(whenAllStable);
  }
  findTestabilityInTree(registry, elem, findInAncestors) {
    if (elem == null) {
      return null;
    }
    const t = registry.getTestability(elem);
    if (t != null) {
      return t;
    } else if (!findInAncestors) {
      return null;
    }
    if (getDOM().isShadowRoot(elem)) {
      return this.findTestabilityInTree(registry, elem.host, true);
    }
    return this.findTestabilityInTree(registry, elem.parentElement, true);
  }
};
var BrowserXhr = class _BrowserXhr {
  build() {
    return new XMLHttpRequest();
  }
  static \u0275fac = function BrowserXhr_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _BrowserXhr)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _BrowserXhr,
    factory: _BrowserXhr.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserXhr, [{
    type: Injectable
  }], null, null);
})();
var DomEventsPlugin = class _DomEventsPlugin extends EventManagerPlugin {
  constructor(doc) {
    super(doc);
  }
  // This plugin should come last in the list of plugins, because it accepts all
  // events.
  supports(eventName) {
    return true;
  }
  addEventListener(element, eventName, handler, options) {
    element.addEventListener(eventName, handler, options);
    return () => this.removeEventListener(element, eventName, handler, options);
  }
  removeEventListener(target, eventName, callback, options) {
    return target.removeEventListener(eventName, callback, options);
  }
  static \u0275fac = function DomEventsPlugin_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DomEventsPlugin)(\u0275\u0275inject(DOCUMENT2));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DomEventsPlugin,
    factory: _DomEventsPlugin.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomEventsPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var MODIFIER_KEYS = ["alt", "control", "meta", "shift"];
var _keyMap = {
  "\b": "Backspace",
  "	": "Tab",
  "\x7F": "Delete",
  "\x1B": "Escape",
  "Del": "Delete",
  "Esc": "Escape",
  "Left": "ArrowLeft",
  "Right": "ArrowRight",
  "Up": "ArrowUp",
  "Down": "ArrowDown",
  "Menu": "ContextMenu",
  "Scroll": "ScrollLock",
  "Win": "OS"
};
var MODIFIER_KEY_GETTERS = {
  "alt": (event) => event.altKey,
  "control": (event) => event.ctrlKey,
  "meta": (event) => event.metaKey,
  "shift": (event) => event.shiftKey
};
var KeyEventsPlugin = class _KeyEventsPlugin extends EventManagerPlugin {
  /**
   * Initializes an instance of the browser plug-in.
   * @param doc The document in which key events will be detected.
   */
  constructor(doc) {
    super(doc);
  }
  /**
   * Reports whether a named key event is supported.
   * @param eventName The event name to query.
   * @return True if the named key event is supported.
   */
  supports(eventName) {
    return _KeyEventsPlugin.parseEventName(eventName) != null;
  }
  /**
   * Registers a handler for a specific element and key event.
   * @param element The HTML element to receive event notifications.
   * @param eventName The name of the key event to listen for.
   * @param handler A function to call when the notification occurs. Receives the
   * event object as an argument.
   * @returns The key event that was registered.
   */
  addEventListener(element, eventName, handler, options) {
    const parsedEvent = _KeyEventsPlugin.parseEventName(eventName);
    const outsideHandler = _KeyEventsPlugin.eventCallback(parsedEvent["fullKey"], handler, this.manager.getZone());
    return this.manager.getZone().runOutsideAngular(() => {
      return getDOM().onAndCancel(element, parsedEvent["domEventName"], outsideHandler, options);
    });
  }
  /**
   * Parses the user provided full keyboard event definition and normalizes it for
   * later internal use. It ensures the string is all lowercase, converts special
   * characters to a standard spelling, and orders all the values consistently.
   *
   * @param eventName The name of the key event to listen for.
   * @returns an object with the full, normalized string, and the dom event name
   * or null in the case when the event doesn't match a keyboard event.
   */
  static parseEventName(eventName) {
    const parts = eventName.toLowerCase().split(".");
    const domEventName = parts.shift();
    if (parts.length === 0 || !(domEventName === "keydown" || domEventName === "keyup")) {
      return null;
    }
    const key = _KeyEventsPlugin._normalizeKey(parts.pop());
    let fullKey = "";
    let codeIX = parts.indexOf("code");
    if (codeIX > -1) {
      parts.splice(codeIX, 1);
      fullKey = "code.";
    }
    MODIFIER_KEYS.forEach((modifierName) => {
      const index = parts.indexOf(modifierName);
      if (index > -1) {
        parts.splice(index, 1);
        fullKey += modifierName + ".";
      }
    });
    fullKey += key;
    if (parts.length != 0 || key.length === 0) {
      return null;
    }
    const result = {};
    result["domEventName"] = domEventName;
    result["fullKey"] = fullKey;
    return result;
  }
  /**
   * Determines whether the actual keys pressed match the configured key code string.
   * The `fullKeyCode` event is normalized in the `parseEventName` method when the
   * event is attached to the DOM during the `addEventListener` call. This is unseen
   * by the end user and is normalized for internal consistency and parsing.
   *
   * @param event The keyboard event.
   * @param fullKeyCode The normalized user defined expected key event string
   * @returns boolean.
   */
  static matchEventFullKeyCode(event, fullKeyCode) {
    let keycode = _keyMap[event.key] || event.key;
    let key = "";
    if (fullKeyCode.indexOf("code.") > -1) {
      keycode = event.code;
      key = "code.";
    }
    if (keycode == null || !keycode) return false;
    keycode = keycode.toLowerCase();
    if (keycode === " ") {
      keycode = "space";
    } else if (keycode === ".") {
      keycode = "dot";
    }
    MODIFIER_KEYS.forEach((modifierName) => {
      if (modifierName !== keycode) {
        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
        if (modifierGetter(event)) {
          key += modifierName + ".";
        }
      }
    });
    key += keycode;
    return key === fullKeyCode;
  }
  /**
   * Configures a handler callback for a key event.
   * @param fullKey The event name that combines all simultaneous keystrokes.
   * @param handler The function that responds to the key event.
   * @param zone The zone in which the event occurred.
   * @returns A callback function.
   */
  static eventCallback(fullKey, handler, zone) {
    return (event) => {
      if (_KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {
        zone.runGuarded(() => handler(event));
      }
    };
  }
  /** @internal */
  static _normalizeKey(keyName) {
    return keyName === "esc" ? "escape" : keyName;
  }
  static \u0275fac = function KeyEventsPlugin_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _KeyEventsPlugin)(\u0275\u0275inject(DOCUMENT2));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _KeyEventsPlugin,
    factory: _KeyEventsPlugin.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(KeyEventsPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
function bootstrapApplication(rootComponent, options) {
  return internalCreateApplication(__spreadValues({
    rootComponent
  }, createProvidersConfig(options)));
}
function createProvidersConfig(options) {
  return {
    appProviders: [...BROWSER_MODULE_PROVIDERS, ...options?.providers ?? []],
    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS
  };
}
function initDomAdapter() {
  BrowserDomAdapter.makeCurrent();
}
function errorHandler() {
  return new ErrorHandler();
}
function _document() {
  setDocument(document);
  return document;
}
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
  provide: PLATFORM_ID,
  useValue: PLATFORM_BROWSER_ID
}, {
  provide: PLATFORM_INITIALIZER,
  useValue: initDomAdapter,
  multi: true
}, {
  provide: DOCUMENT2,
  useFactory: _document
}];
var platformBrowser = createPlatformFactory(platformCore, "browser", INTERNAL_BROWSER_PLATFORM_PROVIDERS);
var BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "BrowserModule Providers Marker" : "");
var TESTABILITY_PROVIDERS = [{
  provide: TESTABILITY_GETTER,
  useClass: BrowserGetTestability
}, {
  provide: TESTABILITY,
  useClass: Testability,
  deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]
}, {
  provide: Testability,
  // Also provide as `Testability` for backwards-compatibility.
  useClass: Testability,
  deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]
}];
var BROWSER_MODULE_PROVIDERS = [{
  provide: INJECTOR_SCOPE,
  useValue: "root"
}, {
  provide: ErrorHandler,
  useFactory: errorHandler
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: DomEventsPlugin,
  multi: true,
  deps: [DOCUMENT2]
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: KeyEventsPlugin,
  multi: true,
  deps: [DOCUMENT2]
}, DomRendererFactory2, SharedStylesHost, EventManager, {
  provide: RendererFactory2,
  useExisting: DomRendererFactory2
}, {
  provide: XhrFactory,
  useClass: BrowserXhr
}, typeof ngDevMode === "undefined" || ngDevMode ? {
  provide: BROWSER_MODULE_PROVIDERS_MARKER,
  useValue: true
} : []];
var BrowserModule = class _BrowserModule {
  constructor() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const providersAlreadyPresent = inject(BROWSER_MODULE_PROVIDERS_MARKER, {
        optional: true,
        skipSelf: true
      });
      if (providersAlreadyPresent) {
        throw new RuntimeError(5100, `Providers from the \`BrowserModule\` have already been loaded. If you need access to common directives such as NgIf and NgFor, import the \`CommonModule\` instead.`);
      }
    }
  }
  static \u0275fac = function BrowserModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _BrowserModule)();
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
    type: _BrowserModule
  });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
    providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],
    imports: [CommonModule, ApplicationModule]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserModule, [{
    type: NgModule,
    args: [{
      providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],
      exports: [CommonModule, ApplicationModule]
    }]
  }], () => [], null);
})();

// node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs
var Meta = class _Meta {
  _doc;
  _dom;
  constructor(_doc) {
    this._doc = _doc;
    this._dom = getDOM();
  }
  /**
   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.
   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
   * values in the provided tag definition, and verifies that all other attribute values are equal.
   * If an existing element is found, it is returned and is not modified in any way.
   * @param tag The definition of a `<meta>` element to match or create.
   * @param forceCreation True to create a new element without checking whether one already exists.
   * @returns The existing element with the same attributes and values if found,
   * the new element if no match is found, or `null` if the tag parameter is not defined.
   */
  addTag(tag, forceCreation = false) {
    if (!tag) return null;
    return this._getOrCreateElement(tag, forceCreation);
  }
  /**
   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.
   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
   * values in the provided tag definition, and verifies that all other attribute values are equal.
   * @param tags An array of tag definitions to match or create.
   * @param forceCreation True to create new elements without checking whether they already exist.
   * @returns The matching elements if found, or the new elements.
   */
  addTags(tags, forceCreation = false) {
    if (!tags) return [];
    return tags.reduce((result, tag) => {
      if (tag) {
        result.push(this._getOrCreateElement(tag, forceCreation));
      }
      return result;
    }, []);
  }
  /**
   * Retrieves a `<meta>` tag element in the current HTML document.
   * @param attrSelector The tag attribute and value to match against, in the format
   * `"tag_attribute='value string'"`.
   * @returns The matching element, if any.
   */
  getTag(attrSelector) {
    if (!attrSelector) return null;
    return this._doc.querySelector(`meta[${attrSelector}]`) || null;
  }
  /**
   * Retrieves a set of `<meta>` tag elements in the current HTML document.
   * @param attrSelector The tag attribute and value to match against, in the format
   * `"tag_attribute='value string'"`.
   * @returns The matching elements, if any.
   */
  getTags(attrSelector) {
    if (!attrSelector) return [];
    const list = this._doc.querySelectorAll(`meta[${attrSelector}]`);
    return list ? [].slice.call(list) : [];
  }
  /**
   * Modifies an existing `<meta>` tag element in the current HTML document.
   * @param tag The tag description with which to replace the existing tag content.
   * @param selector A tag attribute and value to match against, to identify
   * an existing tag. A string in the format `"tag_attribute=`value string`"`.
   * If not supplied, matches a tag with the same `name` or `property` attribute value as the
   * replacement tag.
   * @return The modified element.
   */
  updateTag(tag, selector) {
    if (!tag) return null;
    selector = selector || this._parseSelector(tag);
    const meta = this.getTag(selector);
    if (meta) {
      return this._setMetaElementAttributes(tag, meta);
    }
    return this._getOrCreateElement(tag, true);
  }
  /**
   * Removes an existing `<meta>` tag element from the current HTML document.
   * @param attrSelector A tag attribute and value to match against, to identify
   * an existing tag. A string in the format `"tag_attribute=`value string`"`.
   */
  removeTag(attrSelector) {
    this.removeTagElement(this.getTag(attrSelector));
  }
  /**
   * Removes an existing `<meta>` tag element from the current HTML document.
   * @param meta The tag definition to match against to identify an existing tag.
   */
  removeTagElement(meta) {
    if (meta) {
      this._dom.remove(meta);
    }
  }
  _getOrCreateElement(meta, forceCreation = false) {
    if (!forceCreation) {
      const selector = this._parseSelector(meta);
      const elem = this.getTags(selector).filter((elem2) => this._containsAttributes(meta, elem2))[0];
      if (elem !== void 0) return elem;
    }
    const element = this._dom.createElement("meta");
    this._setMetaElementAttributes(meta, element);
    const head = this._doc.getElementsByTagName("head")[0];
    head.appendChild(element);
    return element;
  }
  _setMetaElementAttributes(tag, el) {
    Object.keys(tag).forEach((prop) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));
    return el;
  }
  _parseSelector(tag) {
    const attr = tag.name ? "name" : "property";
    return `${attr}="${tag[attr]}"`;
  }
  _containsAttributes(tag, elem) {
    return Object.keys(tag).every((key) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);
  }
  _getMetaKeyMap(prop) {
    return META_KEYS_MAP[prop] || prop;
  }
  static \u0275fac = function Meta_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Meta)(\u0275\u0275inject(DOCUMENT2));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _Meta,
    factory: _Meta.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Meta, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var META_KEYS_MAP = {
  httpEquiv: "http-equiv"
};
var Title = class _Title {
  _doc;
  constructor(_doc) {
    this._doc = _doc;
  }
  /**
   * Get the title of the current HTML document.
   */
  getTitle() {
    return this._doc.title;
  }
  /**
   * Set the title of the current HTML document.
   * @param newTitle
   */
  setTitle(newTitle) {
    this._doc.title = newTitle || "";
  }
  static \u0275fac = function Title_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Title)(\u0275\u0275inject(DOCUMENT2));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _Title,
    factory: _Title.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Title, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var EVENT_NAMES = {
  // pan
  "pan": true,
  "panstart": true,
  "panmove": true,
  "panend": true,
  "pancancel": true,
  "panleft": true,
  "panright": true,
  "panup": true,
  "pandown": true,
  // pinch
  "pinch": true,
  "pinchstart": true,
  "pinchmove": true,
  "pinchend": true,
  "pinchcancel": true,
  "pinchin": true,
  "pinchout": true,
  // press
  "press": true,
  "pressup": true,
  // rotate
  "rotate": true,
  "rotatestart": true,
  "rotatemove": true,
  "rotateend": true,
  "rotatecancel": true,
  // swipe
  "swipe": true,
  "swipeleft": true,
  "swiperight": true,
  "swipeup": true,
  "swipedown": true,
  // tap
  "tap": true,
  "doubletap": true
};
var HAMMER_GESTURE_CONFIG = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "HammerGestureConfig" : "");
var HAMMER_LOADER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "HammerLoader" : "");
var HammerGestureConfig = class _HammerGestureConfig {
  /**
   * A set of supported event names for gestures to be used in Angular.
   * Angular supports all built-in recognizers, as listed in
   * [HammerJS documentation](https://hammerjs.github.io/).
   */
  events = [];
  /**
   * Maps gesture event names to a set of configuration options
   * that specify overrides to the default values for specific properties.
   *
   * The key is a supported event name to be configured,
   * and the options object contains a set of properties, with override values
   * to be applied to the named recognizer event.
   * For example, to disable recognition of the rotate event, specify
   *  `{"rotate": {"enable": false}}`.
   *
   * Properties that are not present take the HammerJS default values.
   * For information about which properties are supported for which events,
   * and their allowed and default values, see
   * [HammerJS documentation](https://hammerjs.github.io/).
   *
   */
  overrides = {};
  /**
   * Properties whose default values can be overridden for a given event.
   * Different sets of properties apply to different events.
   * For information about which properties are supported for which events,
   * and their allowed and default values, see
   * [HammerJS documentation](https://hammerjs.github.io/).
   */
  options;
  /**
   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
   * and attaches it to a given HTML element.
   * @param element The element that will recognize gestures.
   * @returns A HammerJS event-manager object.
   */
  buildHammer(element) {
    const mc = new Hammer(element, this.options);
    mc.get("pinch").set({
      enable: true
    });
    mc.get("rotate").set({
      enable: true
    });
    for (const eventName in this.overrides) {
      mc.get(eventName).set(this.overrides[eventName]);
    }
    return mc;
  }
  static \u0275fac = function HammerGestureConfig_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HammerGestureConfig)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _HammerGestureConfig,
    factory: _HammerGestureConfig.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerGestureConfig, [{
    type: Injectable
  }], null, null);
})();
var HammerGesturesPlugin = class _HammerGesturesPlugin extends EventManagerPlugin {
  _config;
  _injector;
  loader;
  _loaderPromise = null;
  constructor(doc, _config, _injector, loader) {
    super(doc);
    this._config = _config;
    this._injector = _injector;
    this.loader = loader;
  }
  supports(eventName) {
    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
      return false;
    }
    if (!window.Hammer && !this.loader) {
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        const _console = this._injector.get(Console);
        _console.warn(`The "${eventName}" event cannot be bound because Hammer.JS is not loaded and no custom loader has been specified.`);
      }
      return false;
    }
    return true;
  }
  addEventListener(element, eventName, handler) {
    const zone = this.manager.getZone();
    eventName = eventName.toLowerCase();
    if (!window.Hammer && this.loader) {
      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader());
      let cancelRegistration = false;
      let deregister = () => {
        cancelRegistration = true;
      };
      zone.runOutsideAngular(() => this._loaderPromise.then(() => {
        if (!window.Hammer) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            const _console = this._injector.get(Console);
            _console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);
          }
          deregister = () => {
          };
          return;
        }
        if (!cancelRegistration) {
          deregister = this.addEventListener(element, eventName, handler);
        }
      }).catch(() => {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          const _console = this._injector.get(Console);
          _console.warn(`The "${eventName}" event cannot be bound because the custom Hammer.JS loader failed.`);
        }
        deregister = () => {
        };
      }));
      return () => {
        deregister();
      };
    }
    return zone.runOutsideAngular(() => {
      const mc = this._config.buildHammer(element);
      const callback = function(eventObj) {
        zone.runGuarded(function() {
          handler(eventObj);
        });
      };
      mc.on(eventName, callback);
      return () => {
        mc.off(eventName, callback);
        if (typeof mc.destroy === "function") {
          mc.destroy();
        }
      };
    });
  }
  isCustomEvent(eventName) {
    return this._config.events.indexOf(eventName) > -1;
  }
  static \u0275fac = function HammerGesturesPlugin_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HammerGesturesPlugin)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(HAMMER_GESTURE_CONFIG), \u0275\u0275inject(Injector), \u0275\u0275inject(HAMMER_LOADER, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _HammerGesturesPlugin,
    factory: _HammerGesturesPlugin.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerGesturesPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: HammerGestureConfig,
    decorators: [{
      type: Inject,
      args: [HAMMER_GESTURE_CONFIG]
    }]
  }, {
    type: Injector
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [HAMMER_LOADER]
    }]
  }], null);
})();
var HammerModule = class _HammerModule {
  static \u0275fac = function HammerModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HammerModule)();
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
    type: _HammerModule
  });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
    providers: [{
      provide: EVENT_MANAGER_PLUGINS,
      useClass: HammerGesturesPlugin,
      multi: true,
      deps: [DOCUMENT2, HAMMER_GESTURE_CONFIG, Injector, [new Optional(), HAMMER_LOADER]]
    }, {
      provide: HAMMER_GESTURE_CONFIG,
      useClass: HammerGestureConfig
    }]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerModule, [{
    type: NgModule,
    args: [{
      providers: [{
        provide: EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: true,
        deps: [DOCUMENT2, HAMMER_GESTURE_CONFIG, Injector, [new Optional(), HAMMER_LOADER]]
      }, {
        provide: HAMMER_GESTURE_CONFIG,
        useClass: HammerGestureConfig
      }]
    }]
  }], null, null);
})();
var DomSanitizer = class _DomSanitizer {
  static \u0275fac = function DomSanitizer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DomSanitizer)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DomSanitizer,
    factory: function DomSanitizer_Factory(__ngFactoryType__) {
      let __ngConditionalFactory__ = null;
      if (__ngFactoryType__) {
        __ngConditionalFactory__ = new (__ngFactoryType__ || _DomSanitizer)();
      } else {
        __ngConditionalFactory__ = \u0275\u0275inject(DomSanitizerImpl);
      }
      return __ngConditionalFactory__;
    },
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomSanitizer, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useExisting: forwardRef(() => DomSanitizerImpl)
    }]
  }], null, null);
})();
var DomSanitizerImpl = class _DomSanitizerImpl extends DomSanitizer {
  _doc;
  constructor(_doc) {
    super();
    this._doc = _doc;
  }
  sanitize(ctx, value) {
    if (value == null) return null;
    switch (ctx) {
      case SecurityContext.NONE:
        return value;
      case SecurityContext.HTML:
        if (allowSanitizationBypassAndThrow(
          value,
          "HTML"
          /* BypassType.Html */
        )) {
          return unwrapSafeValue(value);
        }
        return _sanitizeHtml(this._doc, String(value)).toString();
      case SecurityContext.STYLE:
        if (allowSanitizationBypassAndThrow(
          value,
          "Style"
          /* BypassType.Style */
        )) {
          return unwrapSafeValue(value);
        }
        return value;
      case SecurityContext.SCRIPT:
        if (allowSanitizationBypassAndThrow(
          value,
          "Script"
          /* BypassType.Script */
        )) {
          return unwrapSafeValue(value);
        }
        throw new RuntimeError(5200, (typeof ngDevMode === "undefined" || ngDevMode) && "unsafe value used in a script context");
      case SecurityContext.URL:
        if (allowSanitizationBypassAndThrow(
          value,
          "URL"
          /* BypassType.Url */
        )) {
          return unwrapSafeValue(value);
        }
        return _sanitizeUrl(String(value));
      case SecurityContext.RESOURCE_URL:
        if (allowSanitizationBypassAndThrow(
          value,
          "ResourceURL"
          /* BypassType.ResourceUrl */
        )) {
          return unwrapSafeValue(value);
        }
        throw new RuntimeError(5201, (typeof ngDevMode === "undefined" || ngDevMode) && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);
      default:
        throw new RuntimeError(5202, (typeof ngDevMode === "undefined" || ngDevMode) && `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`);
    }
  }
  bypassSecurityTrustHtml(value) {
    return bypassSanitizationTrustHtml(value);
  }
  bypassSecurityTrustStyle(value) {
    return bypassSanitizationTrustStyle(value);
  }
  bypassSecurityTrustScript(value) {
    return bypassSanitizationTrustScript(value);
  }
  bypassSecurityTrustUrl(value) {
    return bypassSanitizationTrustUrl(value);
  }
  bypassSecurityTrustResourceUrl(value) {
    return bypassSanitizationTrustResourceUrl(value);
  }
  static \u0275fac = function DomSanitizerImpl_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DomSanitizerImpl)(\u0275\u0275inject(DOCUMENT2));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DomSanitizerImpl,
    factory: _DomSanitizerImpl.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomSanitizerImpl, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var HydrationFeatureKind;
(function(HydrationFeatureKind2) {
  HydrationFeatureKind2[HydrationFeatureKind2["NoHttpTransferCache"] = 0] = "NoHttpTransferCache";
  HydrationFeatureKind2[HydrationFeatureKind2["HttpTransferCacheOptions"] = 1] = "HttpTransferCacheOptions";
  HydrationFeatureKind2[HydrationFeatureKind2["I18nSupport"] = 2] = "I18nSupport";
  HydrationFeatureKind2[HydrationFeatureKind2["EventReplay"] = 3] = "EventReplay";
  HydrationFeatureKind2[HydrationFeatureKind2["IncrementalHydration"] = 4] = "IncrementalHydration";
})(HydrationFeatureKind || (HydrationFeatureKind = {}));
var VERSION3 = new Version("19.2.6");

// node_modules/@angular/router/fesm2022/router-B-Y85L0c.mjs
var PRIMARY_OUTLET = "primary";
var RouteTitleKey = /* @__PURE__ */ Symbol("RouteTitle");
var ParamsAsMap = class {
  params;
  constructor(params) {
    this.params = params || {};
  }
  has(name) {
    return Object.prototype.hasOwnProperty.call(this.params, name);
  }
  get(name) {
    if (this.has(name)) {
      const v = this.params[name];
      return Array.isArray(v) ? v[0] : v;
    }
    return null;
  }
  getAll(name) {
    if (this.has(name)) {
      const v = this.params[name];
      return Array.isArray(v) ? v : [v];
    }
    return [];
  }
  get keys() {
    return Object.keys(this.params);
  }
};
function convertToParamMap(params) {
  return new ParamsAsMap(params);
}
function defaultUrlMatcher(segments, segmentGroup, route) {
  const parts = route.path.split("/");
  if (parts.length > segments.length) {
    return null;
  }
  if (route.pathMatch === "full" && (segmentGroup.hasChildren() || parts.length < segments.length)) {
    return null;
  }
  const posParams = {};
  for (let index = 0; index < parts.length; index++) {
    const part = parts[index];
    const segment = segments[index];
    const isParameter = part[0] === ":";
    if (isParameter) {
      posParams[part.substring(1)] = segment;
    } else if (part !== segment.path) {
      return null;
    }
  }
  return {
    consumed: segments.slice(0, parts.length),
    posParams
  };
}
function shallowEqualArrays(a, b) {
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; ++i) {
    if (!shallowEqual(a[i], b[i])) return false;
  }
  return true;
}
function shallowEqual(a, b) {
  const k1 = a ? getDataKeys(a) : void 0;
  const k2 = b ? getDataKeys(b) : void 0;
  if (!k1 || !k2 || k1.length != k2.length) {
    return false;
  }
  let key;
  for (let i = 0; i < k1.length; i++) {
    key = k1[i];
    if (!equalArraysOrString(a[key], b[key])) {
      return false;
    }
  }
  return true;
}
function getDataKeys(obj) {
  return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];
}
function equalArraysOrString(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    const aSorted = [...a].sort();
    const bSorted = [...b].sort();
    return aSorted.every((val, index) => bSorted[index] === val);
  } else {
    return a === b;
  }
}
function last3(a) {
  return a.length > 0 ? a[a.length - 1] : null;
}
function wrapIntoObservable(value) {
  if (isObservable(value)) {
    return value;
  }
  if (isPromise2(value)) {
    return from(Promise.resolve(value));
  }
  return of(value);
}
var pathCompareMap = {
  "exact": equalSegmentGroups,
  "subset": containsSegmentGroup
};
var paramCompareMap = {
  "exact": equalParams,
  "subset": containsParams,
  "ignored": () => true
};
function containsTree(container, containee, options) {
  return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === "exact" && container.fragment !== containee.fragment);
}
function equalParams(container, containee) {
  return shallowEqual(container, containee);
}
function equalSegmentGroups(container, containee, matrixParams) {
  if (!equalPath(container.segments, containee.segments)) return false;
  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {
    return false;
  }
  if (container.numberOfChildren !== containee.numberOfChildren) return false;
  for (const c in containee.children) {
    if (!container.children[c]) return false;
    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams)) return false;
  }
  return true;
}
function containsParams(container, containee) {
  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every((key) => equalArraysOrString(container[key], containee[key]));
}
function containsSegmentGroup(container, containee, matrixParams) {
  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);
}
function containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {
  if (container.segments.length > containeePaths.length) {
    const current = container.segments.slice(0, containeePaths.length);
    if (!equalPath(current, containeePaths)) return false;
    if (containee.hasChildren()) return false;
    if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;
    return true;
  } else if (container.segments.length === containeePaths.length) {
    if (!equalPath(container.segments, containeePaths)) return false;
    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;
    for (const c in containee.children) {
      if (!container.children[c]) return false;
      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {
        return false;
      }
    }
    return true;
  } else {
    const current = containeePaths.slice(0, container.segments.length);
    const next = containeePaths.slice(container.segments.length);
    if (!equalPath(container.segments, current)) return false;
    if (!matrixParamsMatch(container.segments, current, matrixParams)) return false;
    if (!container.children[PRIMARY_OUTLET]) return false;
    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);
  }
}
function matrixParamsMatch(containerPaths, containeePaths, options) {
  return containeePaths.every((containeeSegment, i) => {
    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);
  });
}
var UrlTree = class {
  root;
  queryParams;
  fragment;
  /** @internal */
  _queryParamMap;
  constructor(root = new UrlSegmentGroup([], {}), queryParams = {}, fragment = null) {
    this.root = root;
    this.queryParams = queryParams;
    this.fragment = fragment;
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (root.segments.length > 0) {
        throw new RuntimeError(4015, "The root `UrlSegmentGroup` should not contain `segments`. Instead, these segments belong in the `children` so they can be associated with a named outlet.");
      }
    }
  }
  get queryParamMap() {
    this._queryParamMap ??= convertToParamMap(this.queryParams);
    return this._queryParamMap;
  }
  /** @docsNotRequired */
  toString() {
    return DEFAULT_SERIALIZER.serialize(this);
  }
};
var UrlSegmentGroup = class {
  segments;
  children;
  /** The parent node in the url tree */
  parent = null;
  constructor(segments, children) {
    this.segments = segments;
    this.children = children;
    Object.values(children).forEach((v) => v.parent = this);
  }
  /** Whether the segment has child segments */
  hasChildren() {
    return this.numberOfChildren > 0;
  }
  /** Number of child segments */
  get numberOfChildren() {
    return Object.keys(this.children).length;
  }
  /** @docsNotRequired */
  toString() {
    return serializePaths(this);
  }
};
var UrlSegment = class {
  path;
  parameters;
  /** @internal */
  _parameterMap;
  constructor(path, parameters) {
    this.path = path;
    this.parameters = parameters;
  }
  get parameterMap() {
    this._parameterMap ??= convertToParamMap(this.parameters);
    return this._parameterMap;
  }
  /** @docsNotRequired */
  toString() {
    return serializePath(this);
  }
};
function equalSegments(as, bs) {
  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));
}
function equalPath(as, bs) {
  if (as.length !== bs.length) return false;
  return as.every((a, i) => a.path === bs[i].path);
}
function mapChildrenIntoArray(segment, fn) {
  let res = [];
  Object.entries(segment.children).forEach(([childOutlet, child]) => {
    if (childOutlet === PRIMARY_OUTLET) {
      res = res.concat(fn(child, childOutlet));
    }
  });
  Object.entries(segment.children).forEach(([childOutlet, child]) => {
    if (childOutlet !== PRIMARY_OUTLET) {
      res = res.concat(fn(child, childOutlet));
    }
  });
  return res;
}
var UrlSerializer = class _UrlSerializer {
  static \u0275fac = function UrlSerializer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UrlSerializer)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _UrlSerializer,
    factory: () => (() => new DefaultUrlSerializer())(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UrlSerializer, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => new DefaultUrlSerializer()
    }]
  }], null, null);
})();
var DefaultUrlSerializer = class {
  /** Parses a url into a `UrlTree` */
  parse(url) {
    const p = new UrlParser(url);
    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
  }
  /** Converts a `UrlTree` into a url */
  serialize(tree2) {
    const segment = `/${serializeSegment(tree2.root, true)}`;
    const query = serializeQueryParams(tree2.queryParams);
    const fragment = typeof tree2.fragment === `string` ? `#${encodeUriFragment(tree2.fragment)}` : "";
    return `${segment}${query}${fragment}`;
  }
};
var DEFAULT_SERIALIZER = new DefaultUrlSerializer();
function serializePaths(segment) {
  return segment.segments.map((p) => serializePath(p)).join("/");
}
function serializeSegment(segment, root) {
  if (!segment.hasChildren()) {
    return serializePaths(segment);
  }
  if (root) {
    const primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : "";
    const children = [];
    Object.entries(segment.children).forEach(([k, v]) => {
      if (k !== PRIMARY_OUTLET) {
        children.push(`${k}:${serializeSegment(v, false)}`);
      }
    });
    return children.length > 0 ? `${primary}(${children.join("//")})` : primary;
  } else {
    const children = mapChildrenIntoArray(segment, (v, k) => {
      if (k === PRIMARY_OUTLET) {
        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
      }
      return [`${k}:${serializeSegment(v, false)}`];
    });
    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {
      return `${serializePaths(segment)}/${children[0]}`;
    }
    return `${serializePaths(segment)}/(${children.join("//")})`;
  }
}
function encodeUriString(s) {
  return encodeURIComponent(s).replace(/%40/g, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",");
}
function encodeUriQuery(s) {
  return encodeUriString(s).replace(/%3B/gi, ";");
}
function encodeUriFragment(s) {
  return encodeURI(s);
}
function encodeUriSegment(s) {
  return encodeUriString(s).replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/%26/gi, "&");
}
function decode(s) {
  return decodeURIComponent(s);
}
function decodeQuery(s) {
  return decode(s.replace(/\+/g, "%20"));
}
function serializePath(path) {
  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;
}
function serializeMatrixParams(params) {
  return Object.entries(params).map(([key, value]) => `;${encodeUriSegment(key)}=${encodeUriSegment(value)}`).join("");
}
function serializeQueryParams(params) {
  const strParams = Object.entries(params).map(([name, value]) => {
    return Array.isArray(value) ? value.map((v) => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join("&") : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;
  }).filter((s) => s);
  return strParams.length ? `?${strParams.join("&")}` : "";
}
var SEGMENT_RE = /^[^\/()?;#]+/;
function matchSegments(str) {
  const match2 = str.match(SEGMENT_RE);
  return match2 ? match2[0] : "";
}
var MATRIX_PARAM_SEGMENT_RE = /^[^\/()?;=#]+/;
function matchMatrixKeySegments(str) {
  const match2 = str.match(MATRIX_PARAM_SEGMENT_RE);
  return match2 ? match2[0] : "";
}
var QUERY_PARAM_RE = /^[^=?&#]+/;
function matchQueryParams(str) {
  const match2 = str.match(QUERY_PARAM_RE);
  return match2 ? match2[0] : "";
}
var QUERY_PARAM_VALUE_RE = /^[^&#]+/;
function matchUrlQueryParamValue(str) {
  const match2 = str.match(QUERY_PARAM_VALUE_RE);
  return match2 ? match2[0] : "";
}
var UrlParser = class {
  url;
  remaining;
  constructor(url) {
    this.url = url;
    this.remaining = url;
  }
  parseRootSegment() {
    this.consumeOptional("/");
    if (this.remaining === "" || this.peekStartsWith("?") || this.peekStartsWith("#")) {
      return new UrlSegmentGroup([], {});
    }
    return new UrlSegmentGroup([], this.parseChildren());
  }
  parseQueryParams() {
    const params = {};
    if (this.consumeOptional("?")) {
      do {
        this.parseQueryParam(params);
      } while (this.consumeOptional("&"));
    }
    return params;
  }
  parseFragment() {
    return this.consumeOptional("#") ? decodeURIComponent(this.remaining) : null;
  }
  parseChildren() {
    if (this.remaining === "") {
      return {};
    }
    this.consumeOptional("/");
    const segments = [];
    if (!this.peekStartsWith("(")) {
      segments.push(this.parseSegment());
    }
    while (this.peekStartsWith("/") && !this.peekStartsWith("//") && !this.peekStartsWith("/(")) {
      this.capture("/");
      segments.push(this.parseSegment());
    }
    let children = {};
    if (this.peekStartsWith("/(")) {
      this.capture("/");
      children = this.parseParens(true);
    }
    let res = {};
    if (this.peekStartsWith("(")) {
      res = this.parseParens(false);
    }
    if (segments.length > 0 || Object.keys(children).length > 0) {
      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
    }
    return res;
  }
  // parse a segment with its matrix parameters
  // ie `name;k1=v1;k2`
  parseSegment() {
    const path = matchSegments(this.remaining);
    if (path === "" && this.peekStartsWith(";")) {
      throw new RuntimeError(4009, (typeof ngDevMode === "undefined" || ngDevMode) && `Empty path url segment cannot have parameters: '${this.remaining}'.`);
    }
    this.capture(path);
    return new UrlSegment(decode(path), this.parseMatrixParams());
  }
  parseMatrixParams() {
    const params = {};
    while (this.consumeOptional(";")) {
      this.parseParam(params);
    }
    return params;
  }
  parseParam(params) {
    const key = matchMatrixKeySegments(this.remaining);
    if (!key) {
      return;
    }
    this.capture(key);
    let value = "";
    if (this.consumeOptional("=")) {
      const valueMatch = matchSegments(this.remaining);
      if (valueMatch) {
        value = valueMatch;
        this.capture(value);
      }
    }
    params[decode(key)] = decode(value);
  }
  // Parse a single query parameter `name[=value]`
  parseQueryParam(params) {
    const key = matchQueryParams(this.remaining);
    if (!key) {
      return;
    }
    this.capture(key);
    let value = "";
    if (this.consumeOptional("=")) {
      const valueMatch = matchUrlQueryParamValue(this.remaining);
      if (valueMatch) {
        value = valueMatch;
        this.capture(value);
      }
    }
    const decodedKey = decodeQuery(key);
    const decodedVal = decodeQuery(value);
    if (params.hasOwnProperty(decodedKey)) {
      let currentVal = params[decodedKey];
      if (!Array.isArray(currentVal)) {
        currentVal = [currentVal];
        params[decodedKey] = currentVal;
      }
      currentVal.push(decodedVal);
    } else {
      params[decodedKey] = decodedVal;
    }
  }
  // parse `(a/b//outlet_name:c/d)`
  parseParens(allowPrimary) {
    const segments = {};
    this.capture("(");
    while (!this.consumeOptional(")") && this.remaining.length > 0) {
      const path = matchSegments(this.remaining);
      const next = this.remaining[path.length];
      if (next !== "/" && next !== ")" && next !== ";") {
        throw new RuntimeError(4010, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot parse url '${this.url}'`);
      }
      let outletName = void 0;
      if (path.indexOf(":") > -1) {
        outletName = path.slice(0, path.indexOf(":"));
        this.capture(outletName);
        this.capture(":");
      } else if (allowPrimary) {
        outletName = PRIMARY_OUTLET;
      }
      const children = this.parseChildren();
      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
      this.consumeOptional("//");
    }
    return segments;
  }
  peekStartsWith(str) {
    return this.remaining.startsWith(str);
  }
  // Consumes the prefix when it is present and returns whether it has been consumed
  consumeOptional(str) {
    if (this.peekStartsWith(str)) {
      this.remaining = this.remaining.substring(str.length);
      return true;
    }
    return false;
  }
  capture(str) {
    if (!this.consumeOptional(str)) {
      throw new RuntimeError(4011, (typeof ngDevMode === "undefined" || ngDevMode) && `Expected "${str}".`);
    }
  }
};
function createRoot(rootCandidate) {
  return rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], {
    [PRIMARY_OUTLET]: rootCandidate
  }) : rootCandidate;
}
function squashSegmentGroup(segmentGroup) {
  const newChildren = {};
  for (const [childOutlet, child] of Object.entries(segmentGroup.children)) {
    const childCandidate = squashSegmentGroup(child);
    if (childOutlet === PRIMARY_OUTLET && childCandidate.segments.length === 0 && childCandidate.hasChildren()) {
      for (const [grandChildOutlet, grandChild] of Object.entries(childCandidate.children)) {
        newChildren[grandChildOutlet] = grandChild;
      }
    } else if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {
      newChildren[childOutlet] = childCandidate;
    }
  }
  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);
  return mergeTrivialChildren(s);
}
function mergeTrivialChildren(s) {
  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
    const c = s.children[PRIMARY_OUTLET];
    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
  }
  return s;
}
function isUrlTree(v) {
  return v instanceof UrlTree;
}
function createUrlTreeFromSnapshot(relativeTo, commands, queryParams = null, fragment = null) {
  const relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeTo);
  return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, queryParams, fragment);
}
function createSegmentGroupFromRoute(route) {
  let targetGroup;
  function createSegmentGroupFromRouteRecursive(currentRoute) {
    const childOutlets = {};
    for (const childSnapshot of currentRoute.children) {
      const root = createSegmentGroupFromRouteRecursive(childSnapshot);
      childOutlets[childSnapshot.outlet] = root;
    }
    const segmentGroup = new UrlSegmentGroup(currentRoute.url, childOutlets);
    if (currentRoute === route) {
      targetGroup = segmentGroup;
    }
    return segmentGroup;
  }
  const rootCandidate = createSegmentGroupFromRouteRecursive(route.root);
  const rootSegmentGroup = createRoot(rootCandidate);
  return targetGroup ?? rootSegmentGroup;
}
function createUrlTreeFromSegmentGroup(relativeTo, commands, queryParams, fragment) {
  let root = relativeTo;
  while (root.parent) {
    root = root.parent;
  }
  if (commands.length === 0) {
    return tree(root, root, root, queryParams, fragment);
  }
  const nav = computeNavigation(commands);
  if (nav.toRoot()) {
    return tree(root, root, new UrlSegmentGroup([], {}), queryParams, fragment);
  }
  const position = findStartingPositionForTargetGroup(nav, root, relativeTo);
  const newSegmentGroup = position.processChildren ? updateSegmentGroupChildren(position.segmentGroup, position.index, nav.commands) : updateSegmentGroup(position.segmentGroup, position.index, nav.commands);
  return tree(root, position.segmentGroup, newSegmentGroup, queryParams, fragment);
}
function isMatrixParams(command) {
  return typeof command === "object" && command != null && !command.outlets && !command.segmentPath;
}
function isCommandWithOutlets(command) {
  return typeof command === "object" && command != null && command.outlets;
}
function tree(oldRoot, oldSegmentGroup, newSegmentGroup, queryParams, fragment) {
  let qp = {};
  if (queryParams) {
    Object.entries(queryParams).forEach(([name, value]) => {
      qp[name] = Array.isArray(value) ? value.map((v) => `${v}`) : `${value}`;
    });
  }
  let rootCandidate;
  if (oldRoot === oldSegmentGroup) {
    rootCandidate = newSegmentGroup;
  } else {
    rootCandidate = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);
  }
  const newRoot = createRoot(squashSegmentGroup(rootCandidate));
  return new UrlTree(newRoot, qp, fragment);
}
function replaceSegment(current, oldSegment, newSegment) {
  const children = {};
  Object.entries(current.children).forEach(([outletName, c]) => {
    if (c === oldSegment) {
      children[outletName] = newSegment;
    } else {
      children[outletName] = replaceSegment(c, oldSegment, newSegment);
    }
  });
  return new UrlSegmentGroup(current.segments, children);
}
var Navigation = class {
  isAbsolute;
  numberOfDoubleDots;
  commands;
  constructor(isAbsolute, numberOfDoubleDots, commands) {
    this.isAbsolute = isAbsolute;
    this.numberOfDoubleDots = numberOfDoubleDots;
    this.commands = commands;
    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
      throw new RuntimeError(4003, (typeof ngDevMode === "undefined" || ngDevMode) && "Root segment cannot have matrix parameters");
    }
    const cmdWithOutlet = commands.find(isCommandWithOutlets);
    if (cmdWithOutlet && cmdWithOutlet !== last3(commands)) {
      throw new RuntimeError(4004, (typeof ngDevMode === "undefined" || ngDevMode) && "{outlets:{}} has to be the last command");
    }
  }
  toRoot() {
    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == "/";
  }
};
function computeNavigation(commands) {
  if (typeof commands[0] === "string" && commands.length === 1 && commands[0] === "/") {
    return new Navigation(true, 0, commands);
  }
  let numberOfDoubleDots = 0;
  let isAbsolute = false;
  const res = commands.reduce((res2, cmd, cmdIdx) => {
    if (typeof cmd === "object" && cmd != null) {
      if (cmd.outlets) {
        const outlets = {};
        Object.entries(cmd.outlets).forEach(([name, commands2]) => {
          outlets[name] = typeof commands2 === "string" ? commands2.split("/") : commands2;
        });
        return [...res2, {
          outlets
        }];
      }
      if (cmd.segmentPath) {
        return [...res2, cmd.segmentPath];
      }
    }
    if (!(typeof cmd === "string")) {
      return [...res2, cmd];
    }
    if (cmdIdx === 0) {
      cmd.split("/").forEach((urlPart, partIndex) => {
        if (partIndex == 0 && urlPart === ".") ;
        else if (partIndex == 0 && urlPart === "") {
          isAbsolute = true;
        } else if (urlPart === "..") {
          numberOfDoubleDots++;
        } else if (urlPart != "") {
          res2.push(urlPart);
        }
      });
      return res2;
    }
    return [...res2, cmd];
  }, []);
  return new Navigation(isAbsolute, numberOfDoubleDots, res);
}
var Position = class {
  segmentGroup;
  processChildren;
  index;
  constructor(segmentGroup, processChildren, index) {
    this.segmentGroup = segmentGroup;
    this.processChildren = processChildren;
    this.index = index;
  }
};
function findStartingPositionForTargetGroup(nav, root, target) {
  if (nav.isAbsolute) {
    return new Position(root, true, 0);
  }
  if (!target) {
    return new Position(root, false, NaN);
  }
  if (target.parent === null) {
    return new Position(target, true, 0);
  }
  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
  const index = target.segments.length - 1 + modifier;
  return createPositionApplyingDoubleDots(target, index, nav.numberOfDoubleDots);
}
function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
  let g = group;
  let ci = index;
  let dd = numberOfDoubleDots;
  while (dd > ci) {
    dd -= ci;
    g = g.parent;
    if (!g) {
      throw new RuntimeError(4005, (typeof ngDevMode === "undefined" || ngDevMode) && "Invalid number of '../'");
    }
    ci = g.segments.length;
  }
  return new Position(g, false, ci - dd);
}
function getOutlets(commands) {
  if (isCommandWithOutlets(commands[0])) {
    return commands[0].outlets;
  }
  return {
    [PRIMARY_OUTLET]: commands
  };
}
function updateSegmentGroup(segmentGroup, startIndex, commands) {
  segmentGroup ??= new UrlSegmentGroup([], {});
  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
  }
  const m = prefixedWith(segmentGroup, startIndex, commands);
  const slicedCommands = commands.slice(m.commandIndex);
  if (m.match && m.pathIndex < segmentGroup.segments.length) {
    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
    return updateSegmentGroupChildren(g, 0, slicedCommands);
  } else if (m.match && slicedCommands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else if (m.match && !segmentGroup.hasChildren()) {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  } else if (m.match) {
    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
  } else {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  }
}
function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
  if (commands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else {
    const outlets = getOutlets(commands);
    const children = {};
    if (Object.keys(outlets).some((o) => o !== PRIMARY_OUTLET) && segmentGroup.children[PRIMARY_OUTLET] && segmentGroup.numberOfChildren === 1 && segmentGroup.children[PRIMARY_OUTLET].segments.length === 0) {
      const childrenOfEmptyChild = updateSegmentGroupChildren(segmentGroup.children[PRIMARY_OUTLET], startIndex, commands);
      return new UrlSegmentGroup(segmentGroup.segments, childrenOfEmptyChild.children);
    }
    Object.entries(outlets).forEach(([outlet, commands2]) => {
      if (typeof commands2 === "string") {
        commands2 = [commands2];
      }
      if (commands2 !== null) {
        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands2);
      }
    });
    Object.entries(segmentGroup.children).forEach(([childOutlet, child]) => {
      if (outlets[childOutlet] === void 0) {
        children[childOutlet] = child;
      }
    });
    return new UrlSegmentGroup(segmentGroup.segments, children);
  }
}
function prefixedWith(segmentGroup, startIndex, commands) {
  let currentCommandIndex = 0;
  let currentPathIndex = startIndex;
  const noMatch2 = {
    match: false,
    pathIndex: 0,
    commandIndex: 0
  };
  while (currentPathIndex < segmentGroup.segments.length) {
    if (currentCommandIndex >= commands.length) return noMatch2;
    const path = segmentGroup.segments[currentPathIndex];
    const command = commands[currentCommandIndex];
    if (isCommandWithOutlets(command)) {
      break;
    }
    const curr = `${command}`;
    const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
    if (currentPathIndex > 0 && curr === void 0) break;
    if (curr && next && typeof next === "object" && next.outlets === void 0) {
      if (!compare(curr, next, path)) return noMatch2;
      currentCommandIndex += 2;
    } else {
      if (!compare(curr, {}, path)) return noMatch2;
      currentCommandIndex++;
    }
    currentPathIndex++;
  }
  return {
    match: true,
    pathIndex: currentPathIndex,
    commandIndex: currentCommandIndex
  };
}
function createNewSegmentGroup(segmentGroup, startIndex, commands) {
  const paths = segmentGroup.segments.slice(0, startIndex);
  let i = 0;
  while (i < commands.length) {
    const command = commands[i];
    if (isCommandWithOutlets(command)) {
      const children = createNewSegmentChildren(command.outlets);
      return new UrlSegmentGroup(paths, children);
    }
    if (i === 0 && isMatrixParams(commands[0])) {
      const p = segmentGroup.segments[startIndex];
      paths.push(new UrlSegment(p.path, stringify2(commands[0])));
      i++;
      continue;
    }
    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;
    const next = i < commands.length - 1 ? commands[i + 1] : null;
    if (curr && next && isMatrixParams(next)) {
      paths.push(new UrlSegment(curr, stringify2(next)));
      i += 2;
    } else {
      paths.push(new UrlSegment(curr, {}));
      i++;
    }
  }
  return new UrlSegmentGroup(paths, {});
}
function createNewSegmentChildren(outlets) {
  const children = {};
  Object.entries(outlets).forEach(([outlet, commands]) => {
    if (typeof commands === "string") {
      commands = [commands];
    }
    if (commands !== null) {
      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
    }
  });
  return children;
}
function stringify2(params) {
  const res = {};
  Object.entries(params).forEach(([k, v]) => res[k] = `${v}`);
  return res;
}
function compare(path, params, segment) {
  return path == segment.path && shallowEqual(params, segment.parameters);
}
var IMPERATIVE_NAVIGATION = "imperative";
var EventType;
(function(EventType2) {
  EventType2[EventType2["NavigationStart"] = 0] = "NavigationStart";
  EventType2[EventType2["NavigationEnd"] = 1] = "NavigationEnd";
  EventType2[EventType2["NavigationCancel"] = 2] = "NavigationCancel";
  EventType2[EventType2["NavigationError"] = 3] = "NavigationError";
  EventType2[EventType2["RoutesRecognized"] = 4] = "RoutesRecognized";
  EventType2[EventType2["ResolveStart"] = 5] = "ResolveStart";
  EventType2[EventType2["ResolveEnd"] = 6] = "ResolveEnd";
  EventType2[EventType2["GuardsCheckStart"] = 7] = "GuardsCheckStart";
  EventType2[EventType2["GuardsCheckEnd"] = 8] = "GuardsCheckEnd";
  EventType2[EventType2["RouteConfigLoadStart"] = 9] = "RouteConfigLoadStart";
  EventType2[EventType2["RouteConfigLoadEnd"] = 10] = "RouteConfigLoadEnd";
  EventType2[EventType2["ChildActivationStart"] = 11] = "ChildActivationStart";
  EventType2[EventType2["ChildActivationEnd"] = 12] = "ChildActivationEnd";
  EventType2[EventType2["ActivationStart"] = 13] = "ActivationStart";
  EventType2[EventType2["ActivationEnd"] = 14] = "ActivationEnd";
  EventType2[EventType2["Scroll"] = 15] = "Scroll";
  EventType2[EventType2["NavigationSkipped"] = 16] = "NavigationSkipped";
})(EventType || (EventType = {}));
var RouterEvent = class {
  id;
  url;
  constructor(id, url) {
    this.id = id;
    this.url = url;
  }
};
var NavigationStart = class extends RouterEvent {
  type = EventType.NavigationStart;
  /**
   * Identifies the call or event that triggered the navigation.
   * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.
   *
   * @see {@link NavigationEnd}
   * @see {@link NavigationCancel}
   * @see {@link NavigationError}
   */
  navigationTrigger;
  /**
   * The navigation state that was previously supplied to the `pushState` call,
   * when the navigation is triggered by a `popstate` event. Otherwise null.
   *
   * The state object is defined by `NavigationExtras`, and contains any
   * developer-defined state value, as well as a unique ID that
   * the router assigns to every router transition/navigation.
   *
   * From the perspective of the router, the router never "goes back".
   * When the user clicks on the back button in the browser,
   * a new navigation ID is created.
   *
   * Use the ID in this previous-state object to differentiate between a newly created
   * state and one returned to by a `popstate` event, so that you can restore some
   * remembered state, such as scroll position.
   *
   */
  restoredState;
  constructor(id, url, navigationTrigger = "imperative", restoredState = null) {
    super(id, url);
    this.navigationTrigger = navigationTrigger;
    this.restoredState = restoredState;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;
  }
};
var NavigationEnd = class extends RouterEvent {
  urlAfterRedirects;
  type = EventType.NavigationEnd;
  constructor(id, url, urlAfterRedirects) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;
  }
};
var NavigationCancellationCode;
(function(NavigationCancellationCode2) {
  NavigationCancellationCode2[NavigationCancellationCode2["Redirect"] = 0] = "Redirect";
  NavigationCancellationCode2[NavigationCancellationCode2["SupersededByNewNavigation"] = 1] = "SupersededByNewNavigation";
  NavigationCancellationCode2[NavigationCancellationCode2["NoDataFromResolver"] = 2] = "NoDataFromResolver";
  NavigationCancellationCode2[NavigationCancellationCode2["GuardRejected"] = 3] = "GuardRejected";
})(NavigationCancellationCode || (NavigationCancellationCode = {}));
var NavigationSkippedCode;
(function(NavigationSkippedCode2) {
  NavigationSkippedCode2[NavigationSkippedCode2["IgnoredSameUrlNavigation"] = 0] = "IgnoredSameUrlNavigation";
  NavigationSkippedCode2[NavigationSkippedCode2["IgnoredByUrlHandlingStrategy"] = 1] = "IgnoredByUrlHandlingStrategy";
})(NavigationSkippedCode || (NavigationSkippedCode = {}));
var NavigationCancel = class extends RouterEvent {
  reason;
  code;
  type = EventType.NavigationCancel;
  constructor(id, url, reason, code) {
    super(id, url);
    this.reason = reason;
    this.code = code;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;
  }
};
var NavigationSkipped = class extends RouterEvent {
  reason;
  code;
  type = EventType.NavigationSkipped;
  constructor(id, url, reason, code) {
    super(id, url);
    this.reason = reason;
    this.code = code;
  }
};
var NavigationError = class extends RouterEvent {
  error;
  target;
  type = EventType.NavigationError;
  constructor(id, url, error, target) {
    super(id, url);
    this.error = error;
    this.target = target;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;
  }
};
var RoutesRecognized = class extends RouterEvent {
  urlAfterRedirects;
  state;
  type = EventType.RoutesRecognized;
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }
  /** @docsNotRequired */
  toString() {
    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var GuardsCheckStart = class extends RouterEvent {
  urlAfterRedirects;
  state;
  type = EventType.GuardsCheckStart;
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }
  toString() {
    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var GuardsCheckEnd = class extends RouterEvent {
  urlAfterRedirects;
  state;
  shouldActivate;
  type = EventType.GuardsCheckEnd;
  constructor(id, url, urlAfterRedirects, state, shouldActivate) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
    this.shouldActivate = shouldActivate;
  }
  toString() {
    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;
  }
};
var ResolveStart = class extends RouterEvent {
  urlAfterRedirects;
  state;
  type = EventType.ResolveStart;
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }
  toString() {
    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var ResolveEnd = class extends RouterEvent {
  urlAfterRedirects;
  state;
  type = EventType.ResolveEnd;
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }
  toString() {
    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var RouteConfigLoadStart = class {
  route;
  type = EventType.RouteConfigLoadStart;
  constructor(route) {
    this.route = route;
  }
  toString() {
    return `RouteConfigLoadStart(path: ${this.route.path})`;
  }
};
var RouteConfigLoadEnd = class {
  route;
  type = EventType.RouteConfigLoadEnd;
  constructor(route) {
    this.route = route;
  }
  toString() {
    return `RouteConfigLoadEnd(path: ${this.route.path})`;
  }
};
var ChildActivationStart = class {
  snapshot;
  type = EventType.ChildActivationStart;
  constructor(snapshot) {
    this.snapshot = snapshot;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ChildActivationStart(path: '${path}')`;
  }
};
var ChildActivationEnd = class {
  snapshot;
  type = EventType.ChildActivationEnd;
  constructor(snapshot) {
    this.snapshot = snapshot;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ChildActivationEnd(path: '${path}')`;
  }
};
var ActivationStart = class {
  snapshot;
  type = EventType.ActivationStart;
  constructor(snapshot) {
    this.snapshot = snapshot;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ActivationStart(path: '${path}')`;
  }
};
var ActivationEnd = class {
  snapshot;
  type = EventType.ActivationEnd;
  constructor(snapshot) {
    this.snapshot = snapshot;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ActivationEnd(path: '${path}')`;
  }
};
var Scroll = class {
  routerEvent;
  position;
  anchor;
  type = EventType.Scroll;
  constructor(routerEvent, position, anchor) {
    this.routerEvent = routerEvent;
    this.position = position;
    this.anchor = anchor;
  }
  toString() {
    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;
    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;
  }
};
var BeforeActivateRoutes = class {
};
var RedirectRequest = class {
  url;
  navigationBehaviorOptions;
  constructor(url, navigationBehaviorOptions) {
    this.url = url;
    this.navigationBehaviorOptions = navigationBehaviorOptions;
  }
};
function stringifyEvent(routerEvent) {
  switch (routerEvent.type) {
    case EventType.ActivationEnd:
      return `ActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType.ActivationStart:
      return `ActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType.ChildActivationEnd:
      return `ChildActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType.ChildActivationStart:
      return `ChildActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType.GuardsCheckEnd:
      return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;
    case EventType.GuardsCheckStart:
      return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType.NavigationCancel:
      return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case EventType.NavigationSkipped:
      return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case EventType.NavigationEnd:
      return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;
    case EventType.NavigationError:
      return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;
    case EventType.NavigationStart:
      return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case EventType.ResolveEnd:
      return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType.ResolveStart:
      return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType.RouteConfigLoadEnd:
      return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;
    case EventType.RouteConfigLoadStart:
      return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;
    case EventType.RoutesRecognized:
      return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType.Scroll:
      const pos = routerEvent.position ? `${routerEvent.position[0]}, ${routerEvent.position[1]}` : null;
      return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;
  }
}
function getOrCreateRouteInjectorIfNeeded(route, currentInjector) {
  if (route.providers && !route._injector) {
    route._injector = createEnvironmentInjector(route.providers, currentInjector, `Route: ${route.path}`);
  }
  return route._injector ?? currentInjector;
}
function validateConfig(config2, parentPath = "", requireStandaloneComponents = false) {
  for (let i = 0; i < config2.length; i++) {
    const route = config2[i];
    const fullPath = getFullPath(parentPath, route);
    validateNode(route, fullPath, requireStandaloneComponents);
  }
}
function assertStandalone(fullPath, component) {
  if (component && isNgModule(component)) {
    throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. You are using 'loadComponent' with a module, but it must be used with standalone components. Use 'loadChildren' instead.`);
  } else if (component && !isStandalone(component)) {
    throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. The component must be standalone.`);
  }
}
function validateNode(route, fullPath, requireStandaloneComponents) {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (!route) {
      throw new RuntimeError(4014, `
      Invalid configuration of route '${fullPath}': Encountered undefined route.
      The reason might be an extra comma.

      Example:
      const routes: Routes = [
        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
        { path: 'dashboard',  component: DashboardComponent },, << two commas
        { path: 'detail/:id', component: HeroDetailComponent }
      ];
    `);
    }
    if (Array.isArray(route)) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': Array cannot be specified`);
    }
    if (!route.redirectTo && !route.component && !route.loadComponent && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);
    }
    if (route.redirectTo && route.children) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);
    }
    if (route.redirectTo && route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);
    }
    if (route.children && route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);
    }
    if (route.redirectTo && (route.component || route.loadComponent)) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and component/loadComponent cannot be used together`);
    }
    if (route.component && route.loadComponent) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': component and loadComponent cannot be used together`);
    }
    if (route.redirectTo && route.canActivate) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation so canActivate will never be executed.`);
    }
    if (route.path && route.matcher) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);
    }
    if (route.redirectTo === void 0 && !route.component && !route.loadComponent && !route.children && !route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, loadComponent, redirectTo, children or loadChildren`);
    }
    if (route.path === void 0 && route.matcher === void 0) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);
    }
    if (typeof route.path === "string" && route.path.charAt(0) === "/") {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': path cannot start with a slash`);
    }
    if (route.path === "" && route.redirectTo !== void 0 && route.pathMatch === void 0) {
      const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;
      throw new RuntimeError(4014, `Invalid configuration of route '{path: "${fullPath}", redirectTo: "${route.redirectTo}"}': please provide 'pathMatch'. ${exp}`);
    }
    if (requireStandaloneComponents) {
      assertStandalone(fullPath, route.component);
    }
  }
  if (route.children) {
    validateConfig(route.children, fullPath, requireStandaloneComponents);
  }
}
function getFullPath(parentPath, currentRoute) {
  if (!currentRoute) {
    return parentPath;
  }
  if (!parentPath && !currentRoute.path) {
    return "";
  } else if (parentPath && !currentRoute.path) {
    return `${parentPath}/`;
  } else if (!parentPath && currentRoute.path) {
    return currentRoute.path;
  } else {
    return `${parentPath}/${currentRoute.path}`;
  }
}
function getOutlet(route) {
  return route.outlet || PRIMARY_OUTLET;
}
function sortByMatchingOutlets(routes2, outletName) {
  const sortedConfig = routes2.filter((r) => getOutlet(r) === outletName);
  sortedConfig.push(...routes2.filter((r) => getOutlet(r) !== outletName));
  return sortedConfig;
}
function getClosestRouteInjector(snapshot) {
  if (!snapshot) return null;
  if (snapshot.routeConfig?._injector) {
    return snapshot.routeConfig._injector;
  }
  for (let s = snapshot.parent; s; s = s.parent) {
    const route = s.routeConfig;
    if (route?._loadedInjector) return route._loadedInjector;
    if (route?._injector) return route._injector;
  }
  return null;
}
var OutletContext = class {
  rootInjector;
  outlet = null;
  route = null;
  children;
  attachRef = null;
  get injector() {
    return getClosestRouteInjector(this.route?.snapshot) ?? this.rootInjector;
  }
  constructor(rootInjector) {
    this.rootInjector = rootInjector;
    this.children = new ChildrenOutletContexts(this.rootInjector);
  }
};
var ChildrenOutletContexts = class _ChildrenOutletContexts {
  rootInjector;
  // contexts for child outlets, by name.
  contexts = /* @__PURE__ */ new Map();
  /** @nodoc */
  constructor(rootInjector) {
    this.rootInjector = rootInjector;
  }
  /** Called when a `RouterOutlet` directive is instantiated */
  onChildOutletCreated(childName, outlet) {
    const context2 = this.getOrCreateContext(childName);
    context2.outlet = outlet;
    this.contexts.set(childName, context2);
  }
  /**
   * Called when a `RouterOutlet` directive is destroyed.
   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
   * re-created later.
   */
  onChildOutletDestroyed(childName) {
    const context2 = this.getContext(childName);
    if (context2) {
      context2.outlet = null;
      context2.attachRef = null;
    }
  }
  /**
   * Called when the corresponding route is deactivated during navigation.
   * Because the component get destroyed, all children outlet are destroyed.
   */
  onOutletDeactivated() {
    const contexts = this.contexts;
    this.contexts = /* @__PURE__ */ new Map();
    return contexts;
  }
  onOutletReAttached(contexts) {
    this.contexts = contexts;
  }
  getOrCreateContext(childName) {
    let context2 = this.getContext(childName);
    if (!context2) {
      context2 = new OutletContext(this.rootInjector);
      this.contexts.set(childName, context2);
    }
    return context2;
  }
  getContext(childName) {
    return this.contexts.get(childName) || null;
  }
  static \u0275fac = function ChildrenOutletContexts_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ChildrenOutletContexts)(\u0275\u0275inject(EnvironmentInjector));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _ChildrenOutletContexts,
    factory: _ChildrenOutletContexts.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChildrenOutletContexts, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: EnvironmentInjector
  }], null);
})();
var Tree = class {
  /** @internal */
  _root;
  constructor(root) {
    this._root = root;
  }
  get root() {
    return this._root.value;
  }
  /**
   * @internal
   */
  parent(t) {
    const p = this.pathFromRoot(t);
    return p.length > 1 ? p[p.length - 2] : null;
  }
  /**
   * @internal
   */
  children(t) {
    const n = findNode(t, this._root);
    return n ? n.children.map((t2) => t2.value) : [];
  }
  /**
   * @internal
   */
  firstChild(t) {
    const n = findNode(t, this._root);
    return n && n.children.length > 0 ? n.children[0].value : null;
  }
  /**
   * @internal
   */
  siblings(t) {
    const p = findPath(t, this._root);
    if (p.length < 2) return [];
    const c = p[p.length - 2].children.map((c2) => c2.value);
    return c.filter((cc) => cc !== t);
  }
  /**
   * @internal
   */
  pathFromRoot(t) {
    return findPath(t, this._root).map((s) => s.value);
  }
};
function findNode(value, node) {
  if (value === node.value) return node;
  for (const child of node.children) {
    const node2 = findNode(value, child);
    if (node2) return node2;
  }
  return null;
}
function findPath(value, node) {
  if (value === node.value) return [node];
  for (const child of node.children) {
    const path = findPath(value, child);
    if (path.length) {
      path.unshift(node);
      return path;
    }
  }
  return [];
}
var TreeNode = class {
  value;
  children;
  constructor(value, children) {
    this.value = value;
    this.children = children;
  }
  toString() {
    return `TreeNode(${this.value})`;
  }
};
function nodeChildrenAsMap(node) {
  const map2 = {};
  if (node) {
    node.children.forEach((child) => map2[child.value.outlet] = child);
  }
  return map2;
}
var RouterState = class extends Tree {
  snapshot;
  /** @internal */
  constructor(root, snapshot) {
    super(root);
    this.snapshot = snapshot;
    setRouterState(this, root);
  }
  toString() {
    return this.snapshot.toString();
  }
};
function createEmptyState(rootComponent) {
  const snapshot = createEmptyStateSnapshot(rootComponent);
  const emptyUrl = new BehaviorSubject([new UrlSegment("", {})]);
  const emptyParams = new BehaviorSubject({});
  const emptyData = new BehaviorSubject({});
  const emptyQueryParams = new BehaviorSubject({});
  const fragment = new BehaviorSubject("");
  const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
  activated.snapshot = snapshot.root;
  return new RouterState(new TreeNode(activated, []), snapshot);
}
function createEmptyStateSnapshot(rootComponent) {
  const emptyParams = {};
  const emptyData = {};
  const emptyQueryParams = {};
  const fragment = "";
  const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, {});
  return new RouterStateSnapshot("", new TreeNode(activated, []));
}
var ActivatedRoute = class {
  urlSubject;
  paramsSubject;
  queryParamsSubject;
  fragmentSubject;
  dataSubject;
  outlet;
  component;
  /** The current snapshot of this route */
  snapshot;
  /** @internal */
  _futureSnapshot;
  /** @internal */
  _routerState;
  /** @internal */
  _paramMap;
  /** @internal */
  _queryParamMap;
  /** An Observable of the resolved route title */
  title;
  /** An observable of the URL segments matched by this route. */
  url;
  /** An observable of the matrix parameters scoped to this route. */
  params;
  /** An observable of the query parameters shared by all the routes. */
  queryParams;
  /** An observable of the URL fragment shared by all the routes. */
  fragment;
  /** An observable of the static and resolved data of this route. */
  data;
  /** @internal */
  constructor(urlSubject, paramsSubject, queryParamsSubject, fragmentSubject, dataSubject, outlet, component, futureSnapshot) {
    this.urlSubject = urlSubject;
    this.paramsSubject = paramsSubject;
    this.queryParamsSubject = queryParamsSubject;
    this.fragmentSubject = fragmentSubject;
    this.dataSubject = dataSubject;
    this.outlet = outlet;
    this.component = component;
    this._futureSnapshot = futureSnapshot;
    this.title = this.dataSubject?.pipe(map((d) => d[RouteTitleKey])) ?? of(void 0);
    this.url = urlSubject;
    this.params = paramsSubject;
    this.queryParams = queryParamsSubject;
    this.fragment = fragmentSubject;
    this.data = dataSubject;
  }
  /** The configuration used to match this route. */
  get routeConfig() {
    return this._futureSnapshot.routeConfig;
  }
  /** The root of the router state. */
  get root() {
    return this._routerState.root;
  }
  /** The parent of this route in the router state tree. */
  get parent() {
    return this._routerState.parent(this);
  }
  /** The first child of this route in the router state tree. */
  get firstChild() {
    return this._routerState.firstChild(this);
  }
  /** The children of this route in the router state tree. */
  get children() {
    return this._routerState.children(this);
  }
  /** The path from the root of the router state tree to this route. */
  get pathFromRoot() {
    return this._routerState.pathFromRoot(this);
  }
  /**
   * An Observable that contains a map of the required and optional parameters
   * specific to the route.
   * The map supports retrieving single and multiple values from the same parameter.
   */
  get paramMap() {
    this._paramMap ??= this.params.pipe(map((p) => convertToParamMap(p)));
    return this._paramMap;
  }
  /**
   * An Observable that contains a map of the query parameters available to all routes.
   * The map supports retrieving single and multiple values from the query parameter.
   */
  get queryParamMap() {
    this._queryParamMap ??= this.queryParams.pipe(map((p) => convertToParamMap(p)));
    return this._queryParamMap;
  }
  toString() {
    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;
  }
};
function getInherited(route, parent, paramsInheritanceStrategy = "emptyOnly") {
  let inherited;
  const {
    routeConfig
  } = route;
  if (parent !== null && (paramsInheritanceStrategy === "always" || // inherit parent data if route is empty path
  routeConfig?.path === "" || // inherit parent data if parent was componentless
  !parent.component && !parent.routeConfig?.loadComponent)) {
    inherited = {
      params: __spreadValues(__spreadValues({}, parent.params), route.params),
      data: __spreadValues(__spreadValues({}, parent.data), route.data),
      resolve: __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, route.data), parent.data), routeConfig?.data), route._resolvedData)
    };
  } else {
    inherited = {
      params: __spreadValues({}, route.params),
      data: __spreadValues({}, route.data),
      resolve: __spreadValues(__spreadValues({}, route.data), route._resolvedData ?? {})
    };
  }
  if (routeConfig && hasStaticTitle(routeConfig)) {
    inherited.resolve[RouteTitleKey] = routeConfig.title;
  }
  return inherited;
}
var ActivatedRouteSnapshot = class {
  url;
  params;
  queryParams;
  fragment;
  data;
  outlet;
  component;
  /** The configuration used to match this route **/
  routeConfig;
  /** @internal */
  _resolve;
  /** @internal */
  _resolvedData;
  /** @internal */
  _routerState;
  /** @internal */
  _paramMap;
  /** @internal */
  _queryParamMap;
  /** The resolved route title */
  get title() {
    return this.data?.[RouteTitleKey];
  }
  /** @internal */
  constructor(url, params, queryParams, fragment, data, outlet, component, routeConfig, resolve) {
    this.url = url;
    this.params = params;
    this.queryParams = queryParams;
    this.fragment = fragment;
    this.data = data;
    this.outlet = outlet;
    this.component = component;
    this.routeConfig = routeConfig;
    this._resolve = resolve;
  }
  /** The root of the router state */
  get root() {
    return this._routerState.root;
  }
  /** The parent of this route in the router state tree */
  get parent() {
    return this._routerState.parent(this);
  }
  /** The first child of this route in the router state tree */
  get firstChild() {
    return this._routerState.firstChild(this);
  }
  /** The children of this route in the router state tree */
  get children() {
    return this._routerState.children(this);
  }
  /** The path from the root of the router state tree to this route */
  get pathFromRoot() {
    return this._routerState.pathFromRoot(this);
  }
  get paramMap() {
    this._paramMap ??= convertToParamMap(this.params);
    return this._paramMap;
  }
  get queryParamMap() {
    this._queryParamMap ??= convertToParamMap(this.queryParams);
    return this._queryParamMap;
  }
  toString() {
    const url = this.url.map((segment) => segment.toString()).join("/");
    const matched = this.routeConfig ? this.routeConfig.path : "";
    return `Route(url:'${url}', path:'${matched}')`;
  }
};
var RouterStateSnapshot = class extends Tree {
  url;
  /** @internal */
  constructor(url, root) {
    super(root);
    this.url = url;
    setRouterState(this, root);
  }
  toString() {
    return serializeNode(this._root);
  }
};
function setRouterState(state, node) {
  node.value._routerState = state;
  node.children.forEach((c) => setRouterState(state, c));
}
function serializeNode(node) {
  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(", ")} } ` : "";
  return `${node.value}${c}`;
}
function advanceActivatedRoute(route) {
  if (route.snapshot) {
    const currentSnapshot = route.snapshot;
    const nextSnapshot = route._futureSnapshot;
    route.snapshot = nextSnapshot;
    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
      route.queryParamsSubject.next(nextSnapshot.queryParams);
    }
    if (currentSnapshot.fragment !== nextSnapshot.fragment) {
      route.fragmentSubject.next(nextSnapshot.fragment);
    }
    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
      route.paramsSubject.next(nextSnapshot.params);
    }
    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
      route.urlSubject.next(nextSnapshot.url);
    }
    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
      route.dataSubject.next(nextSnapshot.data);
    }
  } else {
    route.snapshot = route._futureSnapshot;
    route.dataSubject.next(route._futureSnapshot.data);
  }
}
function equalParamsAndUrlSegments(a, b) {
  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
  const parentsMismatch = !a.parent !== !b.parent;
  return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
}
function hasStaticTitle(config2) {
  return typeof config2.title === "string" || config2.title === null;
}
var ROUTER_OUTLET_DATA = new InjectionToken(ngDevMode ? "RouterOutlet data" : "");
var RouterOutlet = class _RouterOutlet {
  activated = null;
  /** @internal */
  get activatedComponentRef() {
    return this.activated;
  }
  _activatedRoute = null;
  /**
   * The name of the outlet
   *
   */
  name = PRIMARY_OUTLET;
  activateEvents = new EventEmitter();
  deactivateEvents = new EventEmitter();
  /**
   * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a
   * previously detached subtree.
   **/
  attachEvents = new EventEmitter();
  /**
   * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the
   * subtree.
   */
  detachEvents = new EventEmitter();
  /**
   * Data that will be provided to the child injector through the `ROUTER_OUTLET_DATA` token.
   *
   * When unset, the value of the token is `undefined` by default.
   */
  routerOutletData = input(void 0);
  parentContexts = inject(ChildrenOutletContexts);
  location = inject(ViewContainerRef);
  changeDetector = inject(ChangeDetectorRef);
  inputBinder = inject(INPUT_BINDER, {
    optional: true
  });
  /** @nodoc */
  supportsBindingToComponentInputs = true;
  /** @nodoc */
  ngOnChanges(changes) {
    if (changes["name"]) {
      const {
        firstChange,
        previousValue
      } = changes["name"];
      if (firstChange) {
        return;
      }
      if (this.isTrackedInParentContexts(previousValue)) {
        this.deactivate();
        this.parentContexts.onChildOutletDestroyed(previousValue);
      }
      this.initializeOutletWithName();
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.isTrackedInParentContexts(this.name)) {
      this.parentContexts.onChildOutletDestroyed(this.name);
    }
    this.inputBinder?.unsubscribeFromRouteData(this);
  }
  isTrackedInParentContexts(outletName) {
    return this.parentContexts.getContext(outletName)?.outlet === this;
  }
  /** @nodoc */
  ngOnInit() {
    this.initializeOutletWithName();
  }
  initializeOutletWithName() {
    this.parentContexts.onChildOutletCreated(this.name, this);
    if (this.activated) {
      return;
    }
    const context2 = this.parentContexts.getContext(this.name);
    if (context2?.route) {
      if (context2.attachRef) {
        this.attach(context2.attachRef, context2.route);
      } else {
        this.activateWith(context2.route, context2.injector);
      }
    }
  }
  get isActivated() {
    return !!this.activated;
  }
  /**
   * @returns The currently activated component instance.
   * @throws An error if the outlet is not activated.
   */
  get component() {
    if (!this.activated) throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    return this.activated.instance;
  }
  get activatedRoute() {
    if (!this.activated) throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    return this._activatedRoute;
  }
  get activatedRouteData() {
    if (this._activatedRoute) {
      return this._activatedRoute.snapshot.data;
    }
    return {};
  }
  /**
   * Called when the `RouteReuseStrategy` instructs to detach the subtree
   */
  detach() {
    if (!this.activated) throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    this.location.detach();
    const cmp = this.activated;
    this.activated = null;
    this._activatedRoute = null;
    this.detachEvents.emit(cmp.instance);
    return cmp;
  }
  /**
   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
   */
  attach(ref, activatedRoute) {
    this.activated = ref;
    this._activatedRoute = activatedRoute;
    this.location.insert(ref.hostView);
    this.inputBinder?.bindActivatedRouteToOutletComponent(this);
    this.attachEvents.emit(ref.instance);
  }
  deactivate() {
    if (this.activated) {
      const c = this.component;
      this.activated.destroy();
      this.activated = null;
      this._activatedRoute = null;
      this.deactivateEvents.emit(c);
    }
  }
  activateWith(activatedRoute, environmentInjector) {
    if (this.isActivated) {
      throw new RuntimeError(4013, (typeof ngDevMode === "undefined" || ngDevMode) && "Cannot activate an already activated outlet");
    }
    this._activatedRoute = activatedRoute;
    const location2 = this.location;
    const snapshot = activatedRoute.snapshot;
    const component = snapshot.component;
    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;
    const injector = new OutletInjector(activatedRoute, childContexts, location2.injector, this.routerOutletData);
    this.activated = location2.createComponent(component, {
      index: location2.length,
      injector,
      environmentInjector
    });
    this.changeDetector.markForCheck();
    this.inputBinder?.bindActivatedRouteToOutletComponent(this);
    this.activateEvents.emit(this.activated.instance);
  }
  static \u0275fac = function RouterOutlet_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterOutlet)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _RouterOutlet,
    selectors: [["router-outlet"]],
    inputs: {
      name: "name",
      routerOutletData: [1, "routerOutletData"]
    },
    outputs: {
      activateEvents: "activate",
      deactivateEvents: "deactivate",
      attachEvents: "attach",
      detachEvents: "detach"
    },
    exportAs: ["outlet"],
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterOutlet, [{
    type: Directive,
    args: [{
      selector: "router-outlet",
      exportAs: "outlet"
    }]
  }], null, {
    name: [{
      type: Input
    }],
    activateEvents: [{
      type: Output,
      args: ["activate"]
    }],
    deactivateEvents: [{
      type: Output,
      args: ["deactivate"]
    }],
    attachEvents: [{
      type: Output,
      args: ["attach"]
    }],
    detachEvents: [{
      type: Output,
      args: ["detach"]
    }]
  });
})();
var OutletInjector = class {
  route;
  childContexts;
  parent;
  outletData;
  constructor(route, childContexts, parent, outletData) {
    this.route = route;
    this.childContexts = childContexts;
    this.parent = parent;
    this.outletData = outletData;
  }
  get(token, notFoundValue) {
    if (token === ActivatedRoute) {
      return this.route;
    }
    if (token === ChildrenOutletContexts) {
      return this.childContexts;
    }
    if (token === ROUTER_OUTLET_DATA) {
      return this.outletData;
    }
    return this.parent.get(token, notFoundValue);
  }
};
var INPUT_BINDER = new InjectionToken("");
var RoutedComponentInputBinder = class _RoutedComponentInputBinder {
  outletDataSubscriptions = /* @__PURE__ */ new Map();
  bindActivatedRouteToOutletComponent(outlet) {
    this.unsubscribeFromRouteData(outlet);
    this.subscribeToRouteData(outlet);
  }
  unsubscribeFromRouteData(outlet) {
    this.outletDataSubscriptions.get(outlet)?.unsubscribe();
    this.outletDataSubscriptions.delete(outlet);
  }
  subscribeToRouteData(outlet) {
    const {
      activatedRoute
    } = outlet;
    const dataSubscription = combineLatest([activatedRoute.queryParams, activatedRoute.params, activatedRoute.data]).pipe(switchMap(([queryParams, params, data], index) => {
      data = __spreadValues(__spreadValues(__spreadValues({}, queryParams), params), data);
      if (index === 0) {
        return of(data);
      }
      return Promise.resolve(data);
    })).subscribe((data) => {
      if (!outlet.isActivated || !outlet.activatedComponentRef || outlet.activatedRoute !== activatedRoute || activatedRoute.component === null) {
        this.unsubscribeFromRouteData(outlet);
        return;
      }
      const mirror = reflectComponentType(activatedRoute.component);
      if (!mirror) {
        this.unsubscribeFromRouteData(outlet);
        return;
      }
      for (const {
        templateName
      } of mirror.inputs) {
        outlet.activatedComponentRef.setInput(templateName, data[templateName]);
      }
    });
    this.outletDataSubscriptions.set(outlet, dataSubscription);
  }
  static \u0275fac = function RoutedComponentInputBinder_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RoutedComponentInputBinder)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _RoutedComponentInputBinder,
    factory: _RoutedComponentInputBinder.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RoutedComponentInputBinder, [{
    type: Injectable
  }], null, null);
})();
function createRouterState(routeReuseStrategy, curr, prevState) {
  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : void 0);
  return new RouterState(root, curr);
}
function createNode(routeReuseStrategy, curr, prevState) {
  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
    const value = prevState.value;
    value._futureSnapshot = curr.value;
    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
    return new TreeNode(value, children);
  } else {
    if (routeReuseStrategy.shouldAttach(curr.value)) {
      const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);
      if (detachedRouteHandle !== null) {
        const tree2 = detachedRouteHandle.route;
        tree2.value._futureSnapshot = curr.value;
        tree2.children = curr.children.map((c) => createNode(routeReuseStrategy, c));
        return tree2;
      }
    }
    const value = createActivatedRoute(curr.value);
    const children = curr.children.map((c) => createNode(routeReuseStrategy, c));
    return new TreeNode(value, children);
  }
}
function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
  return curr.children.map((child) => {
    for (const p of prevState.children) {
      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {
        return createNode(routeReuseStrategy, child, p);
      }
    }
    return createNode(routeReuseStrategy, child);
  });
}
function createActivatedRoute(c) {
  return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);
}
var RedirectCommand = class {
  redirectTo;
  navigationBehaviorOptions;
  constructor(redirectTo, navigationBehaviorOptions) {
    this.redirectTo = redirectTo;
    this.navigationBehaviorOptions = navigationBehaviorOptions;
  }
};
var NAVIGATION_CANCELING_ERROR = "ngNavigationCancelingError";
function redirectingNavigationError(urlSerializer, redirect) {
  const {
    redirectTo,
    navigationBehaviorOptions
  } = isUrlTree(redirect) ? {
    redirectTo: redirect,
    navigationBehaviorOptions: void 0
  } : redirect;
  const error = navigationCancelingError(ngDevMode && `Redirecting to "${urlSerializer.serialize(redirectTo)}"`, NavigationCancellationCode.Redirect);
  error.url = redirectTo;
  error.navigationBehaviorOptions = navigationBehaviorOptions;
  return error;
}
function navigationCancelingError(message, code) {
  const error = new Error(`NavigationCancelingError: ${message || ""}`);
  error[NAVIGATION_CANCELING_ERROR] = true;
  error.cancellationCode = code;
  return error;
}
function isRedirectingNavigationCancelingError(error) {
  return isNavigationCancelingError(error) && isUrlTree(error.url);
}
function isNavigationCancelingError(error) {
  return !!error && error[NAVIGATION_CANCELING_ERROR];
}
var warnedAboutUnsupportedInputBinding = false;
var activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent, inputBindingEnabled) => map((t) => {
  new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent, inputBindingEnabled).activate(rootContexts);
  return t;
});
var ActivateRoutes = class {
  routeReuseStrategy;
  futureState;
  currState;
  forwardEvent;
  inputBindingEnabled;
  constructor(routeReuseStrategy, futureState, currState, forwardEvent, inputBindingEnabled) {
    this.routeReuseStrategy = routeReuseStrategy;
    this.futureState = futureState;
    this.currState = currState;
    this.forwardEvent = forwardEvent;
    this.inputBindingEnabled = inputBindingEnabled;
  }
  activate(parentContexts) {
    const futureRoot = this.futureState._root;
    const currRoot = this.currState ? this.currState._root : null;
    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
    advanceActivatedRoute(this.futureState.root);
    this.activateChildRoutes(futureRoot, currRoot, parentContexts);
  }
  // De-activate the child route that are not re-used for the future state
  deactivateChildRoutes(futureNode, currNode, contexts) {
    const children = nodeChildrenAsMap(currNode);
    futureNode.children.forEach((futureChild) => {
      const childOutletName = futureChild.value.outlet;
      this.deactivateRoutes(futureChild, children[childOutletName], contexts);
      delete children[childOutletName];
    });
    Object.values(children).forEach((v) => {
      this.deactivateRouteAndItsChildren(v, contexts);
    });
  }
  deactivateRoutes(futureNode, currNode, parentContext) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;
    if (future === curr) {
      if (future.component) {
        const context2 = parentContext.getContext(future.outlet);
        if (context2) {
          this.deactivateChildRoutes(futureNode, currNode, context2.children);
        }
      } else {
        this.deactivateChildRoutes(futureNode, currNode, parentContext);
      }
    } else {
      if (curr) {
        this.deactivateRouteAndItsChildren(currNode, parentContext);
      }
    }
  }
  deactivateRouteAndItsChildren(route, parentContexts) {
    if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
      this.detachAndStoreRouteSubtree(route, parentContexts);
    } else {
      this.deactivateRouteAndOutlet(route, parentContexts);
    }
  }
  detachAndStoreRouteSubtree(route, parentContexts) {
    const context2 = parentContexts.getContext(route.value.outlet);
    const contexts = context2 && route.value.component ? context2.children : parentContexts;
    const children = nodeChildrenAsMap(route);
    for (const treeNode of Object.values(children)) {
      this.deactivateRouteAndItsChildren(treeNode, contexts);
    }
    if (context2 && context2.outlet) {
      const componentRef = context2.outlet.detach();
      const contexts2 = context2.children.onOutletDeactivated();
      this.routeReuseStrategy.store(route.value.snapshot, {
        componentRef,
        route,
        contexts: contexts2
      });
    }
  }
  deactivateRouteAndOutlet(route, parentContexts) {
    const context2 = parentContexts.getContext(route.value.outlet);
    const contexts = context2 && route.value.component ? context2.children : parentContexts;
    const children = nodeChildrenAsMap(route);
    for (const treeNode of Object.values(children)) {
      this.deactivateRouteAndItsChildren(treeNode, contexts);
    }
    if (context2) {
      if (context2.outlet) {
        context2.outlet.deactivate();
        context2.children.onOutletDeactivated();
      }
      context2.attachRef = null;
      context2.route = null;
    }
  }
  activateChildRoutes(futureNode, currNode, contexts) {
    const children = nodeChildrenAsMap(currNode);
    futureNode.children.forEach((c) => {
      this.activateRoutes(c, children[c.value.outlet], contexts);
      this.forwardEvent(new ActivationEnd(c.value.snapshot));
    });
    if (futureNode.children.length) {
      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));
    }
  }
  activateRoutes(futureNode, currNode, parentContexts) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;
    advanceActivatedRoute(future);
    if (future === curr) {
      if (future.component) {
        const context2 = parentContexts.getOrCreateContext(future.outlet);
        this.activateChildRoutes(futureNode, currNode, context2.children);
      } else {
        this.activateChildRoutes(futureNode, currNode, parentContexts);
      }
    } else {
      if (future.component) {
        const context2 = parentContexts.getOrCreateContext(future.outlet);
        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
          const stored = this.routeReuseStrategy.retrieve(future.snapshot);
          this.routeReuseStrategy.store(future.snapshot, null);
          context2.children.onOutletReAttached(stored.contexts);
          context2.attachRef = stored.componentRef;
          context2.route = stored.route.value;
          if (context2.outlet) {
            context2.outlet.attach(stored.componentRef, stored.route.value);
          }
          advanceActivatedRoute(stored.route.value);
          this.activateChildRoutes(futureNode, null, context2.children);
        } else {
          context2.attachRef = null;
          context2.route = future;
          if (context2.outlet) {
            context2.outlet.activateWith(future, context2.injector);
          }
          this.activateChildRoutes(futureNode, null, context2.children);
        }
      } else {
        this.activateChildRoutes(futureNode, null, parentContexts);
      }
    }
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const context2 = parentContexts.getOrCreateContext(future.outlet);
      const outlet = context2.outlet;
      if (outlet && this.inputBindingEnabled && !outlet.supportsBindingToComponentInputs && !warnedAboutUnsupportedInputBinding) {
        console.warn(`'withComponentInputBinding' feature is enabled but this application is using an outlet that may not support binding to component inputs.`);
        warnedAboutUnsupportedInputBinding = true;
      }
    }
  }
};
var CanActivate = class {
  path;
  route;
  constructor(path) {
    this.path = path;
    this.route = this.path[this.path.length - 1];
  }
};
var CanDeactivate = class {
  component;
  route;
  constructor(component, route) {
    this.component = component;
    this.route = route;
  }
};
function getAllRouteGuards(future, curr, parentContexts) {
  const futureRoot = future._root;
  const currRoot = curr ? curr._root : null;
  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);
}
function getCanActivateChild(p) {
  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;
  if (!canActivateChild || canActivateChild.length === 0) return null;
  return {
    node: p,
    guards: canActivateChild
  };
}
function getTokenOrFunctionIdentity(tokenOrFunction, injector) {
  const NOT_FOUND3 = Symbol();
  const result = injector.get(tokenOrFunction, NOT_FOUND3);
  if (result === NOT_FOUND3) {
    if (typeof tokenOrFunction === "function" && !isInjectable(tokenOrFunction)) {
      return tokenOrFunction;
    } else {
      return injector.get(tokenOrFunction);
    }
  }
  return result;
}
function getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {
  canDeactivateChecks: [],
  canActivateChecks: []
}) {
  const prevChildren = nodeChildrenAsMap(currNode);
  futureNode.children.forEach((c) => {
    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);
    delete prevChildren[c.value.outlet];
  });
  Object.entries(prevChildren).forEach(([k, v]) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));
  return checks;
}
function getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {
  canDeactivateChecks: [],
  canActivateChecks: []
}) {
  const future = futureNode.value;
  const curr = currNode ? currNode.value : null;
  const context2 = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;
  if (curr && future.routeConfig === curr.routeConfig) {
    const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);
    if (shouldRun) {
      checks.canActivateChecks.push(new CanActivate(futurePath));
    } else {
      future.data = curr.data;
      future._resolvedData = curr._resolvedData;
    }
    if (future.component) {
      getChildRouteGuards(futureNode, currNode, context2 ? context2.children : null, futurePath, checks);
    } else {
      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);
    }
    if (shouldRun && context2 && context2.outlet && context2.outlet.isActivated) {
      checks.canDeactivateChecks.push(new CanDeactivate(context2.outlet.component, curr));
    }
  } else {
    if (curr) {
      deactivateRouteAndItsChildren(currNode, context2, checks);
    }
    checks.canActivateChecks.push(new CanActivate(futurePath));
    if (future.component) {
      getChildRouteGuards(futureNode, null, context2 ? context2.children : null, futurePath, checks);
    } else {
      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);
    }
  }
  return checks;
}
function shouldRunGuardsAndResolvers(curr, future, mode) {
  if (typeof mode === "function") {
    return mode(curr, future);
  }
  switch (mode) {
    case "pathParamsChange":
      return !equalPath(curr.url, future.url);
    case "pathParamsOrQueryParamsChange":
      return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);
    case "always":
      return true;
    case "paramsOrQueryParamsChange":
      return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);
    case "paramsChange":
    default:
      return !equalParamsAndUrlSegments(curr, future);
  }
}
function deactivateRouteAndItsChildren(route, context2, checks) {
  const children = nodeChildrenAsMap(route);
  const r = route.value;
  Object.entries(children).forEach(([childName, node]) => {
    if (!r.component) {
      deactivateRouteAndItsChildren(node, context2, checks);
    } else if (context2) {
      deactivateRouteAndItsChildren(node, context2.children.getContext(childName), checks);
    } else {
      deactivateRouteAndItsChildren(node, null, checks);
    }
  });
  if (!r.component) {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  } else if (context2 && context2.outlet && context2.outlet.isActivated) {
    checks.canDeactivateChecks.push(new CanDeactivate(context2.outlet.component, r));
  } else {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  }
}
function isFunction2(v) {
  return typeof v === "function";
}
function isBoolean(v) {
  return typeof v === "boolean";
}
function isCanLoad(guard) {
  return guard && isFunction2(guard.canLoad);
}
function isCanActivate(guard) {
  return guard && isFunction2(guard.canActivate);
}
function isCanActivateChild(guard) {
  return guard && isFunction2(guard.canActivateChild);
}
function isCanDeactivate(guard) {
  return guard && isFunction2(guard.canDeactivate);
}
function isCanMatch(guard) {
  return guard && isFunction2(guard.canMatch);
}
function isEmptyError(e2) {
  return e2 instanceof EmptyError || e2?.name === "EmptyError";
}
var INITIAL_VALUE = /* @__PURE__ */ Symbol("INITIAL_VALUE");
function prioritizedGuardValue() {
  return switchMap((obs) => {
    return combineLatest(obs.map((o) => o.pipe(take(1), startWith(INITIAL_VALUE)))).pipe(map((results) => {
      for (const result of results) {
        if (result === true) {
          continue;
        } else if (result === INITIAL_VALUE) {
          return INITIAL_VALUE;
        } else if (result === false || isRedirect(result)) {
          return result;
        }
      }
      return true;
    }), filter((item) => item !== INITIAL_VALUE), take(1));
  });
}
function isRedirect(val) {
  return isUrlTree(val) || val instanceof RedirectCommand;
}
function checkGuards(injector, forwardEvent) {
  return mergeMap((t) => {
    const {
      targetSnapshot,
      currentSnapshot,
      guards: {
        canActivateChecks,
        canDeactivateChecks
      }
    } = t;
    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {
      return of(__spreadProps(__spreadValues({}, t), {
        guardsResult: true
      }));
    }
    return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, injector).pipe(mergeMap((canDeactivate) => {
      return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, injector, forwardEvent) : of(canDeactivate);
    }), map((guardsResult) => __spreadProps(__spreadValues({}, t), {
      guardsResult
    })));
  });
}
function runCanDeactivateChecks(checks, futureRSS, currRSS, injector) {
  return from(checks).pipe(mergeMap((check) => runCanDeactivate(check.component, check.route, currRSS, futureRSS, injector)), first((result) => {
    return result !== true;
  }, true));
}
function runCanActivateChecks(futureSnapshot, checks, injector, forwardEvent) {
  return from(checks).pipe(concatMap((check) => {
    return concat(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, injector), runCanActivate(futureSnapshot, check.route, injector));
  }), first((result) => {
    return result !== true;
  }, true));
}
function fireActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ActivationStart(snapshot));
  }
  return of(true);
}
function fireChildActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ChildActivationStart(snapshot));
  }
  return of(true);
}
function runCanActivate(futureRSS, futureARS, injector) {
  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;
  if (!canActivate || canActivate.length === 0) return of(true);
  const canActivateObservables = canActivate.map((canActivate2) => {
    return defer(() => {
      const closestInjector = getClosestRouteInjector(futureARS) ?? injector;
      const guard = getTokenOrFunctionIdentity(canActivate2, closestInjector);
      const guardVal = isCanActivate(guard) ? guard.canActivate(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));
      return wrapIntoObservable(guardVal).pipe(first());
    });
  });
  return of(canActivateObservables).pipe(prioritizedGuardValue());
}
function runCanActivateChild(futureRSS, path, injector) {
  const futureARS = path[path.length - 1];
  const canActivateChildGuards = path.slice(0, path.length - 1).reverse().map((p) => getCanActivateChild(p)).filter((_) => _ !== null);
  const canActivateChildGuardsMapped = canActivateChildGuards.map((d) => {
    return defer(() => {
      const guardsMapped = d.guards.map((canActivateChild) => {
        const closestInjector = getClosestRouteInjector(d.node) ?? injector;
        const guard = getTokenOrFunctionIdentity(canActivateChild, closestInjector);
        const guardVal = isCanActivateChild(guard) ? guard.canActivateChild(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));
        return wrapIntoObservable(guardVal).pipe(first());
      });
      return of(guardsMapped).pipe(prioritizedGuardValue());
    });
  });
  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());
}
function runCanDeactivate(component, currARS, currRSS, futureRSS, injector) {
  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;
  if (!canDeactivate || canDeactivate.length === 0) return of(true);
  const canDeactivateObservables = canDeactivate.map((c) => {
    const closestInjector = getClosestRouteInjector(currARS) ?? injector;
    const guard = getTokenOrFunctionIdentity(c, closestInjector);
    const guardVal = isCanDeactivate(guard) ? guard.canDeactivate(component, currARS, currRSS, futureRSS) : runInInjectionContext(closestInjector, () => guard(component, currARS, currRSS, futureRSS));
    return wrapIntoObservable(guardVal).pipe(first());
  });
  return of(canDeactivateObservables).pipe(prioritizedGuardValue());
}
function runCanLoadGuards(injector, route, segments, urlSerializer) {
  const canLoad = route.canLoad;
  if (canLoad === void 0 || canLoad.length === 0) {
    return of(true);
  }
  const canLoadObservables = canLoad.map((injectionToken) => {
    const guard = getTokenOrFunctionIdentity(injectionToken, injector);
    const guardVal = isCanLoad(guard) ? guard.canLoad(route, segments) : runInInjectionContext(injector, () => guard(route, segments));
    return wrapIntoObservable(guardVal);
  });
  return of(canLoadObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));
}
function redirectIfUrlTree(urlSerializer) {
  return pipe(tap((result) => {
    if (typeof result === "boolean") return;
    throw redirectingNavigationError(urlSerializer, result);
  }), map((result) => result === true));
}
function runCanMatchGuards(injector, route, segments, urlSerializer) {
  const canMatch = route.canMatch;
  if (!canMatch || canMatch.length === 0) return of(true);
  const canMatchObservables = canMatch.map((injectionToken) => {
    const guard = getTokenOrFunctionIdentity(injectionToken, injector);
    const guardVal = isCanMatch(guard) ? guard.canMatch(route, segments) : runInInjectionContext(injector, () => guard(route, segments));
    return wrapIntoObservable(guardVal);
  });
  return of(canMatchObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));
}
var NoMatch = class {
  segmentGroup;
  constructor(segmentGroup) {
    this.segmentGroup = segmentGroup || null;
  }
};
var AbsoluteRedirect = class extends Error {
  urlTree;
  constructor(urlTree) {
    super();
    this.urlTree = urlTree;
  }
};
function noMatch$1(segmentGroup) {
  return throwError(new NoMatch(segmentGroup));
}
function namedOutletsRedirect(redirectTo) {
  return throwError(new RuntimeError(4e3, (typeof ngDevMode === "undefined" || ngDevMode) && `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`));
}
function canLoadFails(route) {
  return throwError(navigationCancelingError((typeof ngDevMode === "undefined" || ngDevMode) && `Cannot load children because the guard of the route "path: '${route.path}'" returned false`, NavigationCancellationCode.GuardRejected));
}
var ApplyRedirects = class {
  urlSerializer;
  urlTree;
  constructor(urlSerializer, urlTree) {
    this.urlSerializer = urlSerializer;
    this.urlTree = urlTree;
  }
  lineralizeSegments(route, urlTree) {
    let res = [];
    let c = urlTree.root;
    while (true) {
      res = res.concat(c.segments);
      if (c.numberOfChildren === 0) {
        return of(res);
      }
      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
        return namedOutletsRedirect(`${route.redirectTo}`);
      }
      c = c.children[PRIMARY_OUTLET];
    }
  }
  applyRedirectCommands(segments, redirectTo, posParams, currentSnapshot, injector) {
    if (typeof redirectTo !== "string") {
      const redirectToFn = redirectTo;
      const {
        queryParams,
        fragment,
        routeConfig,
        url,
        outlet,
        params,
        data,
        title
      } = currentSnapshot;
      const newRedirect = runInInjectionContext(injector, () => redirectToFn({
        params,
        data,
        queryParams,
        fragment,
        routeConfig,
        url,
        outlet,
        title
      }));
      if (newRedirect instanceof UrlTree) {
        throw new AbsoluteRedirect(newRedirect);
      }
      redirectTo = newRedirect;
    }
    const newTree = this.applyRedirectCreateUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
    if (redirectTo[0] === "/") {
      throw new AbsoluteRedirect(newTree);
    }
    return newTree;
  }
  applyRedirectCreateUrlTree(redirectTo, urlTree, segments, posParams) {
    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
    return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
  }
  createQueryParams(redirectToParams, actualParams) {
    const res = {};
    Object.entries(redirectToParams).forEach(([k, v]) => {
      const copySourceValue = typeof v === "string" && v[0] === ":";
      if (copySourceValue) {
        const sourceName = v.substring(1);
        res[k] = actualParams[sourceName];
      } else {
        res[k] = v;
      }
    });
    return res;
  }
  createSegmentGroup(redirectTo, group, segments, posParams) {
    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
    let children = {};
    Object.entries(group.children).forEach(([name, child]) => {
      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);
    });
    return new UrlSegmentGroup(updatedSegments, children);
  }
  createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {
    return redirectToSegments.map((s) => s.path[0] === ":" ? this.findPosParam(redirectTo, s, posParams) : this.findOrReturn(s, actualSegments));
  }
  findPosParam(redirectTo, redirectToUrlSegment, posParams) {
    const pos = posParams[redirectToUrlSegment.path.substring(1)];
    if (!pos) throw new RuntimeError(4001, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);
    return pos;
  }
  findOrReturn(redirectToUrlSegment, actualSegments) {
    let idx = 0;
    for (const s of actualSegments) {
      if (s.path === redirectToUrlSegment.path) {
        actualSegments.splice(idx);
        return s;
      }
      idx++;
    }
    return redirectToUrlSegment;
  }
};
var noMatch = {
  matched: false,
  consumedSegments: [],
  remainingSegments: [],
  parameters: {},
  positionalParamSegments: {}
};
function matchWithChecks(segmentGroup, route, segments, injector, urlSerializer) {
  const result = match(segmentGroup, route, segments);
  if (!result.matched) {
    return of(result);
  }
  injector = getOrCreateRouteInjectorIfNeeded(route, injector);
  return runCanMatchGuards(injector, route, segments, urlSerializer).pipe(map((v) => v === true ? result : __spreadValues({}, noMatch)));
}
function match(segmentGroup, route, segments) {
  if (route.path === "**") {
    return createWildcardMatchResult(segments);
  }
  if (route.path === "") {
    if (route.pathMatch === "full" && (segmentGroup.hasChildren() || segments.length > 0)) {
      return __spreadValues({}, noMatch);
    }
    return {
      matched: true,
      consumedSegments: [],
      remainingSegments: segments,
      parameters: {},
      positionalParamSegments: {}
    };
  }
  const matcher = route.matcher || defaultUrlMatcher;
  const res = matcher(segments, segmentGroup, route);
  if (!res) return __spreadValues({}, noMatch);
  const posParams = {};
  Object.entries(res.posParams ?? {}).forEach(([k, v]) => {
    posParams[k] = v.path;
  });
  const parameters = res.consumed.length > 0 ? __spreadValues(__spreadValues({}, posParams), res.consumed[res.consumed.length - 1].parameters) : posParams;
  return {
    matched: true,
    consumedSegments: res.consumed,
    remainingSegments: segments.slice(res.consumed.length),
    // TODO(atscott): investigate combining parameters and positionalParamSegments
    parameters,
    positionalParamSegments: res.posParams ?? {}
  };
}
function createWildcardMatchResult(segments) {
  return {
    matched: true,
    parameters: segments.length > 0 ? last3(segments).parameters : {},
    consumedSegments: segments,
    remainingSegments: [],
    positionalParamSegments: {}
  };
}
function split(segmentGroup, consumedSegments, slicedSegments, config2) {
  if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config2)) {
    const s2 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(config2, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
    return {
      segmentGroup: s2,
      slicedSegments: []
    };
  }
  if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config2)) {
    const s2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config2, segmentGroup.children));
    return {
      segmentGroup: s2,
      slicedSegments
    };
  }
  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
  return {
    segmentGroup: s,
    slicedSegments
  };
}
function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes2, children) {
  const res = {};
  for (const r of routes2) {
    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
      const s = new UrlSegmentGroup([], {});
      res[getOutlet(r)] = s;
    }
  }
  return __spreadValues(__spreadValues({}, children), res);
}
function createChildrenForEmptyPaths(routes2, primarySegment) {
  const res = {};
  res[PRIMARY_OUTLET] = primarySegment;
  for (const r of routes2) {
    if (r.path === "" && getOutlet(r) !== PRIMARY_OUTLET) {
      const s = new UrlSegmentGroup([], {});
      res[getOutlet(r)] = s;
    }
  }
  return res;
}
function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes2) {
  return routes2.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);
}
function containsEmptyPathMatches(segmentGroup, slicedSegments, routes2) {
  return routes2.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r));
}
function emptyPathMatch(segmentGroup, slicedSegments, r) {
  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === "full") {
    return false;
  }
  return r.path === "";
}
function noLeftoversInUrl(segmentGroup, segments, outlet) {
  return segments.length === 0 && !segmentGroup.children[outlet];
}
var NoLeftoversInUrl = class {
};
function recognize$1(injector, configLoader, rootComponentType, config2, urlTree, urlSerializer, paramsInheritanceStrategy = "emptyOnly") {
  return new Recognizer(injector, configLoader, rootComponentType, config2, urlTree, paramsInheritanceStrategy, urlSerializer).recognize();
}
var MAX_ALLOWED_REDIRECTS = 31;
var Recognizer = class {
  injector;
  configLoader;
  rootComponentType;
  config;
  urlTree;
  paramsInheritanceStrategy;
  urlSerializer;
  applyRedirects;
  absoluteRedirectCount = 0;
  allowRedirects = true;
  constructor(injector, configLoader, rootComponentType, config2, urlTree, paramsInheritanceStrategy, urlSerializer) {
    this.injector = injector;
    this.configLoader = configLoader;
    this.rootComponentType = rootComponentType;
    this.config = config2;
    this.urlTree = urlTree;
    this.paramsInheritanceStrategy = paramsInheritanceStrategy;
    this.urlSerializer = urlSerializer;
    this.applyRedirects = new ApplyRedirects(this.urlSerializer, this.urlTree);
  }
  noMatchError(e2) {
    return new RuntimeError(4002, typeof ngDevMode === "undefined" || ngDevMode ? `Cannot match any routes. URL Segment: '${e2.segmentGroup}'` : `'${e2.segmentGroup}'`);
  }
  recognize() {
    const rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;
    return this.match(rootSegmentGroup).pipe(map(({
      children,
      rootSnapshot
    }) => {
      const rootNode = new TreeNode(rootSnapshot, children);
      const routeState = new RouterStateSnapshot("", rootNode);
      const tree2 = createUrlTreeFromSnapshot(rootSnapshot, [], this.urlTree.queryParams, this.urlTree.fragment);
      tree2.queryParams = this.urlTree.queryParams;
      routeState.url = this.urlSerializer.serialize(tree2);
      return {
        state: routeState,
        tree: tree2
      };
    }));
  }
  match(rootSegmentGroup) {
    const rootSnapshot = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, Object.freeze({}), PRIMARY_OUTLET, this.rootComponentType, null, {});
    return this.processSegmentGroup(this.injector, this.config, rootSegmentGroup, PRIMARY_OUTLET, rootSnapshot).pipe(map((children) => {
      return {
        children,
        rootSnapshot
      };
    }), catchError((e2) => {
      if (e2 instanceof AbsoluteRedirect) {
        this.urlTree = e2.urlTree;
        return this.match(e2.urlTree.root);
      }
      if (e2 instanceof NoMatch) {
        throw this.noMatchError(e2);
      }
      throw e2;
    }));
  }
  processSegmentGroup(injector, config2, segmentGroup, outlet, parentRoute) {
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
      return this.processChildren(injector, config2, segmentGroup, parentRoute);
    }
    return this.processSegment(injector, config2, segmentGroup, segmentGroup.segments, outlet, true, parentRoute).pipe(map((child) => child instanceof TreeNode ? [child] : []));
  }
  /**
   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if
   * we cannot find a match for _any_ of the children.
   *
   * @param config - The `Routes` to match against
   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the
   *     config.
   */
  processChildren(injector, config2, segmentGroup, parentRoute) {
    const childOutlets = [];
    for (const child of Object.keys(segmentGroup.children)) {
      if (child === "primary") {
        childOutlets.unshift(child);
      } else {
        childOutlets.push(child);
      }
    }
    return from(childOutlets).pipe(concatMap((childOutlet) => {
      const child = segmentGroup.children[childOutlet];
      const sortedConfig = sortByMatchingOutlets(config2, childOutlet);
      return this.processSegmentGroup(injector, sortedConfig, child, childOutlet, parentRoute);
    }), scan((children, outletChildren) => {
      children.push(...outletChildren);
      return children;
    }), defaultIfEmpty(null), last2(), mergeMap((children) => {
      if (children === null) return noMatch$1(segmentGroup);
      const mergedChildren = mergeEmptyPathMatches(children);
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        checkOutletNameUniqueness(mergedChildren);
      }
      sortActivatedRouteSnapshots(mergedChildren);
      return of(mergedChildren);
    }));
  }
  processSegment(injector, routes2, segmentGroup, segments, outlet, allowRedirects, parentRoute) {
    return from(routes2).pipe(concatMap((r) => {
      return this.processSegmentAgainstRoute(r._injector ?? injector, routes2, r, segmentGroup, segments, outlet, allowRedirects, parentRoute).pipe(catchError((e2) => {
        if (e2 instanceof NoMatch) {
          return of(null);
        }
        throw e2;
      }));
    }), first((x) => !!x), catchError((e2) => {
      if (isEmptyError(e2)) {
        if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
          return of(new NoLeftoversInUrl());
        }
        return noMatch$1(segmentGroup);
      }
      throw e2;
    }));
  }
  processSegmentAgainstRoute(injector, routes2, route, rawSegment, segments, outlet, allowRedirects, parentRoute) {
    if (getOutlet(route) !== outlet && (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {
      return noMatch$1(rawSegment);
    }
    if (route.redirectTo === void 0) {
      return this.matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute);
    }
    if (this.allowRedirects && allowRedirects) {
      return this.expandSegmentAgainstRouteUsingRedirect(injector, rawSegment, routes2, route, segments, outlet, parentRoute);
    }
    return noMatch$1(rawSegment);
  }
  expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes2, route, segments, outlet, parentRoute) {
    const {
      matched,
      parameters,
      consumedSegments,
      positionalParamSegments,
      remainingSegments
    } = match(segmentGroup, route, segments);
    if (!matched) return noMatch$1(segmentGroup);
    if (typeof route.redirectTo === "string" && route.redirectTo[0] === "/") {
      this.absoluteRedirectCount++;
      if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {
        if (ngDevMode) {
          throw new RuntimeError(4016, `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.
This is currently a dev mode only error but will become a call stack size exceeded error in production in a future major version.`);
        }
        this.allowRedirects = false;
      }
    }
    const currentSnapshot = new ActivatedRouteSnapshot(segments, parameters, Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));
    const inherited = getInherited(currentSnapshot, parentRoute, this.paramsInheritanceStrategy);
    currentSnapshot.params = Object.freeze(inherited.params);
    currentSnapshot.data = Object.freeze(inherited.data);
    const newTree = this.applyRedirects.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments, currentSnapshot, injector);
    return this.applyRedirects.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments) => {
      return this.processSegment(injector, routes2, segmentGroup, newSegments.concat(remainingSegments), outlet, false, parentRoute);
    }));
  }
  matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute) {
    const matchResult = matchWithChecks(rawSegment, route, segments, injector, this.urlSerializer);
    if (route.path === "**") {
      rawSegment.children = {};
    }
    return matchResult.pipe(switchMap((result) => {
      if (!result.matched) {
        return noMatch$1(rawSegment);
      }
      injector = route._injector ?? injector;
      return this.getChildConfig(injector, route, segments).pipe(switchMap(({
        routes: childConfig
      }) => {
        const childInjector = route._loadedInjector ?? injector;
        const {
          parameters,
          consumedSegments,
          remainingSegments
        } = result;
        const snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));
        const inherited = getInherited(snapshot, parentRoute, this.paramsInheritanceStrategy);
        snapshot.params = Object.freeze(inherited.params);
        snapshot.data = Object.freeze(inherited.data);
        const {
          segmentGroup,
          slicedSegments
        } = split(rawSegment, consumedSegments, remainingSegments, childConfig);
        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
          return this.processChildren(childInjector, childConfig, segmentGroup, snapshot).pipe(map((children) => {
            return new TreeNode(snapshot, children);
          }));
        }
        if (childConfig.length === 0 && slicedSegments.length === 0) {
          return of(new TreeNode(snapshot, []));
        }
        const matchedOnOutlet = getOutlet(route) === outlet;
        return this.processSegment(childInjector, childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true, snapshot).pipe(map((child) => {
          return new TreeNode(snapshot, child instanceof TreeNode ? [child] : []);
        }));
      }));
    }));
  }
  getChildConfig(injector, route, segments) {
    if (route.children) {
      return of({
        routes: route.children,
        injector
      });
    }
    if (route.loadChildren) {
      if (route._loadedRoutes !== void 0) {
        return of({
          routes: route._loadedRoutes,
          injector: route._loadedInjector
        });
      }
      return runCanLoadGuards(injector, route, segments, this.urlSerializer).pipe(mergeMap((shouldLoadResult) => {
        if (shouldLoadResult) {
          return this.configLoader.loadChildren(injector, route).pipe(tap((cfg) => {
            route._loadedRoutes = cfg.routes;
            route._loadedInjector = cfg.injector;
          }));
        }
        return canLoadFails(route);
      }));
    }
    return of({
      routes: [],
      injector
    });
  }
};
function sortActivatedRouteSnapshots(nodes) {
  nodes.sort((a, b) => {
    if (a.value.outlet === PRIMARY_OUTLET) return -1;
    if (b.value.outlet === PRIMARY_OUTLET) return 1;
    return a.value.outlet.localeCompare(b.value.outlet);
  });
}
function hasEmptyPathConfig(node) {
  const config2 = node.value.routeConfig;
  return config2 && config2.path === "";
}
function mergeEmptyPathMatches(nodes) {
  const result = [];
  const mergedNodes = /* @__PURE__ */ new Set();
  for (const node of nodes) {
    if (!hasEmptyPathConfig(node)) {
      result.push(node);
      continue;
    }
    const duplicateEmptyPathNode = result.find((resultNode) => node.value.routeConfig === resultNode.value.routeConfig);
    if (duplicateEmptyPathNode !== void 0) {
      duplicateEmptyPathNode.children.push(...node.children);
      mergedNodes.add(duplicateEmptyPathNode);
    } else {
      result.push(node);
    }
  }
  for (const mergedNode of mergedNodes) {
    const mergedChildren = mergeEmptyPathMatches(mergedNode.children);
    result.push(new TreeNode(mergedNode.value, mergedChildren));
  }
  return result.filter((n) => !mergedNodes.has(n));
}
function checkOutletNameUniqueness(nodes) {
  const names = {};
  nodes.forEach((n) => {
    const routeWithSameOutletName = names[n.value.outlet];
    if (routeWithSameOutletName) {
      const p = routeWithSameOutletName.url.map((s) => s.toString()).join("/");
      const c = n.value.url.map((s) => s.toString()).join("/");
      throw new RuntimeError(4006, (typeof ngDevMode === "undefined" || ngDevMode) && `Two segments cannot have the same outlet name: '${p}' and '${c}'.`);
    }
    names[n.value.outlet] = n.value;
  });
}
function getData(route) {
  return route.data || {};
}
function getResolve(route) {
  return route.resolve || {};
}
function recognize(injector, configLoader, rootComponentType, config2, serializer, paramsInheritanceStrategy) {
  return mergeMap((t) => recognize$1(injector, configLoader, rootComponentType, config2, t.extractedUrl, serializer, paramsInheritanceStrategy).pipe(map(({
    state: targetSnapshot,
    tree: urlAfterRedirects
  }) => {
    return __spreadProps(__spreadValues({}, t), {
      targetSnapshot,
      urlAfterRedirects
    });
  })));
}
function resolveData(paramsInheritanceStrategy, injector) {
  return mergeMap((t) => {
    const {
      targetSnapshot,
      guards: {
        canActivateChecks
      }
    } = t;
    if (!canActivateChecks.length) {
      return of(t);
    }
    const routesWithResolversToRun = new Set(canActivateChecks.map((check) => check.route));
    const routesNeedingDataUpdates = /* @__PURE__ */ new Set();
    for (const route of routesWithResolversToRun) {
      if (routesNeedingDataUpdates.has(route)) {
        continue;
      }
      for (const newRoute of flattenRouteTree(route)) {
        routesNeedingDataUpdates.add(newRoute);
      }
    }
    let routesProcessed = 0;
    return from(routesNeedingDataUpdates).pipe(concatMap((route) => {
      if (routesWithResolversToRun.has(route)) {
        return runResolve(route, targetSnapshot, paramsInheritanceStrategy, injector);
      } else {
        route.data = getInherited(route, route.parent, paramsInheritanceStrategy).resolve;
        return of(void 0);
      }
    }), tap(() => routesProcessed++), takeLast(1), mergeMap((_) => routesProcessed === routesNeedingDataUpdates.size ? of(t) : EMPTY));
  });
}
function flattenRouteTree(route) {
  const descendants = route.children.map((child) => flattenRouteTree(child)).flat();
  return [route, ...descendants];
}
function runResolve(futureARS, futureRSS, paramsInheritanceStrategy, injector) {
  const config2 = futureARS.routeConfig;
  const resolve = futureARS._resolve;
  if (config2?.title !== void 0 && !hasStaticTitle(config2)) {
    resolve[RouteTitleKey] = config2.title;
  }
  return resolveNode(resolve, futureARS, futureRSS, injector).pipe(map((resolvedData) => {
    futureARS._resolvedData = resolvedData;
    futureARS.data = getInherited(futureARS, futureARS.parent, paramsInheritanceStrategy).resolve;
    return null;
  }));
}
function resolveNode(resolve, futureARS, futureRSS, injector) {
  const keys = getDataKeys(resolve);
  if (keys.length === 0) {
    return of({});
  }
  const data = {};
  return from(keys).pipe(mergeMap((key) => getResolver(resolve[key], futureARS, futureRSS, injector).pipe(first(), tap((value) => {
    if (value instanceof RedirectCommand) {
      throw redirectingNavigationError(new DefaultUrlSerializer(), value);
    }
    data[key] = value;
  }))), takeLast(1), map(() => data), catchError((e2) => isEmptyError(e2) ? EMPTY : throwError(e2)));
}
function getResolver(injectionToken, futureARS, futureRSS, injector) {
  const closestInjector = getClosestRouteInjector(futureARS) ?? injector;
  const resolver = getTokenOrFunctionIdentity(injectionToken, closestInjector);
  const resolverValue = resolver.resolve ? resolver.resolve(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => resolver(futureARS, futureRSS));
  return wrapIntoObservable(resolverValue);
}
function switchTap(next) {
  return switchMap((v) => {
    const nextResult = next(v);
    if (nextResult) {
      return from(nextResult).pipe(map(() => v));
    }
    return of(v);
  });
}
var TitleStrategy = class _TitleStrategy {
  /**
   * @returns The `title` of the deepest primary route.
   */
  buildTitle(snapshot) {
    let pageTitle;
    let route = snapshot.root;
    while (route !== void 0) {
      pageTitle = this.getResolvedTitleForRoute(route) ?? pageTitle;
      route = route.children.find((child) => child.outlet === PRIMARY_OUTLET);
    }
    return pageTitle;
  }
  /**
   * Given an `ActivatedRouteSnapshot`, returns the final value of the
   * `Route.title` property, which can either be a static string or a resolved value.
   */
  getResolvedTitleForRoute(snapshot) {
    return snapshot.data[RouteTitleKey];
  }
  static \u0275fac = function TitleStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _TitleStrategy)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _TitleStrategy,
    factory: () => (() => inject(DefaultTitleStrategy))(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TitleStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultTitleStrategy)
    }]
  }], null, null);
})();
var DefaultTitleStrategy = class _DefaultTitleStrategy extends TitleStrategy {
  title;
  constructor(title) {
    super();
    this.title = title;
  }
  /**
   * Sets the title of the browser to the given value.
   *
   * @param title The `pageTitle` from the deepest primary route.
   */
  updateTitle(snapshot) {
    const title = this.buildTitle(snapshot);
    if (title !== void 0) {
      this.title.setTitle(title);
    }
  }
  static \u0275fac = function DefaultTitleStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DefaultTitleStrategy)(\u0275\u0275inject(Title));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DefaultTitleStrategy,
    factory: _DefaultTitleStrategy.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultTitleStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Title
  }], null);
})();
var ROUTER_CONFIGURATION = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router config" : "", {
  providedIn: "root",
  factory: () => ({})
});
var \u0275EmptyOutletComponent = class _\u0275EmptyOutletComponent {
  static \u0275fac = function \u0275EmptyOutletComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _\u0275EmptyOutletComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
    type: _\u0275EmptyOutletComponent,
    selectors: [["ng-component"]],
    exportAs: ["emptyRouterOutlet"],
    decls: 1,
    vars: 0,
    template: function _EmptyOutletComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275element(0, "router-outlet");
      }
    },
    dependencies: [RouterOutlet],
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(\u0275EmptyOutletComponent, [{
    type: Component,
    args: [{
      template: `<router-outlet/>`,
      imports: [RouterOutlet],
      // Used to avoid component ID collisions with user code.
      exportAs: "emptyRouterOutlet"
    }]
  }], null, null);
})();
function standardizeConfig(r) {
  const children = r.children && r.children.map(standardizeConfig);
  const c = children ? __spreadProps(__spreadValues({}, r), {
    children
  }) : __spreadValues({}, r);
  if (!c.component && !c.loadComponent && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {
    c.component = \u0275EmptyOutletComponent;
  }
  return c;
}
var ROUTES = new InjectionToken(ngDevMode ? "ROUTES" : "");
var RouterConfigLoader = class _RouterConfigLoader {
  componentLoaders = /* @__PURE__ */ new WeakMap();
  childrenLoaders = /* @__PURE__ */ new WeakMap();
  onLoadStartListener;
  onLoadEndListener;
  compiler = inject(Compiler);
  loadComponent(route) {
    if (this.componentLoaders.get(route)) {
      return this.componentLoaders.get(route);
    } else if (route._loadedComponent) {
      return of(route._loadedComponent);
    }
    if (this.onLoadStartListener) {
      this.onLoadStartListener(route);
    }
    const loadRunner = wrapIntoObservable(route.loadComponent()).pipe(map(maybeUnwrapDefaultExport), tap((component) => {
      if (this.onLoadEndListener) {
        this.onLoadEndListener(route);
      }
      (typeof ngDevMode === "undefined" || ngDevMode) && assertStandalone(route.path ?? "", component);
      route._loadedComponent = component;
    }), finalize(() => {
      this.componentLoaders.delete(route);
    }));
    const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());
    this.componentLoaders.set(route, loader);
    return loader;
  }
  loadChildren(parentInjector, route) {
    if (this.childrenLoaders.get(route)) {
      return this.childrenLoaders.get(route);
    } else if (route._loadedRoutes) {
      return of({
        routes: route._loadedRoutes,
        injector: route._loadedInjector
      });
    }
    if (this.onLoadStartListener) {
      this.onLoadStartListener(route);
    }
    const moduleFactoryOrRoutes$ = loadChildren(route, this.compiler, parentInjector, this.onLoadEndListener);
    const loadRunner = moduleFactoryOrRoutes$.pipe(finalize(() => {
      this.childrenLoaders.delete(route);
    }));
    const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());
    this.childrenLoaders.set(route, loader);
    return loader;
  }
  static \u0275fac = function RouterConfigLoader_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterConfigLoader)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _RouterConfigLoader,
    factory: _RouterConfigLoader.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterConfigLoader, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
function loadChildren(route, compiler, parentInjector, onLoadEndListener) {
  return wrapIntoObservable(route.loadChildren()).pipe(map(maybeUnwrapDefaultExport), mergeMap((t) => {
    if (t instanceof NgModuleFactory$1 || Array.isArray(t)) {
      return of(t);
    } else {
      return from(compiler.compileModuleAsync(t));
    }
  }), map((factoryOrRoutes) => {
    if (onLoadEndListener) {
      onLoadEndListener(route);
    }
    let injector;
    let rawRoutes;
    let requireStandaloneComponents = false;
    if (Array.isArray(factoryOrRoutes)) {
      rawRoutes = factoryOrRoutes;
      requireStandaloneComponents = true;
    } else {
      injector = factoryOrRoutes.create(parentInjector).injector;
      rawRoutes = injector.get(ROUTES, [], {
        optional: true,
        self: true
      }).flat();
    }
    const routes2 = rawRoutes.map(standardizeConfig);
    (typeof ngDevMode === "undefined" || ngDevMode) && validateConfig(routes2, route.path, requireStandaloneComponents);
    return {
      routes: routes2,
      injector
    };
  }));
}
function isWrappedDefaultExport(value) {
  return value && typeof value === "object" && "default" in value;
}
function maybeUnwrapDefaultExport(input2) {
  return isWrappedDefaultExport(input2) ? input2["default"] : input2;
}
var UrlHandlingStrategy = class _UrlHandlingStrategy {
  static \u0275fac = function UrlHandlingStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UrlHandlingStrategy)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _UrlHandlingStrategy,
    factory: () => (() => inject(DefaultUrlHandlingStrategy))(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UrlHandlingStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultUrlHandlingStrategy)
    }]
  }], null, null);
})();
var DefaultUrlHandlingStrategy = class _DefaultUrlHandlingStrategy {
  shouldProcessUrl(url) {
    return true;
  }
  extract(url) {
    return url;
  }
  merge(newUrlPart, wholeUrl) {
    return newUrlPart;
  }
  static \u0275fac = function DefaultUrlHandlingStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DefaultUrlHandlingStrategy)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DefaultUrlHandlingStrategy,
    factory: _DefaultUrlHandlingStrategy.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultUrlHandlingStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var CREATE_VIEW_TRANSITION = new InjectionToken(ngDevMode ? "view transition helper" : "");
var VIEW_TRANSITION_OPTIONS = new InjectionToken(ngDevMode ? "view transition options" : "");
function createViewTransition(injector, from2, to) {
  const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);
  const document2 = injector.get(DOCUMENT2);
  return injector.get(NgZone).runOutsideAngular(() => {
    if (!document2.startViewTransition || transitionOptions.skipNextTransition) {
      transitionOptions.skipNextTransition = false;
      return new Promise((resolve) => setTimeout(resolve));
    }
    let resolveViewTransitionStarted;
    const viewTransitionStarted = new Promise((resolve) => {
      resolveViewTransitionStarted = resolve;
    });
    const transition = document2.startViewTransition(() => {
      resolveViewTransitionStarted();
      return createRenderPromise(injector);
    });
    const {
      onViewTransitionCreated
    } = transitionOptions;
    if (onViewTransitionCreated) {
      runInInjectionContext(injector, () => onViewTransitionCreated({
        transition,
        from: from2,
        to
      }));
    }
    return viewTransitionStarted;
  });
}
function createRenderPromise(injector) {
  return new Promise((resolve) => {
    afterNextRender({
      read: () => setTimeout(resolve)
    }, {
      injector
    });
  });
}
var NAVIGATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "navigation error handler" : "");
var NavigationTransitions = class _NavigationTransitions {
  currentNavigation = null;
  currentTransition = null;
  lastSuccessfulNavigation = null;
  /**
   * These events are used to communicate back to the Router about the state of the transition. The
   * Router wants to respond to these events in various ways. Because the `NavigationTransition`
   * class is not public, this event subject is not publicly exposed.
   */
  events = new Subject();
  /**
   * Used to abort the current transition with an error.
   */
  transitionAbortSubject = new Subject();
  configLoader = inject(RouterConfigLoader);
  environmentInjector = inject(EnvironmentInjector);
  destroyRef = inject(DestroyRef);
  urlSerializer = inject(UrlSerializer);
  rootContexts = inject(ChildrenOutletContexts);
  location = inject(Location);
  inputBindingEnabled = inject(INPUT_BINDER, {
    optional: true
  }) !== null;
  titleStrategy = inject(TitleStrategy);
  options = inject(ROUTER_CONFIGURATION, {
    optional: true
  }) || {};
  paramsInheritanceStrategy = this.options.paramsInheritanceStrategy || "emptyOnly";
  urlHandlingStrategy = inject(UrlHandlingStrategy);
  createViewTransition = inject(CREATE_VIEW_TRANSITION, {
    optional: true
  });
  navigationErrorHandler = inject(NAVIGATION_ERROR_HANDLER, {
    optional: true
  });
  navigationId = 0;
  get hasRequestedNavigation() {
    return this.navigationId !== 0;
  }
  transitions;
  /**
   * Hook that enables you to pause navigation after the preactivation phase.
   * Used by `RouterModule`.
   *
   * @internal
   */
  afterPreactivation = () => of(void 0);
  /** @internal */
  rootComponentType = null;
  destroyed = false;
  constructor() {
    const onLoadStart = (r) => this.events.next(new RouteConfigLoadStart(r));
    const onLoadEnd = (r) => this.events.next(new RouteConfigLoadEnd(r));
    this.configLoader.onLoadEndListener = onLoadEnd;
    this.configLoader.onLoadStartListener = onLoadStart;
    this.destroyRef.onDestroy(() => {
      this.destroyed = true;
    });
  }
  complete() {
    this.transitions?.complete();
  }
  handleNavigationRequest(request) {
    const id = ++this.navigationId;
    this.transitions?.next(__spreadProps(__spreadValues({}, request), {
      extractedUrl: this.urlHandlingStrategy.extract(request.rawUrl),
      targetSnapshot: null,
      targetRouterState: null,
      guards: {
        canActivateChecks: [],
        canDeactivateChecks: []
      },
      guardsResult: null,
      id
    }));
  }
  setupNavigations(router) {
    this.transitions = new BehaviorSubject(null);
    return this.transitions.pipe(
      filter((t) => t !== null),
      // Using switchMap so we cancel executing navigations when a new one comes in
      switchMap((overallTransitionState) => {
        let completed = false;
        let errored = false;
        return of(overallTransitionState).pipe(
          switchMap((t) => {
            if (this.navigationId > overallTransitionState.id) {
              const cancellationReason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : "";
              this.cancelNavigationTransition(overallTransitionState, cancellationReason, NavigationCancellationCode.SupersededByNewNavigation);
              return EMPTY;
            }
            this.currentTransition = overallTransitionState;
            this.currentNavigation = {
              id: t.id,
              initialUrl: t.rawUrl,
              extractedUrl: t.extractedUrl,
              targetBrowserUrl: typeof t.extras.browserUrl === "string" ? this.urlSerializer.parse(t.extras.browserUrl) : t.extras.browserUrl,
              trigger: t.source,
              extras: t.extras,
              previousNavigation: !this.lastSuccessfulNavigation ? null : __spreadProps(__spreadValues({}, this.lastSuccessfulNavigation), {
                previousNavigation: null
              })
            };
            const urlTransition = !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();
            const onSameUrlNavigation = t.extras.onSameUrlNavigation ?? router.onSameUrlNavigation;
            if (!urlTransition && onSameUrlNavigation !== "reload") {
              const reason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.` : "";
              this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.rawUrl), reason, NavigationSkippedCode.IgnoredSameUrlNavigation));
              t.resolve(false);
              return EMPTY;
            }
            if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {
              return of(t).pipe(
                // Fire NavigationStart event
                switchMap((t2) => {
                  this.events.next(new NavigationStart(t2.id, this.urlSerializer.serialize(t2.extractedUrl), t2.source, t2.restoredState));
                  if (t2.id !== this.navigationId) {
                    return EMPTY;
                  }
                  return Promise.resolve(t2);
                }),
                // Recognize
                recognize(this.environmentInjector, this.configLoader, this.rootComponentType, router.config, this.urlSerializer, this.paramsInheritanceStrategy),
                // Update URL if in `eager` update mode
                tap((t2) => {
                  overallTransitionState.targetSnapshot = t2.targetSnapshot;
                  overallTransitionState.urlAfterRedirects = t2.urlAfterRedirects;
                  this.currentNavigation = __spreadProps(__spreadValues({}, this.currentNavigation), {
                    finalUrl: t2.urlAfterRedirects
                  });
                  const routesRecognized = new RoutesRecognized(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                  this.events.next(routesRecognized);
                })
              );
            } else if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)) {
              const {
                id,
                extractedUrl,
                source,
                restoredState,
                extras
              } = t;
              const navStart = new NavigationStart(id, this.urlSerializer.serialize(extractedUrl), source, restoredState);
              this.events.next(navStart);
              const targetSnapshot = createEmptyState(this.rootComponentType).snapshot;
              this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
                targetSnapshot,
                urlAfterRedirects: extractedUrl,
                extras: __spreadProps(__spreadValues({}, extras), {
                  skipLocationChange: false,
                  replaceUrl: false
                })
              });
              this.currentNavigation.finalUrl = extractedUrl;
              return of(overallTransitionState);
            } else {
              const reason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation was ignored because the UrlHandlingStrategy indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.` : "";
              this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, NavigationSkippedCode.IgnoredByUrlHandlingStrategy));
              t.resolve(false);
              return EMPTY;
            }
          }),
          // --- GUARDS ---
          tap((t) => {
            const guardsStart = new GuardsCheckStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);
            this.events.next(guardsStart);
          }),
          map((t) => {
            this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
              guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts)
            });
            return overallTransitionState;
          }),
          checkGuards(this.environmentInjector, (evt) => this.events.next(evt)),
          tap((t) => {
            overallTransitionState.guardsResult = t.guardsResult;
            if (t.guardsResult && typeof t.guardsResult !== "boolean") {
              throw redirectingNavigationError(this.urlSerializer, t.guardsResult);
            }
            const guardsEnd = new GuardsCheckEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);
            this.events.next(guardsEnd);
          }),
          filter((t) => {
            if (!t.guardsResult) {
              this.cancelNavigationTransition(t, "", NavigationCancellationCode.GuardRejected);
              return false;
            }
            return true;
          }),
          // --- RESOLVE ---
          switchTap((t) => {
            if (t.guards.canActivateChecks.length === 0) {
              return void 0;
            }
            return of(t).pipe(tap((t2) => {
              const resolveStart = new ResolveStart(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
              this.events.next(resolveStart);
            }), switchMap((t2) => {
              let dataResolved = false;
              return of(t2).pipe(resolveData(this.paramsInheritanceStrategy, this.environmentInjector), tap({
                next: () => dataResolved = true,
                complete: () => {
                  if (!dataResolved) {
                    this.cancelNavigationTransition(t2, typeof ngDevMode === "undefined" || ngDevMode ? `At least one route resolver didn't emit any value.` : "", NavigationCancellationCode.NoDataFromResolver);
                  }
                }
              }));
            }), tap((t2) => {
              const resolveEnd = new ResolveEnd(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
              this.events.next(resolveEnd);
            }));
          }),
          // --- LOAD COMPONENTS ---
          switchTap((t) => {
            const loadComponents = (route) => {
              const loaders = [];
              if (route.routeConfig?.loadComponent && !route.routeConfig._loadedComponent) {
                loaders.push(this.configLoader.loadComponent(route.routeConfig).pipe(tap((loadedComponent) => {
                  route.component = loadedComponent;
                }), map(() => void 0)));
              }
              for (const child of route.children) {
                loaders.push(...loadComponents(child));
              }
              return loaders;
            };
            return combineLatest(loadComponents(t.targetSnapshot.root)).pipe(defaultIfEmpty(null), take(1));
          }),
          switchTap(() => this.afterPreactivation()),
          switchMap(() => {
            const {
              currentSnapshot,
              targetSnapshot
            } = overallTransitionState;
            const viewTransitionStarted = this.createViewTransition?.(this.environmentInjector, currentSnapshot.root, targetSnapshot.root);
            return viewTransitionStarted ? from(viewTransitionStarted).pipe(map(() => overallTransitionState)) : of(overallTransitionState);
          }),
          map((t) => {
            const targetRouterState = createRouterState(router.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);
            this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
              targetRouterState
            });
            this.currentNavigation.targetRouterState = targetRouterState;
            return overallTransitionState;
          }),
          tap(() => {
            this.events.next(new BeforeActivateRoutes());
          }),
          activateRoutes(this.rootContexts, router.routeReuseStrategy, (evt) => this.events.next(evt), this.inputBindingEnabled),
          // Ensure that if some observable used to drive the transition doesn't
          // complete, the navigation still finalizes This should never happen, but
          // this is done as a safety measure to avoid surfacing this error (#49567).
          take(1),
          tap({
            next: (t) => {
              completed = true;
              this.lastSuccessfulNavigation = this.currentNavigation;
              this.events.next(new NavigationEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects)));
              this.titleStrategy?.updateTitle(t.targetRouterState.snapshot);
              t.resolve(true);
            },
            complete: () => {
              completed = true;
            }
          }),
          // There used to be a lot more logic happening directly within the
          // transition Observable. Some of this logic has been refactored out to
          // other places but there may still be errors that happen there. This gives
          // us a way to cancel the transition from the outside. This may also be
          // required in the future to support something like the abort signal of the
          // Navigation API where the navigation gets aborted from outside the
          // transition.
          takeUntil(this.transitionAbortSubject.pipe(tap((err) => {
            throw err;
          }))),
          finalize(() => {
            if (!completed && !errored) {
              const cancelationReason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : "";
              this.cancelNavigationTransition(overallTransitionState, cancelationReason, NavigationCancellationCode.SupersededByNewNavigation);
            }
            if (this.currentTransition?.id === overallTransitionState.id) {
              this.currentNavigation = null;
              this.currentTransition = null;
            }
          }),
          catchError((e2) => {
            if (this.destroyed) {
              overallTransitionState.resolve(false);
              return EMPTY;
            }
            errored = true;
            if (isNavigationCancelingError(e2)) {
              this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e2.message, e2.cancellationCode));
              if (!isRedirectingNavigationCancelingError(e2)) {
                overallTransitionState.resolve(false);
              } else {
                this.events.next(new RedirectRequest(e2.url, e2.navigationBehaviorOptions));
              }
            } else {
              const navigationError = new NavigationError(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e2, overallTransitionState.targetSnapshot ?? void 0);
              try {
                const navigationErrorHandlerResult = runInInjectionContext(this.environmentInjector, () => this.navigationErrorHandler?.(navigationError));
                if (navigationErrorHandlerResult instanceof RedirectCommand) {
                  const {
                    message,
                    cancellationCode
                  } = redirectingNavigationError(this.urlSerializer, navigationErrorHandlerResult);
                  this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), message, cancellationCode));
                  this.events.next(new RedirectRequest(navigationErrorHandlerResult.redirectTo, navigationErrorHandlerResult.navigationBehaviorOptions));
                } else {
                  this.events.next(navigationError);
                  throw e2;
                }
              } catch (ee) {
                if (this.options.resolveNavigationPromiseOnError) {
                  overallTransitionState.resolve(false);
                } else {
                  overallTransitionState.reject(ee);
                }
              }
            }
            return EMPTY;
          })
        );
      })
    );
  }
  cancelNavigationTransition(t, reason, code) {
    const navCancel = new NavigationCancel(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, code);
    this.events.next(navCancel);
    t.resolve(false);
  }
  /**
   * @returns Whether we're navigating to somewhere that is not what the Router is
   * currently set to.
   */
  isUpdatingInternalState() {
    return this.currentTransition?.extractedUrl.toString() !== this.currentTransition?.currentUrlTree.toString();
  }
  /**
   * @returns Whether we're updating the browser URL to something new (navigation is going
   * to somewhere not displayed in the URL bar and we will update the URL
   * bar if navigation succeeds).
   */
  isUpdatedBrowserUrl() {
    const currentBrowserUrl = this.urlHandlingStrategy.extract(this.urlSerializer.parse(this.location.path(true)));
    const targetBrowserUrl = this.currentNavigation?.targetBrowserUrl ?? this.currentNavigation?.extractedUrl;
    return currentBrowserUrl.toString() !== targetBrowserUrl?.toString() && !this.currentNavigation?.extras.skipLocationChange;
  }
  static \u0275fac = function NavigationTransitions_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NavigationTransitions)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _NavigationTransitions,
    factory: _NavigationTransitions.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NavigationTransitions, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function isBrowserTriggeredNavigation(source) {
  return source !== IMPERATIVE_NAVIGATION;
}
var RouteReuseStrategy = class _RouteReuseStrategy {
  static \u0275fac = function RouteReuseStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouteReuseStrategy)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _RouteReuseStrategy,
    factory: () => (() => inject(DefaultRouteReuseStrategy))(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouteReuseStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultRouteReuseStrategy)
    }]
  }], null, null);
})();
var BaseRouteReuseStrategy = class {
  /**
   * Whether the given route should detach for later reuse.
   * Always returns false for `BaseRouteReuseStrategy`.
   * */
  shouldDetach(route) {
    return false;
  }
  /**
   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.
   */
  store(route, detachedTree) {
  }
  /** Returns `false`, meaning the route (and its subtree) is never reattached */
  shouldAttach(route) {
    return false;
  }
  /** Returns `null` because this strategy does not store routes for later re-use. */
  retrieve(route) {
    return null;
  }
  /**
   * Determines if a route should be reused.
   * This strategy returns `true` when the future route config and current route config are
   * identical.
   */
  shouldReuseRoute(future, curr) {
    return future.routeConfig === curr.routeConfig;
  }
};
var DefaultRouteReuseStrategy = class _DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275DefaultRouteReuseStrategy_BaseFactory;
    return function DefaultRouteReuseStrategy_Factory(__ngFactoryType__) {
      return (\u0275DefaultRouteReuseStrategy_BaseFactory || (\u0275DefaultRouteReuseStrategy_BaseFactory = \u0275\u0275getInheritedFactory(_DefaultRouteReuseStrategy)))(__ngFactoryType__ || _DefaultRouteReuseStrategy);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DefaultRouteReuseStrategy,
    factory: _DefaultRouteReuseStrategy.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultRouteReuseStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var StateManager = class _StateManager {
  urlSerializer = inject(UrlSerializer);
  options = inject(ROUTER_CONFIGURATION, {
    optional: true
  }) || {};
  canceledNavigationResolution = this.options.canceledNavigationResolution || "replace";
  location = inject(Location);
  urlHandlingStrategy = inject(UrlHandlingStrategy);
  urlUpdateStrategy = this.options.urlUpdateStrategy || "deferred";
  currentUrlTree = new UrlTree();
  /**
   * Returns the currently activated `UrlTree`.
   *
   * This `UrlTree` shows only URLs that the `Router` is configured to handle (through
   * `UrlHandlingStrategy`).
   *
   * The value is set after finding the route config tree to activate but before activating the
   * route.
   */
  getCurrentUrlTree() {
    return this.currentUrlTree;
  }
  rawUrlTree = this.currentUrlTree;
  /**
   * Returns a `UrlTree` that is represents what the browser is actually showing.
   *
   * In the life of a navigation transition:
   * 1. When a navigation begins, the raw `UrlTree` is updated to the full URL that's being
   * navigated to.
   * 2. During a navigation, redirects are applied, which might only apply to _part_ of the URL (due
   * to `UrlHandlingStrategy`).
   * 3. Just before activation, the raw `UrlTree` is updated to include the redirects on top of the
   * original raw URL.
   *
   * Note that this is _only_ here to support `UrlHandlingStrategy.extract` and
   * `UrlHandlingStrategy.shouldProcessUrl`. Without those APIs, the current `UrlTree` would not
   * deviated from the raw `UrlTree`.
   *
   * For `extract`, a raw `UrlTree` is needed because `extract` may only return part
   * of the navigation URL. Thus, the current `UrlTree` may only represent _part_ of the browser
   * URL. When a navigation gets cancelled and the router needs to reset the URL or a new navigation
   * occurs, it needs to know the _whole_ browser URL, not just the part handled by
   * `UrlHandlingStrategy`.
   * For `shouldProcessUrl`, when the return is `false`, the router ignores the navigation but
   * still updates the raw `UrlTree` with the assumption that the navigation was caused by the
   * location change listener due to a URL update by the AngularJS router. In this case, the router
   * still need to know what the browser's URL is for future navigations.
   */
  getRawUrlTree() {
    return this.rawUrlTree;
  }
  createBrowserPath({
    finalUrl,
    initialUrl,
    targetBrowserUrl
  }) {
    const rawUrl = finalUrl !== void 0 ? this.urlHandlingStrategy.merge(finalUrl, initialUrl) : initialUrl;
    const url = targetBrowserUrl ?? rawUrl;
    const path = url instanceof UrlTree ? this.urlSerializer.serialize(url) : url;
    return path;
  }
  commitTransition({
    targetRouterState,
    finalUrl,
    initialUrl
  }) {
    if (finalUrl && targetRouterState) {
      this.currentUrlTree = finalUrl;
      this.rawUrlTree = this.urlHandlingStrategy.merge(finalUrl, initialUrl);
      this.routerState = targetRouterState;
    } else {
      this.rawUrlTree = initialUrl;
    }
  }
  routerState = createEmptyState(null);
  /** Returns the current RouterState. */
  getRouterState() {
    return this.routerState;
  }
  stateMemento = this.createStateMemento();
  updateStateMemento() {
    this.stateMemento = this.createStateMemento();
  }
  createStateMemento() {
    return {
      rawUrlTree: this.rawUrlTree,
      currentUrlTree: this.currentUrlTree,
      routerState: this.routerState
    };
  }
  resetInternalState({
    finalUrl
  }) {
    this.routerState = this.stateMemento.routerState;
    this.currentUrlTree = this.stateMemento.currentUrlTree;
    this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, finalUrl ?? this.rawUrlTree);
  }
  static \u0275fac = function StateManager_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _StateManager)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _StateManager,
    factory: () => (() => inject(HistoryStateManager))(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StateManager, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(HistoryStateManager)
    }]
  }], null, null);
})();
var HistoryStateManager = class _HistoryStateManager extends StateManager {
  /**
   * The id of the currently active page in the router.
   * Updated to the transition's target id on a successful navigation.
   *
   * This is used to track what page the router last activated. When an attempted navigation fails,
   * the router can then use this to compute how to restore the state back to the previously active
   * page.
   */
  currentPageId = 0;
  lastSuccessfulId = -1;
  restoredState() {
    return this.location.getState();
  }
  /**
   * The ɵrouterPageId of whatever page is currently active in the browser history. This is
   * important for computing the target page id for new navigations because we need to ensure each
   * page id in the browser history is 1 more than the previous entry.
   */
  get browserPageId() {
    if (this.canceledNavigationResolution !== "computed") {
      return this.currentPageId;
    }
    return this.restoredState()?.\u0275routerPageId ?? this.currentPageId;
  }
  registerNonRouterCurrentEntryChangeListener(listener) {
    return this.location.subscribe((event) => {
      if (event["type"] === "popstate") {
        setTimeout(() => {
          listener(event["url"], event.state, "popstate");
        });
      }
    });
  }
  handleRouterEvent(e2, currentTransition) {
    if (e2 instanceof NavigationStart) {
      this.updateStateMemento();
    } else if (e2 instanceof NavigationSkipped) {
      this.commitTransition(currentTransition);
    } else if (e2 instanceof RoutesRecognized) {
      if (this.urlUpdateStrategy === "eager") {
        if (!currentTransition.extras.skipLocationChange) {
          this.setBrowserUrl(this.createBrowserPath(currentTransition), currentTransition);
        }
      }
    } else if (e2 instanceof BeforeActivateRoutes) {
      this.commitTransition(currentTransition);
      if (this.urlUpdateStrategy === "deferred" && !currentTransition.extras.skipLocationChange) {
        this.setBrowserUrl(this.createBrowserPath(currentTransition), currentTransition);
      }
    } else if (e2 instanceof NavigationCancel && (e2.code === NavigationCancellationCode.GuardRejected || e2.code === NavigationCancellationCode.NoDataFromResolver)) {
      this.restoreHistory(currentTransition);
    } else if (e2 instanceof NavigationError) {
      this.restoreHistory(currentTransition, true);
    } else if (e2 instanceof NavigationEnd) {
      this.lastSuccessfulId = e2.id;
      this.currentPageId = this.browserPageId;
    }
  }
  setBrowserUrl(path, {
    extras,
    id
  }) {
    const {
      replaceUrl,
      state
    } = extras;
    if (this.location.isCurrentPathEqualTo(path) || !!replaceUrl) {
      const currentBrowserPageId = this.browserPageId;
      const newState = __spreadValues(__spreadValues({}, state), this.generateNgRouterState(id, currentBrowserPageId));
      this.location.replaceState(path, "", newState);
    } else {
      const newState = __spreadValues(__spreadValues({}, state), this.generateNgRouterState(id, this.browserPageId + 1));
      this.location.go(path, "", newState);
    }
  }
  /**
   * Performs the necessary rollback action to restore the browser URL to the
   * state before the transition.
   */
  restoreHistory(navigation, restoringFromCaughtError = false) {
    if (this.canceledNavigationResolution === "computed") {
      const currentBrowserPageId = this.browserPageId;
      const targetPagePosition = this.currentPageId - currentBrowserPageId;
      if (targetPagePosition !== 0) {
        this.location.historyGo(targetPagePosition);
      } else if (this.getCurrentUrlTree() === navigation.finalUrl && targetPagePosition === 0) {
        this.resetInternalState(navigation);
        this.resetUrlToCurrentUrlTree();
      } else ;
    } else if (this.canceledNavigationResolution === "replace") {
      if (restoringFromCaughtError) {
        this.resetInternalState(navigation);
      }
      this.resetUrlToCurrentUrlTree();
    }
  }
  resetUrlToCurrentUrlTree() {
    this.location.replaceState(this.urlSerializer.serialize(this.getRawUrlTree()), "", this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));
  }
  generateNgRouterState(navigationId, routerPageId) {
    if (this.canceledNavigationResolution === "computed") {
      return {
        navigationId,
        \u0275routerPageId: routerPageId
      };
    }
    return {
      navigationId
    };
  }
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275HistoryStateManager_BaseFactory;
    return function HistoryStateManager_Factory(__ngFactoryType__) {
      return (\u0275HistoryStateManager_BaseFactory || (\u0275HistoryStateManager_BaseFactory = \u0275\u0275getInheritedFactory(_HistoryStateManager)))(__ngFactoryType__ || _HistoryStateManager);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _HistoryStateManager,
    factory: _HistoryStateManager.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HistoryStateManager, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
function afterNextNavigation(router, action) {
  router.events.pipe(filter((e2) => e2 instanceof NavigationEnd || e2 instanceof NavigationCancel || e2 instanceof NavigationError || e2 instanceof NavigationSkipped), map((e2) => {
    if (e2 instanceof NavigationEnd || e2 instanceof NavigationSkipped) {
      return 0;
    }
    const redirecting = e2 instanceof NavigationCancel ? e2.code === NavigationCancellationCode.Redirect || e2.code === NavigationCancellationCode.SupersededByNewNavigation : false;
    return redirecting ? 2 : 1;
  }), filter(
    (result) => result !== 2
    /* NavigationResult.REDIRECTING */
  ), take(1)).subscribe(() => {
    action();
  });
}
var exactMatchOptions = {
  paths: "exact",
  fragment: "ignored",
  matrixParams: "ignored",
  queryParams: "exact"
};
var subsetMatchOptions = {
  paths: "subset",
  fragment: "ignored",
  matrixParams: "ignored",
  queryParams: "subset"
};
var Router = class _Router {
  get currentUrlTree() {
    return this.stateManager.getCurrentUrlTree();
  }
  get rawUrlTree() {
    return this.stateManager.getRawUrlTree();
  }
  disposed = false;
  nonRouterCurrentEntryChangeSubscription;
  console = inject(Console);
  stateManager = inject(StateManager);
  options = inject(ROUTER_CONFIGURATION, {
    optional: true
  }) || {};
  pendingTasks = inject(PendingTasksInternal);
  urlUpdateStrategy = this.options.urlUpdateStrategy || "deferred";
  navigationTransitions = inject(NavigationTransitions);
  urlSerializer = inject(UrlSerializer);
  location = inject(Location);
  urlHandlingStrategy = inject(UrlHandlingStrategy);
  /**
   * The private `Subject` type for the public events exposed in the getter. This is used internally
   * to push events to. The separate field allows us to expose separate types in the public API
   * (i.e., an Observable rather than the Subject).
   */
  _events = new Subject();
  /**
   * An event stream for routing events.
   */
  get events() {
    return this._events;
  }
  /**
   * The current state of routing in this NgModule.
   */
  get routerState() {
    return this.stateManager.getRouterState();
  }
  /**
   * True if at least one navigation event has occurred,
   * false otherwise.
   */
  navigated = false;
  /**
   * A strategy for re-using routes.
   *
   * @deprecated Configure using `providers` instead:
   *   `{provide: RouteReuseStrategy, useClass: MyStrategy}`.
   */
  routeReuseStrategy = inject(RouteReuseStrategy);
  /**
   * How to handle a navigation request to the current URL.
   *
   *
   * @deprecated Configure this through `provideRouter` or `RouterModule.forRoot` instead.
   * @see {@link withRouterConfig}
   * @see {@link provideRouter}
   * @see {@link RouterModule}
   */
  onSameUrlNavigation = this.options.onSameUrlNavigation || "ignore";
  config = inject(ROUTES, {
    optional: true
  })?.flat() ?? [];
  /**
   * Indicates whether the application has opted in to binding Router data to component inputs.
   *
   * This option is enabled by the `withComponentInputBinding` feature of `provideRouter` or
   * `bindToComponentInputs` in the `ExtraOptions` of `RouterModule.forRoot`.
   */
  componentInputBindingEnabled = !!inject(INPUT_BINDER, {
    optional: true
  });
  constructor() {
    this.resetConfig(this.config);
    this.navigationTransitions.setupNavigations(this).subscribe({
      error: (e2) => {
        this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e2}` : e2);
      }
    });
    this.subscribeToNavigationEvents();
  }
  eventsSubscription = new Subscription();
  subscribeToNavigationEvents() {
    const subscription = this.navigationTransitions.events.subscribe((e2) => {
      try {
        const currentTransition = this.navigationTransitions.currentTransition;
        const currentNavigation = this.navigationTransitions.currentNavigation;
        if (currentTransition !== null && currentNavigation !== null) {
          this.stateManager.handleRouterEvent(e2, currentNavigation);
          if (e2 instanceof NavigationCancel && e2.code !== NavigationCancellationCode.Redirect && e2.code !== NavigationCancellationCode.SupersededByNewNavigation) {
            this.navigated = true;
          } else if (e2 instanceof NavigationEnd) {
            this.navigated = true;
          } else if (e2 instanceof RedirectRequest) {
            const opts = e2.navigationBehaviorOptions;
            const mergedTree = this.urlHandlingStrategy.merge(e2.url, currentTransition.currentRawUrl);
            const extras = __spreadValues({
              browserUrl: currentTransition.extras.browserUrl,
              info: currentTransition.extras.info,
              skipLocationChange: currentTransition.extras.skipLocationChange,
              // The URL is already updated at this point if we have 'eager' URL
              // updates or if the navigation was triggered by the browser (back
              // button, URL bar, etc). We want to replace that item in history
              // if the navigation is rejected.
              replaceUrl: currentTransition.extras.replaceUrl || this.urlUpdateStrategy === "eager" || isBrowserTriggeredNavigation(currentTransition.source)
            }, opts);
            this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras, {
              resolve: currentTransition.resolve,
              reject: currentTransition.reject,
              promise: currentTransition.promise
            });
          }
        }
        if (isPublicRouterEvent(e2)) {
          this._events.next(e2);
        }
      } catch (e3) {
        this.navigationTransitions.transitionAbortSubject.next(e3);
      }
    });
    this.eventsSubscription.add(subscription);
  }
  /** @internal */
  resetRootComponentType(rootComponentType) {
    this.routerState.root.component = rootComponentType;
    this.navigationTransitions.rootComponentType = rootComponentType;
  }
  /**
   * Sets up the location change listener and performs the initial navigation.
   */
  initialNavigation() {
    this.setUpLocationChangeListener();
    if (!this.navigationTransitions.hasRequestedNavigation) {
      this.navigateToSyncWithBrowser(this.location.path(true), IMPERATIVE_NAVIGATION, this.stateManager.restoredState());
    }
  }
  /**
   * Sets up the location change listener. This listener detects navigations triggered from outside
   * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router
   * navigation so that the correct events, guards, etc. are triggered.
   */
  setUpLocationChangeListener() {
    this.nonRouterCurrentEntryChangeSubscription ??= this.stateManager.registerNonRouterCurrentEntryChangeListener((url, state, source) => {
      this.navigateToSyncWithBrowser(url, source, state);
    });
  }
  /**
   * Schedules a router navigation to synchronize Router state with the browser state.
   *
   * This is done as a response to a popstate event and the initial navigation. These
   * two scenarios represent times when the browser URL/state has been updated and
   * the Router needs to respond to ensure its internal state matches.
   */
  navigateToSyncWithBrowser(url, source, state) {
    const extras = {
      replaceUrl: true
    };
    const restoredState = state?.navigationId ? state : null;
    if (state) {
      const stateCopy = __spreadValues({}, state);
      delete stateCopy.navigationId;
      delete stateCopy.\u0275routerPageId;
      if (Object.keys(stateCopy).length !== 0) {
        extras.state = stateCopy;
      }
    }
    const urlTree = this.parseUrl(url);
    this.scheduleNavigation(urlTree, source, restoredState, extras);
  }
  /** The current URL. */
  get url() {
    return this.serializeUrl(this.currentUrlTree);
  }
  /**
   * Returns the current `Navigation` object when the router is navigating,
   * and `null` when idle.
   */
  getCurrentNavigation() {
    return this.navigationTransitions.currentNavigation;
  }
  /**
   * The `Navigation` object of the most recent navigation to succeed and `null` if there
   *     has not been a successful navigation yet.
   */
  get lastSuccessfulNavigation() {
    return this.navigationTransitions.lastSuccessfulNavigation;
  }
  /**
   * Resets the route configuration used for navigation and generating links.
   *
   * @param config The route array for the new configuration.
   *
   * @usageNotes
   *
   * ```ts
   * router.resetConfig([
   *  { path: 'team/:id', component: TeamCmp, children: [
   *    { path: 'simple', component: SimpleCmp },
   *    { path: 'user/:name', component: UserCmp }
   *  ]}
   * ]);
   * ```
   */
  resetConfig(config2) {
    (typeof ngDevMode === "undefined" || ngDevMode) && validateConfig(config2);
    this.config = config2.map(standardizeConfig);
    this.navigated = false;
  }
  /** @nodoc */
  ngOnDestroy() {
    this.dispose();
  }
  /** Disposes of the router. */
  dispose() {
    this._events.unsubscribe();
    this.navigationTransitions.complete();
    if (this.nonRouterCurrentEntryChangeSubscription) {
      this.nonRouterCurrentEntryChangeSubscription.unsubscribe();
      this.nonRouterCurrentEntryChangeSubscription = void 0;
    }
    this.disposed = true;
    this.eventsSubscription.unsubscribe();
  }
  /**
   * Appends URL segments to the current URL tree to create a new URL tree.
   *
   * @param commands An array of URL fragments with which to construct the new URL tree.
   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
   * segments, followed by the parameters for each segment.
   * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`
   * property of the options object, if supplied.
   * @param navigationExtras Options that control the navigation strategy.
   * @returns The new URL tree.
   *
   * @usageNotes
   *
   * ```
   * // create /team/33/user/11
   * router.createUrlTree(['/team', 33, 'user', 11]);
   *
   * // create /team/33;expand=true/user/11
   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
   *
   * // you can collapse static segments like this (this works only with the first passed-in value):
   * router.createUrlTree(['/team/33/user', userId]);
   *
   * // If the first segment can contain slashes, and you do not want the router to split it,
   * // you can do the following:
   * router.createUrlTree([{segmentPath: '/one/two'}]);
   *
   * // create /team/33/(user/11//right:chat)
   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
   *
   * // remove the right secondary node
   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
   *
   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
   *
   * // navigate to /team/33/user/11/details
   * router.createUrlTree(['details'], {relativeTo: route});
   *
   * // navigate to /team/33/user/22
   * router.createUrlTree(['../22'], {relativeTo: route});
   *
   * // navigate to /team/44/user/22
   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
   *
   * Note that a value of `null` or `undefined` for `relativeTo` indicates that the
   * tree should be created relative to the root.
   * ```
   */
  createUrlTree(commands, navigationExtras = {}) {
    const {
      relativeTo,
      queryParams,
      fragment,
      queryParamsHandling,
      preserveFragment
    } = navigationExtras;
    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;
    let q = null;
    switch (queryParamsHandling ?? this.options.defaultQueryParamsHandling) {
      case "merge":
        q = __spreadValues(__spreadValues({}, this.currentUrlTree.queryParams), queryParams);
        break;
      case "preserve":
        q = this.currentUrlTree.queryParams;
        break;
      default:
        q = queryParams || null;
    }
    if (q !== null) {
      q = this.removeEmptyProps(q);
    }
    let relativeToUrlSegmentGroup;
    try {
      const relativeToSnapshot = relativeTo ? relativeTo.snapshot : this.routerState.snapshot.root;
      relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeToSnapshot);
    } catch (e2) {
      if (typeof commands[0] !== "string" || commands[0][0] !== "/") {
        commands = [];
      }
      relativeToUrlSegmentGroup = this.currentUrlTree.root;
    }
    return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, q, f ?? null);
  }
  /**
   * Navigates to a view using an absolute route path.
   *
   * @param url An absolute path for a defined route. The function does not apply any delta to the
   *     current URL.
   * @param extras An object containing properties that modify the navigation strategy.
   *
   * @returns A Promise that resolves to 'true' when navigation succeeds,
   * to 'false' when navigation fails, or is rejected on error.
   *
   * @usageNotes
   *
   * The following calls request navigation to an absolute path.
   *
   * ```ts
   * router.navigateByUrl("/team/33/user/11");
   *
   * // Navigate without updating the URL
   * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
   * ```
   *
   * @see [Routing and Navigation guide](guide/routing/common-router-tasks)
   *
   */
  navigateByUrl(url, extras = {
    skipLocationChange: false
  }) {
    const urlTree = isUrlTree(url) ? url : this.parseUrl(url);
    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
    return this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras);
  }
  /**
   * Navigate based on the provided array of commands and a starting point.
   * If no starting route is provided, the navigation is absolute.
   *
   * @param commands An array of URL fragments with which to construct the target URL.
   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
   * segments, followed by the parameters for each segment.
   * The fragments are applied to the current URL or the one provided  in the `relativeTo` property
   * of the options object, if supplied.
   * @param extras An options object that determines how the URL should be constructed or
   *     interpreted.
   *
   * @returns A Promise that resolves to `true` when navigation succeeds, or `false` when navigation
   *     fails. The Promise is rejected when an error occurs if `resolveNavigationPromiseOnError` is
   * not `true`.
   *
   * @usageNotes
   *
   * The following calls request navigation to a dynamic route path relative to the current URL.
   *
   * ```ts
   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
   *
   * // Navigate without updating the URL, overriding the default behavior
   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
   * ```
   *
   * @see [Routing and Navigation guide](guide/routing/common-router-tasks)
   *
   */
  navigate(commands, extras = {
    skipLocationChange: false
  }) {
    validateCommands(commands);
    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
  }
  /** Serializes a `UrlTree` into a string */
  serializeUrl(url) {
    return this.urlSerializer.serialize(url);
  }
  /** Parses a string into a `UrlTree` */
  parseUrl(url) {
    try {
      return this.urlSerializer.parse(url);
    } catch {
      return this.urlSerializer.parse("/");
    }
  }
  isActive(url, matchOptions) {
    let options;
    if (matchOptions === true) {
      options = __spreadValues({}, exactMatchOptions);
    } else if (matchOptions === false) {
      options = __spreadValues({}, subsetMatchOptions);
    } else {
      options = matchOptions;
    }
    if (isUrlTree(url)) {
      return containsTree(this.currentUrlTree, url, options);
    }
    const urlTree = this.parseUrl(url);
    return containsTree(this.currentUrlTree, urlTree, options);
  }
  removeEmptyProps(params) {
    return Object.entries(params).reduce((result, [key, value]) => {
      if (value !== null && value !== void 0) {
        result[key] = value;
      }
      return result;
    }, {});
  }
  scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {
    if (this.disposed) {
      return Promise.resolve(false);
    }
    let resolve;
    let reject;
    let promise;
    if (priorPromise) {
      resolve = priorPromise.resolve;
      reject = priorPromise.reject;
      promise = priorPromise.promise;
    } else {
      promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
    }
    const taskId = this.pendingTasks.add();
    afterNextNavigation(this, () => {
      queueMicrotask(() => this.pendingTasks.remove(taskId));
    });
    this.navigationTransitions.handleNavigationRequest({
      source,
      restoredState,
      currentUrlTree: this.currentUrlTree,
      currentRawUrl: this.currentUrlTree,
      rawUrl,
      extras,
      resolve,
      reject,
      promise,
      currentSnapshot: this.routerState.snapshot,
      currentRouterState: this.routerState
    });
    return promise.catch((e2) => {
      return Promise.reject(e2);
    });
  }
  static \u0275fac = function Router_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Router)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _Router,
    factory: _Router.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Router, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function validateCommands(commands) {
  for (let i = 0; i < commands.length; i++) {
    const cmd = commands[i];
    if (cmd == null) {
      throw new RuntimeError(4008, (typeof ngDevMode === "undefined" || ngDevMode) && `The requested path contains ${cmd} segment at index ${i}`);
    }
  }
}
function isPublicRouterEvent(e2) {
  return !(e2 instanceof BeforeActivateRoutes) && !(e2 instanceof RedirectRequest);
}

// node_modules/@angular/router/fesm2022/router_module-CbmfhtZA.mjs
var RouterLink = class _RouterLink {
  router;
  route;
  tabIndexAttribute;
  renderer;
  el;
  locationStrategy;
  /**
   * Represents an `href` attribute value applied to a host element,
   * when a host element is `<a>`. For other tags, the value is `null`.
   */
  href = null;
  /**
   * Represents the `target` attribute on a host element.
   * This is only used when the host element is an `<a>` tag.
   */
  target;
  /**
   * Passed to {@link Router#createUrlTree} as part of the
   * `UrlCreationOptions`.
   * @see {@link UrlCreationOptions#queryParams}
   * @see {@link Router#createUrlTree}
   */
  queryParams;
  /**
   * Passed to {@link Router#createUrlTree} as part of the
   * `UrlCreationOptions`.
   * @see {@link UrlCreationOptions#fragment}
   * @see {@link Router#createUrlTree}
   */
  fragment;
  /**
   * Passed to {@link Router#createUrlTree} as part of the
   * `UrlCreationOptions`.
   * @see {@link UrlCreationOptions#queryParamsHandling}
   * @see {@link Router#createUrlTree}
   */
  queryParamsHandling;
  /**
   * Passed to {@link Router#navigateByUrl} as part of the
   * `NavigationBehaviorOptions`.
   * @see {@link NavigationBehaviorOptions#state}
   * @see {@link Router#navigateByUrl}
   */
  state;
  /**
   * Passed to {@link Router#navigateByUrl} as part of the
   * `NavigationBehaviorOptions`.
   * @see {@link NavigationBehaviorOptions#info}
   * @see {@link Router#navigateByUrl}
   */
  info;
  /**
   * Passed to {@link Router#createUrlTree} as part of the
   * `UrlCreationOptions`.
   * Specify a value here when you do not want to use the default value
   * for `routerLink`, which is the current activated route.
   * Note that a value of `undefined` here will use the `routerLink` default.
   * @see {@link UrlCreationOptions#relativeTo}
   * @see {@link Router#createUrlTree}
   */
  relativeTo;
  /** Whether a host element is an `<a>` tag. */
  isAnchorElement;
  subscription;
  /** @internal */
  onChanges = new Subject();
  constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {
    this.router = router;
    this.route = route;
    this.tabIndexAttribute = tabIndexAttribute;
    this.renderer = renderer;
    this.el = el;
    this.locationStrategy = locationStrategy;
    const tagName = el.nativeElement.tagName?.toLowerCase();
    this.isAnchorElement = tagName === "a" || tagName === "area";
    if (this.isAnchorElement) {
      this.subscription = router.events.subscribe((s) => {
        if (s instanceof NavigationEnd) {
          this.updateHref();
        }
      });
    } else {
      this.setTabIndexIfNotOnNativeEl("0");
    }
  }
  /**
   * Passed to {@link Router#createUrlTree} as part of the
   * `UrlCreationOptions`.
   * @see {@link UrlCreationOptions#preserveFragment}
   * @see {@link Router#createUrlTree}
   */
  preserveFragment = false;
  /**
   * Passed to {@link Router#navigateByUrl} as part of the
   * `NavigationBehaviorOptions`.
   * @see {@link NavigationBehaviorOptions#skipLocationChange}
   * @see {@link Router#navigateByUrl}
   */
  skipLocationChange = false;
  /**
   * Passed to {@link Router#navigateByUrl} as part of the
   * `NavigationBehaviorOptions`.
   * @see {@link NavigationBehaviorOptions#replaceUrl}
   * @see {@link Router#navigateByUrl}
   */
  replaceUrl = false;
  /**
   * Modifies the tab index if there was not a tabindex attribute on the element during
   * instantiation.
   */
  setTabIndexIfNotOnNativeEl(newTabIndex) {
    if (this.tabIndexAttribute != null || this.isAnchorElement) {
      return;
    }
    this.applyAttributeValue("tabindex", newTabIndex);
  }
  /** @nodoc */
  // TODO(atscott): Remove changes parameter in major version as a breaking change.
  ngOnChanges(changes) {
    if (ngDevMode && isUrlTree(this.routerLinkInput) && (this.fragment !== void 0 || this.queryParams || this.queryParamsHandling || this.preserveFragment || this.relativeTo)) {
      throw new RuntimeError(4016, "Cannot configure queryParams or fragment when using a UrlTree as the routerLink input value.");
    }
    if (this.isAnchorElement) {
      this.updateHref();
    }
    this.onChanges.next(this);
  }
  routerLinkInput = null;
  /**
   * Commands to pass to {@link Router#createUrlTree} or a `UrlTree`.
   *   - **array**: commands to pass to {@link Router#createUrlTree}.
   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
   *   - **UrlTree**: a `UrlTree` for this link rather than creating one from the commands
   *     and other inputs that correspond to properties of `UrlCreationOptions`.
   *   - **null|undefined**: effectively disables the `routerLink`
   * @see {@link Router#createUrlTree}
   */
  set routerLink(commandsOrUrlTree) {
    if (commandsOrUrlTree == null) {
      this.routerLinkInput = null;
      this.setTabIndexIfNotOnNativeEl(null);
    } else {
      if (isUrlTree(commandsOrUrlTree)) {
        this.routerLinkInput = commandsOrUrlTree;
      } else {
        this.routerLinkInput = Array.isArray(commandsOrUrlTree) ? commandsOrUrlTree : [commandsOrUrlTree];
      }
      this.setTabIndexIfNotOnNativeEl("0");
    }
  }
  /** @nodoc */
  onClick(button, ctrlKey, shiftKey, altKey, metaKey) {
    const urlTree = this.urlTree;
    if (urlTree === null) {
      return true;
    }
    if (this.isAnchorElement) {
      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {
        return true;
      }
      if (typeof this.target === "string" && this.target != "_self") {
        return true;
      }
    }
    const extras = {
      skipLocationChange: this.skipLocationChange,
      replaceUrl: this.replaceUrl,
      state: this.state,
      info: this.info
    };
    this.router.navigateByUrl(urlTree, extras);
    return !this.isAnchorElement;
  }
  /** @nodoc */
  ngOnDestroy() {
    this.subscription?.unsubscribe();
  }
  updateHref() {
    const urlTree = this.urlTree;
    this.href = urlTree !== null && this.locationStrategy ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree)) : null;
    const sanitizedValue = this.href === null ? null : (
      // This class represents a directive that can be added to both `<a>` elements,
      // as well as other elements. As a result, we can't define security context at
      // compile time. So the security context is deferred to runtime.
      // The `ɵɵsanitizeUrlOrResourceUrl` selects the necessary sanitizer function
      // based on the tag and property names. The logic mimics the one from
      // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.
      //
      // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`
      // instead of applying a value via a renderer, after a final merge of the
      // `RouterLinkWithHref` directive.
      \u0275\u0275sanitizeUrlOrResourceUrl(this.href, this.el.nativeElement.tagName.toLowerCase(), "href")
    );
    this.applyAttributeValue("href", sanitizedValue);
  }
  applyAttributeValue(attrName, attrValue) {
    const renderer = this.renderer;
    const nativeElement = this.el.nativeElement;
    if (attrValue !== null) {
      renderer.setAttribute(nativeElement, attrName, attrValue);
    } else {
      renderer.removeAttribute(nativeElement, attrName);
    }
  }
  get urlTree() {
    if (this.routerLinkInput === null) {
      return null;
    } else if (isUrlTree(this.routerLinkInput)) {
      return this.routerLinkInput;
    }
    return this.router.createUrlTree(this.routerLinkInput, {
      // If the `relativeTo` input is not defined, we want to use `this.route` by default.
      // Otherwise, we should use the value provided by the user in the input.
      relativeTo: this.relativeTo !== void 0 ? this.relativeTo : this.route,
      queryParams: this.queryParams,
      fragment: this.fragment,
      queryParamsHandling: this.queryParamsHandling,
      preserveFragment: this.preserveFragment
    });
  }
  static \u0275fac = function RouterLink_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterLink)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275injectAttribute("tabindex"), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(LocationStrategy));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _RouterLink,
    selectors: [["", "routerLink", ""]],
    hostVars: 1,
    hostBindings: function RouterLink_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("click", function RouterLink_click_HostBindingHandler($event) {
          return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);
        });
      }
      if (rf & 2) {
        \u0275\u0275attribute("target", ctx.target);
      }
    },
    inputs: {
      target: "target",
      queryParams: "queryParams",
      fragment: "fragment",
      queryParamsHandling: "queryParamsHandling",
      state: "state",
      info: "info",
      relativeTo: "relativeTo",
      preserveFragment: [2, "preserveFragment", "preserveFragment", booleanAttribute],
      skipLocationChange: [2, "skipLocationChange", "skipLocationChange", booleanAttribute],
      replaceUrl: [2, "replaceUrl", "replaceUrl", booleanAttribute],
      routerLink: "routerLink"
    },
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterLink, [{
    type: Directive,
    args: [{
      selector: "[routerLink]"
    }]
  }], () => [{
    type: Router
  }, {
    type: ActivatedRoute
  }, {
    type: void 0,
    decorators: [{
      type: Attribute,
      args: ["tabindex"]
    }]
  }, {
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: LocationStrategy
  }], {
    target: [{
      type: HostBinding,
      args: ["attr.target"]
    }, {
      type: Input
    }],
    queryParams: [{
      type: Input
    }],
    fragment: [{
      type: Input
    }],
    queryParamsHandling: [{
      type: Input
    }],
    state: [{
      type: Input
    }],
    info: [{
      type: Input
    }],
    relativeTo: [{
      type: Input
    }],
    preserveFragment: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    skipLocationChange: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    replaceUrl: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    routerLink: [{
      type: Input
    }],
    onClick: [{
      type: HostListener,
      args: ["click", ["$event.button", "$event.ctrlKey", "$event.shiftKey", "$event.altKey", "$event.metaKey"]]
    }]
  });
})();
var RouterLinkActive = class _RouterLinkActive {
  router;
  element;
  renderer;
  cdr;
  link;
  links;
  classes = [];
  routerEventsSubscription;
  linkInputChangesSubscription;
  _isActive = false;
  get isActive() {
    return this._isActive;
  }
  /**
   * Options to configure how to determine if the router link is active.
   *
   * These options are passed to the `Router.isActive()` function.
   *
   * @see {@link Router#isActive}
   */
  routerLinkActiveOptions = {
    exact: false
  };
  /**
   * Aria-current attribute to apply when the router link is active.
   *
   * Possible values: `'page'` | `'step'` | `'location'` | `'date'` | `'time'` | `true` | `false`.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current}
   */
  ariaCurrentWhenActive;
  /**
   *
   * You can use the output `isActiveChange` to get notified each time the link becomes
   * active or inactive.
   *
   * Emits:
   * true  -> Route is active
   * false -> Route is inactive
   *
   * ```html
   * <a
   *  routerLink="/user/bob"
   *  routerLinkActive="active-link"
   *  (isActiveChange)="this.onRouterLinkActive($event)">Bob</a>
   * ```
   */
  isActiveChange = new EventEmitter();
  constructor(router, element, renderer, cdr, link) {
    this.router = router;
    this.element = element;
    this.renderer = renderer;
    this.cdr = cdr;
    this.link = link;
    this.routerEventsSubscription = router.events.subscribe((s) => {
      if (s instanceof NavigationEnd) {
        this.update();
      }
    });
  }
  /** @nodoc */
  ngAfterContentInit() {
    of(this.links.changes, of(null)).pipe(mergeAll()).subscribe((_) => {
      this.update();
      this.subscribeToEachLinkOnChanges();
    });
  }
  subscribeToEachLinkOnChanges() {
    this.linkInputChangesSubscription?.unsubscribe();
    const allLinkChanges = [...this.links.toArray(), this.link].filter((link) => !!link).map((link) => link.onChanges);
    this.linkInputChangesSubscription = from(allLinkChanges).pipe(mergeAll()).subscribe((link) => {
      if (this._isActive !== this.isLinkActive(this.router)(link)) {
        this.update();
      }
    });
  }
  set routerLinkActive(data) {
    const classes = Array.isArray(data) ? data : data.split(" ");
    this.classes = classes.filter((c) => !!c);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    this.update();
  }
  /** @nodoc */
  ngOnDestroy() {
    this.routerEventsSubscription.unsubscribe();
    this.linkInputChangesSubscription?.unsubscribe();
  }
  update() {
    if (!this.links || !this.router.navigated) return;
    queueMicrotask(() => {
      const hasActiveLinks = this.hasActiveLinks();
      this.classes.forEach((c) => {
        if (hasActiveLinks) {
          this.renderer.addClass(this.element.nativeElement, c);
        } else {
          this.renderer.removeClass(this.element.nativeElement, c);
        }
      });
      if (hasActiveLinks && this.ariaCurrentWhenActive !== void 0) {
        this.renderer.setAttribute(this.element.nativeElement, "aria-current", this.ariaCurrentWhenActive.toString());
      } else {
        this.renderer.removeAttribute(this.element.nativeElement, "aria-current");
      }
      if (this._isActive !== hasActiveLinks) {
        this._isActive = hasActiveLinks;
        this.cdr.markForCheck();
        this.isActiveChange.emit(hasActiveLinks);
      }
    });
  }
  isLinkActive(router) {
    const options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions : (
      // While the types should disallow `undefined` here, it's possible without strict inputs
      this.routerLinkActiveOptions.exact || false
    );
    return (link) => {
      const urlTree = link.urlTree;
      return urlTree ? router.isActive(urlTree, options) : false;
    };
  }
  hasActiveLinks() {
    const isActiveCheckFn = this.isLinkActive(this.router);
    return this.link && isActiveCheckFn(this.link) || this.links.some(isActiveCheckFn);
  }
  static \u0275fac = function RouterLinkActive_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterLinkActive)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(RouterLink, 8));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _RouterLinkActive,
    selectors: [["", "routerLinkActive", ""]],
    contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        \u0275\u0275contentQuery(dirIndex, RouterLink, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.links = _t);
      }
    },
    inputs: {
      routerLinkActiveOptions: "routerLinkActiveOptions",
      ariaCurrentWhenActive: "ariaCurrentWhenActive",
      routerLinkActive: "routerLinkActive"
    },
    outputs: {
      isActiveChange: "isActiveChange"
    },
    exportAs: ["routerLinkActive"],
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterLinkActive, [{
    type: Directive,
    args: [{
      selector: "[routerLinkActive]",
      exportAs: "routerLinkActive"
    }]
  }], () => [{
    type: Router
  }, {
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: ChangeDetectorRef
  }, {
    type: RouterLink,
    decorators: [{
      type: Optional
    }]
  }], {
    links: [{
      type: ContentChildren,
      args: [RouterLink, {
        descendants: true
      }]
    }],
    routerLinkActiveOptions: [{
      type: Input
    }],
    ariaCurrentWhenActive: [{
      type: Input
    }],
    isActiveChange: [{
      type: Output
    }],
    routerLinkActive: [{
      type: Input
    }]
  });
})();
function isActiveMatchOptions(options) {
  return !!options.paths;
}
var PreloadingStrategy = class {
};
var PreloadAllModules = class _PreloadAllModules {
  preload(route, fn) {
    return fn().pipe(catchError(() => of(null)));
  }
  static \u0275fac = function PreloadAllModules_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _PreloadAllModules)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _PreloadAllModules,
    factory: _PreloadAllModules.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PreloadAllModules, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var NoPreloading = class _NoPreloading {
  preload(route, fn) {
    return of(null);
  }
  static \u0275fac = function NoPreloading_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NoPreloading)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _NoPreloading,
    factory: _NoPreloading.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NoPreloading, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var RouterPreloader = class _RouterPreloader {
  router;
  injector;
  preloadingStrategy;
  loader;
  subscription;
  constructor(router, compiler, injector, preloadingStrategy, loader) {
    this.router = router;
    this.injector = injector;
    this.preloadingStrategy = preloadingStrategy;
    this.loader = loader;
  }
  setUpPreloading() {
    this.subscription = this.router.events.pipe(filter((e2) => e2 instanceof NavigationEnd), concatMap(() => this.preload())).subscribe(() => {
    });
  }
  preload() {
    return this.processRoutes(this.injector, this.router.config);
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }
  processRoutes(injector, routes2) {
    const res = [];
    for (const route of routes2) {
      if (route.providers && !route._injector) {
        route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);
      }
      const injectorForCurrentRoute = route._injector ?? injector;
      const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;
      if (route.loadChildren && !route._loadedRoutes && route.canLoad === void 0 || route.loadComponent && !route._loadedComponent) {
        res.push(this.preloadConfig(injectorForCurrentRoute, route));
      }
      if (route.children || route._loadedRoutes) {
        res.push(this.processRoutes(injectorForChildren, route.children ?? route._loadedRoutes));
      }
    }
    return from(res).pipe(mergeAll());
  }
  preloadConfig(injector, route) {
    return this.preloadingStrategy.preload(route, () => {
      let loadedChildren$;
      if (route.loadChildren && route.canLoad === void 0) {
        loadedChildren$ = this.loader.loadChildren(injector, route);
      } else {
        loadedChildren$ = of(null);
      }
      const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap((config2) => {
        if (config2 === null) {
          return of(void 0);
        }
        route._loadedRoutes = config2.routes;
        route._loadedInjector = config2.injector;
        return this.processRoutes(config2.injector ?? injector, config2.routes);
      }));
      if (route.loadComponent && !route._loadedComponent) {
        const loadComponent$ = this.loader.loadComponent(route);
        return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());
      } else {
        return recursiveLoadChildren$;
      }
    });
  }
  static \u0275fac = function RouterPreloader_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterPreloader)(\u0275\u0275inject(Router), \u0275\u0275inject(Compiler), \u0275\u0275inject(EnvironmentInjector), \u0275\u0275inject(PreloadingStrategy), \u0275\u0275inject(RouterConfigLoader));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _RouterPreloader,
    factory: _RouterPreloader.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterPreloader, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Router
  }, {
    type: Compiler
  }, {
    type: EnvironmentInjector
  }, {
    type: PreloadingStrategy
  }, {
    type: RouterConfigLoader
  }], null);
})();
var ROUTER_SCROLLER = new InjectionToken("");
var RouterScroller = class _RouterScroller {
  urlSerializer;
  transitions;
  viewportScroller;
  zone;
  options;
  routerEventsSubscription;
  scrollEventsSubscription;
  lastId = 0;
  lastSource = "imperative";
  restoredId = 0;
  store = {};
  /** @nodoc */
  constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {
    this.urlSerializer = urlSerializer;
    this.transitions = transitions;
    this.viewportScroller = viewportScroller;
    this.zone = zone;
    this.options = options;
    options.scrollPositionRestoration ||= "disabled";
    options.anchorScrolling ||= "disabled";
  }
  init() {
    if (this.options.scrollPositionRestoration !== "disabled") {
      this.viewportScroller.setHistoryScrollRestoration("manual");
    }
    this.routerEventsSubscription = this.createScrollEvents();
    this.scrollEventsSubscription = this.consumeScrollEvents();
  }
  createScrollEvents() {
    return this.transitions.events.subscribe((e2) => {
      if (e2 instanceof NavigationStart) {
        this.store[this.lastId] = this.viewportScroller.getScrollPosition();
        this.lastSource = e2.navigationTrigger;
        this.restoredId = e2.restoredState ? e2.restoredState.navigationId : 0;
      } else if (e2 instanceof NavigationEnd) {
        this.lastId = e2.id;
        this.scheduleScrollEvent(e2, this.urlSerializer.parse(e2.urlAfterRedirects).fragment);
      } else if (e2 instanceof NavigationSkipped && e2.code === NavigationSkippedCode.IgnoredSameUrlNavigation) {
        this.lastSource = void 0;
        this.restoredId = 0;
        this.scheduleScrollEvent(e2, this.urlSerializer.parse(e2.url).fragment);
      }
    });
  }
  consumeScrollEvents() {
    return this.transitions.events.subscribe((e2) => {
      if (!(e2 instanceof Scroll)) return;
      if (e2.position) {
        if (this.options.scrollPositionRestoration === "top") {
          this.viewportScroller.scrollToPosition([0, 0]);
        } else if (this.options.scrollPositionRestoration === "enabled") {
          this.viewportScroller.scrollToPosition(e2.position);
        }
      } else {
        if (e2.anchor && this.options.anchorScrolling === "enabled") {
          this.viewportScroller.scrollToAnchor(e2.anchor);
        } else if (this.options.scrollPositionRestoration !== "disabled") {
          this.viewportScroller.scrollToPosition([0, 0]);
        }
      }
    });
  }
  scheduleScrollEvent(routerEvent, anchor) {
    this.zone.runOutsideAngular(() => {
      setTimeout(() => {
        this.zone.run(() => {
          this.transitions.events.next(new Scroll(routerEvent, this.lastSource === "popstate" ? this.store[this.restoredId] : null, anchor));
        });
      }, 0);
    });
  }
  /** @nodoc */
  ngOnDestroy() {
    this.routerEventsSubscription?.unsubscribe();
    this.scrollEventsSubscription?.unsubscribe();
  }
  static \u0275fac = function RouterScroller_Factory(__ngFactoryType__) {
    \u0275\u0275invalidFactory();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _RouterScroller,
    factory: _RouterScroller.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterScroller, [{
    type: Injectable
  }], () => [{
    type: UrlSerializer
  }, {
    type: NavigationTransitions
  }, {
    type: ViewportScroller
  }, {
    type: NgZone
  }, {
    type: void 0
  }], null);
})();
function provideRouter(routes2, ...features) {
  return makeEnvironmentProviders([{
    provide: ROUTES,
    multi: true,
    useValue: routes2
  }, typeof ngDevMode === "undefined" || ngDevMode ? {
    provide: ROUTER_IS_PROVIDED,
    useValue: true
  } : [], {
    provide: ActivatedRoute,
    useFactory: rootRoute,
    deps: [Router]
  }, {
    provide: APP_BOOTSTRAP_LISTENER,
    multi: true,
    useFactory: getBootstrapListener
  }, features.map((feature) => feature.\u0275providers)]);
}
function rootRoute(router) {
  return router.routerState.root;
}
function routerFeature(kind, providers) {
  return {
    \u0275kind: kind,
    \u0275providers: providers
  };
}
var ROUTER_IS_PROVIDED = new InjectionToken("", {
  providedIn: "root",
  factory: () => false
});
function getBootstrapListener() {
  const injector = inject(Injector);
  return (bootstrappedComponentRef) => {
    const ref = injector.get(ApplicationRef);
    if (bootstrappedComponentRef !== ref.components[0]) {
      return;
    }
    const router = injector.get(Router);
    const bootstrapDone = injector.get(BOOTSTRAP_DONE);
    if (injector.get(INITIAL_NAVIGATION) === 1) {
      router.initialNavigation();
    }
    injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();
    injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();
    router.resetRootComponentType(ref.componentTypes[0]);
    if (!bootstrapDone.closed) {
      bootstrapDone.next();
      bootstrapDone.complete();
      bootstrapDone.unsubscribe();
    }
  };
}
var BOOTSTRAP_DONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "bootstrap done indicator" : "", {
  factory: () => {
    return new Subject();
  }
});
var INITIAL_NAVIGATION = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "initial navigation" : "", {
  providedIn: "root",
  factory: () => 1
  /* InitialNavigation.EnabledNonBlocking */
});
function withEnabledBlockingInitialNavigation() {
  const providers = [{
    provide: INITIAL_NAVIGATION,
    useValue: 0
    /* InitialNavigation.EnabledBlocking */
  }, provideAppInitializer(() => {
    const injector = inject(Injector);
    const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());
    return locationInitialized.then(() => {
      return new Promise((resolve) => {
        const router = injector.get(Router);
        const bootstrapDone = injector.get(BOOTSTRAP_DONE);
        afterNextNavigation(router, () => {
          resolve(true);
        });
        injector.get(NavigationTransitions).afterPreactivation = () => {
          resolve(true);
          return bootstrapDone.closed ? of(void 0) : bootstrapDone;
        };
        router.initialNavigation();
      });
    });
  })];
  return routerFeature(2, providers);
}
function withDisabledInitialNavigation() {
  const providers = [provideAppInitializer(() => {
    inject(Router).setUpLocationChangeListener();
  }), {
    provide: INITIAL_NAVIGATION,
    useValue: 2
    /* InitialNavigation.Disabled */
  }];
  return routerFeature(3, providers);
}
function withDebugTracing() {
  let providers = [];
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    providers = [{
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const router = inject(Router);
        return () => router.events.subscribe((e2) => {
          console.group?.(`Router Event: ${e2.constructor.name}`);
          console.log(stringifyEvent(e2));
          console.log(e2);
          console.groupEnd?.();
        });
      }
    }];
  } else {
    providers = [];
  }
  return routerFeature(1, providers);
}
var ROUTER_PRELOADER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router preloader" : "");
function withPreloading(preloadingStrategy) {
  const providers = [{
    provide: ROUTER_PRELOADER,
    useExisting: RouterPreloader
  }, {
    provide: PreloadingStrategy,
    useExisting: preloadingStrategy
  }];
  return routerFeature(0, providers);
}
function withComponentInputBinding() {
  const providers = [RoutedComponentInputBinder, {
    provide: INPUT_BINDER,
    useExisting: RoutedComponentInputBinder
  }];
  return routerFeature(8, providers);
}
function withViewTransitions(options) {
  performanceMarkFeature("NgRouterViewTransitions");
  const providers = [{
    provide: CREATE_VIEW_TRANSITION,
    useValue: createViewTransition
  }, {
    provide: VIEW_TRANSITION_OPTIONS,
    useValue: __spreadValues({
      skipNextTransition: !!options?.skipInitialTransition
    }, options)
  }];
  return routerFeature(9, providers);
}
var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, \u0275EmptyOutletComponent];
var ROUTER_FORROOT_GUARD = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router duplicate forRoot guard" : "");
var ROUTER_PROVIDERS = [
  Location,
  {
    provide: UrlSerializer,
    useClass: DefaultUrlSerializer
  },
  Router,
  ChildrenOutletContexts,
  {
    provide: ActivatedRoute,
    useFactory: rootRoute,
    deps: [Router]
  },
  RouterConfigLoader,
  // Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can
  // be removed when `provideRoutes` is removed.
  typeof ngDevMode === "undefined" || ngDevMode ? {
    provide: ROUTER_IS_PROVIDED,
    useValue: true
  } : []
];
var RouterModule = class _RouterModule {
  constructor() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      inject(ROUTER_FORROOT_GUARD, {
        optional: true
      });
    }
  }
  /**
   * Creates and configures a module with all the router providers and directives.
   * Optionally sets up an application listener to perform an initial navigation.
   *
   * When registering the NgModule at the root, import as follows:
   *
   * ```ts
   * @NgModule({
   *   imports: [RouterModule.forRoot(ROUTES)]
   * })
   * class MyNgModule {}
   * ```
   *
   * @param routes An array of `Route` objects that define the navigation paths for the application.
   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.
   * @return The new `NgModule`.
   *
   */
  static forRoot(routes2, config2) {
    return {
      ngModule: _RouterModule,
      providers: [ROUTER_PROVIDERS, typeof ngDevMode === "undefined" || ngDevMode ? config2?.enableTracing ? withDebugTracing().\u0275providers : [] : [], {
        provide: ROUTES,
        multi: true,
        useValue: routes2
      }, typeof ngDevMode === "undefined" || ngDevMode ? {
        provide: ROUTER_FORROOT_GUARD,
        useFactory: provideForRootGuard,
        deps: [[Router, new Optional(), new SkipSelf()]]
      } : [], config2?.errorHandler ? {
        provide: NAVIGATION_ERROR_HANDLER,
        useValue: config2.errorHandler
      } : [], {
        provide: ROUTER_CONFIGURATION,
        useValue: config2 ? config2 : {}
      }, config2?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(), provideRouterScroller(), config2?.preloadingStrategy ? withPreloading(config2.preloadingStrategy).\u0275providers : [], config2?.initialNavigation ? provideInitialNavigation(config2) : [], config2?.bindToComponentInputs ? withComponentInputBinding().\u0275providers : [], config2?.enableViewTransitions ? withViewTransitions().\u0275providers : [], provideRouterInitializer()]
    };
  }
  /**
   * Creates a module with all the router directives and a provider registering routes,
   * without creating a new Router service.
   * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:
   *
   * ```ts
   * @NgModule({
   *   imports: [RouterModule.forChild(ROUTES)]
   * })
   * class MyNgModule {}
   * ```
   *
   * @param routes An array of `Route` objects that define the navigation paths for the submodule.
   * @return The new NgModule.
   *
   */
  static forChild(routes2) {
    return {
      ngModule: _RouterModule,
      providers: [{
        provide: ROUTES,
        multi: true,
        useValue: routes2
      }]
    };
  }
  static \u0275fac = function RouterModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterModule)();
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
    type: _RouterModule
  });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterModule, [{
    type: NgModule,
    args: [{
      imports: ROUTER_DIRECTIVES,
      exports: ROUTER_DIRECTIVES
    }]
  }], () => [], null);
})();
function provideRouterScroller() {
  return {
    provide: ROUTER_SCROLLER,
    useFactory: () => {
      const viewportScroller = inject(ViewportScroller);
      const zone = inject(NgZone);
      const config2 = inject(ROUTER_CONFIGURATION);
      const transitions = inject(NavigationTransitions);
      const urlSerializer = inject(UrlSerializer);
      if (config2.scrollOffset) {
        viewportScroller.setOffset(config2.scrollOffset);
      }
      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config2);
    }
  };
}
function provideHashLocationStrategy() {
  return {
    provide: LocationStrategy,
    useClass: HashLocationStrategy
  };
}
function providePathLocationStrategy() {
  return {
    provide: LocationStrategy,
    useClass: PathLocationStrategy
  };
}
function provideForRootGuard(router) {
  if (router) {
    throw new RuntimeError(4007, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector. Lazy loaded modules should use RouterModule.forChild() instead.`);
  }
  return "guarded";
}
function provideInitialNavigation(config2) {
  return [config2.initialNavigation === "disabled" ? withDisabledInitialNavigation().\u0275providers : [], config2.initialNavigation === "enabledBlocking" ? withEnabledBlockingInitialNavigation().\u0275providers : []];
}
var ROUTER_INITIALIZER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Router Initializer" : "");
function provideRouterInitializer() {
  return [
    // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just
    // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.
    {
      provide: ROUTER_INITIALIZER,
      useFactory: getBootstrapListener
    },
    {
      provide: APP_BOOTSTRAP_LISTENER,
      multi: true,
      useExisting: ROUTER_INITIALIZER
    }
  ];
}

// node_modules/@angular/router/fesm2022/router.mjs
var VERSION4 = new Version("19.2.6");

// src/app/models/axioms/axiom.ts
var Axiom = class {
  pattern;
  constructor(pattern) {
    this.pattern = pattern;
    pattern.simulations.sort((a, b) => a.index - b.index);
  }
};

// src/app/models/patterns/pattern.ts
var Pattern = class {
  name;
  url;
  index;
  reference;
  constructor(name, url, index, reference) {
    this.name = name;
    this.url = url;
    this.index = index;
    this.reference = reference;
  }
};

// src/app/models/patterns/axiom-pattern.ts
var AxiomPattern = class extends Pattern {
  simulations;
  constructor(name, url, index, simulations, reference) {
    super(name, url, index, reference);
    this.simulations = simulations;
  }
  find(url) {
    return this.simulations.find((s) => s.url === url);
  }
};

// src/app/models/patterns/simulation-pattern.ts
var SimulationPattern = class extends Pattern {
  build;
  constructor(name, url, index, build, reference) {
    super(name, url, index, reference);
    this.build = build;
  }
};

// src/app/models/simulations/simulation.ts
var import_p5 = __toESM(require_p5_min());

// src/app/models/theme.ts
var Theme = class {
  schemeQuery = window.matchMedia("(prefers-color-scheme:dark)");
  getColorScheme() {
    return this.schemeQuery.matches ?? false;
  }
  isDark = signal(this.getColorScheme());
  bg = this.build("hsla(0, 0%, 0%, 1)", "hsla(0, 0%, 100%, 1)");
  bg1 = this.build("hsla(0, 0%, 5%, 1)", "hsla(0, 0%, 98%, 1)");
  bg2 = this.build("hsla(0, 0%, 10%, 1)", "hsla(0, 0%, 96%, 1)");
  divider = this.build("hsla(212, 8%, 47%, 1)", "hsla(212, 9%, 59%, 1)");
  translucent = this.build("hsla(0, 0%, 0%, .8)", "hsla(0, 0%, 100%, .8)");
  color = this.build("hsla(210, 29%, 97%, 1)", "hsla(213, 13%, 16%, 1)");
  color1 = this.build("hsla(210, 24%, 93%, 1)", "hsla(212, 12%, 22%, 1)");
  color2 = this.build("hsla(210, 18%, 84%, 1)", "hsla(212, 11%, 29%, 1)");
  blue = this.build("hsla(204, 100%, 75%, 1)", "hsla(212, 92%, 45%, 1)");
  blue1 = this.build("hsla(208, 100%, 66%, 1)", "hsla(213, 94%, 35%, 1)");
  blue2 = this.build("hsla(211, 100%, 56%, 1)", "hsla(214, 96%, 28%, 1)");
  blueBg = this.build("hsla(216, 83%, 23%, 1)", "hsla(203, 100%, 86%, 1)");
  green = this.build("hsla(135, 62%, 65%, 1)", "hsla(137, 66%, 30%, 1)");
  green1 = this.build("hsla(137, 50%, 53%, 1)", "hsla(138, 71%, 23%, 1)");
  green2 = this.build("hsla(137, 57%, 41%, 1)", "hsla(141, 90%, 16%, 1)");
  greenBg = this.build("hsla(142, 100%, 12%, 1)", "hsla(134, 66%, 80%, 1)");
  yellow = this.build("hsla(46, 79%, 61%, 1)", "hsla(40, 100%, 30%, 1)");
  yellow1 = this.build("hsla(44, 66%, 50%, 1)", "hsla(37, 100%, 25%, 1)");
  yellow2 = this.build("hsla(42, 100%, 37%, 1)", "hsla(36, 98%, 20%, 1)");
  yellowBg = this.build("hsla(35, 100%, 15%, 1)", "hsla(48, 93%, 74%, 1)");
  orange = this.build("hsla(27, 100%, 74%, 1)", "hsla(24, 100%, 37%, 1)");
  orange1 = this.build("hsla(25, 96%, 63%, 1)", "hsla(23, 100%, 29%, 1)");
  orange2 = this.build("hsla(24, 76%, 51%, 1)", "hsla(22, 100%, 23%, 1)");
  orangeBg = this.build("hsla(22, 100%, 18%, 1)", "hsla(28, 100%, 85%, 1)");
  red = this.build("hsla(2, 100%, 83%, 1)", "hsla(356, 72%, 47%, 1)");
  red1 = this.build("hsla(360, 100%, 75%, 1)", "hsla(350, 84%, 35%, 1)");
  red2 = this.build("hsla(359, 95%, 63%, 1)", "hsla(349, 90%, 27%, 1)");
  redBg = this.build("hsla(346, 100%, 20%, 1)", "hsla(3, 100%, 90%, 1)");
  purple = this.build("hsla(267, 100%, 86%, 1)", "hsla(261, 69%, 59%, 1)");
  purple1 = this.build("hsla(265, 100%, 80%, 1)", "hsla(261, 53%, 48%, 1)");
  purple2 = this.build("hsla(261, 92%, 72%, 1)", "hsla(261, 56%, 38%, 1)");
  purpleBg = this.build("hsla(261, 59%, 30%, 1)", "hsla(271, 100%, 92%, 1)");
  pink = this.build("hsla(327, 100%, 84%, 1)", "hsla(324, 54%, 49%, 1)");
  pink1 = this.build("hsla(326, 100%, 75%, 1)", "hsla(323, 59%, 38%, 1)");
  pink2 = this.build("hsla(325, 76%, 63%, 1)", "hsla(322, 58%, 30%, 1)");
  pinkBg = this.build("hsla(320, 67%, 23%, 1)", "hsla(327, 100%, 91%, 1)");
  coral = this.build("hsla(12, 100%, 82%, 1)", "hsla(9, 64%, 47%, 1)");
  coral1 = this.build("hsla(11, 97%, 72%, 1)", "hsla(9, 70%, 36%, 1)");
  coral2 = this.build("hsla(11, 81%, 60%, 1)", "hsla(8, 79%, 28%, 1)");
  coralBg = this.build("hsla(7, 91%, 22%, 1)", "hsla(12, 100%, 90%, 1)");
  constructor(refresh) {
    this.schemeQuery.addEventListener("change", () => {
      this.isDark.set(this.getColorScheme());
      refresh();
    });
  }
  build(dark, light) {
    return computed(() => this.isDark() ? dark : light);
  }
};

// src/app/models/simulations/simulation.ts
var Simulation = class {
  element;
  resizer;
  processor;
  height = 0;
  width = 0;
  theme = new Theme(this.start.bind(this));
  constructor(element) {
    this.element = element;
    this.width = element.clientWidth;
    this.height = element.clientHeight;
    const self2 = this;
    this.resizer = new ResizeObserver(this.handleResize.bind(self2));
    this.resizer.observe(element);
  }
  handleResize() {
    this.height = this.element.clientHeight;
    this.width = this.element.clientWidth;
    if (this.processor)
      this.start();
  }
  destroy() {
    this.reset();
    this.resizer.disconnect();
  }
  reset() {
    if (this.processor) {
      this.processor.remove();
      this.processor = void 0;
    }
  }
  start() {
    this.reset();
    this.processor = new import_p5.default(this.sketch.bind(this), this.element);
  }
};

// src/app/models/simulations/traditional-random-walk.ts
var TraditionalRandomWalk = class extends Simulation {
  constructor(element) {
    super(element);
  }
  sketch(s) {
    const walker = new Walker(this.width, this.height, this.theme);
    s.setup = () => {
      s.createCanvas(this.width, this.height);
      s.background(this.theme.bg());
    };
    s.draw = () => {
      walker.step(s);
      walker.show(s);
    };
  }
};
var Walker = class {
  width;
  height;
  t;
  stroke;
  x;
  y;
  constructor(width, height, t, stroke = 4) {
    this.width = width;
    this.height = height;
    this.t = t;
    this.stroke = stroke;
    this.x = width / 2;
    this.y = height / 2;
  }
  bound(val, factor, limit, inc) {
    const target = inc ? val + factor : val - factor;
    if (inc)
      return target > limit ? limit : target;
    else
      return target < limit ? limit : target;
  }
  show(s) {
    s.stroke(this.t.color());
    s.strokeWeight(this.stroke);
    s.point(this.x, this.y);
  }
  step(s) {
    const choice = s.floor(s.random(4));
    switch (choice) {
      case 0:
        this.x = this.bound(this.x, this.stroke, this.width - this.stroke, true);
        break;
      case 1:
        this.x = this.bound(this.x, this.stroke, this.stroke, false);
        break;
      case 2:
        this.y = this.bound(this.y, this.stroke, this.height - this.stroke, true);
        break;
      default:
        this.y = this.bound(this.y, this.stroke, this.stroke, false);
        break;
    }
  }
};

// src/app/models/axioms/simulations.ts
var RandomnessPatterns = [
  new SimulationPattern("Traditional Random Walker", "traditional-random-walker", 0, (element) => new TraditionalRandomWalk(element), "https://github.com/JaimeStill/simulacra/blob/main/src/src/app/models/simulations/traditional-random-walk.ts")
];

// src/app/models/axioms/randomness.ts
var Randomness = class extends Axiom {
  constructor() {
    super(new AxiomPattern("Randomness", "randomness", 0, RandomnessPatterns, "https://natureofcode.com/random/"));
  }
};

// src/app/models/axioms/axioms.ts
var Axioms = [
  new Randomness()
];

// src/app/components/app-panel/app-panel.component.ts
var AppPanelComponent = class _AppPanelComponent {
  navigate = output();
  static \u0275fac = function AppPanelComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AppPanelComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AppPanelComponent, selectors: [["app-panel"]], outputs: { navigate: "navigate" }, decls: 8, vars: 0, consts: [[1, "panel"], [1, "header", 3, "click"], ["href", "https://github.com/JaimeStill/simulacra", "target", "_blank", 1, "logo"], ["media", "(prefers-color-scheme: dark)", "srcset", "/github-dark.svg"], ["media", "(prefers-color-scheme: light)", "srcset", "/github-light.svg"], ["alt", "github", "src", "/github-dark.svg"]], template: function AppPanelComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "h2", 1);
      \u0275\u0275listener("click", function AppPanelComponent_Template_h2_click_1_listener() {
        return ctx.navigate.emit();
      });
      \u0275\u0275text(2, "Simulacra");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(3, "a", 2)(4, "picture");
      \u0275\u0275element(5, "source", 3)(6, "source", 4)(7, "img", 5);
      \u0275\u0275elementEnd()()();
    }
  }, styles: ["\n\ndiv.panel[_ngcontent-%COMP%] {\n  display: flex;\n  padding: var(--pad);\n  gap: var(--pad);\n  align-items: center;\n  justify-content: space-between;\n  background-color: var(--bg-2);\n}\nh2.header[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\nh2.header[_ngcontent-%COMP%]:hover {\n  color: var(--red-1);\n}\na.logo[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 1.8rem;\n}\n/*# sourceMappingURL=app-panel.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AppPanelComponent, [{
    type: Component,
    args: [{ selector: "app-panel", template: '<div class="panel">\n    <h2 class="header" (click)="navigate.emit()">Simulacra</h2>\n    <a class="logo" href="https://github.com/JaimeStill/simulacra" target="_blank">\n        <picture>\n            <source media="(prefers-color-scheme: dark)" srcset="/github-dark.svg">\n            <source media="(prefers-color-scheme: light)" srcset="/github-light.svg">\n            <img alt="github" src="/github-dark.svg">\n        </picture>\n    </a>\n</div>', styles: ["/* src/app/components/app-panel/app-panel.component.css */\ndiv.panel {\n  display: flex;\n  padding: var(--pad);\n  gap: var(--pad);\n  align-items: center;\n  justify-content: space-between;\n  background-color: var(--bg-2);\n}\nh2.header {\n  cursor: pointer;\n}\nh2.header:hover {\n  color: var(--red-1);\n}\na.logo img {\n  width: 1.8rem;\n}\n/*# sourceMappingURL=app-panel.component.css.map */\n"] }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AppPanelComponent, { className: "AppPanelComponent", filePath: "src/app/components/app-panel/app-panel.component.ts", lineNumber: 8 });
})();

// src/app/services/app.service.ts
var AppService = class _AppService {
  router = inject(Router);
  axioms = signal(Axioms);
  body = signal(null);
  pattern = signal(void 0);
  constructor() {
    this.router.routerState.root.queryParams.pipe(filter((params) => {
      const hasSimulation = "axiom" in params && "simulation" in params;
      const noParams = Object.keys(params).length === 0;
      return hasSimulation || noParams;
    }), map((params) => Object.keys(params).length > 0 ? params : null)).subscribe((state) => {
      if (state)
        this.pattern.set(this.find(state));
      else
        this.pattern.set(void 0);
    });
  }
  find(state) {
    return this.axioms().find((a) => a.pattern.url === state.axiom)?.pattern.find(state.simulation);
  }
  load(state) {
    this.router.navigate([], { queryParams: state });
  }
  static \u0275fac = function AppService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AppService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AppService, factory: _AppService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AppService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();

// src/app/components/pattern-link/pattern-link.component.ts
function PatternLinkComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 1);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const pattern_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("href", pattern_r2.reference, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", pattern_r2.name, " ");
  }
}
function PatternLinkComponent_Conditional_0_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const pattern_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(pattern_r2.name);
  }
}
function PatternLinkComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275template(1, PatternLinkComponent_Conditional_0_Conditional_1_Template, 2, 2, "a", 1)(2, PatternLinkComponent_Conditional_0_Conditional_2_Template, 2, 1, "p");
    \u0275\u0275elementStart(3, "button", 2);
    \u0275\u0275listener("click", function PatternLinkComponent_Conditional_0_Template_button_click_3_listener() {
      const pattern_r2 = \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.select.emit(pattern_r2));
    });
    \u0275\u0275elementStart(4, "span", 3);
    \u0275\u0275text(5, "play_circle");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx.reference ? 1 : 2);
  }
}
var PatternLinkComponent = class _PatternLinkComponent {
  pattern = input.required();
  select = output();
  static \u0275fac = function PatternLinkComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _PatternLinkComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _PatternLinkComponent, selectors: [["pattern-link"]], inputs: { pattern: [1, "pattern"] }, outputs: { select: "select" }, decls: 1, vars: 1, consts: [[1, "card"], ["target", "_blank", 3, "href"], [3, "click"], [1, "symbol"]], template: function PatternLinkComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, PatternLinkComponent_Conditional_0_Template, 6, 1, "div", 0);
    }
    if (rf & 2) {
      let tmp_0_0;
      \u0275\u0275conditional((tmp_0_0 = ctx.pattern()) ? 0 : -1, tmp_0_0);
    }
  }, styles: ["\n\ndiv.card[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--pad);\n  gap: var(--pad);\n  background-color: var(--bg-2);\n  border-radius: var(--pad);\n}\nbutton[_ngcontent-%COMP%]:has(span.symbol) {\n  transform: scale(90%);\n  border-radius: 50%;\n  color: var(--green);\n}\n/*# sourceMappingURL=pattern-link.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PatternLinkComponent, [{
    type: Component,
    args: [{ selector: "pattern-link", template: '@if (pattern(); as pattern) {\n    <div class="card">\n        @if (pattern.reference) {\n            <a [href]="pattern.reference" target="_blank">\n                {{ pattern.name }}\n            </a>\n        } @else {\n            <p>{{ pattern.name }}</p>\n        }\n        <button (click)="select.emit(pattern)">\n            <span class="symbol">play_circle</span>\n        </button>\n    </div>\n}', styles: ["/* src/app/components/pattern-link/pattern-link.component.css */\ndiv.card {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--pad);\n  gap: var(--pad);\n  background-color: var(--bg-2);\n  border-radius: var(--pad);\n}\nbutton:has(span.symbol) {\n  transform: scale(90%);\n  border-radius: 50%;\n  color: var(--green);\n}\n/*# sourceMappingURL=pattern-link.component.css.map */\n"] }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(PatternLinkComponent, { className: "PatternLinkComponent", filePath: "src/app/components/pattern-link/pattern-link.component.ts", lineNumber: 9 });
})();

// src/app/components/axiom-panel/axiom-panel.component.ts
var _forTrack0 = ($index, $item) => $item.url;
function AxiomPanelComponent_Conditional_0_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 2)(1, "h3");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const axiom_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("href", axiom_r2.pattern.reference, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(axiom_r2.pattern.name);
  }
}
function AxiomPanelComponent_Conditional_0_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h3");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const axiom_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(axiom_r2.pattern.name);
  }
}
function AxiomPanelComponent_Conditional_0_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " keyboard_arrow_down ");
  }
}
function AxiomPanelComponent_Conditional_0_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " keyboard_arrow_right ");
  }
}
function AxiomPanelComponent_Conditional_0_Conditional_8_For_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "pattern-link", 7);
    \u0275\u0275listener("select", function AxiomPanelComponent_Conditional_0_Conditional_8_For_2_Template_pattern_link_select_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r2.load($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const sim_r5 = ctx.$implicit;
    \u0275\u0275property("pattern", sim_r5);
  }
}
function AxiomPanelComponent_Conditional_0_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 5);
    \u0275\u0275repeaterCreate(1, AxiomPanelComponent_Conditional_0_Conditional_8_For_2_Template, 1, 1, "pattern-link", 6, _forTrack0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const axiom_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275repeater(axiom_r2.pattern.simulations);
  }
}
function AxiomPanelComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
    \u0275\u0275template(2, AxiomPanelComponent_Conditional_0_Conditional_2_Template, 3, 2, "a", 2)(3, AxiomPanelComponent_Conditional_0_Conditional_3_Template, 2, 1, "h3");
    \u0275\u0275elementStart(4, "button", 3);
    \u0275\u0275listener("click", function AxiomPanelComponent_Conditional_0_Template_button_click_4_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.toggle());
    });
    \u0275\u0275elementStart(5, "span", 4);
    \u0275\u0275template(6, AxiomPanelComponent_Conditional_0_Conditional_6_Template, 1, 0)(7, AxiomPanelComponent_Conditional_0_Conditional_7_Template, 1, 0);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(8, AxiomPanelComponent_Conditional_0_Conditional_8_Template, 3, 0, "div", 5);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275classProp("expanded", ctx_r2.expanded());
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx.pattern.reference ? 2 : 3);
    \u0275\u0275advance(4);
    \u0275\u0275conditional(ctx_r2.expanded() ? 6 : 7);
    \u0275\u0275advance(2);
    \u0275\u0275conditional(ctx_r2.expanded() ? 8 : -1);
  }
}
var AxiomPanelComponent = class _AxiomPanelComponent {
  app = inject(AppService);
  axiom = input.required();
  expanded = model(true);
  toggle() {
    this.expanded.set(!this.expanded());
  }
  load(pattern) {
    this.app.load({
      axiom: this.axiom().pattern.url,
      simulation: pattern.url
    });
  }
  static \u0275fac = function AxiomPanelComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AxiomPanelComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AxiomPanelComponent, selectors: [["axiom-panel"]], inputs: { axiom: [1, "axiom"], expanded: [1, "expanded"] }, outputs: { expanded: "expandedChange" }, decls: 1, vars: 1, consts: [[1, "grid"], [1, "header"], ["target", "_blank", 3, "href"], [3, "click"], [1, "symbol"], [1, "contents"], [3, "pattern"], [3, "select", "pattern"]], template: function AxiomPanelComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, AxiomPanelComponent_Conditional_0_Template, 9, 5, "div", 0);
    }
    if (rf & 2) {
      let tmp_0_0;
      \u0275\u0275conditional((tmp_0_0 = ctx.axiom()) ? 0 : -1, tmp_0_0);
    }
  }, dependencies: [PatternLinkComponent], styles: ["\n\ndiv.grid[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-rows: auto auto minmax(0, 1fr);\n  container: root / inline-size;\n}\ndiv.header[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--pad);\n  gap: var(--pad);\n  background-color: var(--bg-2);\n  border-radius: var(--rad);\n}\ndiv.header.expanded[_ngcontent-%COMP%] {\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n}\nbutton[_ngcontent-%COMP%]:has(span.symbol) {\n  transform: scale(90%);\n  border-radius: 50%;\n}\ndiv.contents[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding: var(--pad);\n  gap: var(--pad);\n  background-color: var(--bg-1);\n  border-bottom-left-radius: var(--rad);\n  border-bottom-right-radius: var(--rad);\n}\n@container root (width > 1600px) {\n  div.contents[_ngcontent-%COMP%] {\n    grid-template-columns: repeat(4, 1fr);\n  }\n}\n@container root (width < 980px) {\n  div.contents[_ngcontent-%COMP%] {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n@container root (width < 700px) {\n  div.contents[_ngcontent-%COMP%] {\n    grid-template-columns: 1fr;\n  }\n}\n/*# sourceMappingURL=axiom-panel.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AxiomPanelComponent, [{
    type: Component,
    args: [{ selector: "axiom-panel", imports: [PatternLinkComponent], template: '@if (axiom(); as axiom) {\n    <div class="grid">\n        <div class="header" [class.expanded]="expanded()">\n            @if (axiom.pattern.reference) {\n                <a [href]="axiom.pattern.reference" target="_blank">\n                    <h3>{{ axiom.pattern.name }}</h3>\n                </a>\n            } @else {\n                <h3>{{ axiom.pattern.name }}</h3>\n            }\n            <button (click)="toggle()">\n                <span class="symbol">\n                    @if (expanded()) {\n                        keyboard_arrow_down\n                    } @else {\n                        keyboard_arrow_right\n                    }\n                </span>\n            </button>\n        </div>\n        @if (expanded()) {\n            <div class="contents">\n                @for (sim of axiom.pattern.simulations; track sim.url) {\n                    <pattern-link [pattern]="sim" (select)="load($event)"></pattern-link>\n                }\n            </div>\n        }\n    </div>\n}', styles: ["/* src/app/components/axiom-panel/axiom-panel.component.css */\ndiv.grid {\n  display: grid;\n  grid-template-rows: auto auto minmax(0, 1fr);\n  container: root / inline-size;\n}\ndiv.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--pad);\n  gap: var(--pad);\n  background-color: var(--bg-2);\n  border-radius: var(--rad);\n}\ndiv.header.expanded {\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n}\nbutton:has(span.symbol) {\n  transform: scale(90%);\n  border-radius: 50%;\n}\ndiv.contents {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding: var(--pad);\n  gap: var(--pad);\n  background-color: var(--bg-1);\n  border-bottom-left-radius: var(--rad);\n  border-bottom-right-radius: var(--rad);\n}\n@container root (width > 1600px) {\n  div.contents {\n    grid-template-columns: repeat(4, 1fr);\n  }\n}\n@container root (width < 980px) {\n  div.contents {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n@container root (width < 700px) {\n  div.contents {\n    grid-template-columns: 1fr;\n  }\n}\n/*# sourceMappingURL=axiom-panel.component.css.map */\n"] }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AxiomPanelComponent, { className: "AxiomPanelComponent", filePath: "src/app/components/axiom-panel/axiom-panel.component.ts", lineNumber: 12 });
})();

// src/app/components/simulation/simulation.component.ts
var _c0 = ["renderer"];
function SimulationComponent_Conditional_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 3)(1, "h3");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const pattern_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("href", pattern_r1.reference, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(pattern_r1.name);
  }
}
function SimulationComponent_Conditional_2_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h3");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const pattern_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(pattern_r1.name);
  }
}
function SimulationComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 2);
    \u0275\u0275template(1, SimulationComponent_Conditional_2_Conditional_1_Template, 3, 2, "a", 3)(2, SimulationComponent_Conditional_2_Conditional_2_Template, 2, 1, "h3");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx.reference ? 1 : 2);
  }
}
var SimulationComponent = class _SimulationComponent {
  pattern = input.required();
  renderer = viewChild.required("renderer");
  simulation = computed(() => this.pattern().build(this.renderer().nativeElement));
  constructor() {
    effect(() => {
      this.simulation().start();
    });
  }
  static \u0275fac = function SimulationComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SimulationComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SimulationComponent, selectors: [["simulation"]], viewQuery: function SimulationComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuerySignal(ctx.renderer, _c0, 5);
    }
    if (rf & 2) {
      \u0275\u0275queryAdvance();
    }
  }, inputs: { pattern: [1, "pattern"] }, decls: 3, vars: 1, consts: [["renderer", ""], [1, "renderer"], [1, "overlay"], ["target", "_blank", 3, "href"]], template: function SimulationComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1, 0);
      \u0275\u0275template(2, SimulationComponent_Conditional_2_Template, 3, 1, "div", 2);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      let tmp_1_0;
      \u0275\u0275advance(2);
      \u0275\u0275conditional((tmp_1_0 = ctx.pattern()) ? 2 : -1, tmp_1_0);
    }
  }, styles: ["\n\ndiv.renderer[_ngcontent-%COMP%] {\n  height: 100%;\n  position: relative;\n}\ndiv.overlay[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  padding: var(--pad);\n  background: transparent;\n}\ndiv.overlay[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%], \ndiv.overlay[_ngcontent-%COMP%]   [_ngcontent-%COMP%]:not(a)   h3[_ngcontent-%COMP%] {\n  -webkit-backdrop-filter: blur(var(--pad));\n  backdrop-filter: blur(var(--pad));\n  border-radius: var(--rad);\n}\n/*# sourceMappingURL=simulation.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SimulationComponent, [{
    type: Component,
    args: [{ selector: "simulation", template: '<div #renderer class="renderer">\n    @if (pattern(); as pattern) {\n        <div class="overlay">\n            @if (pattern.reference) {\n                <a [href]="pattern.reference" target="_blank">\n                    <h3>{{ pattern.name }}</h3>\n                </a>\n            } @else {\n                <h3>{{ pattern.name }}</h3>\n            }\n        </div>\n    }\n</div>', styles: ["/* src/app/components/simulation/simulation.component.css */\ndiv.renderer {\n  height: 100%;\n  position: relative;\n}\ndiv.overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  padding: var(--pad);\n  background: transparent;\n}\ndiv.overlay a h3,\ndiv.overlay :not(a) h3 {\n  -webkit-backdrop-filter: blur(var(--pad));\n  backdrop-filter: blur(var(--pad));\n  border-radius: var(--rad);\n}\n/*# sourceMappingURL=simulation.component.css.map */\n"] }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SimulationComponent, { className: "SimulationComponent", filePath: "src/app/components/simulation/simulation.component.ts", lineNumber: 9 });
})();

// src/app/components/simulation-grid/simulation-grid.component.ts
var _forTrack02 = ($index, $item) => $item.pattern.url;
function SimulationGridComponent_Conditional_0_For_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "axiom-panel", 1);
  }
  if (rf & 2) {
    const axiom_r1 = ctx.$implicit;
    \u0275\u0275property("axiom", axiom_r1);
  }
}
function SimulationGridComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275repeaterCreate(1, SimulationGridComponent_Conditional_0_For_2_Template, 1, 1, "axiom-panel", 1, _forTrack02);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx);
  }
}
var SimulationGridComponent = class _SimulationGridComponent {
  axioms = input.required();
  static \u0275fac = function SimulationGridComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SimulationGridComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SimulationGridComponent, selectors: [["simulation-grid"]], inputs: { axioms: [1, "axioms"] }, decls: 1, vars: 1, consts: [[1, "grid"], [3, "axiom"]], template: function SimulationGridComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, SimulationGridComponent_Conditional_0_Template, 3, 0, "div", 0);
    }
    if (rf & 2) {
      let tmp_0_0;
      \u0275\u0275conditional((tmp_0_0 = ctx.axioms()) ? 0 : -1, tmp_0_0);
    }
  }, dependencies: [AxiomPanelComponent], styles: ["\n\n[_nghost-%COMP%] {\n  overflow: auto;\n}\ndiv.grid[_ngcontent-%COMP%] {\n  padding: var(--pad);\n  gap: var(--pad);\n}\n/*# sourceMappingURL=simulation-grid.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SimulationGridComponent, [{
    type: Component,
    args: [{ selector: "simulation-grid", imports: [AxiomPanelComponent], template: '@if (axioms(); as axioms) {\n    <div class="grid">\n        @for (axiom of axioms; track axiom.pattern.url) {\n            <axiom-panel [axiom]="axiom"></axiom-panel>\n        }\n    </div>\n}', styles: ["/* src/app/components/simulation-grid/simulation-grid.component.css */\n:host {\n  overflow: auto;\n}\ndiv.grid {\n  padding: var(--pad);\n  gap: var(--pad);\n}\n/*# sourceMappingURL=simulation-grid.component.css.map */\n"] }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SimulationGridComponent, { className: "SimulationGridComponent", filePath: "src/app/components/simulation-grid/simulation-grid.component.ts", lineNumber: 11 });
})();

// src/app/routes/home.route.ts
var _c02 = ["renderer"];
function HomeRoute_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "simulation", 2);
  }
  if (rf & 2) {
    \u0275\u0275property("pattern", ctx);
  }
}
function HomeRoute_Conditional_3_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "simulation-grid", 3);
  }
  if (rf & 2) {
    \u0275\u0275property("axioms", ctx);
  }
}
function HomeRoute_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, HomeRoute_Conditional_3_Conditional_0_Template, 1, 1, "simulation-grid", 3);
  }
  if (rf & 2) {
    let tmp_1_0;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275conditional((tmp_1_0 = ctx_r0.app.axioms()) ? 0 : -1, tmp_1_0);
  }
}
var HomeRoute = class _HomeRoute {
  app = inject(AppService);
  renderer = viewChild.required("renderer");
  pattern = signal(new Randomness().pattern.simulations[0]);
  navigate(state) {
    this.app.load(state);
  }
  static \u0275fac = function HomeRoute_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HomeRoute)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _HomeRoute, selectors: [["home-route"]], viewQuery: function HomeRoute_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuerySignal(ctx.renderer, _c02, 5);
    }
    if (rf & 2) {
      \u0275\u0275queryAdvance();
    }
  }, decls: 4, vars: 1, consts: [[1, "grid"], [3, "navigate"], [3, "pattern"], [3, "axioms"]], template: function HomeRoute_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "main", 0)(1, "app-panel", 1);
      \u0275\u0275listener("navigate", function HomeRoute_Template_app_panel_navigate_1_listener() {
        return ctx.navigate();
      });
      \u0275\u0275elementEnd();
      \u0275\u0275template(2, HomeRoute_Conditional_2_Template, 1, 1, "simulation", 2)(3, HomeRoute_Conditional_3_Template, 1, 1);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      let tmp_0_0;
      \u0275\u0275advance(2);
      \u0275\u0275conditional((tmp_0_0 = ctx.app.pattern()) ? 2 : 3, tmp_0_0);
    }
  }, dependencies: [
    AppPanelComponent,
    SimulationComponent,
    SimulationGridComponent
  ], styles: ["\n\nmain.grid[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-rows: auto minmax(0, 1fr);\n  height: 100dvh;\n  overflow: hidden;\n}\ndiv.panel[_ngcontent-%COMP%] {\n  padding: var(--pad);\n  background-color: var(--bg-2);\n}\n/*# sourceMappingURL=home.route.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HomeRoute, [{
    type: Component,
    args: [{ selector: "home-route", imports: [
      AppPanelComponent,
      SimulationComponent,
      SimulationGridComponent
    ], template: '<main class="grid">\n    <app-panel (navigate)="navigate()"></app-panel>\n    @if (app.pattern(); as pattern) {\n        <simulation [pattern]="pattern"></simulation>\n    } @else {\n        @if (app.axioms(); as axioms) {\n            <simulation-grid [axioms]="axioms"></simulation-grid>\n        }\n    }\n</main>', styles: ["/* src/app/routes/home.route.css */\nmain.grid {\n  display: grid;\n  grid-template-rows: auto minmax(0, 1fr);\n  height: 100dvh;\n  overflow: hidden;\n}\ndiv.panel {\n  padding: var(--pad);\n  background-color: var(--bg-2);\n}\n/*# sourceMappingURL=home.route.css.map */\n"] }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(HomeRoute, { className: "HomeRoute", filePath: "src/app/routes/home.route.ts", lineNumber: 16 });
})();

// src/app/app.routes.ts
var routes = [
  {
    path: "",
    pathMatch: "full",
    component: HomeRoute
  },
  {
    path: "**",
    pathMatch: "full",
    redirectTo: ""
  }
];

// src/app/app.config.ts
var appConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]
};

// src/app/app.component.ts
var _c03 = ["app-root", ""];
function AppComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "router-outlet");
  }
}
var AppComponent = class _AppComponent {
  host = inject(ElementRef);
  app = inject(AppService);
  ngOnInit() {
    this.app.body.set(this.host);
  }
  static \u0275fac = function AppComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AppComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AppComponent, selectors: [["", "app-root", ""]], features: [\u0275\u0275ProvidersFeature([AppService])], attrs: _c03, decls: 1, vars: 1, template: function AppComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, AppComponent_Conditional_0_Template, 1, 0, "router-outlet");
    }
    if (rf & 2) {
      \u0275\u0275conditional(ctx.app.body() ? 0 : -1);
    }
  }, dependencies: [RouterOutlet], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AppComponent, [{
    type: Component,
    args: [{ selector: "[app-root]", imports: [RouterOutlet], providers: [AppService], template: "@if (app.body()) {\n    <router-outlet></router-outlet>\n}" }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AppComponent, { className: "AppComponent", filePath: "src/app/app.component.ts", lineNumber: 11 });
})();

// src/main.ts
bootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));
/*! Bundled license information:

p5/lib/p5.min.js:
  (*! p5.js v1.11.3 January 22, 2025 *)

@angular/core/fesm2022/untracked-BKcld_ew.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/core/fesm2022/primitives/di.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/core/fesm2022/primitives/signals.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/core/fesm2022/core.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/core/fesm2022/core.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular/core/fesm2022/core.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular/core/fesm2022/core.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular/core/fesm2022/core.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular/core/fesm2022/core.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular/core/fesm2022/core.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular/core/fesm2022/core.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular/common/fesm2022/dom_tokens-rA0ACyx7.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/common/fesm2022/location-DpBxd_aX.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/common/fesm2022/common_module-CBrzkrmd.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/common/fesm2022/xhr-BfNfxNDv.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/common/fesm2022/common.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/platform-browser/fesm2022/dom_renderer-DGKzginR.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/platform-browser/fesm2022/browser-X3l5Bmdq.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/platform-browser/fesm2022/platform-browser.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/router/fesm2022/router-B-Y85L0c.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/router/fesm2022/router_module-CbmfhtZA.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/router/fesm2022/router.mjs:
  (**
   * @license Angular v19.2.6
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)
*/
//# sourceMappingURL=main.js.map
